#include "ns3module.h"
/* --- module functions --- */

PyObject * _wrap_ns3_ConfigLookupMatches(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigSet(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigDisconnect(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigSetDefault(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigConnectWithoutContext(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigSetGlobalFailSafe(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigGetRootNamespaceObject(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigDisconnectWithoutContext(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigGetRootNamespaceObjectN();
PyObject * _wrap_ns3_ConfigConnect(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigSetGlobal(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigRegisterRootNamespaceObject(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigSetDefaultFailSafe(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_ConfigUnregisterRootNamespaceObject(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
static PyMethodDef ns3_Config_functions[] = {
    {(char *) "LookupMatches", (PyCFunction) _wrap_ns3_ConfigLookupMatches, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Set", (PyCFunction) _wrap_ns3_ConfigSet, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Disconnect", (PyCFunction) _wrap_ns3_ConfigDisconnect, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDefault", (PyCFunction) _wrap_ns3_ConfigSetDefault, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ConnectWithoutContext", (PyCFunction) _wrap_ns3_ConfigConnectWithoutContext, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetGlobalFailSafe", (PyCFunction) _wrap_ns3_ConfigSetGlobalFailSafe, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRootNamespaceObject", (PyCFunction) _wrap_ns3_ConfigGetRootNamespaceObject, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DisconnectWithoutContext", (PyCFunction) _wrap_ns3_ConfigDisconnectWithoutContext, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRootNamespaceObjectN", (PyCFunction) _wrap_ns3_ConfigGetRootNamespaceObjectN, METH_NOARGS, NULL },
    {(char *) "Connect", (PyCFunction) _wrap_ns3_ConfigConnect, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetGlobal", (PyCFunction) _wrap_ns3_ConfigSetGlobal, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "RegisterRootNamespaceObject", (PyCFunction) _wrap_ns3_ConfigRegisterRootNamespaceObject, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDefaultFailSafe", (PyCFunction) _wrap_ns3_ConfigSetDefaultFailSafe, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UnregisterRootNamespaceObject", (PyCFunction) _wrap_ns3_ConfigUnregisterRootNamespaceObject, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */

/* --- containers --- */



static void
Pystd__vector__lt___std__string___gt__Iter__tp_clear(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___std__string___gt__Iter__tp_traverse(Pystd__vector__lt___std__string___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___std__string___gt____tp_dealloc(Pystd__vector__lt___std__string___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_dealloc(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___std__string___gt____tp_iter(Pystd__vector__lt___std__string___gt__ *self)
{
    Pystd__vector__lt___std__string___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___std__string___gt__Iter, &Pystd__vector__lt___std__string___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< std::string >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iter(Pystd__vector__lt___std__string___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iternext(Pystd__vector__lt___std__string___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< std::string >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "s#", ((*iter)).c_str(), ((*iter)).size());
    return py_retval;
}

int _wrap_convert_py2c__std__string(PyObject *value, std::string *address)
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___std__string___gt___Type)) {
        *container = *((Pystd__vector__lt___std__string___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            std::string item;
            if (!_wrap_convert_py2c__std__string(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___std__string___gt__ instance, or a list of std::string");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___std__string___gt____tp_init(Pystd__vector__lt___std__string___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< std::string >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___std__string___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___std__string___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Config.Std__vector__lt___std__string___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___std__string___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___std__string___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___std__string___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___std__string___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Config.Std__vector__lt___std__string___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___std__string___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___std__string___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___std__string___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___std__string___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



long
_ns3_Ipv4Address_tp_hash (PyObject *obj)
{
   PyNs3Ipv4Address *addr = reinterpret_cast<PyNs3Ipv4Address *> (obj);
   return static_cast<long> (ns3::Ipv4AddressHash () (*addr->obj));
}


static PyObject *
initns3_Config(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "ns3.Config", ns3_Config_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    /* Register the 'ns3::Config::MatchContainer' class */
    if (PyType_Ready(&PyNs3ConfigMatchContainer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MatchContainer", (PyObject *) &PyNs3ConfigMatchContainer_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::Object > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter_Type);
    /* Register the 'std::vector< std::string >' class */
    if (PyType_Ready(&Pystd__vector__lt___std__string___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___std__string___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___std__string___gt__", (PyObject *) &Pystd__vector__lt___std__string___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___std__string___gt__Iter", (PyObject *) &Pystd__vector__lt___std__string___gt__Iter_Type);
    return m;
}
/* --- module functions --- */

PyObject * _wrap_ns3_FatalImplFlushStreams();
static PyMethodDef ns3_FatalImpl_functions[] = {
    {(char *) "FlushStreams", (PyCFunction) _wrap_ns3_FatalImplFlushStreams, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static PyObject *
initns3_FatalImpl(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "ns3.FatalImpl", ns3_FatalImpl_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    return m;
}
/* --- module functions --- */

PyObject * _wrap_ns3_addressUtilsIsMulticast(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
static PyMethodDef ns3_addressUtils_functions[] = {
    {(char *) "IsMulticast", (PyCFunction) _wrap_ns3_addressUtilsIsMulticast, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static PyObject *
initns3_addressUtils(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "ns3.addressUtils", ns3_addressUtils_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef ns3_aodv_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */

/* --- containers --- */



static void
Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_clear(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_traverse(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt____tp_dealloc(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_dealloc(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt____tp_iter(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__ *self)
{
    Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter *iter = PyObject_GC_New(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter, &Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::map< ns3::Ipv4Address, unsigned int >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_iter(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_iternext(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter *self)
{
    PyObject *py_retval;
    std::map< ns3::Ipv4Address, unsigned int >::iterator iter;
    PyNs3Ipv4Address *py_Ipv4Address;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(iter->first);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = Py_BuildValue((char *) "NN", py_Ipv4Address, PyLong_FromUnsignedLong(iter->second));
    return py_retval;
}

int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address)
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__Ipv4Address(PyObject *value, ns3::Ipv4Address *address)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *tmp_Ipv4Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ipv4Address_Type, &tmp_Ipv4Address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Ipv4Address->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__map__lt___ns3__Ipv4Address__unsigned_int___gt__(PyObject *arg, std::map< ns3::Ipv4Address, unsigned int > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt___Type)) {
        *container = *((Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair<ns3::Ipv4Address, unsigned int> item;
            if (!_wrap_convert_py2c__ns3__Ipv4Address(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__unsigned_int(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__map__lt___ns3__Ipv4Address__unsigned_int___gt__ instance, or a list of unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt____tp_init(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::map< ns3::Ipv4Address, unsigned int >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__map__lt___ns3__Ipv4Address__unsigned_int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.aodv.Std__map__lt___ns3__Ipv4Address__unsigned_int___gt__",            /* tp_name */
    sizeof(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.aodv.Std__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter",            /* tp_name */
    sizeof(Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */


static PyObject *
initns3_aodv(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "ns3.aodv", ns3_aodv_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::aodv::RoutingProtocol), &PyNs3AodvRoutingProtocol_Type);
    /* Register the 'ns3::aodv::DuplicatePacketDetection' class */
    if (PyType_Ready(&PyNs3AodvDuplicatePacketDetection_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DuplicatePacketDetection", (PyObject *) &PyNs3AodvDuplicatePacketDetection_Type);
    /* Register the 'ns3::aodv::IdCache' class */
    if (PyType_Ready(&PyNs3AodvIdCache_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IdCache", (PyObject *) &PyNs3AodvIdCache_Type);
    /* Register the 'ns3::aodv::Neighbors' class */
    if (PyType_Ready(&PyNs3AodvNeighbors_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Neighbors", (PyObject *) &PyNs3AodvNeighbors_Type);
    /* Register the 'ns3::aodv::Neighbors::Neighbor' class */
    if (PyType_Ready(&PyNs3AodvNeighborsNeighbor_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3AodvNeighbors_Type.tp_dict, (char *) "Neighbor", (PyObject *) &PyNs3AodvNeighborsNeighbor_Type);
    /* Register the 'ns3::aodv::QueueEntry' class */
    if (PyType_Ready(&PyNs3AodvQueueEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "QueueEntry", (PyObject *) &PyNs3AodvQueueEntry_Type);
    /* Register the 'ns3::aodv::RequestQueue' class */
    if (PyType_Ready(&PyNs3AodvRequestQueue_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RequestQueue", (PyObject *) &PyNs3AodvRequestQueue_Type);
    /* Register the 'ns3::aodv::RerrHeader' class */
    PyNs3AodvRerrHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AodvRerrHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RerrHeader", (PyObject *) &PyNs3AodvRerrHeader_Type);
    /* Register the 'ns3::aodv::RoutingProtocol' class */
    
    PyNs3AodvRoutingProtocolMeta_Type.tp_base = PyNs3Ipv4RoutingProtocol_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3AodvRoutingProtocolMeta_Type.tp_traverse = PyNs3Ipv4RoutingProtocol_Type.ob_type->tp_traverse;
    PyNs3AodvRoutingProtocolMeta_Type.tp_clear = PyNs3Ipv4RoutingProtocol_Type.ob_type->tp_clear;
    PyNs3AodvRoutingProtocolMeta_Type.tp_is_gc = PyNs3Ipv4RoutingProtocol_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3AodvRoutingProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3AodvRoutingProtocolMeta_Type);
    
    PyNs3AodvRoutingProtocol_Type.tp_base = &PyNs3Ipv4RoutingProtocol_Type;
    PyNs3AodvRoutingProtocol_Type.ob_type = &PyNs3AodvRoutingProtocolMeta_Type;
    if (PyType_Ready(&PyNs3AodvRoutingProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RoutingProtocol", (PyObject *) &PyNs3AodvRoutingProtocol_Type);
    /* Register the 'ns3::aodv::RoutingTable' class */
    if (PyType_Ready(&PyNs3AodvRoutingTable_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RoutingTable", (PyObject *) &PyNs3AodvRoutingTable_Type);
    /* Register the 'ns3::aodv::RoutingTableEntry' class */
    if (PyType_Ready(&PyNs3AodvRoutingTableEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RoutingTableEntry", (PyObject *) &PyNs3AodvRoutingTableEntry_Type);
    /* Register the 'ns3::aodv::RrepAckHeader' class */
    PyNs3AodvRrepAckHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AodvRrepAckHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RrepAckHeader", (PyObject *) &PyNs3AodvRrepAckHeader_Type);
    /* Register the 'ns3::aodv::RrepHeader' class */
    PyNs3AodvRrepHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AodvRrepHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RrepHeader", (PyObject *) &PyNs3AodvRrepHeader_Type);
    /* Register the 'ns3::aodv::RreqHeader' class */
    PyNs3AodvRreqHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AodvRreqHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RreqHeader", (PyObject *) &PyNs3AodvRreqHeader_Type);
    /* Register the 'ns3::aodv::TypeHeader' class */
    PyNs3AodvTypeHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AodvTypeHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TypeHeader", (PyObject *) &PyNs3AodvTypeHeader_Type);
    /* Register the 'std::map< ns3::Ipv4Address, unsigned int >' class */
    if (PyType_Ready(&Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___ns3__Ipv4Address__unsigned_int___gt__", (PyObject *) &Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter", (PyObject *) &Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter_Type);
    PyModule_AddIntConstant(m, (char *) "AODVTYPE_RREQ", ns3::aodv::AODVTYPE_RREQ);
    PyModule_AddIntConstant(m, (char *) "AODVTYPE_RREP", ns3::aodv::AODVTYPE_RREP);
    PyModule_AddIntConstant(m, (char *) "AODVTYPE_RERR", ns3::aodv::AODVTYPE_RERR);
    PyModule_AddIntConstant(m, (char *) "AODVTYPE_RREP_ACK", ns3::aodv::AODVTYPE_RREP_ACK);
    PyModule_AddIntConstant(m, (char *) "VALID", ns3::aodv::VALID);
    PyModule_AddIntConstant(m, (char *) "INVALID", ns3::aodv::INVALID);
    PyModule_AddIntConstant(m, (char *) "IN_SEARCH", ns3::aodv::IN_SEARCH);
    return m;
}
/* --- module functions --- */

PyObject * _wrap_ns3_dot11sMakeIeMeshIdChecker();
static PyMethodDef ns3_dot11s_functions[] = {
    {(char *) "MakeIeMeshIdChecker", (PyCFunction) _wrap_ns3_dot11sMakeIeMeshIdChecker, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */

/* --- containers --- */

/* --- enumerations --- */


static PyObject *
initns3_dot11s(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "ns3.dot11s", ns3_dot11s_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dot11s::HwmpProtocol), &PyNs3Dot11sHwmpProtocol_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeBeaconTiming), &PyNs3Dot11sIeBeaconTiming_Type);
    PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeBeaconTimingUnit), &PyNs3Dot11sIeBeaconTimingUnit_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeConfiguration), &PyNs3Dot11sIeConfiguration_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeMeshId), &PyNs3Dot11sIeMeshId_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeMeshIdChecker), &PyNs3Dot11sIeMeshIdChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IeMeshIdValue), &PyNs3Dot11sIeMeshIdValue_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::dot11s::IePeerManagement), &PyNs3Dot11sIePeerManagement_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dot11s::PeerLink), &PyNs3Dot11sPeerLink_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::dot11s::PeerManagementProtocol), &PyNs3Dot11sPeerManagementProtocol_Type);
    /* Register the 'ns3::dot11s::Dot11sMeshCapability' class */
    if (PyType_Ready(&PyNs3Dot11sDot11sMeshCapability_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Dot11sMeshCapability", (PyObject *) &PyNs3Dot11sDot11sMeshCapability_Type);
    /* Register the 'ns3::dot11s::HwmpProtocol' class */
    PyNs3Dot11sHwmpProtocol_Type.tp_base = &PyNs3MeshL2RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3Dot11sHwmpProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "HwmpProtocol", (PyObject *) &PyNs3Dot11sHwmpProtocol_Type);
    /* Register the 'ns3::dot11s::HwmpProtocol::FailedDestination' class */
    if (PyType_Ready(&PyNs3Dot11sHwmpProtocolFailedDestination_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3Dot11sHwmpProtocol_Type.tp_dict, (char *) "FailedDestination", (PyObject *) &PyNs3Dot11sHwmpProtocolFailedDestination_Type);
    /* Register the 'ns3::dot11s::IeBeaconTiming' class */
    PyNs3Dot11sIeBeaconTiming_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIeBeaconTiming_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeBeaconTiming", (PyObject *) &PyNs3Dot11sIeBeaconTiming_Type);
    /* Register the 'ns3::dot11s::IeBeaconTimingUnit' class */
    PyNs3Dot11sIeBeaconTimingUnit_Type.tp_base = &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type;
    if (PyType_Ready(&PyNs3Dot11sIeBeaconTimingUnit_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeBeaconTimingUnit", (PyObject *) &PyNs3Dot11sIeBeaconTimingUnit_Type);
    /* Register the 'ns3::dot11s::IeConfiguration' class */
    PyNs3Dot11sIeConfiguration_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIeConfiguration_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeConfiguration", (PyObject *) &PyNs3Dot11sIeConfiguration_Type);
    /* Register the 'ns3::dot11s::IeMeshId' class */
    PyNs3Dot11sIeMeshId_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIeMeshId_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeMeshId", (PyObject *) &PyNs3Dot11sIeMeshId_Type);
    /* Register the 'ns3::dot11s::IeMeshIdChecker' class */
    PyNs3Dot11sIeMeshIdChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Dot11sIeMeshIdChecker_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeMeshIdChecker", (PyObject *) &PyNs3Dot11sIeMeshIdChecker_Type);
    /* Register the 'ns3::dot11s::IeMeshIdValue' class */
    PyNs3Dot11sIeMeshIdValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Dot11sIeMeshIdValue_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IeMeshIdValue", (PyObject *) &PyNs3Dot11sIeMeshIdValue_Type);
    /* Register the 'ns3::dot11s::IePeerManagement' class */
    PyNs3Dot11sIePeerManagement_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Dot11sIePeerManagement_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IePeerManagement", (PyObject *) &PyNs3Dot11sIePeerManagement_Type);
    /* Register the 'ns3::dot11s::PeerLink' class */
    PyNs3Dot11sPeerLink_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Dot11sPeerLink_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PeerLink", (PyObject *) &PyNs3Dot11sPeerLink_Type);
    /* Register the 'ns3::dot11s::PeerManagementProtocol' class */
    PyNs3Dot11sPeerManagementProtocol_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Dot11sPeerManagementProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PeerManagementProtocol", (PyObject *) &PyNs3Dot11sPeerManagementProtocol_Type);
    /* Register the 'std::vector< ns3::Mac48Address >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Mac48Address___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Mac48Address___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Mac48Address___gt__", (PyObject *) &Pystd__vector__lt___ns3__Mac48Address___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Mac48Address___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Mac48Address___gt__Iter_Type);
    PyModule_AddIntConstant(m, (char *) "CONGESTION_SIGNALING", ns3::dot11s::CONGESTION_SIGNALING);
    PyModule_AddIntConstant(m, (char *) "CONGESTION_NULL", ns3::dot11s::CONGESTION_NULL);
    PyModule_AddIntConstant(m, (char *) "AUTH_NULL", ns3::dot11s::AUTH_NULL);
    PyModule_AddIntConstant(m, (char *) "AUTH_SAE", ns3::dot11s::AUTH_SAE);
    PyModule_AddIntConstant(m, (char *) "PROTOCOL_HWMP", ns3::dot11s::PROTOCOL_HWMP);
    PyModule_AddIntConstant(m, (char *) "SYNC_NEIGHBOUR_OFFSET", ns3::dot11s::SYNC_NEIGHBOUR_OFFSET);
    PyModule_AddIntConstant(m, (char *) "SYNC_NULL", ns3::dot11s::SYNC_NULL);
    PyModule_AddIntConstant(m, (char *) "REASON11S_PEERING_CANCELLED", ns3::dot11s::REASON11S_PEERING_CANCELLED);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_MAX_PEERS", ns3::dot11s::REASON11S_MESH_MAX_PEERS);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_CAPABILITY_POLICY_VIOLATION", ns3::dot11s::REASON11S_MESH_CAPABILITY_POLICY_VIOLATION);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_CLOSE_RCVD", ns3::dot11s::REASON11S_MESH_CLOSE_RCVD);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_MAX_RETRIES", ns3::dot11s::REASON11S_MESH_MAX_RETRIES);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_CONFIRM_TIMEOUT", ns3::dot11s::REASON11S_MESH_CONFIRM_TIMEOUT);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_INVALID_GTK", ns3::dot11s::REASON11S_MESH_INVALID_GTK);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_INCONSISTENT_PARAMETERS", ns3::dot11s::REASON11S_MESH_INCONSISTENT_PARAMETERS);
    PyModule_AddIntConstant(m, (char *) "REASON11S_MESH_INVALID_SECURITY_CAPABILITY", ns3::dot11s::REASON11S_MESH_INVALID_SECURITY_CAPABILITY);
    PyModule_AddIntConstant(m, (char *) "REASON11S_RESERVED", ns3::dot11s::REASON11S_RESERVED);
    PyModule_AddIntConstant(m, (char *) "METRIC_AIRTIME", ns3::dot11s::METRIC_AIRTIME);
    {
        PyObject *tmp_value;
         // ns3::dot11s::IePeerManagement::PEER_OPEN
        tmp_value = PyInt_FromLong(ns3::dot11s::IePeerManagement::PEER_OPEN);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sIePeerManagement_Type.tp_dict, "PEER_OPEN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::IePeerManagement::PEER_CONFIRM
        tmp_value = PyInt_FromLong(ns3::dot11s::IePeerManagement::PEER_CONFIRM);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sIePeerManagement_Type.tp_dict, "PEER_CONFIRM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::IePeerManagement::PEER_CLOSE
        tmp_value = PyInt_FromLong(ns3::dot11s::IePeerManagement::PEER_CLOSE);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sIePeerManagement_Type.tp_dict, "PEER_CLOSE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::dot11s::PeerLink::IDLE
        tmp_value = PyInt_FromLong(ns3::dot11s::PeerLink::IDLE);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::OPN_SNT
        tmp_value = PyInt_FromLong(ns3::dot11s::PeerLink::OPN_SNT);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "OPN_SNT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::CNF_RCVD
        tmp_value = PyInt_FromLong(ns3::dot11s::PeerLink::CNF_RCVD);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "CNF_RCVD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::OPN_RCVD
        tmp_value = PyInt_FromLong(ns3::dot11s::PeerLink::OPN_RCVD);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "OPN_RCVD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::ESTAB
        tmp_value = PyInt_FromLong(ns3::dot11s::PeerLink::ESTAB);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "ESTAB", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::dot11s::PeerLink::HOLDING
        tmp_value = PyInt_FromLong(ns3::dot11s::PeerLink::HOLDING);
        PyDict_SetItemString((PyObject*) PyNs3Dot11sPeerLink_Type.tp_dict, "HOLDING", tmp_value);
        Py_DECREF(tmp_value);
    }
    return m;
}
static PyMethodDef ns3_flame_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


static PyObject *
initns3_flame(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "ns3.flame", ns3_flame_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::flame::FlameProtocol), &PyNs3FlameFlameProtocol_Type);
    /* Register the 'ns3::flame::FlameProtocol' class */
    PyNs3FlameFlameProtocol_Type.tp_base = &PyNs3MeshL2RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3FlameFlameProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FlameProtocol", (PyObject *) &PyNs3FlameFlameProtocol_Type);
    /* Register the 'ns3::flame::FlameTag' class */
    PyNs3FlameFlameTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3FlameFlameTag_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FlameTag", (PyObject *) &PyNs3FlameFlameTag_Type);
    return m;
}
/* --- module functions --- */

PyObject * _wrap_ns3_internalMakeIntegerChecker(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_internalMakeUintegerChecker(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_internalMakeDoubleChecker(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
static PyMethodDef ns3_internal_functions[] = {
    {(char *) "MakeIntegerChecker", (PyCFunction) _wrap_ns3_internalMakeIntegerChecker, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeUintegerChecker", (PyCFunction) _wrap_ns3_internalMakeUintegerChecker, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeDoubleChecker", (PyCFunction) _wrap_ns3_internalMakeDoubleChecker, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static PyObject *
initns3_internal(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "ns3.internal", ns3_internal_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    return m;
}
/* --- module functions --- */

PyObject * _wrap_ns3_olsrSecondsToEmf(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3_olsrEmfToSeconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
static PyMethodDef ns3_olsr_functions[] = {
    {(char *) "SecondsToEmf", (PyCFunction) _wrap_ns3_olsrSecondsToEmf, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EmfToSeconds", (PyCFunction) _wrap_ns3_olsrEmfToSeconds, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */

/* --- containers --- */



static void
Pystd__set__lt___unsigned_int___gt__Iter__tp_clear(Pystd__set__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__set__lt___unsigned_int___gt__Iter__tp_traverse(Pystd__set__lt___unsigned_int___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__set__lt___unsigned_int___gt____tp_dealloc(Pystd__set__lt___unsigned_int___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_dealloc(Pystd__set__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__set__lt___unsigned_int___gt____tp_iter(Pystd__set__lt___unsigned_int___gt__ *self)
{
    Pystd__set__lt___unsigned_int___gt__Iter *iter = PyObject_GC_New(Pystd__set__lt___unsigned_int___gt__Iter, &Pystd__set__lt___unsigned_int___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::set< unsigned int >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_iter(Pystd__set__lt___unsigned_int___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_iternext(Pystd__set__lt___unsigned_int___gt__Iter *self)
{
    PyObject *py_retval;
    std::set< unsigned int >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__std__set__lt___unsigned_int___gt__(PyObject *arg, std::set< unsigned int > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__set__lt___unsigned_int___gt___Type)) {
        *container = *((Pystd__set__lt___unsigned_int___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            unsigned int item;
            if (!_wrap_convert_py2c__unsigned_int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__set__lt___unsigned_int___gt__ instance, or a list of unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__set__lt___unsigned_int___gt____tp_init(Pystd__set__lt___unsigned_int___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::set< unsigned int >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__set__lt___unsigned_int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__set__lt___unsigned_int___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.olsr.Std__set__lt___unsigned_int___gt__",            /* tp_name */
    sizeof(Pystd__set__lt___unsigned_int___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt___unsigned_int___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt___unsigned_int___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__set__lt___unsigned_int___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__set__lt___unsigned_int___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.olsr.Std__set__lt___unsigned_int___gt__Iter",            /* tp_name */
    sizeof(Pystd__set__lt___unsigned_int___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__set__lt___unsigned_int___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__set__lt___unsigned_int___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */


static PyObject *
initns3_olsr(void)
{
    PyObject *m;
    m = Py_InitModule3((char *) "ns3.olsr", ns3_olsr_functions, NULL);
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::olsr::RoutingProtocol), &PyNs3OlsrRoutingProtocol_Type);
    /* Register the 'ns3::olsr::Association' class */
    if (PyType_Ready(&PyNs3OlsrAssociation_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Association", (PyObject *) &PyNs3OlsrAssociation_Type);
    /* Register the 'ns3::olsr::AssociationTuple' class */
    if (PyType_Ready(&PyNs3OlsrAssociationTuple_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "AssociationTuple", (PyObject *) &PyNs3OlsrAssociationTuple_Type);
    /* Register the 'ns3::olsr::DuplicateTuple' class */
    if (PyType_Ready(&PyNs3OlsrDuplicateTuple_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DuplicateTuple", (PyObject *) &PyNs3OlsrDuplicateTuple_Type);
    /* Register the 'ns3::olsr::IfaceAssocTuple' class */
    if (PyType_Ready(&PyNs3OlsrIfaceAssocTuple_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IfaceAssocTuple", (PyObject *) &PyNs3OlsrIfaceAssocTuple_Type);
    /* Register the 'ns3::olsr::LinkTuple' class */
    if (PyType_Ready(&PyNs3OlsrLinkTuple_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "LinkTuple", (PyObject *) &PyNs3OlsrLinkTuple_Type);
    /* Register the 'ns3::olsr::MessageHeader' class */
    PyNs3OlsrMessageHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3OlsrMessageHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MessageHeader", (PyObject *) &PyNs3OlsrMessageHeader_Type);
    /* Register the 'ns3::olsr::MessageHeader::Hello' class */
    if (PyType_Ready(&PyNs3OlsrMessageHeaderHello_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeader_Type.tp_dict, (char *) "Hello", (PyObject *) &PyNs3OlsrMessageHeaderHello_Type);
    /* Register the 'ns3::olsr::MessageHeader::Hello::LinkMessage' class */
    if (PyType_Ready(&PyNs3OlsrMessageHeaderHelloLinkMessage_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeaderHello_Type.tp_dict, (char *) "LinkMessage", (PyObject *) &PyNs3OlsrMessageHeaderHelloLinkMessage_Type);
    /* Register the 'ns3::olsr::MessageHeader::Hna' class */
    if (PyType_Ready(&PyNs3OlsrMessageHeaderHna_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeader_Type.tp_dict, (char *) "Hna", (PyObject *) &PyNs3OlsrMessageHeaderHna_Type);
    /* Register the 'ns3::olsr::MessageHeader::Hna::Association' class */
    if (PyType_Ready(&PyNs3OlsrMessageHeaderHnaAssociation_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeaderHna_Type.tp_dict, (char *) "Association", (PyObject *) &PyNs3OlsrMessageHeaderHnaAssociation_Type);
    /* Register the 'ns3::olsr::MessageHeader::Mid' class */
    if (PyType_Ready(&PyNs3OlsrMessageHeaderMid_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeader_Type.tp_dict, (char *) "Mid", (PyObject *) &PyNs3OlsrMessageHeaderMid_Type);
    /* Register the 'ns3::olsr::MessageHeader::Tc' class */
    if (PyType_Ready(&PyNs3OlsrMessageHeaderTc_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeader_Type.tp_dict, (char *) "Tc", (PyObject *) &PyNs3OlsrMessageHeaderTc_Type);
    /* Register the 'ns3::olsr::MprSelectorTuple' class */
    if (PyType_Ready(&PyNs3OlsrMprSelectorTuple_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "MprSelectorTuple", (PyObject *) &PyNs3OlsrMprSelectorTuple_Type);
    /* Register the 'ns3::olsr::NeighborTuple' class */
    if (PyType_Ready(&PyNs3OlsrNeighborTuple_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "NeighborTuple", (PyObject *) &PyNs3OlsrNeighborTuple_Type);
    /* Register the 'ns3::olsr::OlsrMprTestCase' class */
    PyNs3OlsrOlsrMprTestCase_Type.tp_base = &PyNs3TestCase_Type;
    if (PyType_Ready(&PyNs3OlsrOlsrMprTestCase_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "OlsrMprTestCase", (PyObject *) &PyNs3OlsrOlsrMprTestCase_Type);
    /* Register the 'ns3::olsr::PacketHeader' class */
    PyNs3OlsrPacketHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3OlsrPacketHeader_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "PacketHeader", (PyObject *) &PyNs3OlsrPacketHeader_Type);
    /* Register the 'ns3::olsr::RoutingProtocol' class */
    PyNs3OlsrRoutingProtocol_Type.tp_base = &PyNs3Ipv4RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3OlsrRoutingProtocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RoutingProtocol", (PyObject *) &PyNs3OlsrRoutingProtocol_Type);
    /* Register the 'ns3::olsr::RoutingTableEntry' class */
    if (PyType_Ready(&PyNs3OlsrRoutingTableEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RoutingTableEntry", (PyObject *) &PyNs3OlsrRoutingTableEntry_Type);
    /* Register the 'ns3::olsr::TopologyTuple' class */
    if (PyType_Ready(&PyNs3OlsrTopologyTuple_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TopologyTuple", (PyObject *) &PyNs3OlsrTopologyTuple_Type);
    /* Register the 'ns3::olsr::TwoHopNeighborTuple' class */
    if (PyType_Ready(&PyNs3OlsrTwoHopNeighborTuple_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "TwoHopNeighborTuple", (PyObject *) &PyNs3OlsrTwoHopNeighborTuple_Type);
    /* Register the 'std::vector< ns3::olsr::MessageHeader::Hello::LinkMessage >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__", (PyObject *) &Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__Iter_Type);
    /* Register the 'std::vector< ns3::olsr::MessageHeader::Hna::Association >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__", (PyObject *) &Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__Iter_Type);
    /* Register the 'std::vector< ns3::olsr::RoutingTableEntry >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__olsr__RoutingTableEntry___gt__", (PyObject *) &Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__olsr__RoutingTableEntry___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt__Iter_Type);
    /* Register the 'std::set< unsigned int >' class */
    if (PyType_Ready(&Pystd__set__lt___unsigned_int___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__set__lt___unsigned_int___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__set__lt___unsigned_int___gt__", (PyObject *) &Pystd__set__lt___unsigned_int___gt___Type);
    PyModule_AddObject(m, (char *) "Std__set__lt___unsigned_int___gt__Iter", (PyObject *) &Pystd__set__lt___unsigned_int___gt__Iter_Type);
    {
        PyObject *tmp_value;
         // ns3::olsr::MessageHeader::HELLO_MESSAGE
        tmp_value = PyInt_FromLong(ns3::olsr::MessageHeader::HELLO_MESSAGE);
        PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeader_Type.tp_dict, "HELLO_MESSAGE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::olsr::MessageHeader::TC_MESSAGE
        tmp_value = PyInt_FromLong(ns3::olsr::MessageHeader::TC_MESSAGE);
        PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeader_Type.tp_dict, "TC_MESSAGE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::olsr::MessageHeader::MID_MESSAGE
        tmp_value = PyInt_FromLong(ns3::olsr::MessageHeader::MID_MESSAGE);
        PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeader_Type.tp_dict, "MID_MESSAGE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::olsr::MessageHeader::HNA_MESSAGE
        tmp_value = PyInt_FromLong(ns3::olsr::MessageHeader::HNA_MESSAGE);
        PyDict_SetItemString((PyObject*) PyNs3OlsrMessageHeader_Type.tp_dict, "HNA_MESSAGE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::olsr::NeighborTuple::STATUS_NOT_SYM
        tmp_value = PyInt_FromLong(ns3::olsr::NeighborTuple::STATUS_NOT_SYM);
        PyDict_SetItemString((PyObject*) PyNs3OlsrNeighborTuple_Type.tp_dict, "STATUS_NOT_SYM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::olsr::NeighborTuple::STATUS_SYM
        tmp_value = PyInt_FromLong(ns3::olsr::NeighborTuple::STATUS_SYM);
        PyDict_SetItemString((PyObject*) PyNs3OlsrNeighborTuple_Type.tp_dict, "STATUS_SYM", tmp_value);
        Py_DECREF(tmp_value);
    }
    return m;
}
/* --- module functions --- */

PyObject * _wrap_ns3MakeVectorChecker();
PyObject * _wrap_ns3Log(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3MakeTypeIdChecker();
PyObject * _wrap_ns3MakeBooleanChecker();
PyObject * _wrap_ns3TimeStep(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3Sum(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3Create__lt__ns3__PointerValue__gt__();
PyObject * _wrap_ns3TypeNameGet__lt__unsigned_char__gt__();
PyObject * _wrap_ns3TypeNameGet__lt__int__gt__();
PyObject * _wrap_ns3Abs(PyObject *self, PyObject *args, PyObject *kwargs);

PyObject *
_wrap_ns3MakeUanModesListChecker()
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeChecker const > retval;
    PyNs3AttributeChecker *py_AttributeChecker;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = ns3::MakeUanModesListChecker();
    if (!(const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeChecker = NULL;
    } else {
        py_AttributeChecker = (PyNs3AttributeChecker *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeChecker);
    }
    
    if (py_AttributeChecker == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))), &PyNs3AttributeChecker_Type);
        py_AttributeChecker = PyObject_New(PyNs3AttributeChecker, wrapper_type);
        py_AttributeChecker->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeChecker->obj = const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeChecker->obj] = (PyObject *) py_AttributeChecker;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeChecker);
    return py_retval;
}
PyObject * _wrap_ns3MakeUanModesListChecker();

PyObject * _wrap_ns3Create__lt__ns3__ObjectVectorValue__gt__();
PyObject * _wrap_ns3Prod(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3Log10(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3Norm(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3TestDoubleIsEqual(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3isNaN(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3Log2(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3LogComponentDisable(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3Seconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3Max(PyObject *self, PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3Min(PyObject *self, PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3TypeNameGet__lt__short__gt__();
PyObject * _wrap_ns3MakeDataRateChecker();
PyObject * _wrap_ns3TypeNameGet__lt__long__gt__();
PyObject * _wrap_ns3MakeObjectFactoryChecker();
PyObject * _wrap_ns3MakeBoxChecker();
PyObject * _wrap_ns3TypeNameGet__lt__float__gt__();
PyObject * _wrap_ns3CalculateDistance(PyObject *self, PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3BreakpointFallback();
PyObject * _wrap_ns3FemtoSeconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3MakeRectangleChecker();
PyObject * _wrap_ns3MakeVector3DChecker();
PyObject * _wrap_ns3Now();
PyObject * _wrap_ns3LogComponentEnable(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3MilliSeconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3MakeCallbackChecker();
PyObject * _wrap_ns3MakeMac48AddressChecker();
PyObject * _wrap_ns3QosUtilsMapSeqControlToUniqueInteger(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3MakeStringChecker();
PyObject * _wrap_ns3MakeWaypointChecker();
PyObject * _wrap_ns3NanoSeconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3MakeSsidChecker();
PyObject * _wrap_ns3TypeNameGet__lt__signed_char__gt__();
PyObject * _wrap_ns3MakeIpv4AddressChecker();
PyObject * _wrap_ns3WriteTo(PyObject *self, PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3TypeNameGet__lt__unsigned_int__gt__();
PyObject * _wrap_ns3MakeTimeChecker();
PyObject * _wrap_ns3MakeWifiModeChecker();
PyObject * _wrap_ns3QosUtilsGetTidForPacket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3LogComponentDisableAll(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3TypeNameGet__lt__unsigned_long_long__gt__();
PyObject * _wrap_ns3MakeRandomVariableChecker();
PyObject * _wrap_ns3LogComponentEnableAll(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3PicoSeconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3TypeNameGet__lt__double__gt__();
PyObject * _wrap_ns3MakeVector2DChecker();
PyObject * _wrap_ns3MakeIpv6AddressChecker();
PyObject * _wrap_ns3MakeIpv4MaskChecker();
PyObject * _wrap_ns3Pow(PyObject *self, PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3TypeNameGet__lt__unsigned_short__gt__();
PyObject * _wrap_ns3MakeIpv6PrefixChecker();
PyObject * _wrap_ns3MakeEnumChecker(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3MicroSeconds(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3QosUtilsMapTidToAc(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3ReadFrom(PyObject *self, PyObject *args, PyObject *kwargs);
PyObject * _wrap_ns3MakeAddressChecker();
static PyMethodDef ns3_functions[] = {
    {(char *) "MakeVectorChecker", (PyCFunction) _wrap_ns3MakeVectorChecker, METH_NOARGS, NULL },
    {(char *) "Log", (PyCFunction) _wrap_ns3Log, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeTypeIdChecker", (PyCFunction) _wrap_ns3MakeTypeIdChecker, METH_NOARGS, NULL },
    {(char *) "MakeBooleanChecker", (PyCFunction) _wrap_ns3MakeBooleanChecker, METH_NOARGS, NULL },
    {(char *) "TimeStep", (PyCFunction) _wrap_ns3TimeStep, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Sum", (PyCFunction) _wrap_ns3Sum, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Create__lt__ns3__PointerValue__gt__", (PyCFunction) _wrap_ns3Create__lt__ns3__PointerValue__gt__, METH_NOARGS, NULL },
    {(char *) "TypeNameGet__lt__unsigned_char__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__unsigned_char__gt__, METH_NOARGS, NULL },
    {(char *) "TypeNameGet__lt__int__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__int__gt__, METH_NOARGS, NULL },
    {(char *) "Abs", (PyCFunction) _wrap_ns3Abs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeUanModesListChecker", (PyCFunction) _wrap_ns3MakeUanModesListChecker, METH_NOARGS, NULL },
    {(char *) "Create__lt__ns3__ObjectVectorValue__gt__", (PyCFunction) _wrap_ns3Create__lt__ns3__ObjectVectorValue__gt__, METH_NOARGS, NULL },
    {(char *) "Prod", (PyCFunction) _wrap_ns3Prod, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Log10", (PyCFunction) _wrap_ns3Log10, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Norm", (PyCFunction) _wrap_ns3Norm, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TestDoubleIsEqual", (PyCFunction) _wrap_ns3TestDoubleIsEqual, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "isNaN", (PyCFunction) _wrap_ns3isNaN, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Log2", (PyCFunction) _wrap_ns3Log2, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "LogComponentDisable", (PyCFunction) _wrap_ns3LogComponentDisable, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Seconds", (PyCFunction) _wrap_ns3Seconds, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Max", (PyCFunction) _wrap_ns3Max, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Min", (PyCFunction) _wrap_ns3Min, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TypeNameGet__lt__short__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__short__gt__, METH_NOARGS, NULL },
    {(char *) "MakeDataRateChecker", (PyCFunction) _wrap_ns3MakeDataRateChecker, METH_NOARGS, NULL },
    {(char *) "TypeNameGet__lt__long__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__long__gt__, METH_NOARGS, NULL },
    {(char *) "MakeObjectFactoryChecker", (PyCFunction) _wrap_ns3MakeObjectFactoryChecker, METH_NOARGS, NULL },
    {(char *) "MakeBoxChecker", (PyCFunction) _wrap_ns3MakeBoxChecker, METH_NOARGS, NULL },
    {(char *) "TypeNameGet__lt__float__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__float__gt__, METH_NOARGS, NULL },
    {(char *) "CalculateDistance", (PyCFunction) _wrap_ns3CalculateDistance, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "BreakpointFallback", (PyCFunction) _wrap_ns3BreakpointFallback, METH_NOARGS, NULL },
    {(char *) "FemtoSeconds", (PyCFunction) _wrap_ns3FemtoSeconds, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeRectangleChecker", (PyCFunction) _wrap_ns3MakeRectangleChecker, METH_NOARGS, NULL },
    {(char *) "MakeVector3DChecker", (PyCFunction) _wrap_ns3MakeVector3DChecker, METH_NOARGS, NULL },
    {(char *) "Now", (PyCFunction) _wrap_ns3Now, METH_NOARGS, NULL },
    {(char *) "LogComponentEnable", (PyCFunction) _wrap_ns3LogComponentEnable, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MilliSeconds", (PyCFunction) _wrap_ns3MilliSeconds, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeCallbackChecker", (PyCFunction) _wrap_ns3MakeCallbackChecker, METH_NOARGS, NULL },
    {(char *) "MakeMac48AddressChecker", (PyCFunction) _wrap_ns3MakeMac48AddressChecker, METH_NOARGS, NULL },
    {(char *) "QosUtilsMapSeqControlToUniqueInteger", (PyCFunction) _wrap_ns3QosUtilsMapSeqControlToUniqueInteger, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeStringChecker", (PyCFunction) _wrap_ns3MakeStringChecker, METH_NOARGS, NULL },
    {(char *) "MakeWaypointChecker", (PyCFunction) _wrap_ns3MakeWaypointChecker, METH_NOARGS, NULL },
    {(char *) "NanoSeconds", (PyCFunction) _wrap_ns3NanoSeconds, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeSsidChecker", (PyCFunction) _wrap_ns3MakeSsidChecker, METH_NOARGS, NULL },
    {(char *) "TypeNameGet__lt__signed_char__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__signed_char__gt__, METH_NOARGS, NULL },
    {(char *) "MakeIpv4AddressChecker", (PyCFunction) _wrap_ns3MakeIpv4AddressChecker, METH_NOARGS, NULL },
    {(char *) "WriteTo", (PyCFunction) _wrap_ns3WriteTo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TypeNameGet__lt__unsigned_int__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__unsigned_int__gt__, METH_NOARGS, NULL },
    {(char *) "MakeTimeChecker", (PyCFunction) _wrap_ns3MakeTimeChecker, METH_NOARGS, NULL },
    {(char *) "MakeWifiModeChecker", (PyCFunction) _wrap_ns3MakeWifiModeChecker, METH_NOARGS, NULL },
    {(char *) "QosUtilsGetTidForPacket", (PyCFunction) _wrap_ns3QosUtilsGetTidForPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "LogComponentDisableAll", (PyCFunction) _wrap_ns3LogComponentDisableAll, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TypeNameGet__lt__unsigned_long_long__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__unsigned_long_long__gt__, METH_NOARGS, NULL },
    {(char *) "MakeRandomVariableChecker", (PyCFunction) _wrap_ns3MakeRandomVariableChecker, METH_NOARGS, NULL },
    {(char *) "LogComponentEnableAll", (PyCFunction) _wrap_ns3LogComponentEnableAll, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "PicoSeconds", (PyCFunction) _wrap_ns3PicoSeconds, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TypeNameGet__lt__double__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__double__gt__, METH_NOARGS, NULL },
    {(char *) "MakeVector2DChecker", (PyCFunction) _wrap_ns3MakeVector2DChecker, METH_NOARGS, NULL },
    {(char *) "MakeIpv6AddressChecker", (PyCFunction) _wrap_ns3MakeIpv6AddressChecker, METH_NOARGS, NULL },
    {(char *) "MakeIpv4MaskChecker", (PyCFunction) _wrap_ns3MakeIpv4MaskChecker, METH_NOARGS, NULL },
    {(char *) "Pow", (PyCFunction) _wrap_ns3Pow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TypeNameGet__lt__unsigned_short__gt__", (PyCFunction) _wrap_ns3TypeNameGet__lt__unsigned_short__gt__, METH_NOARGS, NULL },
    {(char *) "MakeIpv6PrefixChecker", (PyCFunction) _wrap_ns3MakeIpv6PrefixChecker, METH_NOARGS, NULL },
    {(char *) "MakeEnumChecker", (PyCFunction) _wrap_ns3MakeEnumChecker, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MicroSeconds", (PyCFunction) _wrap_ns3MicroSeconds, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "QosUtilsMapTidToAc", (PyCFunction) _wrap_ns3QosUtilsMapTidToAc, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReadFrom", (PyCFunction) _wrap_ns3ReadFrom, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MakeAddressChecker", (PyCFunction) _wrap_ns3MakeAddressChecker, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


std::map<void*, PyObject*> PyNs3DeviceEnergyModelContainer_wrapper_registry;


static int
_wrap_PyNs3DeviceEnergyModelContainer__tp_init__0(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DeviceEnergyModelContainer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DeviceEnergyModelContainer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DeviceEnergyModelContainer(*((PyNs3DeviceEnergyModelContainer *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3DeviceEnergyModelContainer__tp_init__1(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DeviceEnergyModelContainer();
    return 0;
}

static int
_wrap_PyNs3DeviceEnergyModelContainer__tp_init__2(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DeviceEnergyModel *model;
    ns3::DeviceEnergyModel *model_ptr;
    const char *keywords[] = {"model", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DeviceEnergyModel_Type, &model)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    model_ptr = (model ? model->obj : NULL);
    self->obj = new ns3::DeviceEnergyModelContainer(ns3::Ptr< ns3::DeviceEnergyModel  > (model_ptr));
    return 0;
}

static int
_wrap_PyNs3DeviceEnergyModelContainer__tp_init__3(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *modelName;
    Py_ssize_t modelName_len;
    const char *keywords[] = {"modelName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &modelName, &modelName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DeviceEnergyModelContainer(std::string(modelName, modelName_len));
    return 0;
}

static int
_wrap_PyNs3DeviceEnergyModelContainer__tp_init__4(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DeviceEnergyModelContainer *a;
    PyNs3DeviceEnergyModelContainer *b;
    const char *keywords[] = {"a", "b", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3DeviceEnergyModelContainer_Type, &a, &PyNs3DeviceEnergyModelContainer_Type, &b)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DeviceEnergyModelContainer(*((PyNs3DeviceEnergyModelContainer *) a)->obj, *((PyNs3DeviceEnergyModelContainer *) b)->obj);
    return 0;
}

int _wrap_PyNs3DeviceEnergyModelContainer__tp_init(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[5] = {0,};
    retval = _wrap_PyNs3DeviceEnergyModelContainer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DeviceEnergyModelContainer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3DeviceEnergyModelContainer__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3DeviceEnergyModelContainer__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3DeviceEnergyModelContainer__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    error_list = PyList_New(5);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyNs3DeviceEnergyModelContainer_Add__0(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3DeviceEnergyModelContainer *container;
    const char *keywords[] = {"container", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DeviceEnergyModelContainer_Type, &container)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->Add(*((PyNs3DeviceEnergyModelContainer *) container)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DeviceEnergyModelContainer_Add__1(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3DeviceEnergyModel *model;
    ns3::DeviceEnergyModel *model_ptr;
    const char *keywords[] = {"model", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DeviceEnergyModel_Type, &model)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    model_ptr = (model ? model->obj : NULL);
    self->obj->Add(ns3::Ptr< ns3::DeviceEnergyModel  > (model_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3DeviceEnergyModelContainer_Add__2(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *modelName;
    Py_ssize_t modelName_len;
    const char *keywords[] = {"modelName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &modelName, &modelName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->Add(std::string(modelName, modelName_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3DeviceEnergyModelContainer_Add(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3DeviceEnergyModelContainer_Add__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DeviceEnergyModelContainer_Add__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3DeviceEnergyModelContainer_Add__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3DeviceEnergyModelContainer_Clear(PyNs3DeviceEnergyModelContainer *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModelContainer_GetN(PyNs3DeviceEnergyModelContainer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetN();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModelContainer_Get(PyNs3DeviceEnergyModelContainer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::DeviceEnergyModel > retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};
    PyNs3DeviceEnergyModel *py_DeviceEnergyModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    retval = self->obj->Get(i);
    if (!(const_cast<ns3::DeviceEnergyModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::DeviceEnergyModel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3DeviceEnergyModel__PythonHelper))
    {
        py_DeviceEnergyModel = reinterpret_cast< PyNs3DeviceEnergyModel* >(reinterpret_cast< PyNs3DeviceEnergyModel__PythonHelper* >(const_cast<ns3::DeviceEnergyModel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_DeviceEnergyModel->obj = const_cast<ns3::DeviceEnergyModel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_DeviceEnergyModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::DeviceEnergyModel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_DeviceEnergyModel = NULL;
        } else {
            py_DeviceEnergyModel = (PyNs3DeviceEnergyModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_DeviceEnergyModel);
        }
    
        if (py_DeviceEnergyModel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::DeviceEnergyModel *> (ns3::PeekPointer (retval)))), &PyNs3DeviceEnergyModel_Type);
            py_DeviceEnergyModel = PyObject_GC_New(PyNs3DeviceEnergyModel, wrapper_type);
            py_DeviceEnergyModel->inst_dict = NULL;
            py_DeviceEnergyModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::DeviceEnergyModel *> (ns3::PeekPointer (retval))->Ref();
            py_DeviceEnergyModel->obj = const_cast<ns3::DeviceEnergyModel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_DeviceEnergyModel->obj] = (PyObject *) py_DeviceEnergyModel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_DeviceEnergyModel);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DeviceEnergyModelContainer__copy__(PyNs3DeviceEnergyModelContainer *self)
{

    PyNs3DeviceEnergyModelContainer *py_copy;
    py_copy = PyObject_New(PyNs3DeviceEnergyModelContainer, &PyNs3DeviceEnergyModelContainer_Type);
    py_copy->obj = new ns3::DeviceEnergyModelContainer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DeviceEnergyModelContainer_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DeviceEnergyModelContainer_methods[] = {
    {(char *) "Add", (PyCFunction) _wrap_PyNs3DeviceEnergyModelContainer_Add, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3DeviceEnergyModelContainer_Clear, METH_NOARGS, NULL },
    {(char *) "GetN", (PyCFunction) _wrap_PyNs3DeviceEnergyModelContainer_GetN, METH_NOARGS, NULL },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3DeviceEnergyModelContainer_Get, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DeviceEnergyModelContainer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DeviceEnergyModelContainer__tp_dealloc(PyNs3DeviceEnergyModelContainer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DeviceEnergyModelContainer_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DeviceEnergyModelContainer_wrapper_registry.end()) {
        PyNs3DeviceEnergyModelContainer_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DeviceEnergyModelContainer *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DeviceEnergyModelContainer__tp_richcompare (PyNs3DeviceEnergyModelContainer *PYBINDGEN_UNUSED(self), PyNs3DeviceEnergyModelContainer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DeviceEnergyModelContainer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DeviceEnergyModelContainer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.DeviceEnergyModelContainer",            /* tp_name */
    sizeof(PyNs3DeviceEnergyModelContainer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DeviceEnergyModelContainer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DeviceEnergyModelContainer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DeviceEnergyModelContainer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DeviceEnergyModelContainer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DeviceEnergyModelHelper_wrapper_registry;

static int
_wrap_PyNs3DeviceEnergyModelHelper__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'DeviceEnergyModelHelper' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3DeviceEnergyModelHelper_Set(PyNs3DeviceEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *v;
    const char *keywords[] = {"name", "v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &v)) {
        return NULL;
    }
    self->obj->Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3DeviceEnergyModelHelper_Install__0(PyNs3DeviceEnergyModelHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NetDevice *device;
    ns3::NetDevice *device_ptr;
    PyNs3EnergySource *source;
    ns3::EnergySource *source_ptr;
    const char *keywords[] = {"device", "source", NULL};
    PyNs3DeviceEnergyModelContainer *py_DeviceEnergyModelContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NetDevice_Type, &device, &PyNs3EnergySource_Type, &source)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    device_ptr = (device ? device->obj : NULL);
    source_ptr = (source ? source->obj : NULL);
    ns3::DeviceEnergyModelContainer retval = self->obj->Install(ns3::Ptr< ns3::NetDevice  > (device_ptr), ns3::Ptr< ns3::EnergySource  > (source_ptr));
    py_DeviceEnergyModelContainer = PyObject_New(PyNs3DeviceEnergyModelContainer, &PyNs3DeviceEnergyModelContainer_Type);
    py_DeviceEnergyModelContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DeviceEnergyModelContainer->obj = new ns3::DeviceEnergyModelContainer(retval);
    PyNs3DeviceEnergyModelContainer_wrapper_registry[(void *) py_DeviceEnergyModelContainer->obj] = (PyObject *) py_DeviceEnergyModelContainer;
    py_retval = Py_BuildValue((char *) "N", py_DeviceEnergyModelContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3DeviceEnergyModelHelper_Install__1(PyNs3DeviceEnergyModelHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NetDeviceContainer *deviceContainer;
    PyNs3EnergySourceContainer *sourceContainer;
    const char *keywords[] = {"deviceContainer", "sourceContainer", NULL};
    PyNs3DeviceEnergyModelContainer *py_DeviceEnergyModelContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NetDeviceContainer_Type, &deviceContainer, &PyNs3EnergySourceContainer_Type, &sourceContainer)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::DeviceEnergyModelContainer retval = self->obj->Install(*((PyNs3NetDeviceContainer *) deviceContainer)->obj, *((PyNs3EnergySourceContainer *) sourceContainer)->obj);
    py_DeviceEnergyModelContainer = PyObject_New(PyNs3DeviceEnergyModelContainer, &PyNs3DeviceEnergyModelContainer_Type);
    py_DeviceEnergyModelContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DeviceEnergyModelContainer->obj = new ns3::DeviceEnergyModelContainer(retval);
    PyNs3DeviceEnergyModelContainer_wrapper_registry[(void *) py_DeviceEnergyModelContainer->obj] = (PyObject *) py_DeviceEnergyModelContainer;
    py_retval = Py_BuildValue((char *) "N", py_DeviceEnergyModelContainer);
    return py_retval;
}

PyObject * _wrap_PyNs3DeviceEnergyModelHelper_Install(PyNs3DeviceEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DeviceEnergyModelHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DeviceEnergyModelHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyNs3DeviceEnergyModelHelper_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3DeviceEnergyModelHelper_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3DeviceEnergyModelHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DeviceEnergyModelHelper__tp_clear(PyNs3DeviceEnergyModelHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::DeviceEnergyModelHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DeviceEnergyModelHelper__tp_traverse(PyNs3DeviceEnergyModelHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3DeviceEnergyModelHelper__tp_dealloc(PyNs3DeviceEnergyModelHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DeviceEnergyModelHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DeviceEnergyModelHelper_wrapper_registry.end()) {
        PyNs3DeviceEnergyModelHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DeviceEnergyModelHelper__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DeviceEnergyModelHelper__tp_richcompare (PyNs3DeviceEnergyModelHelper *PYBINDGEN_UNUSED(self), PyNs3DeviceEnergyModelHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DeviceEnergyModelHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DeviceEnergyModelHelper_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.DeviceEnergyModelHelper",            /* tp_name */
    sizeof(PyNs3DeviceEnergyModelHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DeviceEnergyModelHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3DeviceEnergyModelHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DeviceEnergyModelHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DeviceEnergyModelHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DeviceEnergyModelHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DeviceEnergyModelHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DeviceEnergyModelHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3EnergySourceHelper_wrapper_registry;

static int
_wrap_PyNs3EnergySourceHelper__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'EnergySourceHelper' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3EnergySourceHelper_InstallAll(PyNs3EnergySourceHelper *self)
{
    PyObject *py_retval;
    PyNs3EnergySourceContainer *py_EnergySourceContainer;
    
    ns3::EnergySourceContainer retval = self->obj->InstallAll();
    py_EnergySourceContainer = PyObject_GC_New(PyNs3EnergySourceContainer, &PyNs3EnergySourceContainer_Type);
    py_EnergySourceContainer->inst_dict = NULL;
    py_EnergySourceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EnergySourceContainer->obj = new ns3::EnergySourceContainer(retval);
    py_EnergySourceContainer->obj->Ref ();
    PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySourceContainer->obj] = (PyObject *) py_EnergySourceContainer;
    ns3::CompleteConstruct(py_EnergySourceContainer->obj);
    py_retval = Py_BuildValue((char *) "N", py_EnergySourceContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySourceHelper_Set(PyNs3EnergySourceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *v;
    const char *keywords[] = {"name", "v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &v)) {
        return NULL;
    }
    self->obj->Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3EnergySourceHelper_Install__0(PyNs3EnergySourceHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    PyNs3EnergySourceContainer *py_EnergySourceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    ns3::EnergySourceContainer retval = self->obj->Install(ns3::Ptr< ns3::Node  > (node_ptr));
    py_EnergySourceContainer = PyObject_GC_New(PyNs3EnergySourceContainer, &PyNs3EnergySourceContainer_Type);
    py_EnergySourceContainer->inst_dict = NULL;
    py_EnergySourceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EnergySourceContainer->obj = new ns3::EnergySourceContainer(retval);
    py_EnergySourceContainer->obj->Ref ();
    PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySourceContainer->obj] = (PyObject *) py_EnergySourceContainer;
    ns3::CompleteConstruct(py_EnergySourceContainer->obj);
    py_retval = Py_BuildValue((char *) "N", py_EnergySourceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3EnergySourceHelper_Install__1(PyNs3EnergySourceHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    const char *keywords[] = {"c", NULL};
    PyNs3EnergySourceContainer *py_EnergySourceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::EnergySourceContainer retval = self->obj->Install(*((PyNs3NodeContainer *) c)->obj);
    py_EnergySourceContainer = PyObject_GC_New(PyNs3EnergySourceContainer, &PyNs3EnergySourceContainer_Type);
    py_EnergySourceContainer->inst_dict = NULL;
    py_EnergySourceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EnergySourceContainer->obj = new ns3::EnergySourceContainer(retval);
    py_EnergySourceContainer->obj->Ref ();
    PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySourceContainer->obj] = (PyObject *) py_EnergySourceContainer;
    ns3::CompleteConstruct(py_EnergySourceContainer->obj);
    py_retval = Py_BuildValue((char *) "N", py_EnergySourceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3EnergySourceHelper_Install__2(PyNs3EnergySourceHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *nodeName;
    Py_ssize_t nodeName_len;
    const char *keywords[] = {"nodeName", NULL};
    PyNs3EnergySourceContainer *py_EnergySourceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &nodeName, &nodeName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::EnergySourceContainer retval = self->obj->Install(std::string(nodeName, nodeName_len));
    py_EnergySourceContainer = PyObject_GC_New(PyNs3EnergySourceContainer, &PyNs3EnergySourceContainer_Type);
    py_EnergySourceContainer->inst_dict = NULL;
    py_EnergySourceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_EnergySourceContainer->obj = new ns3::EnergySourceContainer(retval);
    py_EnergySourceContainer->obj->Ref ();
    PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySourceContainer->obj] = (PyObject *) py_EnergySourceContainer;
    ns3::CompleteConstruct(py_EnergySourceContainer->obj);
    py_retval = Py_BuildValue((char *) "N", py_EnergySourceContainer);
    return py_retval;
}

PyObject * _wrap_PyNs3EnergySourceHelper_Install(PyNs3EnergySourceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3EnergySourceHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3EnergySourceHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3EnergySourceHelper_Install__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}

static PyMethodDef PyNs3EnergySourceHelper_methods[] = {
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3EnergySourceHelper_InstallAll, METH_NOARGS, NULL },
    {(char *) "Set", (PyCFunction) _wrap_PyNs3EnergySourceHelper_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3EnergySourceHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3EnergySourceHelper__tp_clear(PyNs3EnergySourceHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::EnergySourceHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3EnergySourceHelper__tp_traverse(PyNs3EnergySourceHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3EnergySourceHelper__tp_dealloc(PyNs3EnergySourceHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3EnergySourceHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3EnergySourceHelper_wrapper_registry.end()) {
        PyNs3EnergySourceHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3EnergySourceHelper__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3EnergySourceHelper__tp_richcompare (PyNs3EnergySourceHelper *PYBINDGEN_UNUSED(self), PyNs3EnergySourceHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3EnergySourceHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3EnergySourceHelper_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.EnergySourceHelper",            /* tp_name */
    sizeof(PyNs3EnergySourceHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3EnergySourceHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3EnergySourceHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3EnergySourceHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3EnergySourceHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3EnergySourceHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3EnergySourceHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3EnergySourceHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Reservation_wrapper_registry;


static int
_wrap_PyNs3Reservation__tp_init__0(PyNs3Reservation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Reservation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Reservation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Reservation(*((PyNs3Reservation *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3Reservation__tp_init__1(PyNs3Reservation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Reservation();
    return 0;
}

int _wrap_PyNs3Reservation__tp_init(PyNs3Reservation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Reservation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Reservation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Reservation_GetNoFrames(PyNs3Reservation *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNoFrames();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_GetLength(PyNs3Reservation *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_IsTransmitted(PyNs3Reservation *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsTransmitted();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_SetFrameNo(PyNs3Reservation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int fn;
    const char *keywords[] = {"fn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &fn)) {
        return NULL;
    }
    if (fn > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFrameNo(fn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_GetFrameNo(PyNs3Reservation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFrameNo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_SetTransmitted(PyNs3Reservation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool t;
    PyObject *py_t = NULL;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &py_t)) {
        return NULL;
    }
    t = py_t? (bool) PyObject_IsTrue(py_t) : true;
    self->obj->SetTransmitted(t);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_IncrementRetry(PyNs3Reservation *self)
{
    PyObject *py_retval;
    
    self->obj->IncrementRetry();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_AddTimestamp(PyNs3Reservation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *t;
    ns3::Time t2;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &t)) {
        return NULL;
    }
    if (PyObject_IsInstance(t, (PyObject*) &PyNs3Time_Type)) {
        t2 = *((PyNs3Time *) t)->obj;
    } else if (PyObject_IsInstance(t, (PyObject*) &PyNs3Scalar_Type)) {
        t2 = *((PyNs3Scalar *) t)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", t->ob_type->tp_name);
        return NULL;
    }
    self->obj->AddTimestamp(t2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_GetTimestamp(PyNs3Reservation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int n;
    const char *keywords[] = {"n", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &n)) {
        return NULL;
    }
    if (n > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::Time retval = self->obj->GetTimestamp(n);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3Reservation_GetRetryNo(PyNs3Reservation *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRetryNo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Reservation__copy__(PyNs3Reservation *self)
{

    PyNs3Reservation *py_copy;
    py_copy = PyObject_New(PyNs3Reservation, &PyNs3Reservation_Type);
    py_copy->obj = new ns3::Reservation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Reservation_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Reservation_methods[] = {
    {(char *) "GetNoFrames", (PyCFunction) _wrap_PyNs3Reservation_GetNoFrames, METH_NOARGS, NULL },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3Reservation_GetLength, METH_NOARGS, NULL },
    {(char *) "IsTransmitted", (PyCFunction) _wrap_PyNs3Reservation_IsTransmitted, METH_NOARGS, NULL },
    {(char *) "SetFrameNo", (PyCFunction) _wrap_PyNs3Reservation_SetFrameNo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFrameNo", (PyCFunction) _wrap_PyNs3Reservation_GetFrameNo, METH_NOARGS, NULL },
    {(char *) "SetTransmitted", (PyCFunction) _wrap_PyNs3Reservation_SetTransmitted, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IncrementRetry", (PyCFunction) _wrap_PyNs3Reservation_IncrementRetry, METH_NOARGS, NULL },
    {(char *) "AddTimestamp", (PyCFunction) _wrap_PyNs3Reservation_AddTimestamp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTimestamp", (PyCFunction) _wrap_PyNs3Reservation_GetTimestamp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRetryNo", (PyCFunction) _wrap_PyNs3Reservation_GetRetryNo, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Reservation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Reservation__tp_dealloc(PyNs3Reservation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Reservation_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Reservation_wrapper_registry.end()) {
        PyNs3Reservation_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::Reservation *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Reservation__tp_richcompare (PyNs3Reservation *PYBINDGEN_UNUSED(self), PyNs3Reservation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Reservation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Reservation_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Reservation",            /* tp_name */
    sizeof(PyNs3Reservation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Reservation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Reservation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Reservation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Reservation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3Tap_wrapper_registry;


static int
_wrap_PyNs3Tap__tp_init__0(PyNs3Tap *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Tap *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Tap_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Tap(*((PyNs3Tap *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3Tap__tp_init__1(PyNs3Tap *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Tap();
    return 0;
}

int _wrap_PyNs3Tap__tp_init(PyNs3Tap *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Tap__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Tap__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Tap_GetDelay(PyNs3Tap *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDelay();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Tap__copy__(PyNs3Tap *self)
{

    PyNs3Tap *py_copy;
    py_copy = PyObject_New(PyNs3Tap, &PyNs3Tap_Type);
    py_copy->obj = new ns3::Tap(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Tap_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Tap_methods[] = {
    {(char *) "GetDelay", (PyCFunction) _wrap_PyNs3Tap_GetDelay, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Tap__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Tap__tp_dealloc(PyNs3Tap *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Tap_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Tap_wrapper_registry.end()) {
        PyNs3Tap_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::Tap *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Tap__tp_richcompare (PyNs3Tap *PYBINDGEN_UNUSED(self), PyNs3Tap *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Tap_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Tap_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Tap",            /* tp_name */
    sizeof(PyNs3Tap),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Tap__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Tap__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Tap_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Tap__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UanAddress_wrapper_registry;


static int
_wrap_PyNs3UanAddress__tp_init__0(PyNs3UanAddress *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanAddress *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanAddress(*((PyNs3UanAddress *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3UanAddress__tp_init__1(PyNs3UanAddress *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanAddress();
    return 0;
}

static int
_wrap_PyNs3UanAddress__tp_init__2(PyNs3UanAddress *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int addr;
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &addr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (addr > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanAddress(addr);
    return 0;
}

int _wrap_PyNs3UanAddress__tp_init(PyNs3UanAddress *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanAddress__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanAddress__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanAddress__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanAddress_GetBroadcast(void)
{
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    ns3::UanAddress retval = ns3::UanAddress::GetBroadcast();
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(retval);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = Py_BuildValue((char *) "N", py_UanAddress);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanAddress_ConvertFrom(PyNs3UanAddress *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *address;
    ns3::Address address2;
    const char *keywords[] = {"address", NULL};
    PyNs3UanAddress *py_UanAddress;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &address)) {
        return NULL;
    }
    if (PyObject_IsInstance(address, (PyObject*) &PyNs3Address_Type)) {
        address2 = *((PyNs3Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        address2 = *((PyNs3Inet6SocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        address2 = *((PyNs3InetSocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv4Address_Type)) {
        address2 = *((PyNs3Ipv4Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv6Address_Type)) {
        address2 = *((PyNs3Ipv6Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac48Address_Type)) {
        address2 = *((PyNs3Mac48Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac64Address_Type)) {
        address2 = *((PyNs3Mac64Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        address2 = *((PyNs3PacketSocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3UanAddress_Type)) {
        address2 = *((PyNs3UanAddress *) address)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", address->ob_type->tp_name);
        return NULL;
    }
    ns3::UanAddress retval = ns3::UanAddress::ConvertFrom(address2);
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(retval);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = Py_BuildValue((char *) "N", py_UanAddress);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanAddress_IsMatchingType(PyNs3UanAddress *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyObject *address;
    ns3::Address address2;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &address)) {
        return NULL;
    }
    if (PyObject_IsInstance(address, (PyObject*) &PyNs3Address_Type)) {
        address2 = *((PyNs3Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        address2 = *((PyNs3Inet6SocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        address2 = *((PyNs3InetSocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv4Address_Type)) {
        address2 = *((PyNs3Ipv4Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv6Address_Type)) {
        address2 = *((PyNs3Ipv6Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac48Address_Type)) {
        address2 = *((PyNs3Mac48Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac64Address_Type)) {
        address2 = *((PyNs3Mac64Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        address2 = *((PyNs3PacketSocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3UanAddress_Type)) {
        address2 = *((PyNs3UanAddress *) address)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", address->ob_type->tp_name);
        return NULL;
    }
    retval = ns3::UanAddress::IsMatchingType(address2);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanAddress_Allocate(void)
{
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    ns3::UanAddress retval = ns3::UanAddress::Allocate();
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(retval);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = Py_BuildValue((char *) "N", py_UanAddress);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanAddress_GetAsInt(PyNs3UanAddress *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetAsInt();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanAddress__copy__(PyNs3UanAddress *self)
{

    PyNs3UanAddress *py_copy;
    py_copy = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_copy->obj = new ns3::UanAddress(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3UanAddress_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanAddress_methods[] = {
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3UanAddress_GetBroadcast, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "ConvertFrom", (PyCFunction) _wrap_PyNs3UanAddress_ConvertFrom, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "IsMatchingType", (PyCFunction) _wrap_PyNs3UanAddress_IsMatchingType, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "Allocate", (PyCFunction) _wrap_PyNs3UanAddress_Allocate, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetAsInt", (PyCFunction) _wrap_PyNs3UanAddress_GetAsInt, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanAddress__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanAddress__tp_dealloc(PyNs3UanAddress *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UanAddress_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UanAddress_wrapper_registry.end()) {
        PyNs3UanAddress_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::UanAddress *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3UanAddress__tp_str(PyNs3UanAddress *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3UanAddress__tp_richcompare (PyNs3UanAddress *PYBINDGEN_UNUSED(self), PyNs3UanAddress *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanAddress_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        if (*self->obj != *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanAddress_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanAddress",            /* tp_name */
    sizeof(PyNs3UanAddress),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanAddress__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3UanAddress__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanAddress__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanAddress_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanAddress__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UanHelper_wrapper_registry;


static int
_wrap_PyNs3UanHelper__tp_init__0(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanHelper(*((PyNs3UanHelper *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3UanHelper__tp_init__1(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanHelper();
    return 0;
}

int _wrap_PyNs3UanHelper__tp_init(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanHelper_EnableAsciiAll(PyNs3UanHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    ns3::UanHelper::EnableAsciiAll(*((PyStdOstream *) os)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHelper_SetMac(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *type;
    Py_ssize_t type_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"type", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &type, &type_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetMac(std::string(type, type_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3UanHelper_EnableAscii__0(PyNs3UanHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyStdOstream *os;
    unsigned int nodeid;
    unsigned int deviceid;
    const char *keywords[] = {"os", "nodeid", "deviceid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!II", (char **) keywords, &PyStdOstream_Type, &os, &nodeid, &deviceid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::UanHelper::EnableAscii(*((PyStdOstream *) os)->obj, nodeid, deviceid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3UanHelper_EnableAscii__1(PyNs3UanHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3NetDeviceContainer *d;
    const char *keywords[] = {"os", "d", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyStdOstream_Type, &os, &PyNs3NetDeviceContainer_Type, &d)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::UanHelper::EnableAscii(*((PyStdOstream *) os)->obj, *((PyNs3NetDeviceContainer *) d)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3UanHelper_EnableAscii__2(PyNs3UanHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3NodeContainer *n;
    const char *keywords[] = {"os", "n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyStdOstream_Type, &os, &PyNs3NodeContainer_Type, &n)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::UanHelper::EnableAscii(*((PyStdOstream *) os)->obj, *((PyNs3NodeContainer *) n)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3UanHelper_EnableAscii(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanHelper_EnableAscii__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHelper_EnableAscii__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanHelper_EnableAscii__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3UanHelper_SetTransducer(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *type;
    Py_ssize_t type_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"type", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &type, &type_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetTransducer(std::string(type, type_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3UanHelper_Install__0(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    const char *keywords[] = {"c", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::NetDeviceContainer retval = self->obj->Install(*((PyNs3NodeContainer *) c)->obj);
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3UanHelper_Install__1(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    PyNs3UanChannel *channel;
    ns3::UanChannel *channel_ptr;
    const char *keywords[] = {"c", "channel", NULL};
    PyNs3NetDeviceContainer *py_NetDeviceContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NodeContainer_Type, &c, &PyNs3UanChannel_Type, &channel)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    ns3::NetDeviceContainer retval = self->obj->Install(*((PyNs3NodeContainer *) c)->obj, ns3::Ptr< ns3::UanChannel  > (channel_ptr));
    py_NetDeviceContainer = PyObject_New(PyNs3NetDeviceContainer, &PyNs3NetDeviceContainer_Type);
    py_NetDeviceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NetDeviceContainer->obj = new ns3::NetDeviceContainer(retval);
    PyNs3NetDeviceContainer_wrapper_registry[(void *) py_NetDeviceContainer->obj] = (PyObject *) py_NetDeviceContainer;
    py_retval = Py_BuildValue((char *) "N", py_NetDeviceContainer);
    return py_retval;
}

PyObject * _wrap_PyNs3UanHelper_Install(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3UanHelper_SetPhy(PyNs3UanHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *phyType;
    Py_ssize_t phyType_len;
    const char *n0 = NULL;
    Py_ssize_t n0_len;
    PyNs3AttributeValue *v0 = NULL;
    ns3::EmptyAttributeValue v0_default = ns3::EmptyAttributeValue();
    const char *n1 = NULL;
    Py_ssize_t n1_len;
    PyNs3AttributeValue *v1 = NULL;
    ns3::EmptyAttributeValue v1_default = ns3::EmptyAttributeValue();
    const char *n2 = NULL;
    Py_ssize_t n2_len;
    PyNs3AttributeValue *v2 = NULL;
    ns3::EmptyAttributeValue v2_default = ns3::EmptyAttributeValue();
    const char *n3 = NULL;
    Py_ssize_t n3_len;
    PyNs3AttributeValue *v3 = NULL;
    ns3::EmptyAttributeValue v3_default = ns3::EmptyAttributeValue();
    const char *n4 = NULL;
    Py_ssize_t n4_len;
    PyNs3AttributeValue *v4 = NULL;
    ns3::EmptyAttributeValue v4_default = ns3::EmptyAttributeValue();
    const char *n5 = NULL;
    Py_ssize_t n5_len;
    PyNs3AttributeValue *v5 = NULL;
    ns3::EmptyAttributeValue v5_default = ns3::EmptyAttributeValue();
    const char *n6 = NULL;
    Py_ssize_t n6_len;
    PyNs3AttributeValue *v6 = NULL;
    ns3::EmptyAttributeValue v6_default = ns3::EmptyAttributeValue();
    const char *n7 = NULL;
    Py_ssize_t n7_len;
    PyNs3AttributeValue *v7 = NULL;
    ns3::EmptyAttributeValue v7_default = ns3::EmptyAttributeValue();
    const char *keywords[] = {"phyType", "n0", "v0", "n1", "v1", "n2", "v2", "n3", "v3", "n4", "v4", "n5", "v5", "n6", "v6", "n7", "v7", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|s#O!s#O!s#O!s#O!s#O!s#O!s#O!s#O!", (char **) keywords, &phyType, &phyType_len, &n0, &n0_len, &PyNs3AttributeValue_Type, &v0, &n1, &n1_len, &PyNs3AttributeValue_Type, &v1, &n2, &n2_len, &PyNs3AttributeValue_Type, &v2, &n3, &n3_len, &PyNs3AttributeValue_Type, &v3, &n4, &n4_len, &PyNs3AttributeValue_Type, &v4, &n5, &n5_len, &PyNs3AttributeValue_Type, &v5, &n6, &n6_len, &PyNs3AttributeValue_Type, &v6, &n7, &n7_len, &PyNs3AttributeValue_Type, &v7)) {
        return NULL;
    }
    self->obj->SetPhy(std::string(phyType, phyType_len), (n0 ? std::string(n0, n0_len) : ""), (v0 ? (*((PyNs3AttributeValue *) v0)->obj) : v0_default), (n1 ? std::string(n1, n1_len) : ""), (v1 ? (*((PyNs3AttributeValue *) v1)->obj) : v1_default), (n2 ? std::string(n2, n2_len) : ""), (v2 ? (*((PyNs3AttributeValue *) v2)->obj) : v2_default), (n3 ? std::string(n3, n3_len) : ""), (v3 ? (*((PyNs3AttributeValue *) v3)->obj) : v3_default), (n4 ? std::string(n4, n4_len) : ""), (v4 ? (*((PyNs3AttributeValue *) v4)->obj) : v4_default), (n5 ? std::string(n5, n5_len) : ""), (v5 ? (*((PyNs3AttributeValue *) v5)->obj) : v5_default), (n6 ? std::string(n6, n6_len) : ""), (v6 ? (*((PyNs3AttributeValue *) v6)->obj) : v6_default), (n7 ? std::string(n7, n7_len) : ""), (v7 ? (*((PyNs3AttributeValue *) v7)->obj) : v7_default));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanHelper__copy__(PyNs3UanHelper *self)
{

    PyNs3UanHelper *py_copy;
    py_copy = PyObject_New(PyNs3UanHelper, &PyNs3UanHelper_Type);
    py_copy->obj = new ns3::UanHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3UanHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanHelper_methods[] = {
    {(char *) "EnableAsciiAll", (PyCFunction) _wrap_PyNs3UanHelper_EnableAsciiAll, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "SetMac", (PyCFunction) _wrap_PyNs3UanHelper_SetMac, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "EnableAscii", (PyCFunction) _wrap_PyNs3UanHelper_EnableAscii, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "SetTransducer", (PyCFunction) _wrap_PyNs3UanHelper_SetTransducer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3UanHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetPhy", (PyCFunction) _wrap_PyNs3UanHelper_SetPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanHelper__tp_dealloc(PyNs3UanHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UanHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UanHelper_wrapper_registry.end()) {
        PyNs3UanHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::UanHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanHelper__tp_richcompare (PyNs3UanHelper *PYBINDGEN_UNUSED(self), PyNs3UanHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanHelper_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanHelper",            /* tp_name */
    sizeof(PyNs3UanHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UanModesList_wrapper_registry;


static int
_wrap_PyNs3UanModesList__tp_init__0(PyNs3UanModesList *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanModesList *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanModesList_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanModesList(*((PyNs3UanModesList *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3UanModesList__tp_init__1(PyNs3UanModesList *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanModesList();
    return 0;
}

int _wrap_PyNs3UanModesList__tp_init(PyNs3UanModesList *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanModesList__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanModesList__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanModesList_AppendMode(PyNs3UanModesList *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanTxMode *mode;
    const char *keywords[] = {"mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    self->obj->AppendMode(*((PyNs3UanTxMode *) mode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanModesList_DeleteMode(PyNs3UanModesList *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int num;
    const char *keywords[] = {"num", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &num)) {
        return NULL;
    }
    self->obj->DeleteMode(num);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanModesList_GetNModes(PyNs3UanModesList *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNModes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanModesList__copy__(PyNs3UanModesList *self)
{

    PyNs3UanModesList *py_copy;
    py_copy = PyObject_New(PyNs3UanModesList, &PyNs3UanModesList_Type);
    py_copy->obj = new ns3::UanModesList(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3UanModesList_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanModesList_methods[] = {
    {(char *) "AppendMode", (PyCFunction) _wrap_PyNs3UanModesList_AppendMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeleteMode", (PyCFunction) _wrap_PyNs3UanModesList_DeleteMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNModes", (PyCFunction) _wrap_PyNs3UanModesList_GetNModes, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanModesList__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanModesList__tp_dealloc(PyNs3UanModesList *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UanModesList_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UanModesList_wrapper_registry.end()) {
        PyNs3UanModesList_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::UanModesList *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3UanModesList__tp_str(PyNs3UanModesList *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3UanModesList__tp_richcompare (PyNs3UanModesList *PYBINDGEN_UNUSED(self), PyNs3UanModesList *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanModesList_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanModesList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanModesList",            /* tp_name */
    sizeof(PyNs3UanModesList),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanModesList__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3UanModesList__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanModesList__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanModesList_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanModesList__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UanPacketArrival_wrapper_registry;


static int
_wrap_PyNs3UanPacketArrival__tp_init__0(PyNs3UanPacketArrival *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPacketArrival *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPacketArrival_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPacketArrival(*((PyNs3UanPacketArrival *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3UanPacketArrival__tp_init__1(PyNs3UanPacketArrival *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPacketArrival();
    return 0;
}

static int
_wrap_PyNs3UanPacketArrival__tp_init__2(PyNs3UanPacketArrival *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxPowerDb;
    PyNs3UanTxMode *txMode;
    PyNs3UanPdp *pdp;
    PyObject *arrTime;
    ns3::Time arrTime2;
    const char *keywords[] = {"packet", "rxPowerDb", "txMode", "pdp", "arrTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O!O", (char **) keywords, &PyNs3Packet_Type, &packet, &rxPowerDb, &PyNs3UanTxMode_Type, &txMode, &PyNs3UanPdp_Type, &pdp, &arrTime)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Time_Type)) {
        arrTime2 = *((PyNs3Time *) arrTime)->obj;
    } else if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Scalar_Type)) {
        arrTime2 = *((PyNs3Scalar *) arrTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", arrTime->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPacketArrival(ns3::Ptr< ns3::Packet  > (packet_ptr), rxPowerDb, *((PyNs3UanTxMode *) txMode)->obj, *((PyNs3UanPdp *) pdp)->obj, arrTime2);
    return 0;
}

int _wrap_PyNs3UanPacketArrival__tp_init(PyNs3UanPacketArrival *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanPacketArrival__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPacketArrival__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanPacketArrival__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPacketArrival_GetTxMode(PyNs3UanPacketArrival *self)
{
    PyObject *py_retval;
    PyNs3UanTxMode *py_UanTxMode;
    
    ns3::UanTxMode const & retval = self->obj->GetTxMode();
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(retval);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = Py_BuildValue((char *) "N", py_UanTxMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPacketArrival_GetPdp(PyNs3UanPacketArrival *self)
{
    PyObject *py_retval;
    PyNs3UanPdp *py_UanPdp;
    
    ns3::UanPdp retval = self->obj->GetPdp();
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(retval);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_retval = Py_BuildValue((char *) "N", py_UanPdp);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPacketArrival_GetPacket(PyNs3UanPacketArrival *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacket();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPacketArrival_GetArrivalTime(PyNs3UanPacketArrival *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetArrivalTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPacketArrival_GetRxPowerDb(PyNs3UanPacketArrival *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxPowerDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPacketArrival__copy__(PyNs3UanPacketArrival *self)
{

    PyNs3UanPacketArrival *py_copy;
    py_copy = PyObject_New(PyNs3UanPacketArrival, &PyNs3UanPacketArrival_Type);
    py_copy->obj = new ns3::UanPacketArrival(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3UanPacketArrival_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPacketArrival_methods[] = {
    {(char *) "GetTxMode", (PyCFunction) _wrap_PyNs3UanPacketArrival_GetTxMode, METH_NOARGS, NULL },
    {(char *) "GetPdp", (PyCFunction) _wrap_PyNs3UanPacketArrival_GetPdp, METH_NOARGS, NULL },
    {(char *) "GetPacket", (PyCFunction) _wrap_PyNs3UanPacketArrival_GetPacket, METH_NOARGS, NULL },
    {(char *) "GetArrivalTime", (PyCFunction) _wrap_PyNs3UanPacketArrival_GetArrivalTime, METH_NOARGS, NULL },
    {(char *) "GetRxPowerDb", (PyCFunction) _wrap_PyNs3UanPacketArrival_GetRxPowerDb, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPacketArrival__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanPacketArrival__tp_dealloc(PyNs3UanPacketArrival *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UanPacketArrival_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UanPacketArrival_wrapper_registry.end()) {
        PyNs3UanPacketArrival_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::UanPacketArrival *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPacketArrival__tp_richcompare (PyNs3UanPacketArrival *PYBINDGEN_UNUSED(self), PyNs3UanPacketArrival *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPacketArrival_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPacketArrival_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPacketArrival",            /* tp_name */
    sizeof(PyNs3UanPacketArrival),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPacketArrival__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPacketArrival__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPacketArrival_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPacketArrival__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UanPdp_wrapper_registry;


static int
_wrap_PyNs3UanPdp__tp_init__0(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPdp *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPdp_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPdp(*((PyNs3UanPdp *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3UanPdp__tp_init__1(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPdp();
    return 0;
}

static int
_wrap_PyNs3UanPdp__tp_init__2(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector< ns3::Tap > taps_value;
    PyObject *resolution;
    ns3::Time resolution2;
    const char *keywords[] = {"taps", "resolution", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O", (char **) keywords, _wrap_convert_py2c__std__vector__lt___ns3__Tap___gt__, &taps_value, &resolution)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (PyObject_IsInstance(resolution, (PyObject*) &PyNs3Time_Type)) {
        resolution2 = *((PyNs3Time *) resolution)->obj;
    } else if (PyObject_IsInstance(resolution, (PyObject*) &PyNs3Scalar_Type)) {
        resolution2 = *((PyNs3Scalar *) resolution)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", resolution->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPdp(taps_value, resolution2);
    return 0;
}

static int
_wrap_PyNs3UanPdp__tp_init__3(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    std::vector< double > arrivals_value;
    PyObject *resolution;
    ns3::Time resolution2;
    const char *keywords[] = {"arrivals", "resolution", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O&O", (char **) keywords, _wrap_convert_py2c__std__vector__lt___double___gt__, &arrivals_value, &resolution)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (PyObject_IsInstance(resolution, (PyObject*) &PyNs3Time_Type)) {
        resolution2 = *((PyNs3Time *) resolution)->obj;
    } else if (PyObject_IsInstance(resolution, (PyObject*) &PyNs3Scalar_Type)) {
        resolution2 = *((PyNs3Scalar *) resolution)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", resolution->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPdp(arrivals_value, resolution2);
    return 0;
}

int _wrap_PyNs3UanPdp__tp_init(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3UanPdp__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPdp__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanPdp__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3UanPdp__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPdp_SumTapsNc(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyObject *begin;
    ns3::Time begin2;
    PyObject *end;
    ns3::Time end2;
    const char *keywords[] = {"begin", "end", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OO", (char **) keywords, &begin, &end)) {
        return NULL;
    }
    if (PyObject_IsInstance(begin, (PyObject*) &PyNs3Time_Type)) {
        begin2 = *((PyNs3Time *) begin)->obj;
    } else if (PyObject_IsInstance(begin, (PyObject*) &PyNs3Scalar_Type)) {
        begin2 = *((PyNs3Scalar *) begin)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", begin->ob_type->tp_name);
        return NULL;
    }
    if (PyObject_IsInstance(end, (PyObject*) &PyNs3Time_Type)) {
        end2 = *((PyNs3Time *) end)->obj;
    } else if (PyObject_IsInstance(end, (PyObject*) &PyNs3Scalar_Type)) {
        end2 = *((PyNs3Scalar *) end)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", end->ob_type->tp_name);
        return NULL;
    }
    retval = self->obj->SumTapsNc(begin2, end2);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPdp_GetNTaps(PyNs3UanPdp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNTaps();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPdp_CreateImpulsePdp(void)
{
    PyObject *py_retval;
    PyNs3UanPdp *py_UanPdp;
    
    ns3::UanPdp retval = ns3::UanPdp::CreateImpulsePdp();
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(retval);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_retval = Py_BuildValue((char *) "N", py_UanPdp);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPdp_GetTap(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};
    PyNs3Tap *py_Tap;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    ns3::Tap const & retval = self->obj->GetTap(i);
    py_Tap = PyObject_New(PyNs3Tap, &PyNs3Tap_Type);
    py_Tap->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Tap->obj = new ns3::Tap(retval);
    PyNs3Tap_wrapper_registry[(void *) py_Tap->obj] = (PyObject *) py_Tap;
    py_retval = Py_BuildValue((char *) "N", py_Tap);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPdp_SumTapsFromMaxNc(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyObject *delay;
    ns3::Time delay2;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"delay", "duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OO", (char **) keywords, &delay, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Time_Type)) {
        delay2 = *((PyNs3Time *) delay)->obj;
    } else if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Scalar_Type)) {
        delay2 = *((PyNs3Scalar *) delay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", delay->ob_type->tp_name);
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    retval = self->obj->SumTapsFromMaxNc(delay2, duration2);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPdp_SetNTaps(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int nTaps;
    const char *keywords[] = {"nTaps", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &nTaps)) {
        return NULL;
    }
    self->obj->SetNTaps(nTaps);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPdp_SetResolution(PyNs3UanPdp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *resolution;
    ns3::Time resolution2;
    const char *keywords[] = {"resolution", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &resolution)) {
        return NULL;
    }
    if (PyObject_IsInstance(resolution, (PyObject*) &PyNs3Time_Type)) {
        resolution2 = *((PyNs3Time *) resolution)->obj;
    } else if (PyObject_IsInstance(resolution, (PyObject*) &PyNs3Scalar_Type)) {
        resolution2 = *((PyNs3Scalar *) resolution)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", resolution->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetResolution(resolution2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPdp_GetResolution(PyNs3UanPdp *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetResolution();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPdp__copy__(PyNs3UanPdp *self)
{

    PyNs3UanPdp *py_copy;
    py_copy = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_copy->obj = new ns3::UanPdp(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3UanPdp_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPdp_methods[] = {
    {(char *) "SumTapsNc", (PyCFunction) _wrap_PyNs3UanPdp_SumTapsNc, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNTaps", (PyCFunction) _wrap_PyNs3UanPdp_GetNTaps, METH_NOARGS, NULL },
    {(char *) "CreateImpulsePdp", (PyCFunction) _wrap_PyNs3UanPdp_CreateImpulsePdp, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetTap", (PyCFunction) _wrap_PyNs3UanPdp_GetTap, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SumTapsFromMaxNc", (PyCFunction) _wrap_PyNs3UanPdp_SumTapsFromMaxNc, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetNTaps", (PyCFunction) _wrap_PyNs3UanPdp_SetNTaps, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetResolution", (PyCFunction) _wrap_PyNs3UanPdp_SetResolution, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetResolution", (PyCFunction) _wrap_PyNs3UanPdp_GetResolution, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPdp__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanPdp__tp_dealloc(PyNs3UanPdp *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UanPdp_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UanPdp_wrapper_registry.end()) {
        PyNs3UanPdp_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::UanPdp *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3UanPdp__tp_str(PyNs3UanPdp *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3UanPdp__tp_richcompare (PyNs3UanPdp *PYBINDGEN_UNUSED(self), PyNs3UanPdp *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPdp_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPdp_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPdp",            /* tp_name */
    sizeof(PyNs3UanPdp),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPdp__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3UanPdp__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPdp__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPdp_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPdp__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UanPhyListener_wrapper_registry;

void
PyNs3UanPhyListener__PythonHelper::NotifyCcaEnd()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyCcaEnd"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = (ns3::UanPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyCcaEnd", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyListener__PythonHelper::NotifyCcaStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyCcaStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = (ns3::UanPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyCcaStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyListener__PythonHelper::NotifyRxEndError()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndError"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = (ns3::UanPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndError", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyListener__PythonHelper::NotifyRxEndOk()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndOk"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = (ns3::UanPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndOk", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyListener__PythonHelper::NotifyRxStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = (ns3::UanPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyListener__PythonHelper::NotifyTxStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyTxStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = (ns3::UanPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyTxStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPhyListener__tp_init__0(PyNs3UanPhyListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyListener_Type)
    {
        self->obj = new PyNs3UanPhyListener__PythonHelper();
        ((PyNs3UanPhyListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanPhyListener' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3UanPhyListener__tp_init__1(PyNs3UanPhyListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyListener *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyListener_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyListener_Type)
    {
        self->obj = new PyNs3UanPhyListener__PythonHelper(*((PyNs3UanPhyListener *) arg0)->obj);
        ((PyNs3UanPhyListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanPhyListener' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3UanPhyListener__tp_init(PyNs3UanPhyListener *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyListener__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyListener__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyListener_NotifyCcaStart(PyNs3UanPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyCcaStart();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyListener_NotifyRxEndOk(PyNs3UanPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndOk();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyListener_NotifyCcaEnd(PyNs3UanPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyCcaEnd();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyListener_NotifyRxEndError(PyNs3UanPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndError();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyListener_NotifyTxStart(PyNs3UanPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyTxStart(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyListener_NotifyRxStart(PyNs3UanPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxStart();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3UanPhyListener_methods[] = {
    {(char *) "NotifyCcaStart", (PyCFunction) _wrap_PyNs3UanPhyListener_NotifyCcaStart, METH_NOARGS, NULL },
    {(char *) "NotifyRxEndOk", (PyCFunction) _wrap_PyNs3UanPhyListener_NotifyRxEndOk, METH_NOARGS, NULL },
    {(char *) "NotifyCcaEnd", (PyCFunction) _wrap_PyNs3UanPhyListener_NotifyCcaEnd, METH_NOARGS, NULL },
    {(char *) "NotifyRxEndError", (PyCFunction) _wrap_PyNs3UanPhyListener_NotifyRxEndError, METH_NOARGS, NULL },
    {(char *) "NotifyTxStart", (PyCFunction) _wrap_PyNs3UanPhyListener_NotifyTxStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyRxStart", (PyCFunction) _wrap_PyNs3UanPhyListener_NotifyRxStart, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyListener__tp_clear(PyNs3UanPhyListener *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UanPhyListener *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UanPhyListener__tp_traverse(PyNs3UanPhyListener *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPhyListener__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPhyListener__tp_dealloc(PyNs3UanPhyListener *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UanPhyListener_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UanPhyListener_wrapper_registry.end()) {
        PyNs3UanPhyListener_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyListener__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyListener__tp_richcompare (PyNs3UanPhyListener *PYBINDGEN_UNUSED(self), PyNs3UanPhyListener *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyListener_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyListener_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyListener",            /* tp_name */
    sizeof(PyNs3UanPhyListener),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyListener__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyListener__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyListener__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyListener__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyListener_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyListener, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyListener__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UanTxMode_wrapper_registry;


static int
_wrap_PyNs3UanTxMode__tp_init__0(PyNs3UanTxMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanTxMode *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanTxMode_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanTxMode(*((PyNs3UanTxMode *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3UanTxMode__tp_init__1(PyNs3UanTxMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanTxMode();
    return 0;
}

int _wrap_PyNs3UanTxMode__tp_init(PyNs3UanTxMode *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanTxMode__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanTxMode__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanTxMode_GetPhyRateSps(PyNs3UanTxMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetPhyRateSps();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTxMode_GetUid(PyNs3UanTxMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetUid();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTxMode_GetCenterFreqHz(PyNs3UanTxMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetCenterFreqHz();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTxMode_GetDataRateBps(PyNs3UanTxMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetDataRateBps();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTxMode_GetName(PyNs3UanTxMode *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTxMode_GetBandwidthHz(PyNs3UanTxMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBandwidthHz();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTxMode_GetModType(PyNs3UanTxMode *self)
{
    PyObject *py_retval;
    ns3::UanTxMode::ModulationType retval;
    
    retval = self->obj->GetModType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTxMode_GetConstellationSize(PyNs3UanTxMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetConstellationSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanTxMode__copy__(PyNs3UanTxMode *self)
{

    PyNs3UanTxMode *py_copy;
    py_copy = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_copy->obj = new ns3::UanTxMode(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3UanTxMode_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanTxMode_methods[] = {
    {(char *) "GetPhyRateSps", (PyCFunction) _wrap_PyNs3UanTxMode_GetPhyRateSps, METH_NOARGS, NULL },
    {(char *) "GetUid", (PyCFunction) _wrap_PyNs3UanTxMode_GetUid, METH_NOARGS, NULL },
    {(char *) "GetCenterFreqHz", (PyCFunction) _wrap_PyNs3UanTxMode_GetCenterFreqHz, METH_NOARGS, NULL },
    {(char *) "GetDataRateBps", (PyCFunction) _wrap_PyNs3UanTxMode_GetDataRateBps, METH_NOARGS, NULL },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3UanTxMode_GetName, METH_NOARGS, NULL },
    {(char *) "GetBandwidthHz", (PyCFunction) _wrap_PyNs3UanTxMode_GetBandwidthHz, METH_NOARGS, NULL },
    {(char *) "GetModType", (PyCFunction) _wrap_PyNs3UanTxMode_GetModType, METH_NOARGS, NULL },
    {(char *) "GetConstellationSize", (PyCFunction) _wrap_PyNs3UanTxMode_GetConstellationSize, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanTxMode__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanTxMode__tp_dealloc(PyNs3UanTxMode *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UanTxMode_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UanTxMode_wrapper_registry.end()) {
        PyNs3UanTxMode_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::UanTxMode *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3UanTxMode__tp_str(PyNs3UanTxMode *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3UanTxMode__tp_richcompare (PyNs3UanTxMode *PYBINDGEN_UNUSED(self), PyNs3UanTxMode *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanTxMode_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanTxMode_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanTxMode",            /* tp_name */
    sizeof(PyNs3UanTxMode),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanTxMode__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3UanTxMode__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanTxMode__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanTxMode_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanTxMode__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3UanTxModeFactory_wrapper_registry;


static int
_wrap_PyNs3UanTxModeFactory__tp_init__0(PyNs3UanTxModeFactory *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanTxModeFactory *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanTxModeFactory_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanTxModeFactory(*((PyNs3UanTxModeFactory *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3UanTxModeFactory__tp_init__1(PyNs3UanTxModeFactory *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanTxModeFactory();
    return 0;
}

int _wrap_PyNs3UanTxModeFactory__tp_init(PyNs3UanTxModeFactory *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanTxModeFactory__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanTxModeFactory__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyNs3UanTxModeFactory_GetMode__0(PyNs3UanTxModeFactory *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    const char *keywords[] = {"name", NULL};
    PyNs3UanTxMode *py_UanTxMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &name, &name_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::UanTxMode retval = ns3::UanTxModeFactory::GetMode(std::string(name, name_len));
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(retval);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = Py_BuildValue((char *) "N", py_UanTxMode);
    return py_retval;
}

PyObject *
_wrap_PyNs3UanTxModeFactory_GetMode__1(PyNs3UanTxModeFactory *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    unsigned int uid;
    const char *keywords[] = {"uid", NULL};
    PyNs3UanTxMode *py_UanTxMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &uid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::UanTxMode retval = ns3::UanTxModeFactory::GetMode(uid);
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(retval);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = Py_BuildValue((char *) "N", py_UanTxMode);
    return py_retval;
}

PyObject * _wrap_PyNs3UanTxModeFactory_GetMode(PyNs3UanTxModeFactory *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanTxModeFactory_GetMode__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanTxModeFactory_GetMode__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3UanTxModeFactory_CreateMode(PyNs3UanTxModeFactory *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::UanTxMode::ModulationType type;
    unsigned int dataRateBps;
    unsigned int phyRateSps;
    unsigned int cfHz;
    unsigned int bwHz;
    unsigned int constSize;
    const char *name;
    Py_ssize_t name_len;
    const char *keywords[] = {"type", "dataRateBps", "phyRateSps", "cfHz", "bwHz", "constSize", "name", NULL};
    PyNs3UanTxMode *py_UanTxMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iIIIIIs#", (char **) keywords, &type, &dataRateBps, &phyRateSps, &cfHz, &bwHz, &constSize, &name, &name_len)) {
        return NULL;
    }
    ns3::UanTxMode retval = ns3::UanTxModeFactory::CreateMode(type, dataRateBps, phyRateSps, cfHz, bwHz, constSize, std::string(name, name_len));
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(retval);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = Py_BuildValue((char *) "N", py_UanTxMode);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanTxModeFactory__copy__(PyNs3UanTxModeFactory *self)
{

    PyNs3UanTxModeFactory *py_copy;
    py_copy = PyObject_New(PyNs3UanTxModeFactory, &PyNs3UanTxModeFactory_Type);
    py_copy->obj = new ns3::UanTxModeFactory(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3UanTxModeFactory_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanTxModeFactory_methods[] = {
    {(char *) "GetMode", (PyCFunction) _wrap_PyNs3UanTxModeFactory_GetMode, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "CreateMode", (PyCFunction) _wrap_PyNs3UanTxModeFactory_CreateMode, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanTxModeFactory__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanTxModeFactory__tp_dealloc(PyNs3UanTxModeFactory *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3UanTxModeFactory_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3UanTxModeFactory_wrapper_registry.end()) {
        PyNs3UanTxModeFactory_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::UanTxModeFactory *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanTxModeFactory__tp_richcompare (PyNs3UanTxModeFactory *PYBINDGEN_UNUSED(self), PyNs3UanTxModeFactory *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanTxModeFactory_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanTxModeFactory_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanTxModeFactory",            /* tp_name */
    sizeof(PyNs3UanTxModeFactory),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanTxModeFactory__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanTxModeFactory__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanTxModeFactory_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanTxModeFactory__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





ns3::Ptr< ns3::DeviceEnergyModel >
PyNs3WifiRadioEnergyModelHelper__PythonHelper::DoInstall(ns3::Ptr< ns3::NetDevice > device, ns3::Ptr< ns3::EnergySource > source) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModelHelper *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::DeviceEnergyModel > retval;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3EnergySource *py_EnergySource;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3DeviceEnergyModel *tmp_DeviceEnergyModel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInstall"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj = const_cast< ns3::WifiRadioEnergyModelHelper* >((const ns3::WifiRadioEnergyModelHelper*) this);
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (device)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_NetDevice = NULL;
    } else {
        py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
        Py_INCREF(py_NetDevice);
    }
    
    if (py_NetDevice == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))), &PyNs3NetDevice_Type);
        py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
        py_NetDevice->inst_dict = NULL;
        py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::NetDevice *> (ns3::PeekPointer (device))->Ref();
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (device));
        PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
    }
    if (typeid(*(const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))) == typeid(PyNs3EnergySource__PythonHelper))
    {
        py_EnergySource = (PyNs3EnergySource*) (((PyNs3EnergySource__PythonHelper*) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))->m_pyself);
        py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
        Py_INCREF(py_EnergySource);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_EnergySource = NULL;
        } else {
            py_EnergySource = (PyNs3EnergySource *) wrapper_lookup_iter2->second;
            Py_INCREF(py_EnergySource);
        }
    
        if (py_EnergySource == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))), &PyNs3EnergySource_Type);
            py_EnergySource = PyObject_GC_New(PyNs3EnergySource, wrapper_type2);
            py_EnergySource->inst_dict = NULL;
            py_EnergySource->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))->Ref();
            py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
            PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySource->obj] = (PyObject *) py_EnergySource;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInstall", (char *) "NN", py_NetDevice, py_EnergySource);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3DeviceEnergyModel_Type, &tmp_DeviceEnergyModel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::DeviceEnergyModel  > (tmp_DeviceEnergyModel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModelHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3WifiRadioEnergyModelHelper__tp_init__0(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRadioEnergyModelHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRadioEnergyModelHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiRadioEnergyModelHelper_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModelHelper__PythonHelper(*((PyNs3WifiRadioEnergyModelHelper *) arg0)->obj);
        ((PyNs3WifiRadioEnergyModelHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiRadioEnergyModelHelper(*((PyNs3WifiRadioEnergyModelHelper *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3WifiRadioEnergyModelHelper__tp_init__1(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiRadioEnergyModelHelper_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModelHelper__PythonHelper();
        ((PyNs3WifiRadioEnergyModelHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiRadioEnergyModelHelper();
    }
    return 0;
}

int _wrap_PyNs3WifiRadioEnergyModelHelper__tp_init(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRadioEnergyModelHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRadioEnergyModelHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelHelper_Set(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *v;
    PyNs3WifiRadioEnergyModelHelper__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModelHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"name", "v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &v)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj)) : (self->obj->ns3::WifiRadioEnergyModelHelper::Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModelHelper_SetDepletionCallback(PyNs3WifiRadioEnergyModelHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl1> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl1> (callback);
    self->obj->SetDepletionCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiRadioEnergyModelHelper__copy__(PyNs3WifiRadioEnergyModelHelper *self)
{

    PyNs3WifiRadioEnergyModelHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiRadioEnergyModelHelper, &PyNs3WifiRadioEnergyModelHelper_Type);
    py_copy->obj = new ns3::WifiRadioEnergyModelHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DeviceEnergyModelHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRadioEnergyModelHelper_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelHelper_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDepletionCallback", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelHelper_SetDepletionCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModelHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiRadioEnergyModelHelper__tp_clear(PyNs3WifiRadioEnergyModelHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiRadioEnergyModelHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiRadioEnergyModelHelper__tp_traverse(PyNs3WifiRadioEnergyModelHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3WifiRadioEnergyModelHelper__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiRadioEnergyModelHelper__tp_dealloc(PyNs3WifiRadioEnergyModelHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DeviceEnergyModelHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DeviceEnergyModelHelper_wrapper_registry.end()) {
        PyNs3DeviceEnergyModelHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiRadioEnergyModelHelper__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRadioEnergyModelHelper__tp_richcompare (PyNs3WifiRadioEnergyModelHelper *PYBINDGEN_UNUSED(self), PyNs3WifiRadioEnergyModelHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRadioEnergyModelHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRadioEnergyModelHelper_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiRadioEnergyModelHelper",            /* tp_name */
    sizeof(PyNs3WifiRadioEnergyModelHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRadioEnergyModelHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiRadioEnergyModelHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiRadioEnergyModelHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRadioEnergyModelHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRadioEnergyModelHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiRadioEnergyModelHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRadioEnergyModelHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





ns3::Ptr< ns3::EnergySource >
PyNs3BasicEnergySourceHelper__PythonHelper::DoInstall(ns3::Ptr< ns3::Node > node) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySourceHelper *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::EnergySource > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3EnergySource *tmp_EnergySource;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInstall"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySourceHelper* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySourceHelper* >(m_pyself)->obj = const_cast< ns3::BasicEnergySourceHelper* >((const ns3::BasicEnergySourceHelper*) this);
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInstall", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySourceHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3EnergySource_Type, &tmp_EnergySource)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySourceHelper* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::EnergySource  > (tmp_EnergySource->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySourceHelper* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


static int
_wrap_PyNs3BasicEnergySourceHelper__tp_init__0(PyNs3BasicEnergySourceHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BasicEnergySourceHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BasicEnergySourceHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3BasicEnergySourceHelper_Type)
    {
        self->obj = new PyNs3BasicEnergySourceHelper__PythonHelper(*((PyNs3BasicEnergySourceHelper *) arg0)->obj);
        ((PyNs3BasicEnergySourceHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BasicEnergySourceHelper(*((PyNs3BasicEnergySourceHelper *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3BasicEnergySourceHelper__tp_init__1(PyNs3BasicEnergySourceHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3BasicEnergySourceHelper_Type)
    {
        self->obj = new PyNs3BasicEnergySourceHelper__PythonHelper();
        ((PyNs3BasicEnergySourceHelper__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BasicEnergySourceHelper();
    }
    return 0;
}

int _wrap_PyNs3BasicEnergySourceHelper__tp_init(PyNs3BasicEnergySourceHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3BasicEnergySourceHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BasicEnergySourceHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BasicEnergySourceHelper_Set(PyNs3BasicEnergySourceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *v;
    PyNs3BasicEnergySourceHelper__PythonHelper *helper_class = dynamic_cast<PyNs3BasicEnergySourceHelper__PythonHelper*> (self->obj);
    const char *keywords[] = {"name", "v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &v)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj)) : (self->obj->ns3::BasicEnergySourceHelper::Set(std::string(name, name_len), *((PyNs3AttributeValue *) v)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3BasicEnergySourceHelper__copy__(PyNs3BasicEnergySourceHelper *self)
{

    PyNs3BasicEnergySourceHelper *py_copy;
    py_copy = PyObject_GC_New(PyNs3BasicEnergySourceHelper, &PyNs3BasicEnergySourceHelper_Type);
    py_copy->obj = new ns3::BasicEnergySourceHelper(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3EnergySourceHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BasicEnergySourceHelper_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3BasicEnergySourceHelper_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BasicEnergySourceHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BasicEnergySourceHelper__tp_clear(PyNs3BasicEnergySourceHelper *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::BasicEnergySourceHelper *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3BasicEnergySourceHelper__tp_traverse(PyNs3BasicEnergySourceHelper *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3BasicEnergySourceHelper__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3BasicEnergySourceHelper__tp_dealloc(PyNs3BasicEnergySourceHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3EnergySourceHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3EnergySourceHelper_wrapper_registry.end()) {
        PyNs3EnergySourceHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BasicEnergySourceHelper__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BasicEnergySourceHelper__tp_richcompare (PyNs3BasicEnergySourceHelper *PYBINDGEN_UNUSED(self), PyNs3BasicEnergySourceHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BasicEnergySourceHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BasicEnergySourceHelper_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.BasicEnergySourceHelper",            /* tp_name */
    sizeof(PyNs3BasicEnergySourceHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BasicEnergySourceHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3BasicEnergySourceHelper__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BasicEnergySourceHelper__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BasicEnergySourceHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BasicEnergySourceHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BasicEnergySourceHelper, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BasicEnergySourceHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanHeaderCommon__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanHeaderCommon *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderCommon__PythonHelper *helper = dynamic_cast< PyNs3UanHeaderCommon__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3UanHeaderCommon__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderCommon *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = (ns3::UanHeaderCommon*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3UanHeaderCommon__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderCommon *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = const_cast< ns3::UanHeaderCommon* >((const ns3::UanHeaderCommon*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanHeaderCommon__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderCommon *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = const_cast< ns3::UanHeaderCommon* >((const ns3::UanHeaderCommon*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderCommon::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3UanHeaderCommon__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderCommon *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanHeaderCommon::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = const_cast< ns3::UanHeaderCommon* >((const ns3::UanHeaderCommon*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderCommon* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanHeaderCommon__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanHeaderCommon__tp_init__0(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanHeaderCommon *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanHeaderCommon_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderCommon_Type)
    {
        self->obj = new PyNs3UanHeaderCommon__PythonHelper(*((PyNs3UanHeaderCommon *) arg0)->obj);
        ((PyNs3UanHeaderCommon__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderCommon(*((PyNs3UanHeaderCommon *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderCommon__tp_init__1(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderCommon_Type)
    {
        self->obj = new PyNs3UanHeaderCommon__PythonHelper();
        ((PyNs3UanHeaderCommon__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderCommon();
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderCommon__tp_init__2(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanAddress *src;
    PyNs3UanAddress *dest;
    int type;
    const char *keywords[] = {"src", "dest", "type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!i", (char **) keywords, &PyNs3UanAddress_Type, &src, &PyNs3UanAddress_Type, &dest, &type)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderCommon_Type)
    {
        self->obj = new PyNs3UanHeaderCommon__PythonHelper(*((PyNs3UanAddress *) src)->obj, *((PyNs3UanAddress *) dest)->obj, type);
        ((PyNs3UanHeaderCommon__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderCommon(*((PyNs3UanAddress *) src)->obj, *((PyNs3UanAddress *) dest)->obj, type);
    }
    return 0;
}

int _wrap_PyNs3UanHeaderCommon__tp_init(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanHeaderCommon__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderCommon__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderCommon__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_SetDest(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanAddress *dest;
    const char *keywords[] = {"dest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &dest)) {
        return NULL;
    }
    self->obj->SetDest(*((PyNs3UanAddress *) dest)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_Serialize(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderCommon__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderCommon__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderCommon::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_SetSrc(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanAddress *src;
    const char *keywords[] = {"src", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &src)) {
        return NULL;
    }
    self->obj->SetSrc(*((PyNs3UanAddress *) src)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_Deserialize(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderCommon__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderCommon__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderCommon::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_GetSrc(PyNs3UanHeaderCommon *self)
{
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    ns3::UanAddress retval = self->obj->GetSrc();
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(retval);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = Py_BuildValue((char *) "N", py_UanAddress);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanHeaderCommon::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_GetType(PyNs3UanHeaderCommon *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_Print(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3UanHeaderCommon__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderCommon__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::UanHeaderCommon::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_GetInstanceTypeId(PyNs3UanHeaderCommon *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderCommon__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderCommon__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::UanHeaderCommon::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_GetSerializedSize(PyNs3UanHeaderCommon *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanHeaderCommon__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderCommon__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::UanHeaderCommon::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_SetType(PyNs3UanHeaderCommon *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    if (type > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderCommon_GetDest(PyNs3UanHeaderCommon *self)
{
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    ns3::UanAddress retval = self->obj->GetDest();
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(retval);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = Py_BuildValue((char *) "N", py_UanAddress);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanHeaderCommon__copy__(PyNs3UanHeaderCommon *self)
{

    PyNs3UanHeaderCommon *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanHeaderCommon, &PyNs3UanHeaderCommon_Type);
    py_copy->obj = new ns3::UanHeaderCommon(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanHeaderCommon_methods[] = {
    {(char *) "SetDest", (PyCFunction) _wrap_PyNs3UanHeaderCommon_SetDest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3UanHeaderCommon_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSrc", (PyCFunction) _wrap_PyNs3UanHeaderCommon_SetSrc, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3UanHeaderCommon_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSrc", (PyCFunction) _wrap_PyNs3UanHeaderCommon_GetSrc, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanHeaderCommon_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3UanHeaderCommon_GetType, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3UanHeaderCommon_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3UanHeaderCommon_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3UanHeaderCommon_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3UanHeaderCommon_SetType, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDest", (PyCFunction) _wrap_PyNs3UanHeaderCommon_GetDest, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanHeaderCommon__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanHeaderCommon__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanHeaderCommon__tp_clear(PyNs3UanHeaderCommon *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UanHeaderCommon *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UanHeaderCommon__tp_traverse(PyNs3UanHeaderCommon *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanHeaderCommon__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanHeaderCommon__tp_dealloc(PyNs3UanHeaderCommon *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanHeaderCommon__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanHeaderCommon__tp_richcompare (PyNs3UanHeaderCommon *PYBINDGEN_UNUSED(self), PyNs3UanHeaderCommon *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanHeaderCommon_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanHeaderCommon_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanHeaderCommon",            /* tp_name */
    sizeof(PyNs3UanHeaderCommon),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanHeaderCommon__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanHeaderCommon__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanHeaderCommon__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanHeaderCommon__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanHeaderCommon_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanHeaderCommon, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanHeaderCommon__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanHeaderRcAck__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcAck *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcAck__PythonHelper *helper = dynamic_cast< PyNs3UanHeaderRcAck__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3UanHeaderRcAck__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcAck *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = (ns3::UanHeaderRcAck*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3UanHeaderRcAck__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcAck *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcAck* >((const ns3::UanHeaderRcAck*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanHeaderRcAck__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcAck *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcAck* >((const ns3::UanHeaderRcAck*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcAck::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3UanHeaderRcAck__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcAck *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanHeaderRcAck::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcAck* >((const ns3::UanHeaderRcAck*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcAck* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanHeaderRcAck__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanHeaderRcAck__tp_init__0(PyNs3UanHeaderRcAck *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanHeaderRcAck *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanHeaderRcAck_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcAck_Type)
    {
        self->obj = new PyNs3UanHeaderRcAck__PythonHelper(*((PyNs3UanHeaderRcAck *) arg0)->obj);
        ((PyNs3UanHeaderRcAck__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcAck(*((PyNs3UanHeaderRcAck *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcAck__tp_init__1(PyNs3UanHeaderRcAck *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcAck_Type)
    {
        self->obj = new PyNs3UanHeaderRcAck__PythonHelper();
        ((PyNs3UanHeaderRcAck__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcAck();
    }
    return 0;
}

int _wrap_PyNs3UanHeaderRcAck__tp_init(PyNs3UanHeaderRcAck *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanHeaderRcAck__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcAck__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_GetFrameNo(PyNs3UanHeaderRcAck *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFrameNo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_Deserialize(PyNs3UanHeaderRcAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcAck__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcAck__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcAck::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanHeaderRcAck::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_Serialize(PyNs3UanHeaderRcAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcAck__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcAck__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcAck::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_SetFrameNo(PyNs3UanHeaderRcAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int frameNo;
    const char *keywords[] = {"frameNo", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frameNo)) {
        return NULL;
    }
    if (frameNo > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFrameNo(frameNo);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_AddNackedFrame(PyNs3UanHeaderRcAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int frame;
    const char *keywords[] = {"frame", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frame)) {
        return NULL;
    }
    if (frame > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->AddNackedFrame(frame);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_Print(PyNs3UanHeaderRcAck *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3UanHeaderRcAck__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcAck__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::UanHeaderRcAck::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_GetInstanceTypeId(PyNs3UanHeaderRcAck *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcAck__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcAck__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::UanHeaderRcAck::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_GetSerializedSize(PyNs3UanHeaderRcAck *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanHeaderRcAck__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcAck__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::UanHeaderRcAck::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcAck_GetNoNacks(PyNs3UanHeaderRcAck *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNoNacks();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanHeaderRcAck__copy__(PyNs3UanHeaderRcAck *self)
{

    PyNs3UanHeaderRcAck *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanHeaderRcAck, &PyNs3UanHeaderRcAck_Type);
    py_copy->obj = new ns3::UanHeaderRcAck(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanHeaderRcAck_methods[] = {
    {(char *) "GetFrameNo", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_GetFrameNo, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetFrameNo", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_SetFrameNo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AddNackedFrame", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_AddNackedFrame, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "GetNoNacks", (PyCFunction) _wrap_PyNs3UanHeaderRcAck_GetNoNacks, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanHeaderRcAck__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanHeaderRcAck__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanHeaderRcAck__tp_clear(PyNs3UanHeaderRcAck *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UanHeaderRcAck *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UanHeaderRcAck__tp_traverse(PyNs3UanHeaderRcAck *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanHeaderRcAck__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanHeaderRcAck__tp_dealloc(PyNs3UanHeaderRcAck *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanHeaderRcAck__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanHeaderRcAck__tp_richcompare (PyNs3UanHeaderRcAck *PYBINDGEN_UNUSED(self), PyNs3UanHeaderRcAck *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanHeaderRcAck_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanHeaderRcAck_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanHeaderRcAck",            /* tp_name */
    sizeof(PyNs3UanHeaderRcAck),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanHeaderRcAck__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanHeaderRcAck__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanHeaderRcAck__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanHeaderRcAck__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanHeaderRcAck_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanHeaderRcAck, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanHeaderRcAck__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanHeaderRcCts__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcCts *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcCts__PythonHelper *helper = dynamic_cast< PyNs3UanHeaderRcCts__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3UanHeaderRcCts__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcCts *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = (ns3::UanHeaderRcCts*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3UanHeaderRcCts__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcCts *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcCts* >((const ns3::UanHeaderRcCts*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanHeaderRcCts__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcCts *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcCts* >((const ns3::UanHeaderRcCts*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCts::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3UanHeaderRcCts__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcCts *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanHeaderRcCts::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcCts* >((const ns3::UanHeaderRcCts*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcCts* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanHeaderRcCts__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanHeaderRcCts__tp_init__0(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanHeaderRcCts *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanHeaderRcCts_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcCts_Type)
    {
        self->obj = new PyNs3UanHeaderRcCts__PythonHelper(*((PyNs3UanHeaderRcCts *) arg0)->obj);
        ((PyNs3UanHeaderRcCts__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcCts(*((PyNs3UanHeaderRcCts *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcCts__tp_init__1(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcCts_Type)
    {
        self->obj = new PyNs3UanHeaderRcCts__PythonHelper();
        ((PyNs3UanHeaderRcCts__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcCts();
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcCts__tp_init__2(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int frameNo;
    int retryNo;
    PyObject *rtsTs;
    ns3::Time rtsTs2;
    PyObject *delay;
    ns3::Time delay2;
    PyNs3UanAddress *addr;
    const char *keywords[] = {"frameNo", "retryNo", "rtsTs", "delay", "addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iiOOO!", (char **) keywords, &frameNo, &retryNo, &rtsTs, &delay, &PyNs3UanAddress_Type, &addr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (frameNo > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (retryNo > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (PyObject_IsInstance(rtsTs, (PyObject*) &PyNs3Time_Type)) {
        rtsTs2 = *((PyNs3Time *) rtsTs)->obj;
    } else if (PyObject_IsInstance(rtsTs, (PyObject*) &PyNs3Scalar_Type)) {
        rtsTs2 = *((PyNs3Scalar *) rtsTs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", rtsTs->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Time_Type)) {
        delay2 = *((PyNs3Time *) delay)->obj;
    } else if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Scalar_Type)) {
        delay2 = *((PyNs3Scalar *) delay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", delay->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcCts_Type)
    {
        self->obj = new PyNs3UanHeaderRcCts__PythonHelper(frameNo, retryNo, rtsTs2, delay2, *((PyNs3UanAddress *) addr)->obj);
        ((PyNs3UanHeaderRcCts__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcCts(frameNo, retryNo, rtsTs2, delay2, *((PyNs3UanAddress *) addr)->obj);
    }
    return 0;
}

int _wrap_PyNs3UanHeaderRcCts__tp_init(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanHeaderRcCts__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcCts__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcCts__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_SetRtsTimeStamp(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *timeStamp;
    ns3::Time timeStamp2;
    const char *keywords[] = {"timeStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &timeStamp)) {
        return NULL;
    }
    if (PyObject_IsInstance(timeStamp, (PyObject*) &PyNs3Time_Type)) {
        timeStamp2 = *((PyNs3Time *) timeStamp)->obj;
    } else if (PyObject_IsInstance(timeStamp, (PyObject*) &PyNs3Scalar_Type)) {
        timeStamp2 = *((PyNs3Scalar *) timeStamp)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", timeStamp->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetRtsTimeStamp(timeStamp2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_GetDelayToTx(PyNs3UanHeaderRcCts *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDelayToTx();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_Deserialize(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcCts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCts__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcCts::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_SetRetryNo(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int no;
    const char *keywords[] = {"no", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &no)) {
        return NULL;
    }
    if (no > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRetryNo(no);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_SetFrameNo(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int frameNo;
    const char *keywords[] = {"frameNo", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frameNo)) {
        return NULL;
    }
    if (frameNo > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFrameNo(frameNo);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanHeaderRcCts::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_Serialize(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcCts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCts__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcCts::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_GetRtsTimeStamp(PyNs3UanHeaderRcCts *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetRtsTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_GetAddress(PyNs3UanHeaderRcCts *self)
{
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    ns3::UanAddress retval = self->obj->GetAddress();
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(retval);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = Py_BuildValue((char *) "N", py_UanAddress);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_GetFrameNo(PyNs3UanHeaderRcCts *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFrameNo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_Print(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3UanHeaderRcCts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCts__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::UanHeaderRcCts::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_SetDelayToTx(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *delay;
    ns3::Time delay2;
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &delay)) {
        return NULL;
    }
    if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Time_Type)) {
        delay2 = *((PyNs3Time *) delay)->obj;
    } else if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Scalar_Type)) {
        delay2 = *((PyNs3Scalar *) delay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", delay->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetDelayToTx(delay2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_GetInstanceTypeId(PyNs3UanHeaderRcCts *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcCts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCts__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::UanHeaderRcCts::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_GetSerializedSize(PyNs3UanHeaderRcCts *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanHeaderRcCts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCts__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::UanHeaderRcCts::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_SetAddress(PyNs3UanHeaderRcCts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanAddress *addr;
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &addr)) {
        return NULL;
    }
    self->obj->SetAddress(*((PyNs3UanAddress *) addr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCts_GetRetryNo(PyNs3UanHeaderRcCts *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRetryNo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanHeaderRcCts__copy__(PyNs3UanHeaderRcCts *self)
{

    PyNs3UanHeaderRcCts *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanHeaderRcCts, &PyNs3UanHeaderRcCts_Type);
    py_copy->obj = new ns3::UanHeaderRcCts(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanHeaderRcCts_methods[] = {
    {(char *) "SetRtsTimeStamp", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_SetRtsTimeStamp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDelayToTx", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_GetDelayToTx, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRetryNo", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_SetRetryNo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetFrameNo", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_SetFrameNo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRtsTimeStamp", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_GetRtsTimeStamp, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_GetAddress, METH_NOARGS, NULL },
    {(char *) "GetFrameNo", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_GetFrameNo, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDelayToTx", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_SetDelayToTx, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRetryNo", (PyCFunction) _wrap_PyNs3UanHeaderRcCts_GetRetryNo, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanHeaderRcCts__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanHeaderRcCts__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanHeaderRcCts__tp_clear(PyNs3UanHeaderRcCts *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UanHeaderRcCts *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UanHeaderRcCts__tp_traverse(PyNs3UanHeaderRcCts *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanHeaderRcCts__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanHeaderRcCts__tp_dealloc(PyNs3UanHeaderRcCts *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanHeaderRcCts__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanHeaderRcCts__tp_richcompare (PyNs3UanHeaderRcCts *PYBINDGEN_UNUSED(self), PyNs3UanHeaderRcCts *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanHeaderRcCts_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanHeaderRcCts_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanHeaderRcCts",            /* tp_name */
    sizeof(PyNs3UanHeaderRcCts),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanHeaderRcCts__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanHeaderRcCts__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanHeaderRcCts__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanHeaderRcCts__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanHeaderRcCts_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanHeaderRcCts, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanHeaderRcCts__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanHeaderRcCtsGlobal__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcCtsGlobal *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcCtsGlobal__PythonHelper *helper = dynamic_cast< PyNs3UanHeaderRcCtsGlobal__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3UanHeaderRcCtsGlobal__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcCtsGlobal *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = (ns3::UanHeaderRcCtsGlobal*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3UanHeaderRcCtsGlobal__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcCtsGlobal *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcCtsGlobal* >((const ns3::UanHeaderRcCtsGlobal*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanHeaderRcCtsGlobal__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcCtsGlobal *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcCtsGlobal* >((const ns3::UanHeaderRcCtsGlobal*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcCtsGlobal::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3UanHeaderRcCtsGlobal__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcCtsGlobal *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanHeaderRcCtsGlobal::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcCtsGlobal* >((const ns3::UanHeaderRcCtsGlobal*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcCtsGlobal* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanHeaderRcCtsGlobal__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanHeaderRcCtsGlobal__tp_init__0(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanHeaderRcCtsGlobal *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanHeaderRcCtsGlobal_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcCtsGlobal_Type)
    {
        self->obj = new PyNs3UanHeaderRcCtsGlobal__PythonHelper(*((PyNs3UanHeaderRcCtsGlobal *) arg0)->obj);
        ((PyNs3UanHeaderRcCtsGlobal__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcCtsGlobal(*((PyNs3UanHeaderRcCtsGlobal *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcCtsGlobal__tp_init__1(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcCtsGlobal_Type)
    {
        self->obj = new PyNs3UanHeaderRcCtsGlobal__PythonHelper();
        ((PyNs3UanHeaderRcCtsGlobal__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcCtsGlobal();
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcCtsGlobal__tp_init__2(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *wt;
    ns3::Time wt2;
    PyObject *ts;
    ns3::Time ts2;
    int rate;
    int retryRate;
    const char *keywords[] = {"wt", "ts", "rate", "retryRate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "OOii", (char **) keywords, &wt, &ts, &rate, &retryRate)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (PyObject_IsInstance(wt, (PyObject*) &PyNs3Time_Type)) {
        wt2 = *((PyNs3Time *) wt)->obj;
    } else if (PyObject_IsInstance(wt, (PyObject*) &PyNs3Scalar_Type)) {
        wt2 = *((PyNs3Scalar *) wt)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", wt->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (PyObject_IsInstance(ts, (PyObject*) &PyNs3Time_Type)) {
        ts2 = *((PyNs3Time *) ts)->obj;
    } else if (PyObject_IsInstance(ts, (PyObject*) &PyNs3Scalar_Type)) {
        ts2 = *((PyNs3Scalar *) ts)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ts->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (rate > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (retryRate > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcCtsGlobal_Type)
    {
        self->obj = new PyNs3UanHeaderRcCtsGlobal__PythonHelper(wt2, ts2, rate, retryRate);
        ((PyNs3UanHeaderRcCtsGlobal__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcCtsGlobal(wt2, ts2, rate, retryRate);
    }
    return 0;
}

int _wrap_PyNs3UanHeaderRcCtsGlobal__tp_init(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanHeaderRcCtsGlobal__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcCtsGlobal__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcCtsGlobal__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_GetRetryRate(PyNs3UanHeaderRcCtsGlobal *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRetryRate();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_Deserialize(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcCtsGlobal__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCtsGlobal__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcCtsGlobal::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_GetRateNum(PyNs3UanHeaderRcCtsGlobal *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRateNum();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanHeaderRcCtsGlobal::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_Serialize(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcCtsGlobal__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCtsGlobal__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcCtsGlobal::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_SetRetryRate(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rate;
    const char *keywords[] = {"rate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rate)) {
        return NULL;
    }
    if (rate > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRetryRate(rate);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_GetWindowTime(PyNs3UanHeaderRcCtsGlobal *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetWindowTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_Print(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3UanHeaderRcCtsGlobal__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCtsGlobal__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::UanHeaderRcCtsGlobal::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_SetWindowTime(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *t;
    ns3::Time t2;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &t)) {
        return NULL;
    }
    if (PyObject_IsInstance(t, (PyObject*) &PyNs3Time_Type)) {
        t2 = *((PyNs3Time *) t)->obj;
    } else if (PyObject_IsInstance(t, (PyObject*) &PyNs3Scalar_Type)) {
        t2 = *((PyNs3Scalar *) t)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", t->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetWindowTime(t2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_SetRateNum(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int rate;
    const char *keywords[] = {"rate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &rate)) {
        return NULL;
    }
    if (rate > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRateNum(rate);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_GetInstanceTypeId(PyNs3UanHeaderRcCtsGlobal *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcCtsGlobal__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCtsGlobal__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::UanHeaderRcCtsGlobal::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_GetSerializedSize(PyNs3UanHeaderRcCtsGlobal *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanHeaderRcCtsGlobal__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcCtsGlobal__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::UanHeaderRcCtsGlobal::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_SetTxTimeStamp(PyNs3UanHeaderRcCtsGlobal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *timeStamp;
    ns3::Time timeStamp2;
    const char *keywords[] = {"timeStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &timeStamp)) {
        return NULL;
    }
    if (PyObject_IsInstance(timeStamp, (PyObject*) &PyNs3Time_Type)) {
        timeStamp2 = *((PyNs3Time *) timeStamp)->obj;
    } else if (PyObject_IsInstance(timeStamp, (PyObject*) &PyNs3Scalar_Type)) {
        timeStamp2 = *((PyNs3Scalar *) timeStamp)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", timeStamp->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetTxTimeStamp(timeStamp2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcCtsGlobal_GetTxTimeStamp(PyNs3UanHeaderRcCtsGlobal *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetTxTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanHeaderRcCtsGlobal__copy__(PyNs3UanHeaderRcCtsGlobal *self)
{

    PyNs3UanHeaderRcCtsGlobal *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanHeaderRcCtsGlobal, &PyNs3UanHeaderRcCtsGlobal_Type);
    py_copy->obj = new ns3::UanHeaderRcCtsGlobal(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanHeaderRcCtsGlobal_methods[] = {
    {(char *) "GetRetryRate", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_GetRetryRate, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRateNum", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_GetRateNum, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRetryRate", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_SetRetryRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetWindowTime", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_GetWindowTime, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWindowTime", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_SetWindowTime, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRateNum", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_SetRateNum, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetTxTimeStamp", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_SetTxTimeStamp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTxTimeStamp", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal_GetTxTimeStamp, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanHeaderRcCtsGlobal__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanHeaderRcCtsGlobal__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanHeaderRcCtsGlobal__tp_clear(PyNs3UanHeaderRcCtsGlobal *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UanHeaderRcCtsGlobal *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UanHeaderRcCtsGlobal__tp_traverse(PyNs3UanHeaderRcCtsGlobal *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanHeaderRcCtsGlobal__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanHeaderRcCtsGlobal__tp_dealloc(PyNs3UanHeaderRcCtsGlobal *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanHeaderRcCtsGlobal__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanHeaderRcCtsGlobal__tp_richcompare (PyNs3UanHeaderRcCtsGlobal *PYBINDGEN_UNUSED(self), PyNs3UanHeaderRcCtsGlobal *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanHeaderRcCtsGlobal_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanHeaderRcCtsGlobal_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanHeaderRcCtsGlobal",            /* tp_name */
    sizeof(PyNs3UanHeaderRcCtsGlobal),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanHeaderRcCtsGlobal__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanHeaderRcCtsGlobal__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanHeaderRcCtsGlobal__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanHeaderRcCtsGlobal__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanHeaderRcCtsGlobal_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanHeaderRcCtsGlobal, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanHeaderRcCtsGlobal__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanHeaderRcData__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcData *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcData__PythonHelper *helper = dynamic_cast< PyNs3UanHeaderRcData__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3UanHeaderRcData__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcData *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = (ns3::UanHeaderRcData*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3UanHeaderRcData__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcData *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcData* >((const ns3::UanHeaderRcData*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanHeaderRcData__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcData *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcData* >((const ns3::UanHeaderRcData*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcData::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3UanHeaderRcData__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcData *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanHeaderRcData::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcData* >((const ns3::UanHeaderRcData*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcData* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanHeaderRcData__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanHeaderRcData__tp_init__0(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanHeaderRcData *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanHeaderRcData_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcData_Type)
    {
        self->obj = new PyNs3UanHeaderRcData__PythonHelper(*((PyNs3UanHeaderRcData *) arg0)->obj);
        ((PyNs3UanHeaderRcData__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcData(*((PyNs3UanHeaderRcData *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcData__tp_init__1(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcData_Type)
    {
        self->obj = new PyNs3UanHeaderRcData__PythonHelper();
        ((PyNs3UanHeaderRcData__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcData();
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcData__tp_init__2(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int frameNum;
    PyObject *propDelay;
    ns3::Time propDelay2;
    const char *keywords[] = {"frameNum", "propDelay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO", (char **) keywords, &frameNum, &propDelay)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (frameNum > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (PyObject_IsInstance(propDelay, (PyObject*) &PyNs3Time_Type)) {
        propDelay2 = *((PyNs3Time *) propDelay)->obj;
    } else if (PyObject_IsInstance(propDelay, (PyObject*) &PyNs3Scalar_Type)) {
        propDelay2 = *((PyNs3Scalar *) propDelay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", propDelay->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcData_Type)
    {
        self->obj = new PyNs3UanHeaderRcData__PythonHelper(frameNum, propDelay2);
        ((PyNs3UanHeaderRcData__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcData(frameNum, propDelay2);
    }
    return 0;
}

int _wrap_PyNs3UanHeaderRcData__tp_init(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanHeaderRcData__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcData__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcData__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_SetPropDelay(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *propDelay;
    ns3::Time propDelay2;
    const char *keywords[] = {"propDelay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &propDelay)) {
        return NULL;
    }
    if (PyObject_IsInstance(propDelay, (PyObject*) &PyNs3Time_Type)) {
        propDelay2 = *((PyNs3Time *) propDelay)->obj;
    } else if (PyObject_IsInstance(propDelay, (PyObject*) &PyNs3Scalar_Type)) {
        propDelay2 = *((PyNs3Scalar *) propDelay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", propDelay->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetPropDelay(propDelay2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_Deserialize(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcData__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcData__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcData::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanHeaderRcData::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_Serialize(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcData__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcData__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcData::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_SetFrameNo(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int frameNum;
    const char *keywords[] = {"frameNum", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frameNum)) {
        return NULL;
    }
    if (frameNum > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFrameNo(frameNum);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_GetFrameNo(PyNs3UanHeaderRcData *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFrameNo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_Print(PyNs3UanHeaderRcData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3UanHeaderRcData__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcData__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::UanHeaderRcData::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_GetPropDelay(PyNs3UanHeaderRcData *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPropDelay();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_GetInstanceTypeId(PyNs3UanHeaderRcData *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcData__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcData__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::UanHeaderRcData::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcData_GetSerializedSize(PyNs3UanHeaderRcData *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanHeaderRcData__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcData__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::UanHeaderRcData::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanHeaderRcData__copy__(PyNs3UanHeaderRcData *self)
{

    PyNs3UanHeaderRcData *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanHeaderRcData, &PyNs3UanHeaderRcData_Type);
    py_copy->obj = new ns3::UanHeaderRcData(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanHeaderRcData_methods[] = {
    {(char *) "SetPropDelay", (PyCFunction) _wrap_PyNs3UanHeaderRcData_SetPropDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3UanHeaderRcData_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcData_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3UanHeaderRcData_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetFrameNo", (PyCFunction) _wrap_PyNs3UanHeaderRcData_SetFrameNo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFrameNo", (PyCFunction) _wrap_PyNs3UanHeaderRcData_GetFrameNo, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3UanHeaderRcData_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPropDelay", (PyCFunction) _wrap_PyNs3UanHeaderRcData_GetPropDelay, METH_NOARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcData_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3UanHeaderRcData_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanHeaderRcData__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanHeaderRcData__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanHeaderRcData__tp_clear(PyNs3UanHeaderRcData *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UanHeaderRcData *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UanHeaderRcData__tp_traverse(PyNs3UanHeaderRcData *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanHeaderRcData__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanHeaderRcData__tp_dealloc(PyNs3UanHeaderRcData *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanHeaderRcData__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanHeaderRcData__tp_richcompare (PyNs3UanHeaderRcData *PYBINDGEN_UNUSED(self), PyNs3UanHeaderRcData *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanHeaderRcData_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanHeaderRcData_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanHeaderRcData",            /* tp_name */
    sizeof(PyNs3UanHeaderRcData),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanHeaderRcData__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanHeaderRcData__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanHeaderRcData__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanHeaderRcData__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanHeaderRcData_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanHeaderRcData, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanHeaderRcData__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanHeaderRcRts__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcRts *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcRts__PythonHelper *helper = dynamic_cast< PyNs3UanHeaderRcRts__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3UanHeaderRcRts__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcRts *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = (ns3::UanHeaderRcRts*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3UanHeaderRcRts__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcRts *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcRts* >((const ns3::UanHeaderRcRts*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanHeaderRcRts__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcRts *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcRts* >((const ns3::UanHeaderRcRts*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanHeaderRcRts::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3UanHeaderRcRts__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanHeaderRcRts *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanHeaderRcRts::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = const_cast< ns3::UanHeaderRcRts* >((const ns3::UanHeaderRcRts*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanHeaderRcRts* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanHeaderRcRts__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanHeaderRcRts__tp_init__0(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanHeaderRcRts *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanHeaderRcRts_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcRts_Type)
    {
        self->obj = new PyNs3UanHeaderRcRts__PythonHelper(*((PyNs3UanHeaderRcRts *) arg0)->obj);
        ((PyNs3UanHeaderRcRts__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcRts(*((PyNs3UanHeaderRcRts *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcRts__tp_init__1(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcRts_Type)
    {
        self->obj = new PyNs3UanHeaderRcRts__PythonHelper();
        ((PyNs3UanHeaderRcRts__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcRts();
    }
    return 0;
}

static int
_wrap_PyNs3UanHeaderRcRts__tp_init__2(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int frameNo;
    int retryNo;
    int noFrames;
    int length;
    PyObject *ts;
    ns3::Time ts2;
    const char *keywords[] = {"frameNo", "retryNo", "noFrames", "length", "ts", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iiiiO", (char **) keywords, &frameNo, &retryNo, &noFrames, &length, &ts)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (frameNo > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (retryNo > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (noFrames > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (length > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (PyObject_IsInstance(ts, (PyObject*) &PyNs3Time_Type)) {
        ts2 = *((PyNs3Time *) ts)->obj;
    } else if (PyObject_IsInstance(ts, (PyObject*) &PyNs3Scalar_Type)) {
        ts2 = *((PyNs3Scalar *) ts)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ts->ob_type->tp_name);
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanHeaderRcRts_Type)
    {
        self->obj = new PyNs3UanHeaderRcRts__PythonHelper(frameNo, retryNo, noFrames, length, ts2);
        ((PyNs3UanHeaderRcRts__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanHeaderRcRts(frameNo, retryNo, noFrames, length, ts2);
    }
    return 0;
}

int _wrap_PyNs3UanHeaderRcRts__tp_init(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanHeaderRcRts__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcRts__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanHeaderRcRts__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_Deserialize(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcRts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcRts__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcRts::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_SetRetryNo(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int no;
    const char *keywords[] = {"no", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &no)) {
        return NULL;
    }
    if (no > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRetryNo(no);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_GetNoFrames(PyNs3UanHeaderRcRts *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNoFrames();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_GetLength(PyNs3UanHeaderRcRts *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanHeaderRcRts::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_Serialize(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3UanHeaderRcRts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcRts__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::UanHeaderRcRts::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_SetFrameNo(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int fno;
    const char *keywords[] = {"fno", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &fno)) {
        return NULL;
    }
    if (fno > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFrameNo(fno);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_Print(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3UanHeaderRcRts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcRts__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::UanHeaderRcRts::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_SetLength(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int length;
    const char *keywords[] = {"length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &length)) {
        return NULL;
    }
    if (length > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLength(length);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_GetFrameNo(PyNs3UanHeaderRcRts *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetFrameNo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_GetTimeStamp(PyNs3UanHeaderRcRts *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetTimeStamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_GetInstanceTypeId(PyNs3UanHeaderRcRts *self)
{
    PyObject *py_retval;
    PyNs3UanHeaderRcRts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcRts__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::UanHeaderRcRts::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_GetSerializedSize(PyNs3UanHeaderRcRts *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanHeaderRcRts__PythonHelper *helper_class = dynamic_cast<PyNs3UanHeaderRcRts__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::UanHeaderRcRts::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_SetNoFrames(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int no;
    const char *keywords[] = {"no", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &no)) {
        return NULL;
    }
    if (no > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNoFrames(no);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_GetRetryNo(PyNs3UanHeaderRcRts *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetRetryNo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanHeaderRcRts_SetTimeStamp(PyNs3UanHeaderRcRts *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *timeStamp;
    ns3::Time timeStamp2;
    const char *keywords[] = {"timeStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &timeStamp)) {
        return NULL;
    }
    if (PyObject_IsInstance(timeStamp, (PyObject*) &PyNs3Time_Type)) {
        timeStamp2 = *((PyNs3Time *) timeStamp)->obj;
    } else if (PyObject_IsInstance(timeStamp, (PyObject*) &PyNs3Scalar_Type)) {
        timeStamp2 = *((PyNs3Scalar *) timeStamp)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", timeStamp->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetTimeStamp(timeStamp2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanHeaderRcRts__copy__(PyNs3UanHeaderRcRts *self)
{

    PyNs3UanHeaderRcRts *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanHeaderRcRts, &PyNs3UanHeaderRcRts_Type);
    py_copy->obj = new ns3::UanHeaderRcRts(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanHeaderRcRts_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRetryNo", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_SetRetryNo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNoFrames", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_GetNoFrames, METH_NOARGS, NULL },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_GetLength, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetFrameNo", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_SetFrameNo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetLength", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_SetLength, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFrameNo", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_GetFrameNo, METH_NOARGS, NULL },
    {(char *) "GetTimeStamp", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_GetTimeStamp, METH_NOARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetNoFrames", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_SetNoFrames, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRetryNo", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_GetRetryNo, METH_NOARGS, NULL },
    {(char *) "SetTimeStamp", (PyCFunction) _wrap_PyNs3UanHeaderRcRts_SetTimeStamp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanHeaderRcRts__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanHeaderRcRts__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanHeaderRcRts__tp_clear(PyNs3UanHeaderRcRts *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::UanHeaderRcRts *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3UanHeaderRcRts__tp_traverse(PyNs3UanHeaderRcRts *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanHeaderRcRts__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanHeaderRcRts__tp_dealloc(PyNs3UanHeaderRcRts *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanHeaderRcRts__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanHeaderRcRts__tp_richcompare (PyNs3UanHeaderRcRts *PYBINDGEN_UNUSED(self), PyNs3UanHeaderRcRts *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanHeaderRcRts_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanHeaderRcRts_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanHeaderRcRts",            /* tp_name */
    sizeof(PyNs3UanHeaderRcRts),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanHeaderRcRts__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanHeaderRcRts__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanHeaderRcRts__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanHeaderRcRts__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanHeaderRcRts_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanHeaderRcRts, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanHeaderRcRts__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3UanMac__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'UanMac' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3UanMac_GetBroadcast(PyNs3UanMac *self)
{
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    ns3::Address retval = self->obj->GetBroadcast();
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMac_Clear(PyNs3UanMac *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMac_GetAddress(PyNs3UanMac *self)
{
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    ns3::Address retval = self->obj->GetAddress();
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMac_Enqueue(PyNs3UanMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    const char *keywords[] = {"pkt", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &pkt, &dest, &protocolNumber)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMac_AttachPhy(PyNs3UanMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *phy;
    ns3::UanPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMac_SetAddress(PyNs3UanMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanAddress *addr;
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &addr)) {
        return NULL;
    }
    self->obj->SetAddress(*((PyNs3UanAddress *) addr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMac_SetForwardUpCb(PyNs3UanMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl6> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl6> (cb);
    self->obj->SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3UanMac_methods[] = {
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3UanMac_GetBroadcast, METH_NOARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanMac_Clear, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3UanMac_GetAddress, METH_NOARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3UanMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AttachPhy", (PyCFunction) _wrap_PyNs3UanMac_AttachPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3UanMac_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetForwardUpCb", (PyCFunction) _wrap_PyNs3UanMac_SetForwardUpCb, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanMac__tp_clear(PyNs3UanMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanMac__tp_traverse(PyNs3UanMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UanMac__tp_dealloc(PyNs3UanMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanMac__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanMac__tp_richcompare (PyNs3UanMac *PYBINDGEN_UNUSED(self), PyNs3UanMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanMac_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanMac",            /* tp_name */
    sizeof(PyNs3UanMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanMacAloha__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanMacAloha *self)
{
    PyObject *py_retval;
    PyNs3UanMacAloha__PythonHelper *helper = dynamic_cast< PyNs3UanMacAloha__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacAloha__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanMacAloha *self)
{
    PyObject *py_retval;
    PyNs3UanMacAloha__PythonHelper *helper = dynamic_cast< PyNs3UanMacAloha__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacAloha__PythonHelper::_wrap_DoStart(PyNs3UanMacAloha *self)
{
    PyObject *py_retval;
    PyNs3UanMacAloha__PythonHelper *helper = dynamic_cast< PyNs3UanMacAloha__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacAloha__PythonHelper::_wrap_DoDispose(PyNs3UanMacAloha *self)
{
    PyObject *py_retval;
    PyNs3UanMacAloha__PythonHelper *helper = dynamic_cast< PyNs3UanMacAloha__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class UanMacAloha is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3UanMacAloha__PythonHelper::AttachPhy(ns3::Ptr< ns3::UanPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacAloha *self_obj_before;
    PyObject *py_retval;
    PyNs3UanPhy *py_UanPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AttachPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacAloha::AttachPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = (ns3::UanMacAloha*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanPhy = NULL;
    } else {
        py_UanPhy = (PyNs3UanPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanPhy);
    }
    
    if (py_UanPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy))), &PyNs3UanPhy_Type);
        py_UanPhy = PyObject_GC_New(PyNs3UanPhy, wrapper_type);
        py_UanPhy->inst_dict = NULL;
        py_UanPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy))->Ref();
        py_UanPhy->obj = const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhy->obj] = (PyObject *) py_UanPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AttachPhy", (char *) "N", py_UanPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacAloha__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacAloha *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacAloha::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = (ns3::UanMacAloha*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3UanMacAloha__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet > pkt, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacAloha *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::Enqueue(pkt, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = (ns3::UanMacAloha*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::Enqueue(pkt, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::Enqueue(pkt, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanMacAloha__PythonHelper::GetAddress()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacAloha *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = (ns3::UanMacAloha*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanMacAloha__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacAloha *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = const_cast< ns3::UanMacAloha* >((const ns3::UanMacAloha*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacAloha::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanMacAloha__PythonHelper::SetAddress(ns3::UanAddress addr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacAloha *self_obj_before;
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacAloha::SetAddress(addr);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = (ns3::UanMacAloha*) this;
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(addr);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_UanAddress);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


void
PyNs3UanMacAloha__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacAloha *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacAloha::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = (ns3::UanMacAloha*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacAloha* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanMacAloha__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanMacAloha__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacAloha__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacAloha__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanMacAloha__tp_init__0(PyNs3UanMacAloha *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanMacAloha *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanMacAloha_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanMacAloha_Type)
    {
        self->obj = new PyNs3UanMacAloha__PythonHelper(*((PyNs3UanMacAloha *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanMacAloha__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanMacAloha(*((PyNs3UanMacAloha *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanMacAloha__tp_init__1(PyNs3UanMacAloha *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanMacAloha_Type)
    {
        self->obj = new PyNs3UanMacAloha__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanMacAloha__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanMacAloha();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanMacAloha__tp_init(PyNs3UanMacAloha *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanMacAloha__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanMacAloha__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanMacAloha_GetBroadcast(PyNs3UanMacAloha *self)
{
    PyObject *py_retval;
    PyNs3UanMacAloha__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacAloha__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::UanMacAloha::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacAloha_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanMacAloha::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacAloha_GetAddress(PyNs3UanMacAloha *self)
{
    PyObject *py_retval;
    PyNs3UanMacAloha__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacAloha__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::UanMacAloha::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacAloha_SetForwardUpCb(PyNs3UanMacAloha *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl6> cb_cb_impl;
    PyNs3UanMacAloha__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacAloha__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl6> (cb);
    (helper_class == NULL)? (self->obj->SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::UanMacAloha::SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacAloha_Enqueue(PyNs3UanMacAloha *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3UanMacAloha__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacAloha__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &pkt, &dest, &protocolNumber)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber)) : (self->obj->ns3::UanMacAloha::Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacAloha_AttachPhy(PyNs3UanMacAloha *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *phy;
    ns3::UanPhy *phy_ptr;
    PyNs3UanMacAloha__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacAloha__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr))) : (self->obj->ns3::UanMacAloha::AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacAloha_SetAddress(PyNs3UanMacAloha *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanAddress *addr;
    PyNs3UanMacAloha__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacAloha__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &addr)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3UanAddress *) addr)->obj)) : (self->obj->ns3::UanMacAloha::SetAddress(*((PyNs3UanAddress *) addr)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacAloha_Clear(PyNs3UanMacAloha *self)
{
    PyObject *py_retval;
    PyNs3UanMacAloha__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacAloha__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Clear()) : (self->obj->ns3::UanMacAloha::Clear());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanMacAloha__copy__(PyNs3UanMacAloha *self)
{

    PyNs3UanMacAloha *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanMacAloha, &PyNs3UanMacAloha_Type);
    py_copy->obj = new ns3::UanMacAloha(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanMacAloha_methods[] = {
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3UanMacAloha_GetBroadcast, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanMacAloha_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3UanMacAloha_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetForwardUpCb", (PyCFunction) _wrap_PyNs3UanMacAloha_SetForwardUpCb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3UanMacAloha_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AttachPhy", (PyCFunction) _wrap_PyNs3UanMacAloha_AttachPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3UanMacAloha_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanMacAloha_Clear, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanMacAloha__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanMacAloha__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanMacAloha__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3UanMacAloha__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanMacAloha__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanMacAloha__tp_clear(PyNs3UanMacAloha *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanMacAloha *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanMacAloha__tp_traverse(PyNs3UanMacAloha *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanMacAloha__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanMacAloha__tp_dealloc(PyNs3UanMacAloha *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanMacAloha__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanMacAloha__tp_richcompare (PyNs3UanMacAloha *PYBINDGEN_UNUSED(self), PyNs3UanMacAloha *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanMacAloha_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanMacAloha_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanMacAloha",            /* tp_name */
    sizeof(PyNs3UanMacAloha),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanMacAloha__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanMacAloha__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanMacAloha__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanMacAloha__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanMacAloha_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanMacAloha, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanMacAloha__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanMacCw__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper = dynamic_cast< PyNs3UanMacCw__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacCw__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper = dynamic_cast< PyNs3UanMacCw__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacCw__PythonHelper::_wrap_DoStart(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper = dynamic_cast< PyNs3UanMacCw__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacCw__PythonHelper::_wrap_DoDispose(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper = dynamic_cast< PyNs3UanMacCw__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class UanMacCw is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3UanMacCw__PythonHelper::AttachPhy(ns3::Ptr< ns3::UanPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    PyNs3UanPhy *py_UanPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AttachPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::AttachPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanPhy = NULL;
    } else {
        py_UanPhy = (PyNs3UanPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanPhy);
    }
    
    if (py_UanPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy))), &PyNs3UanPhy_Type);
        py_UanPhy = PyObject_GC_New(PyNs3UanPhy, wrapper_type);
        py_UanPhy->inst_dict = NULL;
        py_UanPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy))->Ref();
        py_UanPhy->obj = const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhy->obj] = (PyObject *) py_UanPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AttachPhy", (char *) "N", py_UanPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3UanMacCw__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet > pkt, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::Enqueue(pkt, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::Enqueue(pkt, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::Enqueue(pkt, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanMacCw__PythonHelper::GetAddress()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanMacCw__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = const_cast< ns3::UanMacCw* >((const ns3::UanMacCw*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanMacCw__PythonHelper::GetCw()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetCw();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCw", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetCw();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetCw();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3UanMacCw__PythonHelper::GetSlotTime()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlotTime"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetSlotTime();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlotTime", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetSlotTime();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacCw::GetSlotTime();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanMacCw__PythonHelper::NotifyCcaEnd()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyCcaEnd"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::NotifyCcaEnd();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyCcaEnd", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::NotifyCcaStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyCcaStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::NotifyCcaStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyCcaStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::NotifyRxEndError()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndError"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::NotifyRxEndError();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndError", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::NotifyRxEndOk()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndOk"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::NotifyRxEndOk();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndOk", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::NotifyRxStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::NotifyRxStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::NotifyTxStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyTxStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::NotifyTxStart(duration);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyTxStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::SetAddress(ns3::UanAddress addr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::SetAddress(addr);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(addr);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_UanAddress);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::SetCw(uint32_t cw)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::SetCw(cw);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCw", (char *) "N", PyLong_FromUnsignedLong(cw));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


void
PyNs3UanMacCw__PythonHelper::SetSlotTime(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlotTime"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::SetSlotTime(duration);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlotTime", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacCw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacCw::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = (ns3::UanMacCw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacCw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanMacCw__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanMacCw__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacCw__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanMacCw__tp_init__0(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanMacCw *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanMacCw_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanMacCw_Type)
    {
        self->obj = new PyNs3UanMacCw__PythonHelper(*((PyNs3UanMacCw *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanMacCw__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanMacCw(*((PyNs3UanMacCw *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanMacCw__tp_init__1(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanMacCw_Type)
    {
        self->obj = new PyNs3UanMacCw__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanMacCw__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanMacCw();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanMacCw__tp_init(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanMacCw__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanMacCw__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanMacCw_NotifyCcaStart(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyCcaStart()) : (self->obj->ns3::UanMacCw::NotifyCcaStart());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_GetBroadcast(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::UanMacCw::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_NotifyRxEndOk(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyRxEndOk()) : (self->obj->ns3::UanMacCw::NotifyRxEndOk());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_SetSlotTime(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSlotTime(duration2)) : (self->obj->ns3::UanMacCw::SetSlotTime(duration2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_NotifyCcaEnd(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyCcaEnd()) : (self->obj->ns3::UanMacCw::NotifyCcaEnd());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_Clear(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Clear()) : (self->obj->ns3::UanMacCw::Clear());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_GetAddress(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::UanMacCw::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_NotifyRxEndError(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyRxEndError()) : (self->obj->ns3::UanMacCw::NotifyRxEndError());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_NotifyTxStart(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->NotifyTxStart(duration2)) : (self->obj->ns3::UanMacCw::NotifyTxStart(duration2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_Enqueue(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &pkt, &dest, &protocolNumber)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber)) : (self->obj->ns3::UanMacCw::Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_AttachPhy(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *phy;
    ns3::UanPhy *phy_ptr;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr))) : (self->obj->ns3::UanMacCw::AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_SetForwardUpCb(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl6> cb_cb_impl;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl6> (cb);
    (helper_class == NULL)? (self->obj->SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::UanMacCw::SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_GetSlotTime(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSlotTime()) : (self->obj->ns3::UanMacCw::GetSlotTime());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_SetAddress(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanAddress *addr;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &addr)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3UanAddress *) addr)->obj)) : (self->obj->ns3::UanMacCw::SetAddress(*((PyNs3UanAddress *) addr)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_SetCw(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int cw;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    const char *keywords[] = {"cw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &cw)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCw(cw)) : (self->obj->ns3::UanMacCw::SetCw(cw));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanMacCw::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_NotifyRxStart(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->NotifyRxStart()) : (self->obj->ns3::UanMacCw::NotifyRxStart());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacCw_GetCw(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanMacCw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacCw__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetCw()) : (self->obj->ns3::UanMacCw::GetCw());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_Dispose(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    
    self->obj->Dispose();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_Start(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    
    self->obj->Start();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::UanMacCw::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_GetAttribute(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    self->obj->GetAttribute(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_GetObject__lt__ns3__Object__gt__(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Object > retval;
    PyNs3TypeId *tid;
    const char *keywords[] = {"tid", NULL};
    PyNs3Object *py_Object;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TypeId_Type, &tid)) {
        return NULL;
    }
    retval = self->obj->GetObject< ns3::Object >(*((PyNs3TypeId *) tid)->obj);
    if (!(const_cast<ns3::Object *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Object *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Object__PythonHelper))
    {
        py_Object = reinterpret_cast< PyNs3Object* >(reinterpret_cast< PyNs3Object__PythonHelper* >(const_cast<ns3::Object *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Object->obj = const_cast<ns3::Object *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Object);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Object *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Object = NULL;
        } else {
            py_Object = (PyNs3Object *) wrapper_lookup_iter->second;
            Py_INCREF(py_Object);
        }
    
        if (py_Object == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Object *> (ns3::PeekPointer (retval)))), &PyNs3Object_Type);
            py_Object = PyObject_GC_New(PyNs3Object, wrapper_type);
            py_Object->inst_dict = NULL;
            py_Object->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Object *> (ns3::PeekPointer (retval))->Ref();
            py_Object->obj = const_cast<ns3::Object *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Object->obj] = (PyObject *) py_Object;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Object);
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_SetAttribute(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    self->obj->SetAttribute(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_SetAttributeFailSafe(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    retval = self->obj->SetAttributeFailSafe(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_AggregateObject(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Object *other;
    ns3::Object *other_ptr;
    const char *keywords[] = {"other", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Object_Type, &other)) {
        return NULL;
    }
    other_ptr = (other ? other->obj : NULL);
    self->obj->AggregateObject(ns3::Ptr< ns3::Object  > (other_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_TraceDisconnectWithoutContext(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"name", "cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    retval = self->obj->TraceDisconnectWithoutContext(std::string(name, name_len), *((PyNs3CallbackBase *) cb)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_TraceConnectWithoutContext(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"name", "cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    retval = self->obj->TraceConnectWithoutContext(std::string(name, name_len), *((PyNs3CallbackBase *) cb)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_TraceConnect(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    const char *context;
    Py_ssize_t context_len;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"name", "context", "cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#O!", (char **) keywords, &name, &name_len, &context, &context_len, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    retval = self->obj->TraceConnect(std::string(name, name_len), std::string(context, context_len), *((PyNs3CallbackBase *) cb)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_GetAttributeFailSafe(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *attribute;
    const char *keywords[] = {"name", "attribute", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &attribute)) {
        return NULL;
    }
    retval = self->obj->GetAttributeFailSafe(std::string(name, name_len), *((PyNs3AttributeValue *) attribute)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_TraceDisconnect(PyNs3UanMacCw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *name;
    Py_ssize_t name_len;
    const char *context;
    Py_ssize_t context_len;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"name", "context", "cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#O!", (char **) keywords, &name, &name_len, &context, &context_len, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    retval = self->obj->TraceDisconnect(std::string(name, name_len), std::string(context, context_len), *((PyNs3CallbackBase *) cb)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
_wrap_PyNs3UanMacCw_GetAggregateIterator(PyNs3UanMacCw *self)
{
    PyObject *py_retval;
    PyNs3ObjectAggregateIterator *py_AggregateIterator;
    
    ns3::Object::AggregateIterator retval = self->obj->GetAggregateIterator();
    py_AggregateIterator = PyObject_New(PyNs3ObjectAggregateIterator, &PyNs3ObjectAggregateIterator_Type);
    py_AggregateIterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_AggregateIterator->obj = new ns3::Object::AggregateIterator(retval);
    PyNs3ObjectAggregateIterator_wrapper_registry[(void *) py_AggregateIterator->obj] = (PyObject *) py_AggregateIterator;
    py_retval = Py_BuildValue((char *) "N", py_AggregateIterator);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanMacCw__copy__(PyNs3UanMacCw *self)
{

    PyNs3UanMacCw *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanMacCw, &PyNs3UanMacCw_Type);
    py_copy->obj = new ns3::UanMacCw(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanMacCw_methods[] = {
    {(char *) "NotifyCcaStart", (PyCFunction) _wrap_PyNs3UanMacCw_NotifyCcaStart, METH_NOARGS, NULL },
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3UanMacCw_GetBroadcast, METH_NOARGS, NULL },
    {(char *) "NotifyRxEndOk", (PyCFunction) _wrap_PyNs3UanMacCw_NotifyRxEndOk, METH_NOARGS, NULL },
    {(char *) "SetSlotTime", (PyCFunction) _wrap_PyNs3UanMacCw_SetSlotTime, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyCcaEnd", (PyCFunction) _wrap_PyNs3UanMacCw_NotifyCcaEnd, METH_NOARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanMacCw_Clear, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3UanMacCw_GetAddress, METH_NOARGS, NULL },
    {(char *) "NotifyRxEndError", (PyCFunction) _wrap_PyNs3UanMacCw_NotifyRxEndError, METH_NOARGS, NULL },
    {(char *) "NotifyTxStart", (PyCFunction) _wrap_PyNs3UanMacCw_NotifyTxStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3UanMacCw_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AttachPhy", (PyCFunction) _wrap_PyNs3UanMacCw_AttachPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetForwardUpCb", (PyCFunction) _wrap_PyNs3UanMacCw_SetForwardUpCb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSlotTime", (PyCFunction) _wrap_PyNs3UanMacCw_GetSlotTime, METH_NOARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3UanMacCw_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCw", (PyCFunction) _wrap_PyNs3UanMacCw_SetCw, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanMacCw_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyRxStart", (PyCFunction) _wrap_PyNs3UanMacCw_NotifyRxStart, METH_NOARGS, NULL },
    {(char *) "GetCw", (PyCFunction) _wrap_PyNs3UanMacCw_GetCw, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanMacCw__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanMacCw__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanMacCw__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3UanMacCw__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "Dispose", (PyCFunction) _wrap_PyNs3UanMacCw_Dispose, METH_NOARGS, NULL },
    {(char *) "Start", (PyCFunction) _wrap_PyNs3UanMacCw_Start, METH_NOARGS, NULL },
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3UanMacCw_Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetAttribute", (PyCFunction) _wrap_PyNs3UanMacCw_GetAttribute, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetObject", (PyCFunction) _wrap_PyNs3UanMacCw_GetObject__lt__ns3__Object__gt__, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAttribute", (PyCFunction) _wrap_PyNs3UanMacCw_SetAttribute, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAttributeFailSafe", (PyCFunction) _wrap_PyNs3UanMacCw_SetAttributeFailSafe, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AggregateObject", (PyCFunction) _wrap_PyNs3UanMacCw_AggregateObject, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TraceDisconnectWithoutContext", (PyCFunction) _wrap_PyNs3UanMacCw_TraceDisconnectWithoutContext, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TraceConnectWithoutContext", (PyCFunction) _wrap_PyNs3UanMacCw_TraceConnectWithoutContext, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TraceConnect", (PyCFunction) _wrap_PyNs3UanMacCw_TraceConnect, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAttributeFailSafe", (PyCFunction) _wrap_PyNs3UanMacCw_GetAttributeFailSafe, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TraceDisconnect", (PyCFunction) _wrap_PyNs3UanMacCw_TraceDisconnect, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAggregateIterator", (PyCFunction) _wrap_PyNs3UanMacCw_GetAggregateIterator, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanMacCw__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanMacCw__tp_clear(PyNs3UanMacCw *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanMacCw *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanMacCw__tp_traverse(PyNs3UanMacCw *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanMacCw__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanMacCw__tp_dealloc(PyNs3UanMacCw *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanMacCw__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanMacCw__tp_richcompare (PyNs3UanMacCw *PYBINDGEN_UNUSED(self), PyNs3UanMacCw *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanMacCw_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanMacCw_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanMacCw",            /* tp_name */
    sizeof(PyNs3UanMacCw),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanMacCw__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanMacCw__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanMacCw__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanMacCw__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanMacCw_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanMacCw, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanMacCw__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanMacRc__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanMacRc *self)
{
    PyObject *py_retval;
    PyNs3UanMacRc__PythonHelper *helper = dynamic_cast< PyNs3UanMacRc__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacRc__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanMacRc *self)
{
    PyObject *py_retval;
    PyNs3UanMacRc__PythonHelper *helper = dynamic_cast< PyNs3UanMacRc__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacRc__PythonHelper::_wrap_DoStart(PyNs3UanMacRc *self)
{
    PyObject *py_retval;
    PyNs3UanMacRc__PythonHelper *helper = dynamic_cast< PyNs3UanMacRc__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacRc__PythonHelper::_wrap_DoDispose(PyNs3UanMacRc *self)
{
    PyObject *py_retval;
    PyNs3UanMacRc__PythonHelper *helper = dynamic_cast< PyNs3UanMacRc__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class UanMacRc is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3UanMacRc__PythonHelper::AttachPhy(ns3::Ptr< ns3::UanPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRc *self_obj_before;
    PyObject *py_retval;
    PyNs3UanPhy *py_UanPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AttachPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacRc::AttachPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = (ns3::UanMacRc*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanPhy = NULL;
    } else {
        py_UanPhy = (PyNs3UanPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanPhy);
    }
    
    if (py_UanPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy))), &PyNs3UanPhy_Type);
        py_UanPhy = PyObject_GC_New(PyNs3UanPhy, wrapper_type);
        py_UanPhy->inst_dict = NULL;
        py_UanPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy))->Ref();
        py_UanPhy->obj = const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhy->obj] = (PyObject *) py_UanPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AttachPhy", (char *) "N", py_UanPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacRc__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRc *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacRc::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = (ns3::UanMacRc*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3UanMacRc__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet > pkt, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRc *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::Enqueue(pkt, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = (ns3::UanMacRc*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::Enqueue(pkt, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::Enqueue(pkt, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanMacRc__PythonHelper::GetAddress()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRc *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = (ns3::UanMacRc*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanMacRc__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRc *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = const_cast< ns3::UanMacRc* >((const ns3::UanMacRc*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRc::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanMacRc__PythonHelper::SetAddress(ns3::UanAddress addr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRc *self_obj_before;
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacRc::SetAddress(addr);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = (ns3::UanMacRc*) this;
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(addr);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_UanAddress);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


void
PyNs3UanMacRc__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRc *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacRc::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = (ns3::UanMacRc*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRc* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanMacRc__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanMacRc__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacRc__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacRc__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanMacRc__tp_init__0(PyNs3UanMacRc *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanMacRc *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanMacRc_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanMacRc_Type)
    {
        self->obj = new PyNs3UanMacRc__PythonHelper(*((PyNs3UanMacRc *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanMacRc__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanMacRc(*((PyNs3UanMacRc *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanMacRc__tp_init__1(PyNs3UanMacRc *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanMacRc_Type)
    {
        self->obj = new PyNs3UanMacRc__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanMacRc__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanMacRc();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanMacRc__tp_init(PyNs3UanMacRc *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanMacRc__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanMacRc__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanMacRc_GetBroadcast(PyNs3UanMacRc *self)
{
    PyObject *py_retval;
    PyNs3UanMacRc__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRc__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::UanMacRc::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRc_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanMacRc::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRc_GetAddress(PyNs3UanMacRc *self)
{
    PyObject *py_retval;
    PyNs3UanMacRc__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRc__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::UanMacRc::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRc_SetForwardUpCb(PyNs3UanMacRc *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl6> cb_cb_impl;
    PyNs3UanMacRc__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRc__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl6> (cb);
    (helper_class == NULL)? (self->obj->SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::UanMacRc::SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRc_Enqueue(PyNs3UanMacRc *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3UanMacRc__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRc__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &pkt, &dest, &protocolNumber)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber)) : (self->obj->ns3::UanMacRc::Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRc_AttachPhy(PyNs3UanMacRc *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *phy;
    ns3::UanPhy *phy_ptr;
    PyNs3UanMacRc__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRc__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr))) : (self->obj->ns3::UanMacRc::AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRc_SetAddress(PyNs3UanMacRc *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanAddress *addr;
    PyNs3UanMacRc__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRc__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &addr)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3UanAddress *) addr)->obj)) : (self->obj->ns3::UanMacRc::SetAddress(*((PyNs3UanAddress *) addr)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRc_Clear(PyNs3UanMacRc *self)
{
    PyObject *py_retval;
    PyNs3UanMacRc__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRc__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Clear()) : (self->obj->ns3::UanMacRc::Clear());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanMacRc__copy__(PyNs3UanMacRc *self)
{

    PyNs3UanMacRc *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanMacRc, &PyNs3UanMacRc_Type);
    py_copy->obj = new ns3::UanMacRc(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanMacRc_methods[] = {
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3UanMacRc_GetBroadcast, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanMacRc_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3UanMacRc_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetForwardUpCb", (PyCFunction) _wrap_PyNs3UanMacRc_SetForwardUpCb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3UanMacRc_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AttachPhy", (PyCFunction) _wrap_PyNs3UanMacRc_AttachPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3UanMacRc_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanMacRc_Clear, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanMacRc__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanMacRc__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanMacRc__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3UanMacRc__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanMacRc__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanMacRc__tp_clear(PyNs3UanMacRc *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanMacRc *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanMacRc__tp_traverse(PyNs3UanMacRc *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanMacRc__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanMacRc__tp_dealloc(PyNs3UanMacRc *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanMacRc__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanMacRc__tp_richcompare (PyNs3UanMacRc *PYBINDGEN_UNUSED(self), PyNs3UanMacRc *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanMacRc_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanMacRc_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanMacRc",            /* tp_name */
    sizeof(PyNs3UanMacRc),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanMacRc__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanMacRc__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanMacRc__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanMacRc__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanMacRc_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanMacRc, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanMacRc__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanMacRcGw__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanMacRcGw *self)
{
    PyObject *py_retval;
    PyNs3UanMacRcGw__PythonHelper *helper = dynamic_cast< PyNs3UanMacRcGw__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacRcGw__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanMacRcGw *self)
{
    PyObject *py_retval;
    PyNs3UanMacRcGw__PythonHelper *helper = dynamic_cast< PyNs3UanMacRcGw__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacRcGw__PythonHelper::_wrap_DoStart(PyNs3UanMacRcGw *self)
{
    PyObject *py_retval;
    PyNs3UanMacRcGw__PythonHelper *helper = dynamic_cast< PyNs3UanMacRcGw__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanMacRcGw__PythonHelper::_wrap_DoDispose(PyNs3UanMacRcGw *self)
{
    PyObject *py_retval;
    PyNs3UanMacRcGw__PythonHelper *helper = dynamic_cast< PyNs3UanMacRcGw__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class UanMacRcGw is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3UanMacRcGw__PythonHelper::AttachPhy(ns3::Ptr< ns3::UanPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRcGw *self_obj_before;
    PyObject *py_retval;
    PyNs3UanPhy *py_UanPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AttachPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacRcGw::AttachPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = (ns3::UanMacRcGw*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanPhy = NULL;
    } else {
        py_UanPhy = (PyNs3UanPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanPhy);
    }
    
    if (py_UanPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy))), &PyNs3UanPhy_Type);
        py_UanPhy = PyObject_GC_New(PyNs3UanPhy, wrapper_type);
        py_UanPhy->inst_dict = NULL;
        py_UanPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy))->Ref();
        py_UanPhy->obj = const_cast<ns3::UanPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhy->obj] = (PyObject *) py_UanPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AttachPhy", (char *) "N", py_UanPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacRcGw__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRcGw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacRcGw::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = (ns3::UanMacRcGw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3UanMacRcGw__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet > pkt, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRcGw *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::Enqueue(pkt, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = (ns3::UanMacRcGw*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::Enqueue(pkt, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::Enqueue(pkt, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanMacRcGw__PythonHelper::GetAddress()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRcGw *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = (ns3::UanMacRcGw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanMacRcGw__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRcGw *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = const_cast< ns3::UanMacRcGw* >((const ns3::UanMacRcGw*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanMacRcGw::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanMacRcGw__PythonHelper::SetAddress(ns3::UanAddress addr)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRcGw *self_obj_before;
    PyObject *py_retval;
    PyNs3UanAddress *py_UanAddress;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacRcGw::SetAddress(addr);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = (ns3::UanMacRcGw*) this;
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(addr);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_UanAddress);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


void
PyNs3UanMacRcGw__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanMacRcGw *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanMacRcGw::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = (ns3::UanMacRcGw*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanMacRcGw* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanMacRcGw__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanMacRcGw__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacRcGw__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanMacRcGw__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanMacRcGw__tp_init__0(PyNs3UanMacRcGw *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanMacRcGw *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanMacRcGw_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanMacRcGw_Type)
    {
        self->obj = new PyNs3UanMacRcGw__PythonHelper(*((PyNs3UanMacRcGw *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanMacRcGw__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanMacRcGw(*((PyNs3UanMacRcGw *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanMacRcGw__tp_init__1(PyNs3UanMacRcGw *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanMacRcGw_Type)
    {
        self->obj = new PyNs3UanMacRcGw__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanMacRcGw__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanMacRcGw();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanMacRcGw__tp_init(PyNs3UanMacRcGw *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanMacRcGw__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanMacRcGw__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanMacRcGw_GetBroadcast(PyNs3UanMacRcGw *self)
{
    PyObject *py_retval;
    PyNs3UanMacRcGw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRcGw__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::UanMacRcGw::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRcGw_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanMacRcGw::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRcGw_GetAddress(PyNs3UanMacRcGw *self)
{
    PyObject *py_retval;
    PyNs3UanMacRcGw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRcGw__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::UanMacRcGw::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRcGw_SetForwardUpCb(PyNs3UanMacRcGw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl6> cb_cb_impl;
    PyNs3UanMacRcGw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRcGw__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl6> (cb);
    (helper_class == NULL)? (self->obj->SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::UanMacRcGw::SetForwardUpCb(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRcGw_Enqueue(PyNs3UanMacRcGw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3UanMacRcGw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRcGw__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &pkt, &dest, &protocolNumber)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber)) : (self->obj->ns3::UanMacRcGw::Enqueue(ns3::Ptr< ns3::Packet  > (pkt_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRcGw_AttachPhy(PyNs3UanMacRcGw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *phy;
    ns3::UanPhy *phy_ptr;
    PyNs3UanMacRcGw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRcGw__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr))) : (self->obj->ns3::UanMacRcGw::AttachPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRcGw_SetAddress(PyNs3UanMacRcGw *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanAddress *addr;
    PyNs3UanMacRcGw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRcGw__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanAddress_Type, &addr)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3UanAddress *) addr)->obj)) : (self->obj->ns3::UanMacRcGw::SetAddress(*((PyNs3UanAddress *) addr)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanMacRcGw_Clear(PyNs3UanMacRcGw *self)
{
    PyObject *py_retval;
    PyNs3UanMacRcGw__PythonHelper *helper_class = dynamic_cast<PyNs3UanMacRcGw__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Clear()) : (self->obj->ns3::UanMacRcGw::Clear());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanMacRcGw__copy__(PyNs3UanMacRcGw *self)
{

    PyNs3UanMacRcGw *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanMacRcGw, &PyNs3UanMacRcGw_Type);
    py_copy->obj = new ns3::UanMacRcGw(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanMacRcGw_methods[] = {
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3UanMacRcGw_GetBroadcast, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanMacRcGw_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3UanMacRcGw_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetForwardUpCb", (PyCFunction) _wrap_PyNs3UanMacRcGw_SetForwardUpCb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3UanMacRcGw_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AttachPhy", (PyCFunction) _wrap_PyNs3UanMacRcGw_AttachPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3UanMacRcGw_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanMacRcGw_Clear, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanMacRcGw__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanMacRcGw__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanMacRcGw__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3UanMacRcGw__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanMacRcGw__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanMacRcGw__tp_clear(PyNs3UanMacRcGw *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanMacRcGw *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanMacRcGw__tp_traverse(PyNs3UanMacRcGw *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanMacRcGw__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanMacRcGw__tp_dealloc(PyNs3UanMacRcGw *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanMacRcGw__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanMacRcGw__tp_richcompare (PyNs3UanMacRcGw *PYBINDGEN_UNUSED(self), PyNs3UanMacRcGw *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanMacRcGw_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanMacRcGw_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanMacRcGw",            /* tp_name */
    sizeof(PyNs3UanMacRcGw),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanMacRcGw__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanMacRcGw__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanMacRcGw__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanMacRcGw__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanMacRcGw_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanMacRcGw, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanMacRcGw__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanNoiseModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanNoiseModel *self)
{
    PyObject *py_retval;
    PyNs3UanNoiseModel__PythonHelper *helper = dynamic_cast< PyNs3UanNoiseModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanNoiseModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanNoiseModel *self)
{
    PyObject *py_retval;
    PyNs3UanNoiseModel__PythonHelper *helper = dynamic_cast< PyNs3UanNoiseModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanNoiseModel__PythonHelper::_wrap_DoStart(PyNs3UanNoiseModel *self)
{
    PyObject *py_retval;
    PyNs3UanNoiseModel__PythonHelper *helper = dynamic_cast< PyNs3UanNoiseModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3UanNoiseModel__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNoiseModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanNoiseModel::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = (ns3::UanNoiseModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNoiseModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNoiseModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanNoiseModel::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = (ns3::UanNoiseModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

double
PyNs3UanNoiseModel__PythonHelper::GetNoiseDbHz(double fKhz) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNoiseModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNoiseDbHz"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = const_cast< ns3::UanNoiseModel* >((const ns3::UanNoiseModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNoiseDbHz", (char *) "d", fKhz);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3UanNoiseModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanNoiseModel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNoiseModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNoiseModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanNoiseModel__tp_init__0(PyNs3UanNoiseModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanNoiseModel_Type)
    {
        self->obj = new PyNs3UanNoiseModel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanNoiseModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanNoiseModel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3UanNoiseModel__tp_init__1(PyNs3UanNoiseModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanNoiseModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanNoiseModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanNoiseModel_Type)
    {
        self->obj = new PyNs3UanNoiseModel__PythonHelper(*((PyNs3UanNoiseModel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanNoiseModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanNoiseModel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3UanNoiseModel__tp_init(PyNs3UanNoiseModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanNoiseModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanNoiseModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanNoiseModel_Clear(PyNs3UanNoiseModel *self)
{
    PyObject *py_retval;
    PyNs3UanNoiseModel__PythonHelper *helper_class = dynamic_cast<PyNs3UanNoiseModel__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Clear()) : (self->obj->ns3::UanNoiseModel::Clear());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNoiseModel_GetNoiseDbHz(PyNs3UanNoiseModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double fKhz;
    const char *keywords[] = {"fKhz", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &fKhz)) {
        return NULL;
    }
    retval = self->obj->GetNoiseDbHz(fKhz);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNoiseModel_DoDispose(PyNs3UanNoiseModel *self)
{
    PyObject *py_retval;
    PyNs3UanNoiseModel__PythonHelper *helper_class = dynamic_cast<PyNs3UanNoiseModel__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::UanNoiseModel::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3UanNoiseModel_methods[] = {
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanNoiseModel_Clear, METH_NOARGS, NULL },
    {(char *) "GetNoiseDbHz", (PyCFunction) _wrap_PyNs3UanNoiseModel_GetNoiseDbHz, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3UanNoiseModel_DoDispose, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanNoiseModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanNoiseModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanNoiseModel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanNoiseModel__tp_clear(PyNs3UanNoiseModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanNoiseModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanNoiseModel__tp_traverse(PyNs3UanNoiseModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanNoiseModel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanNoiseModel__tp_dealloc(PyNs3UanNoiseModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanNoiseModel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanNoiseModel__tp_richcompare (PyNs3UanNoiseModel *PYBINDGEN_UNUSED(self), PyNs3UanNoiseModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanNoiseModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanNoiseModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanNoiseModel",            /* tp_name */
    sizeof(PyNs3UanNoiseModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanNoiseModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanNoiseModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanNoiseModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanNoiseModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanNoiseModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanNoiseModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanNoiseModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanNoiseModelDefault__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanNoiseModelDefault *self)
{
    PyObject *py_retval;
    PyNs3UanNoiseModelDefault__PythonHelper *helper = dynamic_cast< PyNs3UanNoiseModelDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanNoiseModelDefault__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanNoiseModelDefault *self)
{
    PyObject *py_retval;
    PyNs3UanNoiseModelDefault__PythonHelper *helper = dynamic_cast< PyNs3UanNoiseModelDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanNoiseModelDefault__PythonHelper::_wrap_DoStart(PyNs3UanNoiseModelDefault *self)
{
    PyObject *py_retval;
    PyNs3UanNoiseModelDefault__PythonHelper *helper = dynamic_cast< PyNs3UanNoiseModelDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3UanNoiseModelDefault__PythonHelper::GetNoiseDbHz(double fKhz) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNoiseModelDefault *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNoiseDbHz"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNoiseModelDefault::GetNoiseDbHz(fKhz);
    }
    self_obj_before = reinterpret_cast< PyNs3UanNoiseModelDefault* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNoiseModelDefault* >(m_pyself)->obj = const_cast< ns3::UanNoiseModelDefault* >((const ns3::UanNoiseModelDefault*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNoiseDbHz", (char *) "d", fKhz);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNoiseModelDefault* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNoiseModelDefault::GetNoiseDbHz(fKhz);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNoiseModelDefault* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNoiseModelDefault::GetNoiseDbHz(fKhz);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNoiseModelDefault* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanNoiseModelDefault__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNoiseModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanNoiseModel::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = (ns3::UanNoiseModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNoiseModelDefault__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNoiseModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanNoiseModel::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = (ns3::UanNoiseModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNoiseModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanNoiseModelDefault__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanNoiseModelDefault__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNoiseModelDefault__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNoiseModelDefault__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanNoiseModelDefault__tp_init__0(PyNs3UanNoiseModelDefault *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanNoiseModelDefault *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanNoiseModelDefault_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanNoiseModelDefault_Type)
    {
        self->obj = new PyNs3UanNoiseModelDefault__PythonHelper(*((PyNs3UanNoiseModelDefault *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanNoiseModelDefault__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanNoiseModelDefault(*((PyNs3UanNoiseModelDefault *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanNoiseModelDefault__tp_init__1(PyNs3UanNoiseModelDefault *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanNoiseModelDefault_Type)
    {
        self->obj = new PyNs3UanNoiseModelDefault__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanNoiseModelDefault__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanNoiseModelDefault();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanNoiseModelDefault__tp_init(PyNs3UanNoiseModelDefault *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanNoiseModelDefault__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanNoiseModelDefault__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanNoiseModelDefault_GetNoiseDbHz(PyNs3UanNoiseModelDefault *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double fKhz;
    PyNs3UanNoiseModelDefault__PythonHelper *helper_class = dynamic_cast<PyNs3UanNoiseModelDefault__PythonHelper*> (self->obj);
    const char *keywords[] = {"fKhz", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &fKhz)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetNoiseDbHz(fKhz)) : (self->obj->ns3::UanNoiseModelDefault::GetNoiseDbHz(fKhz));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNoiseModelDefault_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanNoiseModelDefault::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanNoiseModelDefault__copy__(PyNs3UanNoiseModelDefault *self)
{

    PyNs3UanNoiseModelDefault *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanNoiseModelDefault, &PyNs3UanNoiseModelDefault_Type);
    py_copy->obj = new ns3::UanNoiseModelDefault(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanNoiseModelDefault_methods[] = {
    {(char *) "GetNoiseDbHz", (PyCFunction) _wrap_PyNs3UanNoiseModelDefault_GetNoiseDbHz, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanNoiseModelDefault_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanNoiseModelDefault__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanNoiseModelDefault__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanNoiseModelDefault__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanNoiseModelDefault__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanNoiseModelDefault__tp_clear(PyNs3UanNoiseModelDefault *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanNoiseModelDefault *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanNoiseModelDefault__tp_traverse(PyNs3UanNoiseModelDefault *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanNoiseModelDefault__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanNoiseModelDefault__tp_dealloc(PyNs3UanNoiseModelDefault *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanNoiseModelDefault__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanNoiseModelDefault__tp_richcompare (PyNs3UanNoiseModelDefault *PYBINDGEN_UNUSED(self), PyNs3UanNoiseModelDefault *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanNoiseModelDefault_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanNoiseModelDefault_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanNoiseModelDefault",            /* tp_name */
    sizeof(PyNs3UanNoiseModelDefault),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanNoiseModelDefault__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanNoiseModelDefault__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanNoiseModelDefault__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanNoiseModelDefault__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanNoiseModelDefault_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanNoiseModelDefault, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanNoiseModelDefault__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3UanPhy__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'UanPhy' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3UanPhy_GetPacketRx(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacketRx();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetCcaThresholdDb(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCcaThresholdDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetMac(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanMac *mac;
    ns3::UanMac *mac_ptr;
    const char *keywords[] = {"mac", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanMac_Type, &mac)) {
        return NULL;
    }
    mac_ptr = (mac ? mac->obj : NULL);
    self->obj->SetMac(ns3::Ptr< ns3::UanMac  > (mac_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetTxPowerDb(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double txpwr;
    const char *keywords[] = {"txpwr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txpwr)) {
        return NULL;
    }
    self->obj->SetTxPowerDb(txpwr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetRxGainDb(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxGainDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetCcaThresholdDb(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double thresh;
    const char *keywords[] = {"thresh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &thresh)) {
        return NULL;
    }
    self->obj->SetCcaThresholdDb(thresh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetTransducer(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanTransducer > retval;
    PyNs3UanTransducer *py_UanTransducer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetTransducer();
    if (!(const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanTransducer = NULL;
    } else {
        py_UanTransducer = (PyNs3UanTransducer *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanTransducer);
    }
    
    if (py_UanTransducer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)))), &PyNs3UanTransducer_Type);
        py_UanTransducer = PyObject_GC_New(PyNs3UanTransducer, wrapper_type);
        py_UanTransducer->inst_dict = NULL;
        py_UanTransducer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval))->Ref();
        py_UanTransducer->obj = const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanTransducer->obj] = (PyObject *) py_UanTransducer;
    }
    py_retval = Py_BuildValue((char *) "N", py_UanTransducer);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetRxGainDb(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetRxGainDb(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetTransducer(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanTransducer *trans;
    ns3::UanTransducer *trans_ptr;
    const char *keywords[] = {"trans", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanTransducer_Type, &trans)) {
        return NULL;
    }
    trans_ptr = (trans ? trans->obj : NULL);
    self->obj->SetTransducer(ns3::Ptr< ns3::UanTransducer  > (trans_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetChannel(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanChannel *channel;
    ns3::UanChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanChannel_Type, &channel)) {
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::UanChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetNModes(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNModes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetRxThresholdDb(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxThresholdDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_StartRxPacket(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    double rxPowerDb;
    PyNs3UanTxMode *txMode;
    PyNs3UanPdp *pdp;
    const char *keywords[] = {"pkt", "rxPowerDb", "txMode", "pdp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O!", (char **) keywords, &PyNs3Packet_Type, &pkt, &rxPowerDb, &PyNs3UanTxMode_Type, &txMode, &PyNs3UanPdp_Type, &pdp)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    self->obj->StartRxPacket(ns3::Ptr< ns3::Packet  > (pkt_ptr), rxPowerDb, *((PyNs3UanTxMode *) txMode)->obj, *((PyNs3UanPdp *) pdp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_Clear(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_IsStateRx(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetRxThresholdDb(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double thresh;
    const char *keywords[] = {"thresh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &thresh)) {
        return NULL;
    }
    self->obj->SetRxThresholdDb(thresh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_NotifyTransStartTx(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDb;
    PyNs3UanTxMode *txMode;
    const char *keywords[] = {"packet", "txPowerDb", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &packet, &txPowerDb, &PyNs3UanTxMode_Type, &txMode)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTransStartTx(ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDb, *((PyNs3UanTxMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetDevice(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanNetDevice *device;
    ns3::UanNetDevice *device_ptr;
    const char *keywords[] = {"device", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanNetDevice_Type, &device)) {
        return NULL;
    }
    device_ptr = (device ? device->obj : NULL);
    self->obj->SetDevice(ns3::Ptr< ns3::UanNetDevice  > (device_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SendPacket(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    unsigned int modeNum;
    const char *keywords[] = {"pkt", "modeNum", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!I", (char **) keywords, &PyNs3Packet_Type, &pkt, &modeNum)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    self->obj->SendPacket(ns3::Ptr< ns3::Packet  > (pkt_ptr), modeNum);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_IsStateTx(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetDevice(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanNetDevice > retval;
    PyNs3UanNetDevice *py_UanNetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetDevice();
    if (!(const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanNetDevice__PythonHelper))
    {
        py_UanNetDevice = reinterpret_cast< PyNs3UanNetDevice* >(reinterpret_cast< PyNs3UanNetDevice__PythonHelper* >(const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanNetDevice->obj = const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanNetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanNetDevice = NULL;
        } else {
            py_UanNetDevice = (PyNs3UanNetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanNetDevice);
        }
    
        if (py_UanNetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))), &PyNs3UanNetDevice_Type);
            py_UanNetDevice = PyObject_GC_New(PyNs3UanNetDevice, wrapper_type);
            py_UanNetDevice->inst_dict = NULL;
            py_UanNetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_UanNetDevice->obj = const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanNetDevice->obj] = (PyObject *) py_UanNetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanNetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetReceiveErrorCallback(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl4> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl4> (cb);
    self->obj->SetReceiveErrorCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetMode(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int n;
    const char *keywords[] = {"n", NULL};
    PyNs3UanTxMode *py_UanTxMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &n)) {
        return NULL;
    }
    ns3::UanTxMode retval = self->obj->GetMode(n);
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(retval);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = Py_BuildValue((char *) "N", py_UanTxMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_IsStateBusy(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_SetReceiveOkCallback(PyNs3UanPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl5> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl5> (cb);
    self->obj->SetReceiveOkCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::UanTxMode, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetChannel(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanChannel > retval;
    PyNs3UanChannel *py_UanChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanChannel__PythonHelper))
    {
        py_UanChannel = reinterpret_cast< PyNs3UanChannel* >(reinterpret_cast< PyNs3UanChannel__PythonHelper* >(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanChannel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanChannel = NULL;
        } else {
            py_UanChannel = (PyNs3UanChannel *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanChannel);
        }
    
        if (py_UanChannel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))), &PyNs3UanChannel_Type);
            py_UanChannel = PyObject_GC_New(PyNs3UanChannel, wrapper_type);
            py_UanChannel->inst_dict = NULL;
            py_UanChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval))->Ref();
            py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanChannel->obj] = (PyObject *) py_UanChannel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_IsStateIdle(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateIdle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_NotifyIntChange(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyIntChange();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_IsStateCcaBusy(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateCcaBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhy_GetTxPowerDb(PyNs3UanPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

static PyMethodDef PyNs3UanPhy_methods[] = {
    {(char *) "GetPacketRx", (PyCFunction) _wrap_PyNs3UanPhy_GetPacketRx, METH_NOARGS, NULL },
    {(char *) "GetCcaThresholdDb", (PyCFunction) _wrap_PyNs3UanPhy_GetCcaThresholdDb, METH_NOARGS, NULL },
    {(char *) "SetMac", (PyCFunction) _wrap_PyNs3UanPhy_SetMac, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxPowerDb", (PyCFunction) _wrap_PyNs3UanPhy_SetTxPowerDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRxGainDb", (PyCFunction) _wrap_PyNs3UanPhy_GetRxGainDb, METH_NOARGS, NULL },
    {(char *) "SetCcaThresholdDb", (PyCFunction) _wrap_PyNs3UanPhy_SetCcaThresholdDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTransducer", (PyCFunction) _wrap_PyNs3UanPhy_GetTransducer, METH_NOARGS, NULL },
    {(char *) "SetRxGainDb", (PyCFunction) _wrap_PyNs3UanPhy_SetRxGainDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTransducer", (PyCFunction) _wrap_PyNs3UanPhy_SetTransducer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3UanPhy_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNModes", (PyCFunction) _wrap_PyNs3UanPhy_GetNModes, METH_NOARGS, NULL },
    {(char *) "GetRxThresholdDb", (PyCFunction) _wrap_PyNs3UanPhy_GetRxThresholdDb, METH_NOARGS, NULL },
    {(char *) "StartRxPacket", (PyCFunction) _wrap_PyNs3UanPhy_StartRxPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanPhy_Clear, METH_NOARGS, NULL },
    {(char *) "IsStateRx", (PyCFunction) _wrap_PyNs3UanPhy_IsStateRx, METH_NOARGS, NULL },
    {(char *) "SetRxThresholdDb", (PyCFunction) _wrap_PyNs3UanPhy_SetRxThresholdDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyTransStartTx", (PyCFunction) _wrap_PyNs3UanPhy_NotifyTransStartTx, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDevice", (PyCFunction) _wrap_PyNs3UanPhy_SetDevice, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SendPacket", (PyCFunction) _wrap_PyNs3UanPhy_SendPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateTx", (PyCFunction) _wrap_PyNs3UanPhy_IsStateTx, METH_NOARGS, NULL },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3UanPhy_GetDevice, METH_NOARGS, NULL },
    {(char *) "SetReceiveErrorCallback", (PyCFunction) _wrap_PyNs3UanPhy_SetReceiveErrorCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMode", (PyCFunction) _wrap_PyNs3UanPhy_GetMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateBusy", (PyCFunction) _wrap_PyNs3UanPhy_IsStateBusy, METH_NOARGS, NULL },
    {(char *) "SetReceiveOkCallback", (PyCFunction) _wrap_PyNs3UanPhy_SetReceiveOkCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3UanPhy_GetChannel, METH_NOARGS, NULL },
    {(char *) "IsStateIdle", (PyCFunction) _wrap_PyNs3UanPhy_IsStateIdle, METH_NOARGS, NULL },
    {(char *) "NotifyIntChange", (PyCFunction) _wrap_PyNs3UanPhy_NotifyIntChange, METH_NOARGS, NULL },
    {(char *) "IsStateCcaBusy", (PyCFunction) _wrap_PyNs3UanPhy_IsStateCcaBusy, METH_NOARGS, NULL },
    {(char *) "GetTxPowerDb", (PyCFunction) _wrap_PyNs3UanPhy_GetTxPowerDb, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhy__tp_clear(PyNs3UanPhy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhy__tp_traverse(PyNs3UanPhy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UanPhy__tp_dealloc(PyNs3UanPhy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhy__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhy__tp_richcompare (PyNs3UanPhy *PYBINDGEN_UNUSED(self), PyNs3UanPhy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhy_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhy",            /* tp_name */
    sizeof(PyNs3UanPhy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPhyCalcSinr__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPhyCalcSinr *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinr__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinr__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyCalcSinr__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPhyCalcSinr *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinr__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinr__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyCalcSinr__PythonHelper::_wrap_DoStart(PyNs3UanPhyCalcSinr *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinr__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinr__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3UanPhyCalcSinr__PythonHelper::CalcSinrDb(ns3::Ptr< ns3::Packet > pkt, ns3::Time arrTime, double rxPowerDb, double ambNoiseDb, ns3::UanTxMode mode, ns3::UanPdp pdp, std::list< ns3::UanPacketArrival > const & arrivalList) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Time *py_Time;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3UanPdp *py_UanPdp;
    Pystd__list__lt___ns3__UanPacketArrival___gt__ *py_std__list__lt___ns3__UanPacketArrival___gt__;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcSinrDb"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = const_cast< ns3::UanPhyCalcSinr* >((const ns3::UanPhyCalcSinr*) this);
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(arrTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(pdp);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_std__list__lt___ns3__UanPacketArrival___gt__ = PyObject_New(Pystd__list__lt___ns3__UanPacketArrival___gt__, &Pystd__list__lt___ns3__UanPacketArrival___gt___Type);
    py_std__list__lt___ns3__UanPacketArrival___gt__->obj = new std::list< ns3::UanPacketArrival >(arrivalList);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcSinrDb", (char *) "NNddNNN", py_Packet, py_Time, rxPowerDb, ambNoiseDb, py_UanTxMode, py_UanPdp, py_std__list__lt___ns3__UanPacketArrival___gt__);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyCalcSinr__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyCalcSinr::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = (ns3::UanPhyCalcSinr*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinr__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyCalcSinr::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = (ns3::UanPhyCalcSinr*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPhyCalcSinr__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyCalcSinr__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinr__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinr__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPhyCalcSinr__tp_init__0(PyNs3UanPhyCalcSinr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyCalcSinr_Type)
    {
        self->obj = new PyNs3UanPhyCalcSinr__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPhyCalcSinr__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanPhyCalcSinr' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3UanPhyCalcSinr__tp_init__1(PyNs3UanPhyCalcSinr *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyCalcSinr *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyCalcSinr_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyCalcSinr_Type)
    {
        self->obj = new PyNs3UanPhyCalcSinr__PythonHelper(*((PyNs3UanPhyCalcSinr *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPhyCalcSinr__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanPhyCalcSinr' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3UanPhyCalcSinr__tp_init(PyNs3UanPhyCalcSinr *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyCalcSinr__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyCalcSinr__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinr_KpToDb(PyNs3UanPhyCalcSinr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double kp;
    const char *keywords[] = {"kp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &kp)) {
        return NULL;
    }
    retval = self->obj->KpToDb(kp);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinr_Clear(PyNs3UanPhyCalcSinr *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinr__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyCalcSinr__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Clear()) : (self->obj->ns3::UanPhyCalcSinr::Clear());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinr_CalcSinrDb(PyNs3UanPhyCalcSinr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *arrTime;
    ns3::Time arrTime2;
    double rxPowerDb;
    double ambNoiseDb;
    PyNs3UanTxMode *mode;
    PyNs3UanPdp *pdp;
    std::list< ns3::UanPacketArrival > arrivalList_value;
    const char *keywords[] = {"pkt", "arrTime", "rxPowerDb", "ambNoiseDb", "mode", "pdp", "arrivalList", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OddO!O!O&", (char **) keywords, &PyNs3Packet_Type, &pkt, &arrTime, &rxPowerDb, &ambNoiseDb, &PyNs3UanTxMode_Type, &mode, &PyNs3UanPdp_Type, &pdp, _wrap_convert_py2c__std__list__lt___ns3__UanPacketArrival___gt__, &arrivalList_value)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Time_Type)) {
        arrTime2 = *((PyNs3Time *) arrTime)->obj;
    } else if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Scalar_Type)) {
        arrTime2 = *((PyNs3Scalar *) arrTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", arrTime->ob_type->tp_name);
        return NULL;
    }
    retval = self->obj->CalcSinrDb(ns3::Ptr< ns3::Packet  > (pkt_ptr), arrTime2, rxPowerDb, ambNoiseDb, *((PyNs3UanTxMode *) mode)->obj, *((PyNs3UanPdp *) pdp)->obj, arrivalList_value);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinr_DbToKp(PyNs3UanPhyCalcSinr *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double db;
    const char *keywords[] = {"db", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &db)) {
        return NULL;
    }
    retval = self->obj->DbToKp(db);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinr_DoDispose(PyNs3UanPhyCalcSinr *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinr__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyCalcSinr__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::UanPhyCalcSinr::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3UanPhyCalcSinr_methods[] = {
    {(char *) "KpToDb", (PyCFunction) _wrap_PyNs3UanPhyCalcSinr_KpToDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanPhyCalcSinr_Clear, METH_NOARGS, NULL },
    {(char *) "CalcSinrDb", (PyCFunction) _wrap_PyNs3UanPhyCalcSinr_CalcSinrDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DbToKp", (PyCFunction) _wrap_PyNs3UanPhyCalcSinr_DbToKp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3UanPhyCalcSinr_DoDispose, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPhyCalcSinr__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPhyCalcSinr__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPhyCalcSinr__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyCalcSinr__tp_clear(PyNs3UanPhyCalcSinr *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyCalcSinr *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyCalcSinr__tp_traverse(PyNs3UanPhyCalcSinr *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPhyCalcSinr__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPhyCalcSinr__tp_dealloc(PyNs3UanPhyCalcSinr *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyCalcSinr__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyCalcSinr__tp_richcompare (PyNs3UanPhyCalcSinr *PYBINDGEN_UNUSED(self), PyNs3UanPhyCalcSinr *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyCalcSinr_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyCalcSinr_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyCalcSinr",            /* tp_name */
    sizeof(PyNs3UanPhyCalcSinr),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyCalcSinr__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyCalcSinr__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyCalcSinr__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyCalcSinr__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyCalcSinr_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyCalcSinr, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyCalcSinr__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPhyCalcSinrDefault__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPhyCalcSinrDefault *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrDefault__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyCalcSinrDefault__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPhyCalcSinrDefault *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrDefault__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyCalcSinrDefault__PythonHelper::_wrap_DoStart(PyNs3UanPhyCalcSinrDefault *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrDefault__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3UanPhyCalcSinrDefault__PythonHelper::CalcSinrDb(ns3::Ptr< ns3::Packet > pkt, ns3::Time arrTime, double rxPowerDb, double ambNoiseDb, ns3::UanTxMode mode, ns3::UanPdp pdp, std::list< ns3::UanPacketArrival > const & arrivalList) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinrDefault *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Time *py_Time;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3UanPdp *py_UanPdp;
    Pystd__list__lt___ns3__UanPacketArrival___gt__ *py_std__list__lt___ns3__UanPacketArrival___gt__;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcSinrDb"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrDefault::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinrDefault* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinrDefault* >(m_pyself)->obj = const_cast< ns3::UanPhyCalcSinrDefault* >((const ns3::UanPhyCalcSinrDefault*) this);
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(arrTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(pdp);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_std__list__lt___ns3__UanPacketArrival___gt__ = PyObject_New(Pystd__list__lt___ns3__UanPacketArrival___gt__, &Pystd__list__lt___ns3__UanPacketArrival___gt___Type);
    py_std__list__lt___ns3__UanPacketArrival___gt__->obj = new std::list< ns3::UanPacketArrival >(arrivalList);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcSinrDb", (char *) "NNddNNN", py_Packet, py_Time, rxPowerDb, ambNoiseDb, py_UanTxMode, py_UanPdp, py_std__list__lt___ns3__UanPacketArrival___gt__);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinrDefault* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrDefault::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinrDefault* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrDefault::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinrDefault* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyCalcSinrDefault__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyCalcSinr::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = (ns3::UanPhyCalcSinr*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrDefault__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyCalcSinr::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = (ns3::UanPhyCalcSinr*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPhyCalcSinrDefault__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyCalcSinrDefault__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrDefault__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrDefault__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPhyCalcSinrDefault__tp_init__0(PyNs3UanPhyCalcSinrDefault *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyCalcSinrDefault *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyCalcSinrDefault_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyCalcSinrDefault_Type)
    {
        self->obj = new PyNs3UanPhyCalcSinrDefault__PythonHelper(*((PyNs3UanPhyCalcSinrDefault *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPhyCalcSinrDefault__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyCalcSinrDefault(*((PyNs3UanPhyCalcSinrDefault *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanPhyCalcSinrDefault__tp_init__1(PyNs3UanPhyCalcSinrDefault *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyCalcSinrDefault_Type)
    {
        self->obj = new PyNs3UanPhyCalcSinrDefault__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPhyCalcSinrDefault__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyCalcSinrDefault();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanPhyCalcSinrDefault__tp_init(PyNs3UanPhyCalcSinrDefault *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyCalcSinrDefault__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyCalcSinrDefault__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinrDefault_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPhyCalcSinrDefault::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinrDefault_CalcSinrDb(PyNs3UanPhyCalcSinrDefault *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *arrTime;
    ns3::Time arrTime2;
    double rxPowerDb;
    double ambNoiseDb;
    PyNs3UanTxMode *mode;
    PyNs3UanPdp *pdp;
    std::list< ns3::UanPacketArrival > arrivalList_value;
    PyNs3UanPhyCalcSinrDefault__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyCalcSinrDefault__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "arrTime", "rxPowerDb", "ambNoiseDb", "mode", "pdp", "arrivalList", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OddO!O!O&", (char **) keywords, &PyNs3Packet_Type, &pkt, &arrTime, &rxPowerDb, &ambNoiseDb, &PyNs3UanTxMode_Type, &mode, &PyNs3UanPdp_Type, &pdp, _wrap_convert_py2c__std__list__lt___ns3__UanPacketArrival___gt__, &arrivalList_value)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Time_Type)) {
        arrTime2 = *((PyNs3Time *) arrTime)->obj;
    } else if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Scalar_Type)) {
        arrTime2 = *((PyNs3Scalar *) arrTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", arrTime->ob_type->tp_name);
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->CalcSinrDb(ns3::Ptr< ns3::Packet  > (pkt_ptr), arrTime2, rxPowerDb, ambNoiseDb, *((PyNs3UanTxMode *) mode)->obj, *((PyNs3UanPdp *) pdp)->obj, arrivalList_value)) : (self->obj->ns3::UanPhyCalcSinrDefault::CalcSinrDb(ns3::Ptr< ns3::Packet  > (pkt_ptr), arrTime2, rxPowerDb, ambNoiseDb, *((PyNs3UanTxMode *) mode)->obj, *((PyNs3UanPdp *) pdp)->obj, arrivalList_value));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPhyCalcSinrDefault__copy__(PyNs3UanPhyCalcSinrDefault *self)
{

    PyNs3UanPhyCalcSinrDefault *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPhyCalcSinrDefault, &PyNs3UanPhyCalcSinrDefault_Type);
    py_copy->obj = new ns3::UanPhyCalcSinrDefault(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPhyCalcSinrDefault_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrDefault_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CalcSinrDb", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrDefault_CalcSinrDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPhyCalcSinrDefault__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPhyCalcSinrDefault__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPhyCalcSinrDefault__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrDefault__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyCalcSinrDefault__tp_clear(PyNs3UanPhyCalcSinrDefault *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyCalcSinrDefault *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyCalcSinrDefault__tp_traverse(PyNs3UanPhyCalcSinrDefault *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPhyCalcSinrDefault__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPhyCalcSinrDefault__tp_dealloc(PyNs3UanPhyCalcSinrDefault *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyCalcSinrDefault__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyCalcSinrDefault__tp_richcompare (PyNs3UanPhyCalcSinrDefault *PYBINDGEN_UNUSED(self), PyNs3UanPhyCalcSinrDefault *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyCalcSinrDefault_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyCalcSinrDefault_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyCalcSinrDefault",            /* tp_name */
    sizeof(PyNs3UanPhyCalcSinrDefault),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyCalcSinrDefault__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyCalcSinrDefault__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyCalcSinrDefault__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyCalcSinrDefault__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyCalcSinrDefault_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyCalcSinrDefault, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyCalcSinrDefault__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPhyCalcSinrDual__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPhyCalcSinrDual *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrDual__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrDual__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyCalcSinrDual__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPhyCalcSinrDual *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrDual__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrDual__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyCalcSinrDual__PythonHelper::_wrap_DoStart(PyNs3UanPhyCalcSinrDual *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrDual__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrDual__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3UanPhyCalcSinrDual__PythonHelper::CalcSinrDb(ns3::Ptr< ns3::Packet > pkt, ns3::Time arrTime, double rxPowerDb, double ambNoiseDb, ns3::UanTxMode mode, ns3::UanPdp pdp, std::list< ns3::UanPacketArrival > const & arrivalList) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinrDual *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Time *py_Time;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3UanPdp *py_UanPdp;
    Pystd__list__lt___ns3__UanPacketArrival___gt__ *py_std__list__lt___ns3__UanPacketArrival___gt__;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcSinrDb"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrDual::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinrDual* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinrDual* >(m_pyself)->obj = const_cast< ns3::UanPhyCalcSinrDual* >((const ns3::UanPhyCalcSinrDual*) this);
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(arrTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(pdp);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_std__list__lt___ns3__UanPacketArrival___gt__ = PyObject_New(Pystd__list__lt___ns3__UanPacketArrival___gt__, &Pystd__list__lt___ns3__UanPacketArrival___gt___Type);
    py_std__list__lt___ns3__UanPacketArrival___gt__->obj = new std::list< ns3::UanPacketArrival >(arrivalList);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcSinrDb", (char *) "NNddNNN", py_Packet, py_Time, rxPowerDb, ambNoiseDb, py_UanTxMode, py_UanPdp, py_std__list__lt___ns3__UanPacketArrival___gt__);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinrDual* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrDual::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinrDual* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrDual::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinrDual* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyCalcSinrDual__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyCalcSinr::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = (ns3::UanPhyCalcSinr*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrDual__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyCalcSinr::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = (ns3::UanPhyCalcSinr*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPhyCalcSinrDual__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyCalcSinrDual__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrDual__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrDual__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPhyCalcSinrDual__tp_init__0(PyNs3UanPhyCalcSinrDual *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyCalcSinrDual *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyCalcSinrDual_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyCalcSinrDual_Type)
    {
        self->obj = new PyNs3UanPhyCalcSinrDual__PythonHelper(*((PyNs3UanPhyCalcSinrDual *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPhyCalcSinrDual__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyCalcSinrDual(*((PyNs3UanPhyCalcSinrDual *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanPhyCalcSinrDual__tp_init__1(PyNs3UanPhyCalcSinrDual *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyCalcSinrDual_Type)
    {
        self->obj = new PyNs3UanPhyCalcSinrDual__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPhyCalcSinrDual__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyCalcSinrDual();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanPhyCalcSinrDual__tp_init(PyNs3UanPhyCalcSinrDual *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyCalcSinrDual__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyCalcSinrDual__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinrDual_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPhyCalcSinrDual::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinrDual_CalcSinrDb(PyNs3UanPhyCalcSinrDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *arrTime;
    ns3::Time arrTime2;
    double rxPowerDb;
    double ambNoiseDb;
    PyNs3UanTxMode *mode;
    PyNs3UanPdp *pdp;
    std::list< ns3::UanPacketArrival > arrivalList_value;
    PyNs3UanPhyCalcSinrDual__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyCalcSinrDual__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "arrTime", "rxPowerDb", "ambNoiseDb", "mode", "pdp", "arrivalList", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OddO!O!O&", (char **) keywords, &PyNs3Packet_Type, &pkt, &arrTime, &rxPowerDb, &ambNoiseDb, &PyNs3UanTxMode_Type, &mode, &PyNs3UanPdp_Type, &pdp, _wrap_convert_py2c__std__list__lt___ns3__UanPacketArrival___gt__, &arrivalList_value)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Time_Type)) {
        arrTime2 = *((PyNs3Time *) arrTime)->obj;
    } else if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Scalar_Type)) {
        arrTime2 = *((PyNs3Scalar *) arrTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", arrTime->ob_type->tp_name);
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->CalcSinrDb(ns3::Ptr< ns3::Packet  > (pkt_ptr), arrTime2, rxPowerDb, ambNoiseDb, *((PyNs3UanTxMode *) mode)->obj, *((PyNs3UanPdp *) pdp)->obj, arrivalList_value)) : (self->obj->ns3::UanPhyCalcSinrDual::CalcSinrDb(ns3::Ptr< ns3::Packet  > (pkt_ptr), arrTime2, rxPowerDb, ambNoiseDb, *((PyNs3UanTxMode *) mode)->obj, *((PyNs3UanPdp *) pdp)->obj, arrivalList_value));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPhyCalcSinrDual__copy__(PyNs3UanPhyCalcSinrDual *self)
{

    PyNs3UanPhyCalcSinrDual *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPhyCalcSinrDual, &PyNs3UanPhyCalcSinrDual_Type);
    py_copy->obj = new ns3::UanPhyCalcSinrDual(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPhyCalcSinrDual_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrDual_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CalcSinrDb", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrDual_CalcSinrDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPhyCalcSinrDual__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPhyCalcSinrDual__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPhyCalcSinrDual__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrDual__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyCalcSinrDual__tp_clear(PyNs3UanPhyCalcSinrDual *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyCalcSinrDual *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyCalcSinrDual__tp_traverse(PyNs3UanPhyCalcSinrDual *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPhyCalcSinrDual__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPhyCalcSinrDual__tp_dealloc(PyNs3UanPhyCalcSinrDual *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyCalcSinrDual__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyCalcSinrDual__tp_richcompare (PyNs3UanPhyCalcSinrDual *PYBINDGEN_UNUSED(self), PyNs3UanPhyCalcSinrDual *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyCalcSinrDual_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyCalcSinrDual_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyCalcSinrDual",            /* tp_name */
    sizeof(PyNs3UanPhyCalcSinrDual),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyCalcSinrDual__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyCalcSinrDual__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyCalcSinrDual__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyCalcSinrDual__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyCalcSinrDual_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyCalcSinrDual, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyCalcSinrDual__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPhyCalcSinrFhFsk *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrFhFsk__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrFhFsk__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPhyCalcSinrFhFsk *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrFhFsk__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrFhFsk__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::_wrap_DoStart(PyNs3UanPhyCalcSinrFhFsk *self)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinrFhFsk__PythonHelper *helper = dynamic_cast< PyNs3UanPhyCalcSinrFhFsk__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::CalcSinrDb(ns3::Ptr< ns3::Packet > pkt, ns3::Time arrTime, double rxPowerDb, double ambNoiseDb, ns3::UanTxMode mode, ns3::UanPdp pdp, std::list< ns3::UanPacketArrival > const & arrivalList) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinrFhFsk *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Time *py_Time;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3UanPdp *py_UanPdp;
    Pystd__list__lt___ns3__UanPacketArrival___gt__ *py_std__list__lt___ns3__UanPacketArrival___gt__;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcSinrDb"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrFhFsk::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinrFhFsk* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinrFhFsk* >(m_pyself)->obj = const_cast< ns3::UanPhyCalcSinrFhFsk* >((const ns3::UanPhyCalcSinrFhFsk*) this);
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(arrTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(pdp);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_std__list__lt___ns3__UanPacketArrival___gt__ = PyObject_New(Pystd__list__lt___ns3__UanPacketArrival___gt__, &Pystd__list__lt___ns3__UanPacketArrival___gt___Type);
    py_std__list__lt___ns3__UanPacketArrival___gt__->obj = new std::list< ns3::UanPacketArrival >(arrivalList);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcSinrDb", (char *) "NNddNNN", py_Packet, py_Time, rxPowerDb, ambNoiseDb, py_UanTxMode, py_UanPdp, py_std__list__lt___ns3__UanPacketArrival___gt__);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinrFhFsk* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrFhFsk::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinrFhFsk* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyCalcSinrFhFsk::CalcSinrDb(pkt, arrTime, rxPowerDb, ambNoiseDb, mode, pdp, arrivalList);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinrFhFsk* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyCalcSinr::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = (ns3::UanPhyCalcSinr*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyCalcSinr *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyCalcSinr::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = (ns3::UanPhyCalcSinr*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyCalcSinr* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyCalcSinrFhFsk__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPhyCalcSinrFhFsk__tp_init__0(PyNs3UanPhyCalcSinrFhFsk *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyCalcSinrFhFsk *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyCalcSinrFhFsk_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyCalcSinrFhFsk_Type)
    {
        self->obj = new PyNs3UanPhyCalcSinrFhFsk__PythonHelper(*((PyNs3UanPhyCalcSinrFhFsk *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPhyCalcSinrFhFsk__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyCalcSinrFhFsk(*((PyNs3UanPhyCalcSinrFhFsk *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanPhyCalcSinrFhFsk__tp_init__1(PyNs3UanPhyCalcSinrFhFsk *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyCalcSinrFhFsk_Type)
    {
        self->obj = new PyNs3UanPhyCalcSinrFhFsk__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPhyCalcSinrFhFsk__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyCalcSinrFhFsk();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanPhyCalcSinrFhFsk__tp_init(PyNs3UanPhyCalcSinrFhFsk *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyCalcSinrFhFsk__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyCalcSinrFhFsk__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinrFhFsk_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPhyCalcSinrFhFsk::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyCalcSinrFhFsk_CalcSinrDb(PyNs3UanPhyCalcSinrFhFsk *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    PyObject *arrTime;
    ns3::Time arrTime2;
    double rxPowerDb;
    double ambNoiseDb;
    PyNs3UanTxMode *mode;
    PyNs3UanPdp *pdp;
    std::list< ns3::UanPacketArrival > arrivalList_value;
    PyNs3UanPhyCalcSinrFhFsk__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyCalcSinrFhFsk__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "arrTime", "rxPowerDb", "ambNoiseDb", "mode", "pdp", "arrivalList", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OddO!O!O&", (char **) keywords, &PyNs3Packet_Type, &pkt, &arrTime, &rxPowerDb, &ambNoiseDb, &PyNs3UanTxMode_Type, &mode, &PyNs3UanPdp_Type, &pdp, _wrap_convert_py2c__std__list__lt___ns3__UanPacketArrival___gt__, &arrivalList_value)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Time_Type)) {
        arrTime2 = *((PyNs3Time *) arrTime)->obj;
    } else if (PyObject_IsInstance(arrTime, (PyObject*) &PyNs3Scalar_Type)) {
        arrTime2 = *((PyNs3Scalar *) arrTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", arrTime->ob_type->tp_name);
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->CalcSinrDb(ns3::Ptr< ns3::Packet  > (pkt_ptr), arrTime2, rxPowerDb, ambNoiseDb, *((PyNs3UanTxMode *) mode)->obj, *((PyNs3UanPdp *) pdp)->obj, arrivalList_value)) : (self->obj->ns3::UanPhyCalcSinrFhFsk::CalcSinrDb(ns3::Ptr< ns3::Packet  > (pkt_ptr), arrTime2, rxPowerDb, ambNoiseDb, *((PyNs3UanTxMode *) mode)->obj, *((PyNs3UanPdp *) pdp)->obj, arrivalList_value));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPhyCalcSinrFhFsk__copy__(PyNs3UanPhyCalcSinrFhFsk *self)
{

    PyNs3UanPhyCalcSinrFhFsk *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPhyCalcSinrFhFsk, &PyNs3UanPhyCalcSinrFhFsk_Type);
    py_copy->obj = new ns3::UanPhyCalcSinrFhFsk(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPhyCalcSinrFhFsk_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrFhFsk_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CalcSinrDb", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrFhFsk_CalcSinrDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPhyCalcSinrFhFsk__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPhyCalcSinrFhFsk__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPhyCalcSinrFhFsk__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPhyCalcSinrFhFsk__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyCalcSinrFhFsk__tp_clear(PyNs3UanPhyCalcSinrFhFsk *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyCalcSinrFhFsk *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyCalcSinrFhFsk__tp_traverse(PyNs3UanPhyCalcSinrFhFsk *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPhyCalcSinrFhFsk__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPhyCalcSinrFhFsk__tp_dealloc(PyNs3UanPhyCalcSinrFhFsk *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyCalcSinrFhFsk__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyCalcSinrFhFsk__tp_richcompare (PyNs3UanPhyCalcSinrFhFsk *PYBINDGEN_UNUSED(self), PyNs3UanPhyCalcSinrFhFsk *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyCalcSinrFhFsk_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyCalcSinrFhFsk_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyCalcSinrFhFsk",            /* tp_name */
    sizeof(PyNs3UanPhyCalcSinrFhFsk),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyCalcSinrFhFsk__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyCalcSinrFhFsk__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyCalcSinrFhFsk__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyCalcSinrFhFsk__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyCalcSinrFhFsk_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyCalcSinrFhFsk, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyCalcSinrFhFsk__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UanPhyDual__tp_init__0(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyDual *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyDual_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPhyDual(*((PyNs3UanPhyDual *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3UanPhyDual__tp_init__1(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPhyDual();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3UanPhyDual__tp_init(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyDual__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyDual__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetModesPhy2(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    PyNs3UanModesList *py_UanModesList;
    
    ns3::UanModesList retval = self->obj->GetModesPhy2();
    py_UanModesList = PyObject_New(PyNs3UanModesList, &PyNs3UanModesList_Type);
    py_UanModesList->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanModesList->obj = new ns3::UanModesList(retval);
    PyNs3UanModesList_wrapper_registry[(void *) py_UanModesList->obj] = (PyObject *) py_UanModesList;
    py_retval = Py_BuildValue((char *) "N", py_UanModesList);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetModesPhy1(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    PyNs3UanModesList *py_UanModesList;
    
    ns3::UanModesList retval = self->obj->GetModesPhy1();
    py_UanModesList = PyObject_New(PyNs3UanModesList, &PyNs3UanModesList_Type);
    py_UanModesList->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanModesList->obj = new ns3::UanModesList(retval);
    PyNs3UanModesList_wrapper_registry[(void *) py_UanModesList->obj] = (PyObject *) py_UanModesList;
    py_retval = Py_BuildValue((char *) "N", py_UanModesList);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetPacketRx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacketRx();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetReceiveErrorCallback(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl4> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl4> (cb);
    self->obj->SetReceiveErrorCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPhyDual::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetMac(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanMac *mac;
    ns3::UanMac *mac_ptr;
    const char *keywords[] = {"mac", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanMac_Type, &mac)) {
        return NULL;
    }
    mac_ptr = (mac ? mac->obj : NULL);
    self->obj->SetMac(ns3::Ptr< ns3::UanMac  > (mac_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetRxGainDbPhy1(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxGainDbPhy1();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsPhy2Tx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPhy2Tx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetRxGainDb(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxGainDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetRxGainDbPhy2(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxGainDbPhy2();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsStateIdle(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateIdle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetTransducer(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanTransducer > retval;
    PyNs3UanTransducer *py_UanTransducer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetTransducer();
    if (!(const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanTransducer = NULL;
    } else {
        py_UanTransducer = (PyNs3UanTransducer *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanTransducer);
    }
    
    if (py_UanTransducer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)))), &PyNs3UanTransducer_Type);
        py_UanTransducer = PyObject_GC_New(PyNs3UanTransducer, wrapper_type);
        py_UanTransducer->inst_dict = NULL;
        py_UanTransducer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval))->Ref();
        py_UanTransducer->obj = const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanTransducer->obj] = (PyObject *) py_UanTransducer;
    }
    py_retval = Py_BuildValue((char *) "N", py_UanTransducer);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetPhy1PacketRx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPhy1PacketRx();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetTransducer(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanTransducer *trans;
    ns3::UanTransducer *trans_ptr;
    const char *keywords[] = {"trans", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanTransducer_Type, &trans)) {
        return NULL;
    }
    trans_ptr = (trans ? trans->obj : NULL);
    self->obj->SetTransducer(ns3::Ptr< ns3::UanTransducer  > (trans_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetCcaThresholdPhy2(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double thresh;
    const char *keywords[] = {"thresh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &thresh)) {
        return NULL;
    }
    self->obj->SetCcaThresholdPhy2(thresh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetRxGainDb(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetRxGainDb(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetCcaThresholdPhy1(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCcaThresholdPhy1();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetCcaThresholdPhy2(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCcaThresholdPhy2();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetPerModelPhy1(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhyPer *per;
    ns3::UanPhyPer *per_ptr;
    const char *keywords[] = {"per", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyPer_Type, &per)) {
        return NULL;
    }
    per_ptr = (per ? per->obj : NULL);
    self->obj->SetPerModelPhy1(ns3::Ptr< ns3::UanPhyPer  > (per_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetPerModelPhy2(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhyPer *per;
    ns3::UanPhyPer *per_ptr;
    const char *keywords[] = {"per", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyPer_Type, &per)) {
        return NULL;
    }
    per_ptr = (per ? per->obj : NULL);
    self->obj->SetPerModelPhy2(ns3::Ptr< ns3::UanPhyPer  > (per_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetCcaThresholdDb(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCcaThresholdDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsPhy1Rx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPhy1Rx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetNModes(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNModes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetRxGainDbPhy1(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetRxGainDbPhy1(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetRxGainDbPhy2(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetRxGainDbPhy2(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetTxPowerDbPhy2(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetTxPowerDbPhy2(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetRxThresholdDb(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxThresholdDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetTxPowerDbPhy1(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetTxPowerDbPhy1(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetTxPowerDbPhy2(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerDbPhy2();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsPhy2Idle(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPhy2Idle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetTxPowerDbPhy1(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerDbPhy1();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_StartRxPacket(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    double rxPowerDb;
    PyNs3UanTxMode *txMode;
    PyNs3UanPdp *pdp;
    const char *keywords[] = {"pkt", "rxPowerDb", "txMode", "pdp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O!", (char **) keywords, &PyNs3Packet_Type, &pkt, &rxPowerDb, &PyNs3UanTxMode_Type, &txMode, &PyNs3UanPdp_Type, &pdp)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    self->obj->StartRxPacket(ns3::Ptr< ns3::Packet  > (pkt_ptr), rxPowerDb, *((PyNs3UanTxMode *) txMode)->obj, *((PyNs3UanPdp *) pdp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsStateRx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_Clear(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsPhy2Rx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPhy2Rx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetPhy2PacketRx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPhy2PacketRx();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsPhy1Idle(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPhy1Idle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsPhy1Tx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPhy1Tx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetModesPhy2(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanModesList *modes;
    const char *keywords[] = {"modes", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanModesList_Type, &modes)) {
        return NULL;
    }
    self->obj->SetModesPhy2(*((PyNs3UanModesList *) modes)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetRxThresholdDb(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double thresh;
    const char *keywords[] = {"thresh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &thresh)) {
        return NULL;
    }
    self->obj->SetRxThresholdDb(thresh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_NotifyTransStartTx(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDb;
    PyNs3UanTxMode *txMode;
    const char *keywords[] = {"packet", "txPowerDb", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &packet, &txPowerDb, &PyNs3UanTxMode_Type, &txMode)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTransStartTx(ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDb, *((PyNs3UanTxMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetModesPhy1(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanModesList *modes;
    const char *keywords[] = {"modes", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanModesList_Type, &modes)) {
        return NULL;
    }
    self->obj->SetModesPhy1(*((PyNs3UanModesList *) modes)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetDevice(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanNetDevice *device;
    ns3::UanNetDevice *device_ptr;
    const char *keywords[] = {"device", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanNetDevice_Type, &device)) {
        return NULL;
    }
    device_ptr = (device ? device->obj : NULL);
    self->obj->SetDevice(ns3::Ptr< ns3::UanNetDevice  > (device_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SendPacket(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    unsigned int modeNum;
    const char *keywords[] = {"pkt", "modeNum", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!I", (char **) keywords, &PyNs3Packet_Type, &pkt, &modeNum)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    self->obj->SendPacket(ns3::Ptr< ns3::Packet  > (pkt_ptr), modeNum);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsStateTx(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetDevice(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanNetDevice > retval;
    PyNs3UanNetDevice *py_UanNetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetDevice();
    if (!(const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanNetDevice__PythonHelper))
    {
        py_UanNetDevice = reinterpret_cast< PyNs3UanNetDevice* >(reinterpret_cast< PyNs3UanNetDevice__PythonHelper* >(const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanNetDevice->obj = const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanNetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanNetDevice = NULL;
        } else {
            py_UanNetDevice = (PyNs3UanNetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanNetDevice);
        }
    
        if (py_UanNetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))), &PyNs3UanNetDevice_Type);
            py_UanNetDevice = PyObject_GC_New(PyNs3UanNetDevice, wrapper_type);
            py_UanNetDevice->inst_dict = NULL;
            py_UanNetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_UanNetDevice->obj = const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanNetDevice->obj] = (PyObject *) py_UanNetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanNetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetCcaThresholdPhy1(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double thresh;
    const char *keywords[] = {"thresh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &thresh)) {
        return NULL;
    }
    self->obj->SetCcaThresholdPhy1(thresh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetMode(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int n;
    const char *keywords[] = {"n", NULL};
    PyNs3UanTxMode *py_UanTxMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &n)) {
        return NULL;
    }
    ns3::UanTxMode retval = self->obj->GetMode(n);
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(retval);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = Py_BuildValue((char *) "N", py_UanTxMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsStateBusy(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetReceiveOkCallback(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl5> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl5> (cb);
    self->obj->SetReceiveOkCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::UanTxMode, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetSinrModelPhy1(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinr *calcSinr;
    ns3::UanPhyCalcSinr *calcSinr_ptr;
    const char *keywords[] = {"calcSinr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyCalcSinr_Type, &calcSinr)) {
        return NULL;
    }
    calcSinr_ptr = (calcSinr ? calcSinr->obj : NULL);
    self->obj->SetSinrModelPhy1(ns3::Ptr< ns3::UanPhyCalcSinr  > (calcSinr_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetSinrModelPhy2(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhyCalcSinr *calcSinr;
    ns3::UanPhyCalcSinr *calcSinr_ptr;
    const char *keywords[] = {"calcSinr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyCalcSinr_Type, &calcSinr)) {
        return NULL;
    }
    calcSinr_ptr = (calcSinr ? calcSinr->obj : NULL);
    self->obj->SetSinrModelPhy2(ns3::Ptr< ns3::UanPhyCalcSinr  > (calcSinr_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetTxPowerDb(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double txpwr;
    const char *keywords[] = {"txpwr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txpwr)) {
        return NULL;
    }
    self->obj->SetTxPowerDb(txpwr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetChannel(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanChannel *channel;
    ns3::UanChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanChannel_Type, &channel)) {
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::UanChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_SetCcaThresholdDb(PyNs3UanPhyDual *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double thresh;
    const char *keywords[] = {"thresh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &thresh)) {
        return NULL;
    }
    self->obj->SetCcaThresholdDb(thresh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetPerModelPhy1(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanPhyPer > retval;
    PyNs3UanPhyPer *py_UanPhyPer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPerModelPhy1();
    if (!(const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanPhyPer__PythonHelper))
    {
        py_UanPhyPer = reinterpret_cast< PyNs3UanPhyPer* >(reinterpret_cast< PyNs3UanPhyPer__PythonHelper* >(const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanPhyPer->obj = const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanPhyPer);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanPhyPer = NULL;
        } else {
            py_UanPhyPer = (PyNs3UanPhyPer *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanPhyPer);
        }
    
        if (py_UanPhyPer == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)))), &PyNs3UanPhyPer_Type);
            py_UanPhyPer = PyObject_GC_New(PyNs3UanPhyPer, wrapper_type);
            py_UanPhyPer->inst_dict = NULL;
            py_UanPhyPer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval))->Ref();
            py_UanPhyPer->obj = const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhyPer->obj] = (PyObject *) py_UanPhyPer;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanPhyPer);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetPerModelPhy2(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanPhyPer > retval;
    PyNs3UanPhyPer *py_UanPhyPer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPerModelPhy2();
    if (!(const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanPhyPer__PythonHelper))
    {
        py_UanPhyPer = reinterpret_cast< PyNs3UanPhyPer* >(reinterpret_cast< PyNs3UanPhyPer__PythonHelper* >(const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanPhyPer->obj = const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanPhyPer);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanPhyPer = NULL;
        } else {
            py_UanPhyPer = (PyNs3UanPhyPer *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanPhyPer);
        }
    
        if (py_UanPhyPer == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval)))), &PyNs3UanPhyPer_Type);
            py_UanPhyPer = PyObject_GC_New(PyNs3UanPhyPer, wrapper_type);
            py_UanPhyPer->inst_dict = NULL;
            py_UanPhyPer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval))->Ref();
            py_UanPhyPer->obj = const_cast<ns3::UanPhyPer *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhyPer->obj] = (PyObject *) py_UanPhyPer;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanPhyPer);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetChannel(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanChannel > retval;
    PyNs3UanChannel *py_UanChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanChannel__PythonHelper))
    {
        py_UanChannel = reinterpret_cast< PyNs3UanChannel* >(reinterpret_cast< PyNs3UanChannel__PythonHelper* >(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanChannel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanChannel = NULL;
        } else {
            py_UanChannel = (PyNs3UanChannel *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanChannel);
        }
    
        if (py_UanChannel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))), &PyNs3UanChannel_Type);
            py_UanChannel = PyObject_GC_New(PyNs3UanChannel, wrapper_type);
            py_UanChannel->inst_dict = NULL;
            py_UanChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval))->Ref();
            py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanChannel->obj] = (PyObject *) py_UanChannel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetSinrModelPhy1(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanPhyCalcSinr > retval;
    PyNs3UanPhyCalcSinr *py_UanPhyCalcSinr;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetSinrModelPhy1();
    if (!(const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanPhyCalcSinr__PythonHelper))
    {
        py_UanPhyCalcSinr = reinterpret_cast< PyNs3UanPhyCalcSinr* >(reinterpret_cast< PyNs3UanPhyCalcSinr__PythonHelper* >(const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanPhyCalcSinr->obj = const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanPhyCalcSinr);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanPhyCalcSinr = NULL;
        } else {
            py_UanPhyCalcSinr = (PyNs3UanPhyCalcSinr *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanPhyCalcSinr);
        }
    
        if (py_UanPhyCalcSinr == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)))), &PyNs3UanPhyCalcSinr_Type);
            py_UanPhyCalcSinr = PyObject_GC_New(PyNs3UanPhyCalcSinr, wrapper_type);
            py_UanPhyCalcSinr->inst_dict = NULL;
            py_UanPhyCalcSinr->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval))->Ref();
            py_UanPhyCalcSinr->obj = const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhyCalcSinr->obj] = (PyObject *) py_UanPhyCalcSinr;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanPhyCalcSinr);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetSinrModelPhy2(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanPhyCalcSinr > retval;
    PyNs3UanPhyCalcSinr *py_UanPhyCalcSinr;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetSinrModelPhy2();
    if (!(const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanPhyCalcSinr__PythonHelper))
    {
        py_UanPhyCalcSinr = reinterpret_cast< PyNs3UanPhyCalcSinr* >(reinterpret_cast< PyNs3UanPhyCalcSinr__PythonHelper* >(const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanPhyCalcSinr->obj = const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanPhyCalcSinr);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanPhyCalcSinr = NULL;
        } else {
            py_UanPhyCalcSinr = (PyNs3UanPhyCalcSinr *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanPhyCalcSinr);
        }
    
        if (py_UanPhyCalcSinr == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval)))), &PyNs3UanPhyCalcSinr_Type);
            py_UanPhyCalcSinr = PyObject_GC_New(PyNs3UanPhyCalcSinr, wrapper_type);
            py_UanPhyCalcSinr->inst_dict = NULL;
            py_UanPhyCalcSinr->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval))->Ref();
            py_UanPhyCalcSinr->obj = const_cast<ns3::UanPhyCalcSinr *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhyCalcSinr->obj] = (PyObject *) py_UanPhyCalcSinr;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanPhyCalcSinr);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_NotifyIntChange(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyIntChange();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_IsStateCcaBusy(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateCcaBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyDual_GetTxPowerDb(PyNs3UanPhyDual *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPhyDual__copy__(PyNs3UanPhyDual *self)
{

    PyNs3UanPhyDual *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPhyDual, &PyNs3UanPhyDual_Type);
    py_copy->obj = new ns3::UanPhyDual(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPhyDual_methods[] = {
    {(char *) "GetModesPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_GetModesPhy2, METH_NOARGS, NULL },
    {(char *) "GetModesPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_GetModesPhy1, METH_NOARGS, NULL },
    {(char *) "GetPacketRx", (PyCFunction) _wrap_PyNs3UanPhyDual_GetPacketRx, METH_NOARGS, NULL },
    {(char *) "SetReceiveErrorCallback", (PyCFunction) _wrap_PyNs3UanPhyDual_SetReceiveErrorCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPhyDual_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetMac", (PyCFunction) _wrap_PyNs3UanPhyDual_SetMac, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRxGainDbPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_GetRxGainDbPhy1, METH_NOARGS, NULL },
    {(char *) "IsPhy2Tx", (PyCFunction) _wrap_PyNs3UanPhyDual_IsPhy2Tx, METH_NOARGS, NULL },
    {(char *) "GetRxGainDb", (PyCFunction) _wrap_PyNs3UanPhyDual_GetRxGainDb, METH_NOARGS, NULL },
    {(char *) "GetRxGainDbPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_GetRxGainDbPhy2, METH_NOARGS, NULL },
    {(char *) "IsStateIdle", (PyCFunction) _wrap_PyNs3UanPhyDual_IsStateIdle, METH_NOARGS, NULL },
    {(char *) "GetTransducer", (PyCFunction) _wrap_PyNs3UanPhyDual_GetTransducer, METH_NOARGS, NULL },
    {(char *) "GetPhy1PacketRx", (PyCFunction) _wrap_PyNs3UanPhyDual_GetPhy1PacketRx, METH_NOARGS, NULL },
    {(char *) "SetTransducer", (PyCFunction) _wrap_PyNs3UanPhyDual_SetTransducer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCcaThresholdPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_SetCcaThresholdPhy2, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRxGainDb", (PyCFunction) _wrap_PyNs3UanPhyDual_SetRxGainDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCcaThresholdPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_GetCcaThresholdPhy1, METH_NOARGS, NULL },
    {(char *) "GetCcaThresholdPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_GetCcaThresholdPhy2, METH_NOARGS, NULL },
    {(char *) "SetPerModelPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_SetPerModelPhy1, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetPerModelPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_SetPerModelPhy2, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCcaThresholdDb", (PyCFunction) _wrap_PyNs3UanPhyDual_GetCcaThresholdDb, METH_NOARGS, NULL },
    {(char *) "IsPhy1Rx", (PyCFunction) _wrap_PyNs3UanPhyDual_IsPhy1Rx, METH_NOARGS, NULL },
    {(char *) "GetNModes", (PyCFunction) _wrap_PyNs3UanPhyDual_GetNModes, METH_NOARGS, NULL },
    {(char *) "SetRxGainDbPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_SetRxGainDbPhy1, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRxGainDbPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_SetRxGainDbPhy2, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxPowerDbPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_SetTxPowerDbPhy2, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRxThresholdDb", (PyCFunction) _wrap_PyNs3UanPhyDual_GetRxThresholdDb, METH_NOARGS, NULL },
    {(char *) "SetTxPowerDbPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_SetTxPowerDbPhy1, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTxPowerDbPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_GetTxPowerDbPhy2, METH_NOARGS, NULL },
    {(char *) "IsPhy2Idle", (PyCFunction) _wrap_PyNs3UanPhyDual_IsPhy2Idle, METH_NOARGS, NULL },
    {(char *) "GetTxPowerDbPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_GetTxPowerDbPhy1, METH_NOARGS, NULL },
    {(char *) "StartRxPacket", (PyCFunction) _wrap_PyNs3UanPhyDual_StartRxPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateRx", (PyCFunction) _wrap_PyNs3UanPhyDual_IsStateRx, METH_NOARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanPhyDual_Clear, METH_NOARGS, NULL },
    {(char *) "IsPhy2Rx", (PyCFunction) _wrap_PyNs3UanPhyDual_IsPhy2Rx, METH_NOARGS, NULL },
    {(char *) "GetPhy2PacketRx", (PyCFunction) _wrap_PyNs3UanPhyDual_GetPhy2PacketRx, METH_NOARGS, NULL },
    {(char *) "IsPhy1Idle", (PyCFunction) _wrap_PyNs3UanPhyDual_IsPhy1Idle, METH_NOARGS, NULL },
    {(char *) "IsPhy1Tx", (PyCFunction) _wrap_PyNs3UanPhyDual_IsPhy1Tx, METH_NOARGS, NULL },
    {(char *) "SetModesPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_SetModesPhy2, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRxThresholdDb", (PyCFunction) _wrap_PyNs3UanPhyDual_SetRxThresholdDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyTransStartTx", (PyCFunction) _wrap_PyNs3UanPhyDual_NotifyTransStartTx, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetModesPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_SetModesPhy1, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDevice", (PyCFunction) _wrap_PyNs3UanPhyDual_SetDevice, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SendPacket", (PyCFunction) _wrap_PyNs3UanPhyDual_SendPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateTx", (PyCFunction) _wrap_PyNs3UanPhyDual_IsStateTx, METH_NOARGS, NULL },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3UanPhyDual_GetDevice, METH_NOARGS, NULL },
    {(char *) "SetCcaThresholdPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_SetCcaThresholdPhy1, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMode", (PyCFunction) _wrap_PyNs3UanPhyDual_GetMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateBusy", (PyCFunction) _wrap_PyNs3UanPhyDual_IsStateBusy, METH_NOARGS, NULL },
    {(char *) "SetReceiveOkCallback", (PyCFunction) _wrap_PyNs3UanPhyDual_SetReceiveOkCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSinrModelPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_SetSinrModelPhy1, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSinrModelPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_SetSinrModelPhy2, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxPowerDb", (PyCFunction) _wrap_PyNs3UanPhyDual_SetTxPowerDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3UanPhyDual_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCcaThresholdDb", (PyCFunction) _wrap_PyNs3UanPhyDual_SetCcaThresholdDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPerModelPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_GetPerModelPhy1, METH_NOARGS, NULL },
    {(char *) "GetPerModelPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_GetPerModelPhy2, METH_NOARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3UanPhyDual_GetChannel, METH_NOARGS, NULL },
    {(char *) "GetSinrModelPhy1", (PyCFunction) _wrap_PyNs3UanPhyDual_GetSinrModelPhy1, METH_NOARGS, NULL },
    {(char *) "GetSinrModelPhy2", (PyCFunction) _wrap_PyNs3UanPhyDual_GetSinrModelPhy2, METH_NOARGS, NULL },
    {(char *) "NotifyIntChange", (PyCFunction) _wrap_PyNs3UanPhyDual_NotifyIntChange, METH_NOARGS, NULL },
    {(char *) "IsStateCcaBusy", (PyCFunction) _wrap_PyNs3UanPhyDual_IsStateCcaBusy, METH_NOARGS, NULL },
    {(char *) "GetTxPowerDb", (PyCFunction) _wrap_PyNs3UanPhyDual_GetTxPowerDb, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPhyDual__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyDual__tp_clear(PyNs3UanPhyDual *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyDual *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyDual__tp_traverse(PyNs3UanPhyDual *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UanPhyDual__tp_dealloc(PyNs3UanPhyDual *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyDual__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyDual__tp_richcompare (PyNs3UanPhyDual *PYBINDGEN_UNUSED(self), PyNs3UanPhyDual *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyDual_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyDual_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyDual",            /* tp_name */
    sizeof(PyNs3UanPhyDual),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyDual__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyDual__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyDual__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyDual__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyDual_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyDual, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyDual__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UanPhyGen__tp_init__0(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyGen *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyGen_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPhyGen(*((PyNs3UanPhyGen *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3UanPhyGen__tp_init__1(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanPhyGen();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3UanPhyGen__tp_init(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyGen__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyGen__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetPacketRx(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPacketRx();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetReceiveErrorCallback(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl4> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl4> (cb);
    self->obj->SetReceiveErrorCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPhyGen::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetMac(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanMac *mac;
    ns3::UanMac *mac_ptr;
    const char *keywords[] = {"mac", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanMac_Type, &mac)) {
        return NULL;
    }
    mac_ptr = (mac ? mac->obj : NULL);
    self->obj->SetMac(ns3::Ptr< ns3::UanMac  > (mac_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetTxPowerDb(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double txpwr;
    const char *keywords[] = {"txpwr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txpwr)) {
        return NULL;
    }
    self->obj->SetTxPowerDb(txpwr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetRxGainDb(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxGainDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetCcaThresholdDb(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double thresh;
    const char *keywords[] = {"thresh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &thresh)) {
        return NULL;
    }
    self->obj->SetCcaThresholdDb(thresh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetDefaultModes(void)
{
    PyObject *py_retval;
    PyNs3UanModesList *py_UanModesList;
    
    ns3::UanModesList retval = ns3::UanPhyGen::GetDefaultModes();
    py_UanModesList = PyObject_New(PyNs3UanModesList, &PyNs3UanModesList_Type);
    py_UanModesList->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanModesList->obj = new ns3::UanModesList(retval);
    PyNs3UanModesList_wrapper_registry[(void *) py_UanModesList->obj] = (PyObject *) py_UanModesList;
    py_retval = Py_BuildValue((char *) "N", py_UanModesList);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetTransducer(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanTransducer > retval;
    PyNs3UanTransducer *py_UanTransducer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetTransducer();
    if (!(const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanTransducer = NULL;
    } else {
        py_UanTransducer = (PyNs3UanTransducer *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanTransducer);
    }
    
    if (py_UanTransducer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)))), &PyNs3UanTransducer_Type);
        py_UanTransducer = PyObject_GC_New(PyNs3UanTransducer, wrapper_type);
        py_UanTransducer->inst_dict = NULL;
        py_UanTransducer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval))->Ref();
        py_UanTransducer->obj = const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanTransducer->obj] = (PyObject *) py_UanTransducer;
    }
    py_retval = Py_BuildValue((char *) "N", py_UanTransducer);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetRxGainDb(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetRxGainDb(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetTransducer(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanTransducer *trans;
    ns3::UanTransducer *trans_ptr;
    const char *keywords[] = {"trans", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanTransducer_Type, &trans)) {
        return NULL;
    }
    trans_ptr = (trans ? trans->obj : NULL);
    self->obj->SetTransducer(ns3::Ptr< ns3::UanTransducer  > (trans_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetCcaThresholdDb(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCcaThresholdDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetNModes(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNModes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetRxThresholdDb(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxThresholdDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_StartRxPacket(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    double rxPowerDb;
    PyNs3UanTxMode *txMode;
    PyNs3UanPdp *pdp;
    const char *keywords[] = {"pkt", "rxPowerDb", "txMode", "pdp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O!", (char **) keywords, &PyNs3Packet_Type, &pkt, &rxPowerDb, &PyNs3UanTxMode_Type, &txMode, &PyNs3UanPdp_Type, &pdp)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    self->obj->StartRxPacket(ns3::Ptr< ns3::Packet  > (pkt_ptr), rxPowerDb, *((PyNs3UanTxMode *) txMode)->obj, *((PyNs3UanPdp *) pdp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_Clear(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_IsStateRx(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetRxThresholdDb(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double thresh;
    const char *keywords[] = {"thresh", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &thresh)) {
        return NULL;
    }
    self->obj->SetRxThresholdDb(thresh);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_NotifyTransStartTx(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDb;
    PyNs3UanTxMode *txMode;
    const char *keywords[] = {"packet", "txPowerDb", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &packet, &txPowerDb, &PyNs3UanTxMode_Type, &txMode)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTransStartTx(ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDb, *((PyNs3UanTxMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetDevice(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanNetDevice *device;
    ns3::UanNetDevice *device_ptr;
    const char *keywords[] = {"device", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanNetDevice_Type, &device)) {
        return NULL;
    }
    device_ptr = (device ? device->obj : NULL);
    self->obj->SetDevice(ns3::Ptr< ns3::UanNetDevice  > (device_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SendPacket(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    unsigned int modeNum;
    const char *keywords[] = {"pkt", "modeNum", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!I", (char **) keywords, &PyNs3Packet_Type, &pkt, &modeNum)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    self->obj->SendPacket(ns3::Ptr< ns3::Packet  > (pkt_ptr), modeNum);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_IsStateTx(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetDevice(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanNetDevice > retval;
    PyNs3UanNetDevice *py_UanNetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetDevice();
    if (!(const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanNetDevice__PythonHelper))
    {
        py_UanNetDevice = reinterpret_cast< PyNs3UanNetDevice* >(reinterpret_cast< PyNs3UanNetDevice__PythonHelper* >(const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanNetDevice->obj = const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanNetDevice);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanNetDevice = NULL;
        } else {
            py_UanNetDevice = (PyNs3UanNetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanNetDevice);
        }
    
        if (py_UanNetDevice == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval)))), &PyNs3UanNetDevice_Type);
            py_UanNetDevice = PyObject_GC_New(PyNs3UanNetDevice, wrapper_type);
            py_UanNetDevice->inst_dict = NULL;
            py_UanNetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval))->Ref();
            py_UanNetDevice->obj = const_cast<ns3::UanNetDevice *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanNetDevice->obj] = (PyObject *) py_UanNetDevice;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanNetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetMode(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int n;
    const char *keywords[] = {"n", NULL};
    PyNs3UanTxMode *py_UanTxMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &n)) {
        return NULL;
    }
    ns3::UanTxMode retval = self->obj->GetMode(n);
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(retval);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = Py_BuildValue((char *) "N", py_UanTxMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_IsStateBusy(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetReceiveOkCallback(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl5> cb_cb_impl;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl5> (cb);
    self->obj->SetReceiveOkCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, double, ns3::UanTxMode, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_SetChannel(PyNs3UanPhyGen *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanChannel *channel;
    ns3::UanChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanChannel_Type, &channel)) {
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::UanChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetChannel(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanChannel > retval;
    PyNs3UanChannel *py_UanChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanChannel__PythonHelper))
    {
        py_UanChannel = reinterpret_cast< PyNs3UanChannel* >(reinterpret_cast< PyNs3UanChannel__PythonHelper* >(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanChannel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanChannel = NULL;
        } else {
            py_UanChannel = (PyNs3UanChannel *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanChannel);
        }
    
        if (py_UanChannel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))), &PyNs3UanChannel_Type);
            py_UanChannel = PyObject_GC_New(PyNs3UanChannel, wrapper_type);
            py_UanChannel->inst_dict = NULL;
            py_UanChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval))->Ref();
            py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanChannel->obj] = (PyObject *) py_UanChannel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_IsStateIdle(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateIdle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_NotifyIntChange(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyIntChange();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_IsStateCcaBusy(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateCcaBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyGen_GetTxPowerDb(PyNs3UanPhyGen *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerDb();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPhyGen__copy__(PyNs3UanPhyGen *self)
{

    PyNs3UanPhyGen *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPhyGen, &PyNs3UanPhyGen_Type);
    py_copy->obj = new ns3::UanPhyGen(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPhyGen_methods[] = {
    {(char *) "GetPacketRx", (PyCFunction) _wrap_PyNs3UanPhyGen_GetPacketRx, METH_NOARGS, NULL },
    {(char *) "SetReceiveErrorCallback", (PyCFunction) _wrap_PyNs3UanPhyGen_SetReceiveErrorCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPhyGen_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetMac", (PyCFunction) _wrap_PyNs3UanPhyGen_SetMac, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxPowerDb", (PyCFunction) _wrap_PyNs3UanPhyGen_SetTxPowerDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRxGainDb", (PyCFunction) _wrap_PyNs3UanPhyGen_GetRxGainDb, METH_NOARGS, NULL },
    {(char *) "SetCcaThresholdDb", (PyCFunction) _wrap_PyNs3UanPhyGen_SetCcaThresholdDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDefaultModes", (PyCFunction) _wrap_PyNs3UanPhyGen_GetDefaultModes, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetTransducer", (PyCFunction) _wrap_PyNs3UanPhyGen_GetTransducer, METH_NOARGS, NULL },
    {(char *) "SetRxGainDb", (PyCFunction) _wrap_PyNs3UanPhyGen_SetRxGainDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTransducer", (PyCFunction) _wrap_PyNs3UanPhyGen_SetTransducer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCcaThresholdDb", (PyCFunction) _wrap_PyNs3UanPhyGen_GetCcaThresholdDb, METH_NOARGS, NULL },
    {(char *) "GetNModes", (PyCFunction) _wrap_PyNs3UanPhyGen_GetNModes, METH_NOARGS, NULL },
    {(char *) "GetRxThresholdDb", (PyCFunction) _wrap_PyNs3UanPhyGen_GetRxThresholdDb, METH_NOARGS, NULL },
    {(char *) "StartRxPacket", (PyCFunction) _wrap_PyNs3UanPhyGen_StartRxPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanPhyGen_Clear, METH_NOARGS, NULL },
    {(char *) "IsStateRx", (PyCFunction) _wrap_PyNs3UanPhyGen_IsStateRx, METH_NOARGS, NULL },
    {(char *) "SetRxThresholdDb", (PyCFunction) _wrap_PyNs3UanPhyGen_SetRxThresholdDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyTransStartTx", (PyCFunction) _wrap_PyNs3UanPhyGen_NotifyTransStartTx, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDevice", (PyCFunction) _wrap_PyNs3UanPhyGen_SetDevice, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SendPacket", (PyCFunction) _wrap_PyNs3UanPhyGen_SendPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateTx", (PyCFunction) _wrap_PyNs3UanPhyGen_IsStateTx, METH_NOARGS, NULL },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3UanPhyGen_GetDevice, METH_NOARGS, NULL },
    {(char *) "GetMode", (PyCFunction) _wrap_PyNs3UanPhyGen_GetMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateBusy", (PyCFunction) _wrap_PyNs3UanPhyGen_IsStateBusy, METH_NOARGS, NULL },
    {(char *) "SetReceiveOkCallback", (PyCFunction) _wrap_PyNs3UanPhyGen_SetReceiveOkCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3UanPhyGen_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3UanPhyGen_GetChannel, METH_NOARGS, NULL },
    {(char *) "IsStateIdle", (PyCFunction) _wrap_PyNs3UanPhyGen_IsStateIdle, METH_NOARGS, NULL },
    {(char *) "NotifyIntChange", (PyCFunction) _wrap_PyNs3UanPhyGen_NotifyIntChange, METH_NOARGS, NULL },
    {(char *) "IsStateCcaBusy", (PyCFunction) _wrap_PyNs3UanPhyGen_IsStateCcaBusy, METH_NOARGS, NULL },
    {(char *) "GetTxPowerDb", (PyCFunction) _wrap_PyNs3UanPhyGen_GetTxPowerDb, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPhyGen__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyGen__tp_clear(PyNs3UanPhyGen *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyGen *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyGen__tp_traverse(PyNs3UanPhyGen *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UanPhyGen__tp_dealloc(PyNs3UanPhyGen *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyGen__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyGen__tp_richcompare (PyNs3UanPhyGen *PYBINDGEN_UNUSED(self), PyNs3UanPhyGen *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyGen_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyGen_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyGen",            /* tp_name */
    sizeof(PyNs3UanPhyGen),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyGen__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyGen__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyGen__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyGen__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyGen_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyGen, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyGen__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPhyPer__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPhyPer *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPer__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPer__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyPer__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPhyPer *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPer__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPer__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyPer__PythonHelper::_wrap_DoStart(PyNs3UanPhyPer *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPer__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPer__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3UanPhyPer__PythonHelper::CalcPer(ns3::Ptr< ns3::Packet > pkt, double sinrDb, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPer *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3UanTxMode *py_UanTxMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcPer"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = (ns3::UanPhyPer*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcPer", (char *) "NdN", py_Packet, sinrDb, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyPer__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPer *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyPer::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = (ns3::UanPhyPer*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPer__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPer *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyPer::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = (ns3::UanPhyPer*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPhyPer__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyPer__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPer__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPer__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPhyPer__tp_init__0(PyNs3UanPhyPer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyPer_Type)
    {
        self->obj = new PyNs3UanPhyPer__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPhyPer__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanPhyPer' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3UanPhyPer__tp_init__1(PyNs3UanPhyPer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyPer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyPer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyPer_Type)
    {
        self->obj = new PyNs3UanPhyPer__PythonHelper(*((PyNs3UanPhyPer *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPhyPer__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanPhyPer' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3UanPhyPer__tp_init(PyNs3UanPhyPer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyPer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyPer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyPer_Clear(PyNs3UanPhyPer *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPer__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyPer__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Clear()) : (self->obj->ns3::UanPhyPer::Clear());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyPer_CalcPer(PyNs3UanPhyPer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    double sinrDb;
    PyNs3UanTxMode *mode;
    const char *keywords[] = {"pkt", "sinrDb", "mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &pkt, &sinrDb, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    retval = self->obj->CalcPer(ns3::Ptr< ns3::Packet  > (pkt_ptr), sinrDb, *((PyNs3UanTxMode *) mode)->obj);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyPer_DoDispose(PyNs3UanPhyPer *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPer__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyPer__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::UanPhyPer::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3UanPhyPer_methods[] = {
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanPhyPer_Clear, METH_NOARGS, NULL },
    {(char *) "CalcPer", (PyCFunction) _wrap_PyNs3UanPhyPer_CalcPer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3UanPhyPer_DoDispose, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPhyPer__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPhyPer__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPhyPer__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyPer__tp_clear(PyNs3UanPhyPer *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyPer *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyPer__tp_traverse(PyNs3UanPhyPer *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPhyPer__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPhyPer__tp_dealloc(PyNs3UanPhyPer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyPer__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyPer__tp_richcompare (PyNs3UanPhyPer *PYBINDGEN_UNUSED(self), PyNs3UanPhyPer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyPer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyPer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyPer",            /* tp_name */
    sizeof(PyNs3UanPhyPer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyPer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyPer__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyPer__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyPer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyPer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyPer, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyPer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPhyPerGenDefault__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPhyPerGenDefault *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPerGenDefault__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPerGenDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyPerGenDefault__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPhyPerGenDefault *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPerGenDefault__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPerGenDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyPerGenDefault__PythonHelper::_wrap_DoStart(PyNs3UanPhyPerGenDefault *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPerGenDefault__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPerGenDefault__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3UanPhyPerGenDefault__PythonHelper::CalcPer(ns3::Ptr< ns3::Packet > pkt, double sinrDb, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPerGenDefault *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3UanTxMode *py_UanTxMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcPer"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyPerGenDefault::CalcPer(pkt, sinrDb, mode);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPerGenDefault* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPerGenDefault* >(m_pyself)->obj = (ns3::UanPhyPerGenDefault*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcPer", (char *) "NdN", py_Packet, sinrDb, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPerGenDefault* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyPerGenDefault::CalcPer(pkt, sinrDb, mode);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPerGenDefault* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyPerGenDefault::CalcPer(pkt, sinrDb, mode);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPerGenDefault* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyPerGenDefault__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPer *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyPer::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = (ns3::UanPhyPer*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPerGenDefault__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPer *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyPer::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = (ns3::UanPhyPer*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPhyPerGenDefault__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyPerGenDefault__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPerGenDefault__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPerGenDefault__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPhyPerGenDefault__tp_init__0(PyNs3UanPhyPerGenDefault *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyPerGenDefault *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyPerGenDefault_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyPerGenDefault_Type)
    {
        self->obj = new PyNs3UanPhyPerGenDefault__PythonHelper(*((PyNs3UanPhyPerGenDefault *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPhyPerGenDefault__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyPerGenDefault(*((PyNs3UanPhyPerGenDefault *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanPhyPerGenDefault__tp_init__1(PyNs3UanPhyPerGenDefault *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyPerGenDefault_Type)
    {
        self->obj = new PyNs3UanPhyPerGenDefault__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPhyPerGenDefault__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyPerGenDefault();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanPhyPerGenDefault__tp_init(PyNs3UanPhyPerGenDefault *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyPerGenDefault__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyPerGenDefault__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyPerGenDefault_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPhyPerGenDefault::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyPerGenDefault_CalcPer(PyNs3UanPhyPerGenDefault *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    double sinrDb;
    PyNs3UanTxMode *mode;
    PyNs3UanPhyPerGenDefault__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyPerGenDefault__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "sinrDb", "mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &pkt, &sinrDb, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->CalcPer(ns3::Ptr< ns3::Packet  > (pkt_ptr), sinrDb, *((PyNs3UanTxMode *) mode)->obj)) : (self->obj->ns3::UanPhyPerGenDefault::CalcPer(ns3::Ptr< ns3::Packet  > (pkt_ptr), sinrDb, *((PyNs3UanTxMode *) mode)->obj));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPhyPerGenDefault__copy__(PyNs3UanPhyPerGenDefault *self)
{

    PyNs3UanPhyPerGenDefault *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPhyPerGenDefault, &PyNs3UanPhyPerGenDefault_Type);
    py_copy->obj = new ns3::UanPhyPerGenDefault(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPhyPerGenDefault_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPhyPerGenDefault_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CalcPer", (PyCFunction) _wrap_PyNs3UanPhyPerGenDefault_CalcPer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPhyPerGenDefault__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPhyPerGenDefault__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPhyPerGenDefault__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPhyPerGenDefault__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyPerGenDefault__tp_clear(PyNs3UanPhyPerGenDefault *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyPerGenDefault *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyPerGenDefault__tp_traverse(PyNs3UanPhyPerGenDefault *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPhyPerGenDefault__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPhyPerGenDefault__tp_dealloc(PyNs3UanPhyPerGenDefault *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyPerGenDefault__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyPerGenDefault__tp_richcompare (PyNs3UanPhyPerGenDefault *PYBINDGEN_UNUSED(self), PyNs3UanPhyPerGenDefault *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyPerGenDefault_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyPerGenDefault_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyPerGenDefault",            /* tp_name */
    sizeof(PyNs3UanPhyPerGenDefault),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyPerGenDefault__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyPerGenDefault__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyPerGenDefault__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyPerGenDefault__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyPerGenDefault_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyPerGenDefault, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyPerGenDefault__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPhyPerUmodem__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPhyPerUmodem *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPerUmodem__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPerUmodem__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyPerUmodem__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPhyPerUmodem *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPerUmodem__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPerUmodem__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPhyPerUmodem__PythonHelper::_wrap_DoStart(PyNs3UanPhyPerUmodem *self)
{
    PyObject *py_retval;
    PyNs3UanPhyPerUmodem__PythonHelper *helper = dynamic_cast< PyNs3UanPhyPerUmodem__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3UanPhyPerUmodem__PythonHelper::CalcPer(ns3::Ptr< ns3::Packet > pkt, double sinrDb, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPerUmodem *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3UanTxMode *py_UanTxMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CalcPer"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyPerUmodem::CalcPer(pkt, sinrDb, mode);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPerUmodem* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPerUmodem* >(m_pyself)->obj = (ns3::UanPhyPerUmodem*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CalcPer", (char *) "NdN", py_Packet, sinrDb, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPerUmodem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyPerUmodem::CalcPer(pkt, sinrDb, mode);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPerUmodem* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPhyPerUmodem::CalcPer(pkt, sinrDb, mode);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPerUmodem* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyPerUmodem__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPer *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyPer::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = (ns3::UanPhyPer*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPerUmodem__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPhyPer *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPhyPer::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = (ns3::UanPhyPer*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPhyPer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPhyPerUmodem__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPhyPerUmodem__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPerUmodem__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPhyPerUmodem__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPhyPerUmodem__tp_init__0(PyNs3UanPhyPerUmodem *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPhyPerUmodem *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhyPerUmodem_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyPerUmodem_Type)
    {
        self->obj = new PyNs3UanPhyPerUmodem__PythonHelper(*((PyNs3UanPhyPerUmodem *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPhyPerUmodem__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyPerUmodem(*((PyNs3UanPhyPerUmodem *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanPhyPerUmodem__tp_init__1(PyNs3UanPhyPerUmodem *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPhyPerUmodem_Type)
    {
        self->obj = new PyNs3UanPhyPerUmodem__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPhyPerUmodem__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPhyPerUmodem();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanPhyPerUmodem__tp_init(PyNs3UanPhyPerUmodem *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPhyPerUmodem__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPhyPerUmodem__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPhyPerUmodem_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPhyPerUmodem::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPhyPerUmodem_CalcPer(PyNs3UanPhyPerUmodem *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    double sinrDb;
    PyNs3UanTxMode *mode;
    PyNs3UanPhyPerUmodem__PythonHelper *helper_class = dynamic_cast<PyNs3UanPhyPerUmodem__PythonHelper*> (self->obj);
    const char *keywords[] = {"pkt", "sinrDb", "mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!", (char **) keywords, &PyNs3Packet_Type, &pkt, &sinrDb, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->CalcPer(ns3::Ptr< ns3::Packet  > (pkt_ptr), sinrDb, *((PyNs3UanTxMode *) mode)->obj)) : (self->obj->ns3::UanPhyPerUmodem::CalcPer(ns3::Ptr< ns3::Packet  > (pkt_ptr), sinrDb, *((PyNs3UanTxMode *) mode)->obj));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPhyPerUmodem__copy__(PyNs3UanPhyPerUmodem *self)
{

    PyNs3UanPhyPerUmodem *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPhyPerUmodem, &PyNs3UanPhyPerUmodem_Type);
    py_copy->obj = new ns3::UanPhyPerUmodem(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPhyPerUmodem_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPhyPerUmodem_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CalcPer", (PyCFunction) _wrap_PyNs3UanPhyPerUmodem_CalcPer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPhyPerUmodem__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPhyPerUmodem__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPhyPerUmodem__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPhyPerUmodem__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPhyPerUmodem__tp_clear(PyNs3UanPhyPerUmodem *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPhyPerUmodem *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPhyPerUmodem__tp_traverse(PyNs3UanPhyPerUmodem *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPhyPerUmodem__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPhyPerUmodem__tp_dealloc(PyNs3UanPhyPerUmodem *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPhyPerUmodem__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPhyPerUmodem__tp_richcompare (PyNs3UanPhyPerUmodem *PYBINDGEN_UNUSED(self), PyNs3UanPhyPerUmodem *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPhyPerUmodem_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPhyPerUmodem_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPhyPerUmodem",            /* tp_name */
    sizeof(PyNs3UanPhyPerUmodem),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPhyPerUmodem__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPhyPerUmodem__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPhyPerUmodem__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPhyPerUmodem__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPhyPerUmodem_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPhyPerUmodem, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPhyPerUmodem__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPropModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPropModel *self)
{
    PyObject *py_retval;
    PyNs3UanPropModel__PythonHelper *helper = dynamic_cast< PyNs3UanPropModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPropModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPropModel *self)
{
    PyObject *py_retval;
    PyNs3UanPropModel__PythonHelper *helper = dynamic_cast< PyNs3UanPropModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPropModel__PythonHelper::_wrap_DoStart(PyNs3UanPropModel *self)
{
    PyObject *py_retval;
    PyNs3UanPropModel__PythonHelper *helper = dynamic_cast< PyNs3UanPropModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3UanPropModel__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPropModel::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPropModel::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3UanPropModel__PythonHelper::GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDelay"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Time();
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDelay", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Time();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Time();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3UanPropModel__PythonHelper::GetPathLossDb(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode txMode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPathLossDb"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(txMode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPathLossDb", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::UanPdp
PyNs3UanPropModel__PythonHelper::GetPdp(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3UanPdp *tmp_UanPdp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPdp"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPdp();
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPdp", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPdp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3UanPdp_Type, &tmp_UanPdp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPdp();
    }
    ns3::UanPdp retval = *tmp_UanPdp->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3UanPropModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPropModel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPropModel__tp_init__0(PyNs3UanPropModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPropModel_Type)
    {
        self->obj = new PyNs3UanPropModel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPropModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanPropModel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3UanPropModel__tp_init__1(PyNs3UanPropModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPropModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPropModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPropModel_Type)
    {
        self->obj = new PyNs3UanPropModel__PythonHelper(*((PyNs3UanPropModel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPropModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'UanPropModel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3UanPropModel__tp_init(PyNs3UanPropModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPropModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPropModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPropModel_GetDelay(PyNs3UanPropModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *mode;
    const char *keywords[] = {"a", "b", "mode", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    ns3::Time retval = self->obj->GetDelay(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModel_Clear(PyNs3UanPropModel *self)
{
    PyObject *py_retval;
    PyNs3UanPropModel__PythonHelper *helper_class = dynamic_cast<PyNs3UanPropModel__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Clear()) : (self->obj->ns3::UanPropModel::Clear());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModel_GetPathLossDb(PyNs3UanPropModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *txMode;
    const char *keywords[] = {"a", "b", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &txMode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    retval = self->obj->GetPathLossDb(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) txMode)->obj);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModel_GetPdp(PyNs3UanPropModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *mode;
    const char *keywords[] = {"a", "b", "mode", NULL};
    PyNs3UanPdp *py_UanPdp;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    ns3::UanPdp retval = self->obj->GetPdp(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj);
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(retval);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_retval = Py_BuildValue((char *) "N", py_UanPdp);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModel_DoDispose(PyNs3UanPropModel *self)
{
    PyObject *py_retval;
    PyNs3UanPropModel__PythonHelper *helper_class = dynamic_cast<PyNs3UanPropModel__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::UanPropModel::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3UanPropModel_methods[] = {
    {(char *) "GetDelay", (PyCFunction) _wrap_PyNs3UanPropModel_GetDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanPropModel_Clear, METH_NOARGS, NULL },
    {(char *) "GetPathLossDb", (PyCFunction) _wrap_PyNs3UanPropModel_GetPathLossDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPdp", (PyCFunction) _wrap_PyNs3UanPropModel_GetPdp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3UanPropModel_DoDispose, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPropModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPropModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPropModel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPropModel__tp_clear(PyNs3UanPropModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPropModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPropModel__tp_traverse(PyNs3UanPropModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPropModel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPropModel__tp_dealloc(PyNs3UanPropModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPropModel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPropModel__tp_richcompare (PyNs3UanPropModel *PYBINDGEN_UNUSED(self), PyNs3UanPropModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPropModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPropModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPropModel",            /* tp_name */
    sizeof(PyNs3UanPropModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPropModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPropModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPropModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPropModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPropModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPropModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPropModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPropModelIdeal__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPropModelIdeal *self)
{
    PyObject *py_retval;
    PyNs3UanPropModelIdeal__PythonHelper *helper = dynamic_cast< PyNs3UanPropModelIdeal__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPropModelIdeal__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPropModelIdeal *self)
{
    PyObject *py_retval;
    PyNs3UanPropModelIdeal__PythonHelper *helper = dynamic_cast< PyNs3UanPropModelIdeal__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPropModelIdeal__PythonHelper::_wrap_DoStart(PyNs3UanPropModelIdeal *self)
{
    PyObject *py_retval;
    PyNs3UanPropModelIdeal__PythonHelper *helper = dynamic_cast< PyNs3UanPropModelIdeal__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Time
PyNs3UanPropModelIdeal__PythonHelper::GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModelIdeal *self_obj_before;
    PyObject *py_retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDelay"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetDelay(a, b, mode);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = (ns3::UanPropModelIdeal*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDelay", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetDelay(a, b, mode);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetDelay(a, b, mode);
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3UanPropModelIdeal__PythonHelper::GetPathLossDb(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModelIdeal *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPathLossDb"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetPathLossDb(a, b, mode);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = (ns3::UanPropModelIdeal*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPathLossDb", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetPathLossDb(a, b, mode);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetPathLossDb(a, b, mode);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::UanPdp
PyNs3UanPropModelIdeal__PythonHelper::GetPdp(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModelIdeal *self_obj_before;
    PyObject *py_retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3UanPdp *tmp_UanPdp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPdp"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetPdp(a, b, mode);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = (ns3::UanPropModelIdeal*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPdp", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetPdp(a, b, mode);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3UanPdp_Type, &tmp_UanPdp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelIdeal::GetPdp(a, b, mode);
    }
    ns3::UanPdp retval = *tmp_UanPdp->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModelIdeal* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPropModelIdeal__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPropModel::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModelIdeal__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPropModel::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPropModelIdeal__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPropModelIdeal__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModelIdeal__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModelIdeal__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPropModelIdeal__tp_init__0(PyNs3UanPropModelIdeal *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPropModelIdeal *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPropModelIdeal_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPropModelIdeal_Type)
    {
        self->obj = new PyNs3UanPropModelIdeal__PythonHelper(*((PyNs3UanPropModelIdeal *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPropModelIdeal__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPropModelIdeal(*((PyNs3UanPropModelIdeal *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanPropModelIdeal__tp_init__1(PyNs3UanPropModelIdeal *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPropModelIdeal_Type)
    {
        self->obj = new PyNs3UanPropModelIdeal__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPropModelIdeal__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPropModelIdeal();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanPropModelIdeal__tp_init(PyNs3UanPropModelIdeal *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPropModelIdeal__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPropModelIdeal__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPropModelIdeal_GetDelay(PyNs3UanPropModelIdeal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *mode;
    PyNs3UanPropModelIdeal__PythonHelper *helper_class = dynamic_cast<PyNs3UanPropModelIdeal__PythonHelper*> (self->obj);
    const char *keywords[] = {"a", "b", "mode", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetDelay(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj)) : (self->obj->ns3::UanPropModelIdeal::GetDelay(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj));
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModelIdeal_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPropModelIdeal::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModelIdeal_GetPdp(PyNs3UanPropModelIdeal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *mode;
    PyNs3UanPropModelIdeal__PythonHelper *helper_class = dynamic_cast<PyNs3UanPropModelIdeal__PythonHelper*> (self->obj);
    const char *keywords[] = {"a", "b", "mode", NULL};
    PyNs3UanPdp *py_UanPdp;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    ns3::UanPdp retval = (helper_class == NULL)? (self->obj->GetPdp(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj)) : (self->obj->ns3::UanPropModelIdeal::GetPdp(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj));
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(retval);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_retval = Py_BuildValue((char *) "N", py_UanPdp);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModelIdeal_GetPathLossDb(PyNs3UanPropModelIdeal *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *mode;
    PyNs3UanPropModelIdeal__PythonHelper *helper_class = dynamic_cast<PyNs3UanPropModelIdeal__PythonHelper*> (self->obj);
    const char *keywords[] = {"a", "b", "mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->GetPathLossDb(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj)) : (self->obj->ns3::UanPropModelIdeal::GetPathLossDb(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPropModelIdeal__copy__(PyNs3UanPropModelIdeal *self)
{

    PyNs3UanPropModelIdeal *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPropModelIdeal, &PyNs3UanPropModelIdeal_Type);
    py_copy->obj = new ns3::UanPropModelIdeal(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPropModelIdeal_methods[] = {
    {(char *) "GetDelay", (PyCFunction) _wrap_PyNs3UanPropModelIdeal_GetDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPropModelIdeal_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetPdp", (PyCFunction) _wrap_PyNs3UanPropModelIdeal_GetPdp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPathLossDb", (PyCFunction) _wrap_PyNs3UanPropModelIdeal_GetPathLossDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPropModelIdeal__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPropModelIdeal__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPropModelIdeal__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPropModelIdeal__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPropModelIdeal__tp_clear(PyNs3UanPropModelIdeal *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPropModelIdeal *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPropModelIdeal__tp_traverse(PyNs3UanPropModelIdeal *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPropModelIdeal__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPropModelIdeal__tp_dealloc(PyNs3UanPropModelIdeal *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPropModelIdeal__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPropModelIdeal__tp_richcompare (PyNs3UanPropModelIdeal *PYBINDGEN_UNUSED(self), PyNs3UanPropModelIdeal *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPropModelIdeal_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPropModelIdeal_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPropModelIdeal",            /* tp_name */
    sizeof(PyNs3UanPropModelIdeal),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPropModelIdeal__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPropModelIdeal__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPropModelIdeal__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPropModelIdeal__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPropModelIdeal_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPropModelIdeal, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPropModelIdeal__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanPropModelThorp__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanPropModelThorp *self)
{
    PyObject *py_retval;
    PyNs3UanPropModelThorp__PythonHelper *helper = dynamic_cast< PyNs3UanPropModelThorp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPropModelThorp__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanPropModelThorp *self)
{
    PyObject *py_retval;
    PyNs3UanPropModelThorp__PythonHelper *helper = dynamic_cast< PyNs3UanPropModelThorp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanPropModelThorp__PythonHelper::_wrap_DoStart(PyNs3UanPropModelThorp *self)
{
    PyObject *py_retval;
    PyNs3UanPropModelThorp__PythonHelper *helper = dynamic_cast< PyNs3UanPropModelThorp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Time
PyNs3UanPropModelThorp__PythonHelper::GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModelThorp *self_obj_before;
    PyObject *py_retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDelay"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetDelay(a, b, mode);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = (ns3::UanPropModelThorp*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDelay", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetDelay(a, b, mode);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetDelay(a, b, mode);
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3UanPropModelThorp__PythonHelper::GetPathLossDb(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModelThorp *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPathLossDb"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetPathLossDb(a, b, mode);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = (ns3::UanPropModelThorp*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPathLossDb", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetPathLossDb(a, b, mode);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetPathLossDb(a, b, mode);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::UanPdp
PyNs3UanPropModelThorp__PythonHelper::GetPdp(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModelThorp *self_obj_before;
    PyObject *py_retval;
    PyNs3MobilityModel *py_MobilityModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3MobilityModel *py_MobilityModel2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3UanTxMode *py_UanTxMode;
    PyNs3UanPdp *tmp_UanPdp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPdp"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetPdp(a, b, mode);
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = (ns3::UanPropModelThorp*) this;
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)))->m_pyself);
        py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
        Py_INCREF(py_MobilityModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel = NULL;
        } else {
            py_MobilityModel = (PyNs3MobilityModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_MobilityModel);
        }
    
        if (py_MobilityModel == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))), &PyNs3MobilityModel_Type);
            py_MobilityModel = PyObject_GC_New(PyNs3MobilityModel, wrapper_type);
            py_MobilityModel->inst_dict = NULL;
            py_MobilityModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a))->Ref();
            py_MobilityModel->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (a));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel->obj] = (PyObject *) py_MobilityModel;
        }
    }
    if (typeid(*(const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))) == typeid(PyNs3MobilityModel__PythonHelper))
    {
        py_MobilityModel2 = (PyNs3MobilityModel*) (((PyNs3MobilityModel__PythonHelper*) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)))->m_pyself);
        py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
        Py_INCREF(py_MobilityModel2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MobilityModel2 = NULL;
        } else {
            py_MobilityModel2 = (PyNs3MobilityModel *) wrapper_lookup_iter2->second;
            Py_INCREF(py_MobilityModel2);
        }
    
        if (py_MobilityModel2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))), &PyNs3MobilityModel_Type);
            py_MobilityModel2 = PyObject_GC_New(PyNs3MobilityModel, wrapper_type2);
            py_MobilityModel2->inst_dict = NULL;
            py_MobilityModel2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b))->Ref();
            py_MobilityModel2->obj = const_cast<ns3::MobilityModel *> (ns3::PeekPointer (b));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MobilityModel2->obj] = (PyObject *) py_MobilityModel2;
        }
    }
    py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
    py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanTxMode->obj = new ns3::UanTxMode(mode);
    PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPdp", (char *) "NNN", py_MobilityModel, py_MobilityModel2, py_UanTxMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetPdp(a, b, mode);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3UanPdp_Type, &tmp_UanPdp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanPropModelThorp::GetPdp(a, b, mode);
    }
    ns3::UanPdp retval = *tmp_UanPdp->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModelThorp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPropModelThorp__PythonHelper::Clear()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Clear"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPropModel::Clear();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Clear", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModelThorp__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanPropModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanPropModel::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = (ns3::UanPropModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanPropModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanPropModelThorp__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanPropModelThorp__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModelThorp__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanPropModelThorp__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanPropModelThorp__tp_init__0(PyNs3UanPropModelThorp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanPropModelThorp *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPropModelThorp_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPropModelThorp_Type)
    {
        self->obj = new PyNs3UanPropModelThorp__PythonHelper(*((PyNs3UanPropModelThorp *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanPropModelThorp__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPropModelThorp(*((PyNs3UanPropModelThorp *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanPropModelThorp__tp_init__1(PyNs3UanPropModelThorp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanPropModelThorp_Type)
    {
        self->obj = new PyNs3UanPropModelThorp__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanPropModelThorp__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanPropModelThorp();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanPropModelThorp__tp_init(PyNs3UanPropModelThorp *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanPropModelThorp__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanPropModelThorp__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanPropModelThorp_GetDelay(PyNs3UanPropModelThorp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *mode;
    PyNs3UanPropModelThorp__PythonHelper *helper_class = dynamic_cast<PyNs3UanPropModelThorp__PythonHelper*> (self->obj);
    const char *keywords[] = {"a", "b", "mode", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetDelay(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj)) : (self->obj->ns3::UanPropModelThorp::GetDelay(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj));
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModelThorp_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanPropModelThorp::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModelThorp_GetPdp(PyNs3UanPropModelThorp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *mode;
    PyNs3UanPropModelThorp__PythonHelper *helper_class = dynamic_cast<PyNs3UanPropModelThorp__PythonHelper*> (self->obj);
    const char *keywords[] = {"a", "b", "mode", NULL};
    PyNs3UanPdp *py_UanPdp;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    ns3::UanPdp retval = (helper_class == NULL)? (self->obj->GetPdp(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj)) : (self->obj->ns3::UanPropModelThorp::GetPdp(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj));
    py_UanPdp = PyObject_New(PyNs3UanPdp, &PyNs3UanPdp_Type);
    py_UanPdp->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPdp->obj = new ns3::UanPdp(retval);
    PyNs3UanPdp_wrapper_registry[(void *) py_UanPdp->obj] = (PyObject *) py_UanPdp;
    py_retval = Py_BuildValue((char *) "N", py_UanPdp);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanPropModelThorp_GetPathLossDb(PyNs3UanPropModelThorp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3MobilityModel *a;
    ns3::MobilityModel *a_ptr;
    PyNs3MobilityModel *b;
    ns3::MobilityModel *b_ptr;
    PyNs3UanTxMode *mode;
    PyNs3UanPropModelThorp__PythonHelper *helper_class = dynamic_cast<PyNs3UanPropModelThorp__PythonHelper*> (self->obj);
    const char *keywords[] = {"a", "b", "mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3MobilityModel_Type, &a, &PyNs3MobilityModel_Type, &b, &PyNs3UanTxMode_Type, &mode)) {
        return NULL;
    }
    a_ptr = (a ? a->obj : NULL);
    b_ptr = (b ? b->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->GetPathLossDb(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj)) : (self->obj->ns3::UanPropModelThorp::GetPathLossDb(ns3::Ptr< ns3::MobilityModel  > (a_ptr), ns3::Ptr< ns3::MobilityModel  > (b_ptr), *((PyNs3UanTxMode *) mode)->obj));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanPropModelThorp__copy__(PyNs3UanPropModelThorp *self)
{

    PyNs3UanPropModelThorp *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanPropModelThorp, &PyNs3UanPropModelThorp_Type);
    py_copy->obj = new ns3::UanPropModelThorp(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanPropModelThorp_methods[] = {
    {(char *) "GetDelay", (PyCFunction) _wrap_PyNs3UanPropModelThorp_GetDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanPropModelThorp_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetPdp", (PyCFunction) _wrap_PyNs3UanPropModelThorp_GetPdp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPathLossDb", (PyCFunction) _wrap_PyNs3UanPropModelThorp_GetPathLossDb, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanPropModelThorp__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanPropModelThorp__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanPropModelThorp__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanPropModelThorp__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanPropModelThorp__tp_clear(PyNs3UanPropModelThorp *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanPropModelThorp *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanPropModelThorp__tp_traverse(PyNs3UanPropModelThorp *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanPropModelThorp__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanPropModelThorp__tp_dealloc(PyNs3UanPropModelThorp *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanPropModelThorp__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanPropModelThorp__tp_richcompare (PyNs3UanPropModelThorp *PYBINDGEN_UNUSED(self), PyNs3UanPropModelThorp *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanPropModelThorp_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanPropModelThorp_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanPropModelThorp",            /* tp_name */
    sizeof(PyNs3UanPropModelThorp),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanPropModelThorp__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanPropModelThorp__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanPropModelThorp__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanPropModelThorp__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanPropModelThorp_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanPropModelThorp, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanPropModelThorp__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3UanTransducer__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'UanTransducer' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3UanTransducer_IsRx(PyNs3UanTransducer *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducer_GetState(PyNs3UanTransducer *self)
{
    PyObject *py_retval;
    ns3::UanTransducer::State retval;
    
    retval = self->obj->GetState();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducer_Receive(PyNs3UanTransducer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxPowerDb;
    PyNs3UanTxMode *txMode;
    PyNs3UanPdp *pdp;
    const char *keywords[] = {"packet", "rxPowerDb", "txMode", "pdp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &rxPowerDb, &PyNs3UanTxMode_Type, &txMode, &PyNs3UanPdp_Type, &pdp)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Receive(ns3::Ptr< ns3::Packet  > (packet_ptr), rxPowerDb, *((PyNs3UanTxMode *) txMode)->obj, *((PyNs3UanPdp *) pdp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducer_Clear(PyNs3UanTransducer *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducer_GetChannel(PyNs3UanTransducer *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanChannel > retval;
    PyNs3UanChannel *py_UanChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanChannel__PythonHelper))
    {
        py_UanChannel = reinterpret_cast< PyNs3UanChannel* >(reinterpret_cast< PyNs3UanChannel__PythonHelper* >(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanChannel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanChannel = NULL;
        } else {
            py_UanChannel = (PyNs3UanChannel *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanChannel);
        }
    
        if (py_UanChannel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))), &PyNs3UanChannel_Type);
            py_UanChannel = PyObject_GC_New(PyNs3UanChannel, wrapper_type);
            py_UanChannel->inst_dict = NULL;
            py_UanChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval))->Ref();
            py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanChannel->obj] = (PyObject *) py_UanChannel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducer_Transmit(PyNs3UanTransducer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *src;
    ns3::UanPhy *src_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDb;
    PyNs3UanTxMode *txMode;
    const char *keywords[] = {"src", "packet", "txPowerDb", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!", (char **) keywords, &PyNs3UanPhy_Type, &src, &PyNs3Packet_Type, &packet, &txPowerDb, &PyNs3UanTxMode_Type, &txMode)) {
        return NULL;
    }
    src_ptr = (src ? src->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Transmit(ns3::Ptr< ns3::UanPhy  > (src_ptr), ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDb, *((PyNs3UanTxMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducer_SetChannel(PyNs3UanTransducer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanChannel *chan;
    ns3::UanChannel *chan_ptr;
    const char *keywords[] = {"chan", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanChannel_Type, &chan)) {
        return NULL;
    }
    chan_ptr = (chan ? chan->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::UanChannel  > (chan_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducer_IsTx(PyNs3UanTransducer *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducer_AddPhy(PyNs3UanTransducer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *phy;
    ns3::UanPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->AddPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3UanTransducer_methods[] = {
    {(char *) "IsRx", (PyCFunction) _wrap_PyNs3UanTransducer_IsRx, METH_NOARGS, NULL },
    {(char *) "GetState", (PyCFunction) _wrap_PyNs3UanTransducer_GetState, METH_NOARGS, NULL },
    {(char *) "Receive", (PyCFunction) _wrap_PyNs3UanTransducer_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanTransducer_Clear, METH_NOARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3UanTransducer_GetChannel, METH_NOARGS, NULL },
    {(char *) "Transmit", (PyCFunction) _wrap_PyNs3UanTransducer_Transmit, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3UanTransducer_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsTx", (PyCFunction) _wrap_PyNs3UanTransducer_IsTx, METH_NOARGS, NULL },
    {(char *) "AddPhy", (PyCFunction) _wrap_PyNs3UanTransducer_AddPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanTransducer__tp_clear(PyNs3UanTransducer *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanTransducer *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanTransducer__tp_traverse(PyNs3UanTransducer *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UanTransducer__tp_dealloc(PyNs3UanTransducer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanTransducer__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanTransducer__tp_richcompare (PyNs3UanTransducer *PYBINDGEN_UNUSED(self), PyNs3UanTransducer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanTransducer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanTransducer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanTransducer",            /* tp_name */
    sizeof(PyNs3UanTransducer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanTransducer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanTransducer__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanTransducer__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanTransducer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanTransducer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanTransducer, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanTransducer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UanTransducerHd__tp_init__0(PyNs3UanTransducerHd *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanTransducerHd *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanTransducerHd_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanTransducerHd(*((PyNs3UanTransducerHd *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3UanTransducerHd__tp_init__1(PyNs3UanTransducerHd *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanTransducerHd();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3UanTransducerHd__tp_init(PyNs3UanTransducerHd *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanTransducerHd__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanTransducerHd__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanTransducerHd_IsRx(PyNs3UanTransducerHd *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_GetState(PyNs3UanTransducerHd *self)
{
    PyObject *py_retval;
    ns3::UanTransducer::State retval;
    
    retval = self->obj->GetState();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_Receive(PyNs3UanTransducerHd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxPowerDb;
    PyNs3UanTxMode *txMode;
    PyNs3UanPdp *pdp;
    const char *keywords[] = {"packet", "rxPowerDb", "txMode", "pdp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &rxPowerDb, &PyNs3UanTxMode_Type, &txMode, &PyNs3UanPdp_Type, &pdp)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Receive(ns3::Ptr< ns3::Packet  > (packet_ptr), rxPowerDb, *((PyNs3UanTxMode *) txMode)->obj, *((PyNs3UanPdp *) pdp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_Clear(PyNs3UanTransducerHd *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_GetChannel(PyNs3UanTransducerHd *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanChannel > retval;
    PyNs3UanChannel *py_UanChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3UanChannel__PythonHelper))
    {
        py_UanChannel = reinterpret_cast< PyNs3UanChannel* >(reinterpret_cast< PyNs3UanChannel__PythonHelper* >(const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_UanChannel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_UanChannel = NULL;
        } else {
            py_UanChannel = (PyNs3UanChannel *) wrapper_lookup_iter->second;
            Py_INCREF(py_UanChannel);
        }
    
        if (py_UanChannel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval)))), &PyNs3UanChannel_Type);
            py_UanChannel = PyObject_GC_New(PyNs3UanChannel, wrapper_type);
            py_UanChannel->inst_dict = NULL;
            py_UanChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval))->Ref();
            py_UanChannel->obj = const_cast<ns3::UanChannel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_UanChannel->obj] = (PyObject *) py_UanChannel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_UanChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_Transmit(PyNs3UanTransducerHd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *src;
    ns3::UanPhy *src_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDb;
    PyNs3UanTxMode *txMode;
    const char *keywords[] = {"src", "packet", "txPowerDb", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!", (char **) keywords, &PyNs3UanPhy_Type, &src, &PyNs3Packet_Type, &packet, &txPowerDb, &PyNs3UanTxMode_Type, &txMode)) {
        return NULL;
    }
    src_ptr = (src ? src->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Transmit(ns3::Ptr< ns3::UanPhy  > (src_ptr), ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDb, *((PyNs3UanTxMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_SetChannel(PyNs3UanTransducerHd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanChannel *chan;
    ns3::UanChannel *chan_ptr;
    const char *keywords[] = {"chan", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanChannel_Type, &chan)) {
        return NULL;
    }
    chan_ptr = (chan ? chan->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::UanChannel  > (chan_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_IsTx(PyNs3UanTransducerHd *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_AddPhy(PyNs3UanTransducerHd *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *arg0;
    ns3::UanPhy *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhy_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->AddPhy(ns3::Ptr< ns3::UanPhy  > (arg0_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanTransducerHd_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanTransducerHd::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanTransducerHd__copy__(PyNs3UanTransducerHd *self)
{

    PyNs3UanTransducerHd *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanTransducerHd, &PyNs3UanTransducerHd_Type);
    py_copy->obj = new ns3::UanTransducerHd(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanTransducerHd_methods[] = {
    {(char *) "IsRx", (PyCFunction) _wrap_PyNs3UanTransducerHd_IsRx, METH_NOARGS, NULL },
    {(char *) "GetState", (PyCFunction) _wrap_PyNs3UanTransducerHd_GetState, METH_NOARGS, NULL },
    {(char *) "Receive", (PyCFunction) _wrap_PyNs3UanTransducerHd_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanTransducerHd_Clear, METH_NOARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3UanTransducerHd_GetChannel, METH_NOARGS, NULL },
    {(char *) "Transmit", (PyCFunction) _wrap_PyNs3UanTransducerHd_Transmit, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3UanTransducerHd_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsTx", (PyCFunction) _wrap_PyNs3UanTransducerHd_IsTx, METH_NOARGS, NULL },
    {(char *) "AddPhy", (PyCFunction) _wrap_PyNs3UanTransducerHd_AddPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanTransducerHd_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanTransducerHd__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanTransducerHd__tp_clear(PyNs3UanTransducerHd *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanTransducerHd *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanTransducerHd__tp_traverse(PyNs3UanTransducerHd *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3UanTransducerHd__tp_dealloc(PyNs3UanTransducerHd *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanTransducerHd__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanTransducerHd__tp_richcompare (PyNs3UanTransducerHd *PYBINDGEN_UNUSED(self), PyNs3UanTransducerHd *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanTransducerHd_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanTransducerHd_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanTransducerHd",            /* tp_name */
    sizeof(PyNs3UanTransducerHd),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanTransducerHd__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanTransducerHd__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanTransducerHd__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanTransducerHd__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanTransducerHd_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanTransducerHd, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanTransducerHd__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DeviceEnergyModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DeviceEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3DeviceEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3DeviceEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DeviceEnergyModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DeviceEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3DeviceEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3DeviceEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DeviceEnergyModel__PythonHelper::_wrap_DoStart(PyNs3DeviceEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3DeviceEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3DeviceEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DeviceEnergyModel__PythonHelper::_wrap_DoDispose(PyNs3DeviceEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3DeviceEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3DeviceEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3DeviceEnergyModel__PythonHelper::ChangeState(int newState)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DeviceEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ChangeState"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = (ns3::DeviceEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ChangeState", (char *) "i", newState);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::Node >
PyNs3DeviceEnergyModel__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DeviceEnergyModel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = const_cast< ns3::DeviceEnergyModel* >((const ns3::DeviceEnergyModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3DeviceEnergyModel__PythonHelper::GetTotalEnergyConsumption() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DeviceEnergyModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetTotalEnergyConsumption"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = const_cast< ns3::DeviceEnergyModel* >((const ns3::DeviceEnergyModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetTotalEnergyConsumption", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DeviceEnergyModel__PythonHelper::HandleEnergyDepletion()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DeviceEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "HandleEnergyDepletion"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = (ns3::DeviceEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "HandleEnergyDepletion", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DeviceEnergyModel__PythonHelper::SetEnergySource(ns3::Ptr< ns3::EnergySource > source)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DeviceEnergyModel *self_obj_before;
    PyObject *py_retval;
    PyNs3EnergySource *py_EnergySource;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEnergySource"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = (ns3::DeviceEnergyModel*) this;
    if (typeid(*(const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))) == typeid(PyNs3EnergySource__PythonHelper))
    {
        py_EnergySource = (PyNs3EnergySource*) (((PyNs3EnergySource__PythonHelper*) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))->m_pyself);
        py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
        Py_INCREF(py_EnergySource);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_EnergySource = NULL;
        } else {
            py_EnergySource = (PyNs3EnergySource *) wrapper_lookup_iter->second;
            Py_INCREF(py_EnergySource);
        }
    
        if (py_EnergySource == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))), &PyNs3EnergySource_Type);
            py_EnergySource = PyObject_GC_New(PyNs3EnergySource, wrapper_type);
            py_EnergySource->inst_dict = NULL;
            py_EnergySource->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))->Ref();
            py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
            PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySource->obj] = (PyObject *) py_EnergySource;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEnergySource", (char *) "N", py_EnergySource);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DeviceEnergyModel__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DeviceEnergyModel *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = (ns3::DeviceEnergyModel*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

double
PyNs3DeviceEnergyModel__PythonHelper::DoGetCurrentA() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DeviceEnergyModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetCurrentA"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = const_cast< ns3::DeviceEnergyModel* >((const ns3::DeviceEnergyModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetCurrentA", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DeviceEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3DeviceEnergyModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DeviceEnergyModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DeviceEnergyModel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DeviceEnergyModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DeviceEnergyModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3DeviceEnergyModel__tp_init__0(PyNs3DeviceEnergyModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DeviceEnergyModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DeviceEnergyModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3DeviceEnergyModel_Type)
    {
        self->obj = new PyNs3DeviceEnergyModel__PythonHelper(*((PyNs3DeviceEnergyModel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3DeviceEnergyModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'DeviceEnergyModel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3DeviceEnergyModel__tp_init__1(PyNs3DeviceEnergyModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3DeviceEnergyModel_Type)
    {
        self->obj = new PyNs3DeviceEnergyModel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3DeviceEnergyModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'DeviceEnergyModel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3DeviceEnergyModel__tp_init(PyNs3DeviceEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DeviceEnergyModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DeviceEnergyModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DeviceEnergyModel_GetCurrentA(PyNs3DeviceEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModel_SetEnergySource(PyNs3DeviceEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3EnergySource *source;
    ns3::EnergySource *source_ptr;
    const char *keywords[] = {"source", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EnergySource_Type, &source)) {
        return NULL;
    }
    source_ptr = (source ? source->obj : NULL);
    self->obj->SetEnergySource(ns3::Ptr< ns3::EnergySource  > (source_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::DeviceEnergyModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModel_GetTotalEnergyConsumption(PyNs3DeviceEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTotalEnergyConsumption();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModel_HandleEnergyDepletion(PyNs3DeviceEnergyModel *self)
{
    PyObject *py_retval;
    
    self->obj->HandleEnergyDepletion();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModel_ChangeState(PyNs3DeviceEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int newState;
    const char *keywords[] = {"newState", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &newState)) {
        return NULL;
    }
    self->obj->ChangeState(newState);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModel_SetNode(PyNs3DeviceEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DeviceEnergyModel_GetNode(PyNs3DeviceEnergyModel *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetNode();
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}

static PyMethodDef PyNs3DeviceEnergyModel_methods[] = {
    {(char *) "GetCurrentA", (PyCFunction) _wrap_PyNs3DeviceEnergyModel_GetCurrentA, METH_NOARGS, NULL },
    {(char *) "SetEnergySource", (PyCFunction) _wrap_PyNs3DeviceEnergyModel_SetEnergySource, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DeviceEnergyModel_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetTotalEnergyConsumption", (PyCFunction) _wrap_PyNs3DeviceEnergyModel_GetTotalEnergyConsumption, METH_NOARGS, NULL },
    {(char *) "HandleEnergyDepletion", (PyCFunction) _wrap_PyNs3DeviceEnergyModel_HandleEnergyDepletion, METH_NOARGS, NULL },
    {(char *) "ChangeState", (PyCFunction) _wrap_PyNs3DeviceEnergyModel_ChangeState, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3DeviceEnergyModel_SetNode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3DeviceEnergyModel_GetNode, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DeviceEnergyModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DeviceEnergyModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3DeviceEnergyModel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3DeviceEnergyModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DeviceEnergyModel__tp_clear(PyNs3DeviceEnergyModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::DeviceEnergyModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DeviceEnergyModel__tp_traverse(PyNs3DeviceEnergyModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3DeviceEnergyModel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DeviceEnergyModel__tp_dealloc(PyNs3DeviceEnergyModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DeviceEnergyModel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DeviceEnergyModel__tp_richcompare (PyNs3DeviceEnergyModel *PYBINDGEN_UNUSED(self), PyNs3DeviceEnergyModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DeviceEnergyModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DeviceEnergyModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.DeviceEnergyModel",            /* tp_name */
    sizeof(PyNs3DeviceEnergyModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DeviceEnergyModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3DeviceEnergyModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DeviceEnergyModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DeviceEnergyModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DeviceEnergyModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DeviceEnergyModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DeviceEnergyModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3EnergySource__PythonHelper::_wrap_CalculateTotalCurrent(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3EnergySource__PythonHelper *helper = dynamic_cast< PyNs3EnergySource__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method CalculateTotalCurrent of class EnergySource is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->CalculateTotalCurrent__parent_caller();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

PyObject *
PyNs3EnergySource__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    PyNs3EnergySource__PythonHelper *helper = dynamic_cast< PyNs3EnergySource__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3EnergySource__PythonHelper::_wrap_NotifyNewAggregate(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    PyNs3EnergySource__PythonHelper *helper = dynamic_cast< PyNs3EnergySource__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3EnergySource__PythonHelper::_wrap_BreakDeviceEnergyModelRefCycle(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    PyNs3EnergySource__PythonHelper *helper = dynamic_cast< PyNs3EnergySource__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method BreakDeviceEnergyModelRefCycle of class EnergySource is protected and can only be called by a subclass");
        return NULL;
    }
    helper->BreakDeviceEnergyModelRefCycle__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3EnergySource__PythonHelper::_wrap_DoStart(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    PyNs3EnergySource__PythonHelper *helper = dynamic_cast< PyNs3EnergySource__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3EnergySource__PythonHelper::_wrap_NotifyEnergyDrained(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    PyNs3EnergySource__PythonHelper *helper = dynamic_cast< PyNs3EnergySource__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyEnergyDrained of class EnergySource is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyEnergyDrained__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3EnergySource__PythonHelper::DecreaseRemainingEnergy(double energyJ)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DecreaseRemainingEnergy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = (ns3::EnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DecreaseRemainingEnergy", (char *) "d", energyJ);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

double
PyNs3EnergySource__PythonHelper::GetEnergyFraction()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySource *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEnergyFraction"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = (ns3::EnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEnergyFraction", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3EnergySource__PythonHelper::GetInitialEnergy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySource *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInitialEnergy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = const_cast< ns3::EnergySource* >((const ns3::EnergySource*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInitialEnergy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3EnergySource__PythonHelper::GetRemainingEnergy()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySource *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRemainingEnergy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = (ns3::EnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRemainingEnergy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3EnergySource__PythonHelper::GetSupplyVoltage() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySource *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSupplyVoltage"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = const_cast< ns3::EnergySource* >((const ns3::EnergySource*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSupplyVoltage", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3EnergySource__PythonHelper::IncreaseRemainingEnergy(double energyJ)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IncreaseRemainingEnergy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = (ns3::EnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IncreaseRemainingEnergy", (char *) "d", energyJ);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EnergySource__PythonHelper::UpdateEnergySource()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "UpdateEnergySource"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = (ns3::EnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "UpdateEnergySource", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EnergySource__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = (ns3::EnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3EnergySource__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3EnergySource__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EnergySource__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EnergySource__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3EnergySource__tp_init__0(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3EnergySource *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EnergySource_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3EnergySource_Type)
    {
        self->obj = new PyNs3EnergySource__PythonHelper(*((PyNs3EnergySource *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3EnergySource__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'EnergySource' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3EnergySource__tp_init__1(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3EnergySource_Type)
    {
        self->obj = new PyNs3EnergySource__PythonHelper();
        self->obj->Ref ();
        ((PyNs3EnergySource__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'EnergySource' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3EnergySource__tp_init(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3EnergySource__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3EnergySource__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3EnergySource_UpdateEnergySource(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    
    self->obj->UpdateEnergySource();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_SetNode(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_GetSupplyVoltage(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetSupplyVoltage();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_AppendDeviceEnergyModel(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3DeviceEnergyModel *deviceEnergyModelPtr;
    ns3::DeviceEnergyModel *deviceEnergyModelPtr_ptr;
    const char *keywords[] = {"deviceEnergyModelPtr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DeviceEnergyModel_Type, &deviceEnergyModelPtr)) {
        return NULL;
    }
    deviceEnergyModelPtr_ptr = (deviceEnergyModelPtr ? deviceEnergyModelPtr->obj : NULL);
    self->obj->AppendDeviceEnergyModel(ns3::Ptr< ns3::DeviceEnergyModel  > (deviceEnergyModelPtr_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_DecreaseRemainingEnergy(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double energyJ;
    const char *keywords[] = {"energyJ", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &energyJ)) {
        return NULL;
    }
    self->obj->DecreaseRemainingEnergy(energyJ);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_GetEnergyFraction(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetEnergyFraction();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}



PyObject *
_wrap_PyNs3EnergySource_FindDeviceEnergyModels__0(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3TypeId *tid;
    const char *keywords[] = {"tid", NULL};
    PyNs3DeviceEnergyModelContainer *py_DeviceEnergyModelContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TypeId_Type, &tid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::DeviceEnergyModelContainer retval = self->obj->FindDeviceEnergyModels(*((PyNs3TypeId *) tid)->obj);
    py_DeviceEnergyModelContainer = PyObject_New(PyNs3DeviceEnergyModelContainer, &PyNs3DeviceEnergyModelContainer_Type);
    py_DeviceEnergyModelContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DeviceEnergyModelContainer->obj = new ns3::DeviceEnergyModelContainer(retval);
    PyNs3DeviceEnergyModelContainer_wrapper_registry[(void *) py_DeviceEnergyModelContainer->obj] = (PyObject *) py_DeviceEnergyModelContainer;
    py_retval = Py_BuildValue((char *) "N", py_DeviceEnergyModelContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3EnergySource_FindDeviceEnergyModels__1(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    const char *keywords[] = {"name", NULL};
    PyNs3DeviceEnergyModelContainer *py_DeviceEnergyModelContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &name, &name_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::DeviceEnergyModelContainer retval = self->obj->FindDeviceEnergyModels(std::string(name, name_len));
    py_DeviceEnergyModelContainer = PyObject_New(PyNs3DeviceEnergyModelContainer, &PyNs3DeviceEnergyModelContainer_Type);
    py_DeviceEnergyModelContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_DeviceEnergyModelContainer->obj = new ns3::DeviceEnergyModelContainer(retval);
    PyNs3DeviceEnergyModelContainer_wrapper_registry[(void *) py_DeviceEnergyModelContainer->obj] = (PyObject *) py_DeviceEnergyModelContainer;
    py_retval = Py_BuildValue((char *) "N", py_DeviceEnergyModelContainer);
    return py_retval;
}

PyObject * _wrap_PyNs3EnergySource_FindDeviceEnergyModels(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3EnergySource_FindDeviceEnergyModels__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3EnergySource_FindDeviceEnergyModels__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3EnergySource_GetRemainingEnergy(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRemainingEnergy();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_IncreaseRemainingEnergy(PyNs3EnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double energyJ;
    const char *keywords[] = {"energyJ", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &energyJ)) {
        return NULL;
    }
    self->obj->IncreaseRemainingEnergy(energyJ);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_GetInitialEnergy(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetInitialEnergy();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::EnergySource::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySource_GetNode(PyNs3EnergySource *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetNode();
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}

static PyMethodDef PyNs3EnergySource_methods[] = {
    {(char *) "UpdateEnergySource", (PyCFunction) _wrap_PyNs3EnergySource_UpdateEnergySource, METH_NOARGS, NULL },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3EnergySource_SetNode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSupplyVoltage", (PyCFunction) _wrap_PyNs3EnergySource_GetSupplyVoltage, METH_NOARGS, NULL },
    {(char *) "AppendDeviceEnergyModel", (PyCFunction) _wrap_PyNs3EnergySource_AppendDeviceEnergyModel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DecreaseRemainingEnergy", (PyCFunction) _wrap_PyNs3EnergySource_DecreaseRemainingEnergy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEnergyFraction", (PyCFunction) _wrap_PyNs3EnergySource_GetEnergyFraction, METH_NOARGS, NULL },
    {(char *) "FindDeviceEnergyModels", (PyCFunction) _wrap_PyNs3EnergySource_FindDeviceEnergyModels, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRemainingEnergy", (PyCFunction) _wrap_PyNs3EnergySource_GetRemainingEnergy, METH_NOARGS, NULL },
    {(char *) "IncreaseRemainingEnergy", (PyCFunction) _wrap_PyNs3EnergySource_IncreaseRemainingEnergy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInitialEnergy", (PyCFunction) _wrap_PyNs3EnergySource_GetInitialEnergy, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3EnergySource_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3EnergySource_GetNode, METH_NOARGS, NULL },
    {(char *) "CalculateTotalCurrent", (PyCFunction) PyNs3EnergySource__PythonHelper::_wrap_CalculateTotalCurrent, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3EnergySource__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3EnergySource__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "BreakDeviceEnergyModelRefCycle", (PyCFunction) PyNs3EnergySource__PythonHelper::_wrap_BreakDeviceEnergyModelRefCycle, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3EnergySource__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "NotifyEnergyDrained", (PyCFunction) PyNs3EnergySource__PythonHelper::_wrap_NotifyEnergyDrained, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3EnergySource__tp_clear(PyNs3EnergySource *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::EnergySource *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3EnergySource__tp_traverse(PyNs3EnergySource *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3EnergySource__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3EnergySource__tp_dealloc(PyNs3EnergySource *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3EnergySource__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3EnergySource__tp_richcompare (PyNs3EnergySource *PYBINDGEN_UNUSED(self), PyNs3EnergySource *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3EnergySource_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3EnergySource_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.EnergySource",            /* tp_name */
    sizeof(PyNs3EnergySource),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3EnergySource__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3EnergySource__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3EnergySource__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3EnergySource__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3EnergySource_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3EnergySource, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3EnergySource__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3EnergySourceContainer__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3EnergySourceContainer *self)
{
    PyObject *py_retval;
    PyNs3EnergySourceContainer__PythonHelper *helper = dynamic_cast< PyNs3EnergySourceContainer__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3EnergySourceContainer__PythonHelper::_wrap_NotifyNewAggregate(PyNs3EnergySourceContainer *self)
{
    PyObject *py_retval;
    PyNs3EnergySourceContainer__PythonHelper *helper = dynamic_cast< PyNs3EnergySourceContainer__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3EnergySourceContainer__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySourceContainer *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj = (ns3::EnergySourceContainer*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EnergySourceContainer__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EnergySourceContainer *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj = (ns3::EnergySourceContainer*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EnergySourceContainer* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3EnergySourceContainer__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3EnergySourceContainer__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EnergySourceContainer__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3EnergySourceContainer__tp_init__0(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3EnergySourceContainer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EnergySourceContainer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3EnergySourceContainer_Type)
    {
        self->obj = new PyNs3EnergySourceContainer__PythonHelper(*((PyNs3EnergySourceContainer *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3EnergySourceContainer__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::EnergySourceContainer(*((PyNs3EnergySourceContainer *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3EnergySourceContainer__tp_init__1(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3EnergySourceContainer_Type)
    {
        self->obj = new PyNs3EnergySourceContainer__PythonHelper();
        self->obj->Ref ();
        ((PyNs3EnergySourceContainer__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::EnergySourceContainer();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3EnergySourceContainer__tp_init__2(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3EnergySource *source;
    ns3::EnergySource *source_ptr;
    const char *keywords[] = {"source", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EnergySource_Type, &source)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    source_ptr = (source ? source->obj : NULL);
    if (self->ob_type != &PyNs3EnergySourceContainer_Type)
    {
        self->obj = new PyNs3EnergySourceContainer__PythonHelper(ns3::Ptr< ns3::EnergySource  > (source_ptr));
        self->obj->Ref ();
        ((PyNs3EnergySourceContainer__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::EnergySourceContainer(ns3::Ptr< ns3::EnergySource  > (source_ptr));
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3EnergySourceContainer__tp_init__3(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *sourceName;
    Py_ssize_t sourceName_len;
    const char *keywords[] = {"sourceName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &sourceName, &sourceName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3EnergySourceContainer_Type)
    {
        self->obj = new PyNs3EnergySourceContainer__PythonHelper(std::string(sourceName, sourceName_len));
        self->obj->Ref ();
        ((PyNs3EnergySourceContainer__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::EnergySourceContainer(std::string(sourceName, sourceName_len));
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3EnergySourceContainer__tp_init__4(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3EnergySourceContainer *a;
    PyNs3EnergySourceContainer *b;
    const char *keywords[] = {"a", "b", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3EnergySourceContainer_Type, &a, &PyNs3EnergySourceContainer_Type, &b)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3EnergySourceContainer_Type)
    {
        self->obj = new PyNs3EnergySourceContainer__PythonHelper(*((PyNs3EnergySourceContainer *) a)->obj, *((PyNs3EnergySourceContainer *) b)->obj);
        self->obj->Ref ();
        ((PyNs3EnergySourceContainer__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::EnergySourceContainer(*((PyNs3EnergySourceContainer *) a)->obj, *((PyNs3EnergySourceContainer *) b)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3EnergySourceContainer__tp_init(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[5] = {0,};
    retval = _wrap_PyNs3EnergySourceContainer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3EnergySourceContainer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3EnergySourceContainer__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3EnergySourceContainer__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3EnergySourceContainer__tp_init__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    error_list = PyList_New(5);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyNs3EnergySourceContainer_Add__0(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3EnergySourceContainer *container;
    const char *keywords[] = {"container", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EnergySourceContainer_Type, &container)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->Add(*((PyNs3EnergySourceContainer *) container)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3EnergySourceContainer_Add__1(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3EnergySource *source;
    ns3::EnergySource *source_ptr;
    const char *keywords[] = {"source", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EnergySource_Type, &source)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    source_ptr = (source ? source->obj : NULL);
    self->obj->Add(ns3::Ptr< ns3::EnergySource  > (source_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3EnergySourceContainer_Add__2(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *sourceName;
    Py_ssize_t sourceName_len;
    const char *keywords[] = {"sourceName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &sourceName, &sourceName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->Add(std::string(sourceName, sourceName_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3EnergySourceContainer_Add(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3EnergySourceContainer_Add__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3EnergySourceContainer_Add__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3EnergySourceContainer_Add__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3EnergySourceContainer_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::EnergySourceContainer::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySourceContainer_GetN(PyNs3EnergySourceContainer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetN();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EnergySourceContainer_Get(PyNs3EnergySourceContainer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::EnergySource > retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};
    PyNs3EnergySource *py_EnergySource;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    retval = self->obj->Get(i);
    if (!(const_cast<ns3::EnergySource *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::EnergySource *> (ns3::PeekPointer (retval)))) == typeid(PyNs3EnergySource__PythonHelper))
    {
        py_EnergySource = reinterpret_cast< PyNs3EnergySource* >(reinterpret_cast< PyNs3EnergySource__PythonHelper* >(const_cast<ns3::EnergySource *> (ns3::PeekPointer (retval)))->m_pyself);
        py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (retval));
        Py_INCREF(py_EnergySource);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::EnergySource *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_EnergySource = NULL;
        } else {
            py_EnergySource = (PyNs3EnergySource *) wrapper_lookup_iter->second;
            Py_INCREF(py_EnergySource);
        }
    
        if (py_EnergySource == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::EnergySource *> (ns3::PeekPointer (retval)))), &PyNs3EnergySource_Type);
            py_EnergySource = PyObject_GC_New(PyNs3EnergySource, wrapper_type);
            py_EnergySource->inst_dict = NULL;
            py_EnergySource->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::EnergySource *> (ns3::PeekPointer (retval))->Ref();
            py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySource->obj] = (PyObject *) py_EnergySource;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_EnergySource);
    return py_retval;
}


static PyObject*
_wrap_PyNs3EnergySourceContainer__copy__(PyNs3EnergySourceContainer *self)
{

    PyNs3EnergySourceContainer *py_copy;
    py_copy = PyObject_GC_New(PyNs3EnergySourceContainer, &PyNs3EnergySourceContainer_Type);
    py_copy->obj = new ns3::EnergySourceContainer(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3EnergySourceContainer_methods[] = {
    {(char *) "Add", (PyCFunction) _wrap_PyNs3EnergySourceContainer_Add, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3EnergySourceContainer_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetN", (PyCFunction) _wrap_PyNs3EnergySourceContainer_GetN, METH_NOARGS, NULL },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3EnergySourceContainer_Get, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3EnergySourceContainer__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3EnergySourceContainer__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3EnergySourceContainer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3EnergySourceContainer__tp_clear(PyNs3EnergySourceContainer *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::EnergySourceContainer *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3EnergySourceContainer__tp_traverse(PyNs3EnergySourceContainer *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3EnergySourceContainer__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3EnergySourceContainer__tp_dealloc(PyNs3EnergySourceContainer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3EnergySourceContainer__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3EnergySourceContainer__tp_richcompare (PyNs3EnergySourceContainer *PYBINDGEN_UNUSED(self), PyNs3EnergySourceContainer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3EnergySourceContainer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3EnergySourceContainer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.EnergySourceContainer",            /* tp_name */
    sizeof(PyNs3EnergySourceContainer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3EnergySourceContainer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3EnergySourceContainer__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3EnergySourceContainer__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3EnergySourceContainer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3EnergySourceContainer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3EnergySourceContainer, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3EnergySourceContainer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanChannel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanChannel *self)
{
    PyObject *py_retval;
    PyNs3UanChannel__PythonHelper *helper = dynamic_cast< PyNs3UanChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanChannel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanChannel *self)
{
    PyObject *py_retval;
    PyNs3UanChannel__PythonHelper *helper = dynamic_cast< PyNs3UanChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanChannel__PythonHelper::_wrap_DoStart(PyNs3UanChannel *self)
{
    PyObject *py_retval;
    PyNs3UanChannel__PythonHelper *helper = dynamic_cast< PyNs3UanChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanChannel__PythonHelper::_wrap_DoDispose(PyNs3UanChannel *self)
{
    PyObject *py_retval;
    PyNs3UanChannel__PythonHelper *helper = dynamic_cast< PyNs3UanChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class UanChannel is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Ptr< ns3::NetDevice >
PyNs3UanChannel__PythonHelper::GetDevice(uint32_t i) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanChannel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDevice"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanChannel::GetDevice(i);
    }
    self_obj_before = reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = const_cast< ns3::UanChannel* >((const ns3::UanChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDevice", (char *) "N", PyLong_FromUnsignedLong(i));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanChannel::GetDevice(i);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanChannel::GetDevice(i);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanChannel__PythonHelper::GetNDevices() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanChannel *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNDevices"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanChannel::GetNDevices();
    }
    self_obj_before = reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = const_cast< ns3::UanChannel* >((const ns3::UanChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNDevices", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanChannel::GetNDevices();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanChannel::GetNDevices();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanChannel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanChannel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanChannel::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = (ns3::UanChannel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanChannel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanChannel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanChannel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanChannel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanChannel__tp_init__0(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanChannel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanChannel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanChannel_Type)
    {
        self->obj = new PyNs3UanChannel__PythonHelper(*((PyNs3UanChannel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanChannel(*((PyNs3UanChannel *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanChannel__tp_init__1(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanChannel_Type)
    {
        self->obj = new PyNs3UanChannel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanChannel();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanChannel__tp_init(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanChannel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanChannel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanChannel_Clear(PyNs3UanChannel *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanChannel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanChannel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanChannel_GetNDevices(PyNs3UanChannel *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanChannel__PythonHelper *helper_class = dynamic_cast<PyNs3UanChannel__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetNDevices()) : (self->obj->ns3::UanChannel::GetNDevices());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanChannel_GetNoiseDbHz(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double fKhz;
    const char *keywords[] = {"fKhz", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &fKhz)) {
        return NULL;
    }
    retval = self->obj->GetNoiseDbHz(fKhz);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanChannel_TxPacket(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanTransducer *src;
    ns3::UanTransducer *src_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDb;
    PyNs3UanTxMode *txmode;
    const char *keywords[] = {"src", "packet", "txPowerDb", "txmode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!", (char **) keywords, &PyNs3UanTransducer_Type, &src, &PyNs3Packet_Type, &packet, &txPowerDb, &PyNs3UanTxMode_Type, &txmode)) {
        return NULL;
    }
    src_ptr = (src ? src->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->TxPacket(ns3::Ptr< ns3::UanTransducer  > (src_ptr), ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDb, *((PyNs3UanTxMode *) txmode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanChannel_SetNoiseModel(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanNoiseModel *noise;
    ns3::UanNoiseModel *noise_ptr;
    const char *keywords[] = {"noise", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanNoiseModel_Type, &noise)) {
        return NULL;
    }
    noise_ptr = (noise ? noise->obj : NULL);
    self->obj->SetNoiseModel(ns3::Ptr< ns3::UanNoiseModel  > (noise_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanChannel_SetPropagationModel(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPropModel *prop;
    ns3::UanPropModel *prop_ptr;
    const char *keywords[] = {"prop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPropModel_Type, &prop)) {
        return NULL;
    }
    prop_ptr = (prop ? prop->obj : NULL);
    self->obj->SetPropagationModel(ns3::Ptr< ns3::UanPropModel  > (prop_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanChannel_GetDevice(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    unsigned int i;
    PyNs3UanChannel__PythonHelper *helper_class = dynamic_cast<PyNs3UanChannel__PythonHelper*> (self->obj);
    const char *keywords[] = {"i", NULL};
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetDevice(i)) : (self->obj->ns3::UanChannel::GetDevice(i));
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_NetDevice = NULL;
    } else {
        py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
        Py_INCREF(py_NetDevice);
    }
    
    if (py_NetDevice == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
        py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
        py_NetDevice->inst_dict = NULL;
        py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanChannel_AddDevice(PyNs3UanChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanNetDevice *dev;
    ns3::UanNetDevice *dev_ptr;
    PyNs3UanTransducer *trans;
    ns3::UanTransducer *trans_ptr;
    const char *keywords[] = {"dev", "trans", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3UanNetDevice_Type, &dev, &PyNs3UanTransducer_Type, &trans)) {
        return NULL;
    }
    dev_ptr = (dev ? dev->obj : NULL);
    trans_ptr = (trans ? trans->obj : NULL);
    self->obj->AddDevice(ns3::Ptr< ns3::UanNetDevice  > (dev_ptr), ns3::Ptr< ns3::UanTransducer  > (trans_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanChannel__copy__(PyNs3UanChannel *self)
{

    PyNs3UanChannel *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanChannel, &PyNs3UanChannel_Type);
    py_copy->obj = new ns3::UanChannel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanChannel_methods[] = {
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanChannel_Clear, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanChannel_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetNDevices", (PyCFunction) _wrap_PyNs3UanChannel_GetNDevices, METH_NOARGS, NULL },
    {(char *) "GetNoiseDbHz", (PyCFunction) _wrap_PyNs3UanChannel_GetNoiseDbHz, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TxPacket", (PyCFunction) _wrap_PyNs3UanChannel_TxPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetNoiseModel", (PyCFunction) _wrap_PyNs3UanChannel_SetNoiseModel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetPropagationModel", (PyCFunction) _wrap_PyNs3UanChannel_SetPropagationModel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3UanChannel_GetDevice, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AddDevice", (PyCFunction) _wrap_PyNs3UanChannel_AddDevice, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanChannel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanChannel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanChannel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3UanChannel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanChannel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanChannel__tp_clear(PyNs3UanChannel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanChannel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanChannel__tp_traverse(PyNs3UanChannel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanChannel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanChannel__tp_dealloc(PyNs3UanChannel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanChannel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanChannel__tp_richcompare (PyNs3UanChannel *PYBINDGEN_UNUSED(self), PyNs3UanChannel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanChannel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanChannel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanChannel",            /* tp_name */
    sizeof(PyNs3UanChannel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanChannel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanChannel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanChannel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanChannel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanChannel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanChannel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanChannel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3UanModesListChecker__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'UanModesListChecker' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}

static PyMethodDef PyNs3UanModesListChecker_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanModesListChecker__tp_dealloc(PyNs3UanModesListChecker *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::UanModesListChecker *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanModesListChecker__tp_richcompare (PyNs3UanModesListChecker *PYBINDGEN_UNUSED(self), PyNs3UanModesListChecker *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanModesListChecker_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanModesListChecker_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanModesListChecker",            /* tp_name */
    sizeof(PyNs3UanModesListChecker),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanModesListChecker__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanModesListChecker__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanModesListChecker_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanModesListChecker__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3UanModesListValue__tp_init__0(PyNs3UanModesListValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanModesListValue();
    return 0;
}

static int
_wrap_PyNs3UanModesListValue__tp_init__1(PyNs3UanModesListValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanModesListValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanModesListValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanModesListValue(*((PyNs3UanModesListValue *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3UanModesListValue__tp_init__2(PyNs3UanModesListValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanModesList *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanModesList_Type, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::UanModesListValue(*((PyNs3UanModesList *) value)->obj);
    return 0;
}

int _wrap_PyNs3UanModesListValue__tp_init(PyNs3UanModesListValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3UanModesListValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanModesListValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3UanModesListValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3UanModesListValue_Set(PyNs3UanModesListValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanModesList *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanModesList_Type, &value)) {
        return NULL;
    }
    self->obj->Set(*((PyNs3UanModesList *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanModesListValue_Get(PyNs3UanModesListValue *self)
{
    PyObject *py_retval;
    PyNs3UanModesList *py_UanModesList;
    
    ns3::UanModesList retval = self->obj->Get();
    py_UanModesList = PyObject_New(PyNs3UanModesList, &PyNs3UanModesList_Type);
    py_UanModesList->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanModesList->obj = new ns3::UanModesList(retval);
    PyNs3UanModesList_wrapper_registry[(void *) py_UanModesList->obj] = (PyObject *) py_UanModesList;
    py_retval = Py_BuildValue((char *) "N", py_UanModesList);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanModesListValue_Copy(PyNs3UanModesListValue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeValue > retval;
    PyNs3AttributeValue *py_AttributeValue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeValue = NULL;
    } else {
        py_AttributeValue = (PyNs3AttributeValue *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeValue);
    }
    
    if (py_AttributeValue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))), &PyNs3AttributeValue_Type);
        py_AttributeValue = PyObject_New(PyNs3AttributeValue, wrapper_type);
        py_AttributeValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeValue->obj = const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeValue->obj] = (PyObject *) py_AttributeValue;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanModesListValue_SerializeToString(PyNs3UanModesListValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->SerializeToString(ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3UanModesListValue_DeserializeFromString(PyNs3UanModesListValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *value;
    Py_ssize_t value_len;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"value", "checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &value, &value_len, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->DeserializeFromString(std::string(value, value_len), ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanModesListValue__copy__(PyNs3UanModesListValue *self)
{

    PyNs3UanModesListValue *py_copy;
    py_copy = PyObject_New(PyNs3UanModesListValue, &PyNs3UanModesListValue_Type);
    py_copy->obj = new ns3::UanModesListValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanModesListValue_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3UanModesListValue_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3UanModesListValue_Get, METH_NOARGS, NULL },
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3UanModesListValue_Copy, METH_NOARGS, NULL },
    {(char *) "SerializeToString", (PyCFunction) _wrap_PyNs3UanModesListValue_SerializeToString, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeserializeFromString", (PyCFunction) _wrap_PyNs3UanModesListValue_DeserializeFromString, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanModesListValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3UanModesListValue__tp_dealloc(PyNs3UanModesListValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::UanModesListValue *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanModesListValue__tp_richcompare (PyNs3UanModesListValue *PYBINDGEN_UNUSED(self), PyNs3UanModesListValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanModesListValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanModesListValue_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanModesListValue",            /* tp_name */
    sizeof(PyNs3UanModesListValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanModesListValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanModesListValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanModesListValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanModesListValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3UanNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    PyNs3UanNetDevice__PythonHelper *helper = dynamic_cast< PyNs3UanNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanNetDevice__PythonHelper::_wrap_NotifyNewAggregate(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    PyNs3UanNetDevice__PythonHelper *helper = dynamic_cast< PyNs3UanNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanNetDevice__PythonHelper::_wrap_DoStart(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    PyNs3UanNetDevice__PythonHelper *helper = dynamic_cast< PyNs3UanNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3UanNetDevice__PythonHelper::_wrap_DoDispose(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    PyNs3UanNetDevice__PythonHelper *helper = dynamic_cast< PyNs3UanNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class UanNetDevice is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


ns3::Address
PyNs3UanNetDevice__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanNetDevice__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3UanNetDevice__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3UanNetDevice__PythonHelper::GetIfIndex() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetIfIndex"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetIfIndex();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetIfIndex", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetIfIndex();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetIfIndex();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3UanNetDevice__PythonHelper::GetMtu() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMtu"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMtu();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMtu", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMtu();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMtu();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMtu();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanNetDevice__PythonHelper::GetMulticast(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMulticast(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMulticast(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMulticast(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3UanNetDevice__PythonHelper::GetMulticast(ns3::Ipv6Address addr) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv6Address *py_Ipv6Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMulticast(addr);
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
    py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv6Address->obj = new ns3::Ipv6Address(addr);
    PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv6Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMulticast(addr);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetMulticast(addr);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Node >
PyNs3UanNetDevice__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetNode();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetNode();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::GetNode();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3UanNetDevice__PythonHelper::IsBridge() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBridge"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsBridge();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBridge", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsBridge();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsBridge();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3UanNetDevice__PythonHelper::IsBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBroadcast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsBroadcast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3UanNetDevice__PythonHelper::IsLinkUp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLinkUp"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsLinkUp();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLinkUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsLinkUp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsLinkUp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3UanNetDevice__PythonHelper::IsMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsMulticast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsMulticast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3UanNetDevice__PythonHelper::IsPointToPoint() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsPointToPoint"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsPointToPoint();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsPointToPoint", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsPointToPoint();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::IsPointToPoint();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3UanNetDevice__PythonHelper::NeedsArp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedsArp"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::NeedsArp();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedsArp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::NeedsArp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::NeedsArp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3UanNetDevice__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::Send(packet, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = (ns3::UanNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::Send(packet, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::Send(packet, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3UanNetDevice__PythonHelper::SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyNs3Address *py_Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = (ns3::UanNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(source);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address2->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendFrom", (char *) "NNNi", py_Packet, py_Address, py_Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanNetDevice__PythonHelper::SetAddress(ns3::Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanNetDevice::SetAddress(address);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = (ns3::UanNetDevice*) this;
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(address);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNetDevice__PythonHelper::SetIfIndex(uint32_t const index)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetIfIndex"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanNetDevice::SetIfIndex(index);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = (ns3::UanNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetIfIndex", (char *) "N", PyLong_FromUnsignedLong(index));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3UanNetDevice__PythonHelper::SetMtu(uint16_t const mtu)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMtu"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SetMtu(mtu);
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = (ns3::UanNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMtu", (char *) "i", (int) mtu);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SetMtu(mtu);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SetMtu(mtu);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanNetDevice__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanNetDevice::SetNode(node);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = (ns3::UanNetDevice*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}



bool
PyNs3UanNetDevice__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = const_cast< ns3::UanNetDevice* >((const ns3::UanNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::UanNetDevice::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanNetDevice__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::UanNetDevice::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = (ns3::UanNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNetDevice__PythonHelper::ForwardUp(ns3::Ptr< ns3::Packet > pkt, ns3::UanAddress const & src)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::UanNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3UanAddress *py_UanAddress;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ForwardUp"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = (ns3::UanNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (pkt)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (pkt))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (pkt));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
    py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanAddress->obj = new ns3::UanAddress(src);
    PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ForwardUp", (char *) "NN", py_Packet, py_UanAddress);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3UanNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3UanNetDevice__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3UanNetDevice__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNetDevice__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3UanNetDevice__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3UanNetDevice__tp_init__0(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3UanNetDevice *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanNetDevice_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanNetDevice_Type)
    {
        self->obj = new PyNs3UanNetDevice__PythonHelper(*((PyNs3UanNetDevice *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3UanNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanNetDevice(*((PyNs3UanNetDevice *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3UanNetDevice__tp_init__1(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3UanNetDevice_Type)
    {
        self->obj = new PyNs3UanNetDevice__PythonHelper();
        self->obj->Ref ();
        ((PyNs3UanNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::UanNetDevice();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3UanNetDevice__tp_init(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanNetDevice__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanNetDevice__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyNs3UanNetDevice_GetMulticast__0(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *multicastGroup;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"multicastGroup", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &multicastGroup)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj)) : (self->obj->ns3::UanNetDevice::GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject *
_wrap_PyNs3UanNetDevice_GetMulticast__1(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv6Address *addr;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv6Address_Type, &addr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv6Address *) addr)->obj)) : (self->obj->ns3::UanNetDevice::GetMulticast(*((PyNs3Ipv6Address *) addr)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject * _wrap_PyNs3UanNetDevice_GetMulticast(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3UanNetDevice_GetMulticast__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3UanNetDevice_GetMulticast__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3UanNetDevice_IsPointToPoint(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsPointToPoint()) : (self->obj->ns3::UanNetDevice::IsPointToPoint());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::UanNetDevice::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetPhy(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanPhy *phy;
    ns3::UanPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetPhy(ns3::Ptr< ns3::UanPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_Send(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &packet, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber)) : (self->obj->ns3::UanNetDevice::Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetIfIndex(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetIfIndex()) : (self->obj->ns3::UanNetDevice::GetIfIndex());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_NeedsArp(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->NeedsArp()) : (self->obj->ns3::UanNetDevice::NeedsArp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetTransducer(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanTransducer > retval;
    PyNs3UanTransducer *py_UanTransducer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetTransducer();
    if (!(const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanTransducer = NULL;
    } else {
        py_UanTransducer = (PyNs3UanTransducer *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanTransducer);
    }
    
    if (py_UanTransducer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval)))), &PyNs3UanTransducer_Type);
        py_UanTransducer = PyObject_GC_New(PyNs3UanTransducer, wrapper_type);
        py_UanTransducer->inst_dict = NULL;
        py_UanTransducer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval))->Ref();
        py_UanTransducer->obj = const_cast<ns3::UanTransducer *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanTransducer->obj] = (PyObject *) py_UanTransducer;
    }
    py_retval = Py_BuildValue((char *) "N", py_UanTransducer);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetPromiscReceiveCallback(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl29> cb_cb_impl;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl29> (cb);
    (helper_class == NULL)? (self->obj->SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::UanNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetNode(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetNode()) : (self->obj->ns3::UanNetDevice::GetNode());
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetMac(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanMac > retval;
    PyNs3UanMac *py_UanMac;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMac();
    if (!(const_cast<ns3::UanMac *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanMac *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanMac = NULL;
    } else {
        py_UanMac = (PyNs3UanMac *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanMac);
    }
    
    if (py_UanMac == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanMac *> (ns3::PeekPointer (retval)))), &PyNs3UanMac_Type);
        py_UanMac = PyObject_GC_New(PyNs3UanMac, wrapper_type);
        py_UanMac->inst_dict = NULL;
        py_UanMac->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanMac *> (ns3::PeekPointer (retval))->Ref();
        py_UanMac->obj = const_cast<ns3::UanMac *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanMac->obj] = (PyObject *) py_UanMac;
    }
    py_retval = Py_BuildValue((char *) "N", py_UanMac);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SendFrom(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *source;
    ns3::Address source2;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "source", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OOi", (char **) keywords, &PyNs3Packet_Type, &packet, &source, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(source, (PyObject*) &PyNs3Address_Type)) {
        source2 = *((PyNs3Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        source2 = *((PyNs3Inet6SocketAddress *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        source2 = *((PyNs3InetSocketAddress *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv4Address_Type)) {
        source2 = *((PyNs3Ipv4Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv6Address_Type)) {
        source2 = *((PyNs3Ipv6Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Mac48Address_Type)) {
        source2 = *((PyNs3Mac48Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Mac64Address_Type)) {
        source2 = *((PyNs3Mac64Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        source2 = *((PyNs3PacketSocketAddress *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3UanAddress_Type)) {
        source2 = *((PyNs3UanAddress *) source)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", source->ob_type->tp_name);
        return NULL;
    }
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber)) : (self->obj->ns3::UanNetDevice::SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_IsBroadcast(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBroadcast()) : (self->obj->ns3::UanNetDevice::IsBroadcast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetChannel(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanChannel *channel;
    ns3::UanChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanChannel_Type, &channel)) {
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::UanChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetMtu(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMtu()) : (self->obj->ns3::UanNetDevice::GetMtu());
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_IsBridge(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBridge()) : (self->obj->ns3::UanNetDevice::IsBridge());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetNode(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    (helper_class == NULL)? (self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr))) : (self->obj->ns3::UanNetDevice::SetNode(ns3::Ptr< ns3::Node  > (node_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_Clear(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    
    self->obj->Clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetAddress(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::UanNetDevice::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_IsLinkUp(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsLinkUp()) : (self->obj->ns3::UanNetDevice::IsLinkUp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetIfIndex(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int index;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &index)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetIfIndex(index)) : (self->obj->ns3::UanNetDevice::SetIfIndex(index));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetMac(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanMac *mac;
    ns3::UanMac *mac_ptr;
    const char *keywords[] = {"mac", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanMac_Type, &mac)) {
        return NULL;
    }
    mac_ptr = (mac ? mac->obj : NULL);
    self->obj->SetMac(ns3::Ptr< ns3::UanMac  > (mac_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetAddress(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *address;
    ns3::Address address2;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &address)) {
        return NULL;
    }
    if (PyObject_IsInstance(address, (PyObject*) &PyNs3Address_Type)) {
        address2 = *((PyNs3Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        address2 = *((PyNs3Inet6SocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        address2 = *((PyNs3InetSocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv4Address_Type)) {
        address2 = *((PyNs3Ipv4Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv6Address_Type)) {
        address2 = *((PyNs3Ipv6Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac48Address_Type)) {
        address2 = *((PyNs3Mac48Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac64Address_Type)) {
        address2 = *((PyNs3Mac64Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        address2 = *((PyNs3PacketSocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3UanAddress_Type)) {
        address2 = *((PyNs3UanAddress *) address)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", address->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(address2)) : (self->obj->ns3::UanNetDevice::SetAddress(address2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetBroadcast(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::UanNetDevice::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_AddLinkChangeCallback(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl1> callback_cb_impl;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl1> (callback);
    (helper_class == NULL)? (self->obj->AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl))) : (self->obj->ns3::UanNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetReceiveCallback(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl30> cb_cb_impl;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl30> (cb);
    (helper_class == NULL)? (self->obj->SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::UanNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_IsMulticast(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsMulticast()) : (self->obj->ns3::UanNetDevice::IsMulticast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetMtu(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mtu;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"mtu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mtu)) {
        return NULL;
    }
    if (mtu > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SetMtu(mtu)) : (self->obj->ns3::UanNetDevice::SetMtu(mtu));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetPhy(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::UanPhy > retval;
    PyNs3UanPhy *py_UanPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPhy();
    if (!(const_cast<ns3::UanPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::UanPhy *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_UanPhy = NULL;
    } else {
        py_UanPhy = (PyNs3UanPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_UanPhy);
    }
    
    if (py_UanPhy == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::UanPhy *> (ns3::PeekPointer (retval)))), &PyNs3UanPhy_Type);
        py_UanPhy = PyObject_GC_New(PyNs3UanPhy, wrapper_type);
        py_UanPhy->inst_dict = NULL;
        py_UanPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::UanPhy *> (ns3::PeekPointer (retval))->Ref();
        py_UanPhy->obj = const_cast<ns3::UanPhy *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_UanPhy->obj] = (PyObject *) py_UanPhy;
    }
    py_retval = Py_BuildValue((char *) "N", py_UanPhy);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SupportsSendFrom(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::UanNetDevice::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_GetChannel(PyNs3UanNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3UanNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3UanNetDevice__PythonHelper*> (self->obj);
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetChannel()) : (self->obj->ns3::UanNetDevice::GetChannel());
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Channel__PythonHelper))
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}


PyObject *
_wrap_PyNs3UanNetDevice_SetTransducer(PyNs3UanNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3UanTransducer *trans;
    ns3::UanTransducer *trans_ptr;
    const char *keywords[] = {"trans", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3UanTransducer_Type, &trans)) {
        return NULL;
    }
    trans_ptr = (trans ? trans->obj : NULL);
    self->obj->SetTransducer(ns3::Ptr< ns3::UanTransducer  > (trans_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3UanNetDevice__copy__(PyNs3UanNetDevice *self)
{

    PyNs3UanNetDevice *py_copy;
    py_copy = PyObject_GC_New(PyNs3UanNetDevice, &PyNs3UanNetDevice_Type);
    py_copy->obj = new ns3::UanNetDevice(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3UanNetDevice_methods[] = {
    {(char *) "GetMulticast", (PyCFunction) _wrap_PyNs3UanNetDevice_GetMulticast, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsPointToPoint", (PyCFunction) _wrap_PyNs3UanNetDevice_IsPointToPoint, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3UanNetDevice_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetPhy", (PyCFunction) _wrap_PyNs3UanNetDevice_SetPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3UanNetDevice_Send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetIfIndex", (PyCFunction) _wrap_PyNs3UanNetDevice_GetIfIndex, METH_NOARGS, NULL },
    {(char *) "NeedsArp", (PyCFunction) _wrap_PyNs3UanNetDevice_NeedsArp, METH_NOARGS, NULL },
    {(char *) "GetTransducer", (PyCFunction) _wrap_PyNs3UanNetDevice_GetTransducer, METH_NOARGS, NULL },
    {(char *) "SetPromiscReceiveCallback", (PyCFunction) _wrap_PyNs3UanNetDevice_SetPromiscReceiveCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3UanNetDevice_GetNode, METH_NOARGS, NULL },
    {(char *) "GetMac", (PyCFunction) _wrap_PyNs3UanNetDevice_GetMac, METH_NOARGS, NULL },
    {(char *) "SendFrom", (PyCFunction) _wrap_PyNs3UanNetDevice_SendFrom, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3UanNetDevice_IsBroadcast, METH_NOARGS, NULL },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3UanNetDevice_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMtu", (PyCFunction) _wrap_PyNs3UanNetDevice_GetMtu, METH_NOARGS, NULL },
    {(char *) "IsBridge", (PyCFunction) _wrap_PyNs3UanNetDevice_IsBridge, METH_NOARGS, NULL },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3UanNetDevice_SetNode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Clear", (PyCFunction) _wrap_PyNs3UanNetDevice_Clear, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3UanNetDevice_GetAddress, METH_NOARGS, NULL },
    {(char *) "IsLinkUp", (PyCFunction) _wrap_PyNs3UanNetDevice_IsLinkUp, METH_NOARGS, NULL },
    {(char *) "SetIfIndex", (PyCFunction) _wrap_PyNs3UanNetDevice_SetIfIndex, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMac", (PyCFunction) _wrap_PyNs3UanNetDevice_SetMac, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3UanNetDevice_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3UanNetDevice_GetBroadcast, METH_NOARGS, NULL },
    {(char *) "AddLinkChangeCallback", (PyCFunction) _wrap_PyNs3UanNetDevice_AddLinkChangeCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetReceiveCallback", (PyCFunction) _wrap_PyNs3UanNetDevice_SetReceiveCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsMulticast", (PyCFunction) _wrap_PyNs3UanNetDevice_IsMulticast, METH_NOARGS, NULL },
    {(char *) "SetMtu", (PyCFunction) _wrap_PyNs3UanNetDevice_SetMtu, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPhy", (PyCFunction) _wrap_PyNs3UanNetDevice_GetPhy, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3UanNetDevice_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3UanNetDevice_GetChannel, METH_NOARGS, NULL },
    {(char *) "SetTransducer", (PyCFunction) _wrap_PyNs3UanNetDevice_SetTransducer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3UanNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3UanNetDevice__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3UanNetDevice__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3UanNetDevice__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3UanNetDevice__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3UanNetDevice__tp_clear(PyNs3UanNetDevice *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::UanNetDevice *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3UanNetDevice__tp_traverse(PyNs3UanNetDevice *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3UanNetDevice__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3UanNetDevice__tp_dealloc(PyNs3UanNetDevice *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3UanNetDevice__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3UanNetDevice__tp_richcompare (PyNs3UanNetDevice *PYBINDGEN_UNUSED(self), PyNs3UanNetDevice *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3UanNetDevice_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3UanNetDevice_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.UanNetDevice",            /* tp_name */
    sizeof(PyNs3UanNetDevice),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3UanNetDevice__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3UanNetDevice__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3UanNetDevice__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3UanNetDevice__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3UanNetDevice_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3UanNetDevice, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3UanNetDevice__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3WifiRadioEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3WifiRadioEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_DoStart(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper = dynamic_cast< PyNs3WifiRadioEnergyModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::ChangeState(int newState)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ChangeState"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModel::ChangeState(newState);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ChangeState", (char *) "i", newState);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::Node >
PyNs3WifiRadioEnergyModel__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetNode();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = const_cast< ns3::WifiRadioEnergyModel* >((const ns3::WifiRadioEnergyModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetNode();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetNode();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3WifiRadioEnergyModel__PythonHelper::GetTotalEnergyConsumption() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetTotalEnergyConsumption"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetTotalEnergyConsumption();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = const_cast< ns3::WifiRadioEnergyModel* >((const ns3::WifiRadioEnergyModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetTotalEnergyConsumption", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetTotalEnergyConsumption();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiRadioEnergyModel::GetTotalEnergyConsumption();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::HandleEnergyDepletion()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "HandleEnergyDepletion"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModel::HandleEnergyDepletion();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "HandleEnergyDepletion", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::SetEnergySource(ns3::Ptr< ns3::EnergySource > source)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    PyNs3EnergySource *py_EnergySource;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEnergySource"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModel::SetEnergySource(source);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    if (typeid(*(const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))) == typeid(PyNs3EnergySource__PythonHelper))
    {
        py_EnergySource = (PyNs3EnergySource*) (((PyNs3EnergySource__PythonHelper*) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)))->m_pyself);
        py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
        Py_INCREF(py_EnergySource);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::EnergySource *> (ns3::PeekPointer (source)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_EnergySource = NULL;
        } else {
            py_EnergySource = (PyNs3EnergySource *) wrapper_lookup_iter->second;
            Py_INCREF(py_EnergySource);
        }
    
        if (py_EnergySource == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))), &PyNs3EnergySource_Type);
            py_EnergySource = PyObject_GC_New(PyNs3EnergySource, wrapper_type);
            py_EnergySource->inst_dict = NULL;
            py_EnergySource->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::EnergySource *> (ns3::PeekPointer (source))->Ref();
            py_EnergySource->obj = const_cast<ns3::EnergySource *> (ns3::PeekPointer (source));
            PyNs3ObjectBase_wrapper_registry[(void *) py_EnergySource->obj] = (PyObject *) py_EnergySource;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEnergySource", (char *) "N", py_EnergySource);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiRadioEnergyModel::SetNode(node);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = (ns3::WifiRadioEnergyModel*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

double
PyNs3WifiRadioEnergyModel__PythonHelper::DoGetCurrentA() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiRadioEnergyModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoGetCurrentA"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = const_cast< ns3::WifiRadioEnergyModel* >((const ns3::WifiRadioEnergyModel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoGetCurrentA", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiRadioEnergyModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3WifiRadioEnergyModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiRadioEnergyModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiRadioEnergyModel__tp_init__0(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRadioEnergyModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRadioEnergyModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiRadioEnergyModel_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModel__PythonHelper(*((PyNs3WifiRadioEnergyModel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3WifiRadioEnergyModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiRadioEnergyModel(*((PyNs3WifiRadioEnergyModel *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3WifiRadioEnergyModel__tp_init__1(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiRadioEnergyModel_Type)
    {
        self->obj = new PyNs3WifiRadioEnergyModel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3WifiRadioEnergyModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiRadioEnergyModel();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3WifiRadioEnergyModel__tp_init(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRadioEnergyModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRadioEnergyModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetCurrentState(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    ns3::WifiRadioEnergyModel::WifiRadioState retval;
    
    retval = self->obj->GetCurrentState();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_HandleEnergyDepletion(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->HandleEnergyDepletion()) : (self->obj->ns3::WifiRadioEnergyModel::HandleEnergyDepletion());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetEnergySource(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3EnergySource *source;
    ns3::EnergySource *source_ptr;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"source", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3EnergySource_Type, &source)) {
        return NULL;
    }
    source_ptr = (source ? source->obj : NULL);
    (helper_class == NULL)? (self->obj->SetEnergySource(ns3::Ptr< ns3::EnergySource  > (source_ptr))) : (self->obj->ns3::WifiRadioEnergyModel::SetEnergySource(ns3::Ptr< ns3::EnergySource  > (source_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetTxCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double txCurrentA;
    const char *keywords[] = {"txCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &txCurrentA)) {
        return NULL;
    }
    self->obj->SetTxCurrentA(txCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetSleepCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetSleepCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiRadioEnergyModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetEnergyDepletionCallback(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl1> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl1> (callback);
    self->obj->SetEnergyDepletionCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetIdleCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double idleCurrentA;
    const char *keywords[] = {"idleCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &idleCurrentA)) {
        return NULL;
    }
    self->obj->SetIdleCurrentA(idleCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetIdleCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetIdleCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetTotalEnergyConsumption(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetTotalEnergyConsumption()) : (self->obj->ns3::WifiRadioEnergyModel::GetTotalEnergyConsumption());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetRxCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_ChangeState(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int newState;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"newState", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &newState)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->ChangeState(newState)) : (self->obj->ns3::WifiRadioEnergyModel::ChangeState(newState));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetNode(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    (helper_class == NULL)? (self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr))) : (self->obj->ns3::WifiRadioEnergyModel::SetNode(ns3::Ptr< ns3::Node  > (node_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetRxCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double rxCurrentA;
    const char *keywords[] = {"rxCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &rxCurrentA)) {
        return NULL;
    }
    self->obj->SetRxCurrentA(rxCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetTxCurrentA(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxCurrentA();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_SetSleepCurrentA(PyNs3WifiRadioEnergyModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double sleepCurrentA;
    const char *keywords[] = {"sleepCurrentA", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &sleepCurrentA)) {
        return NULL;
    }
    self->obj->SetSleepCurrentA(sleepCurrentA);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRadioEnergyModel_GetNode(PyNs3WifiRadioEnergyModel *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3WifiRadioEnergyModel__PythonHelper *helper_class = dynamic_cast<PyNs3WifiRadioEnergyModel__PythonHelper*> (self->obj);
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetNode()) : (self->obj->ns3::WifiRadioEnergyModel::GetNode());
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiRadioEnergyModel__copy__(PyNs3WifiRadioEnergyModel *self)
{

    PyNs3WifiRadioEnergyModel *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiRadioEnergyModel, &PyNs3WifiRadioEnergyModel_Type);
    py_copy->obj = new ns3::WifiRadioEnergyModel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRadioEnergyModel_methods[] = {
    {(char *) "GetCurrentState", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetCurrentState, METH_NOARGS, NULL },
    {(char *) "HandleEnergyDepletion", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_HandleEnergyDepletion, METH_NOARGS, NULL },
    {(char *) "SetEnergySource", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetEnergySource, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetTxCurrentA, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSleepCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetSleepCurrentA, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetEnergyDepletionCallback", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetEnergyDepletionCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetIdleCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetIdleCurrentA, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetIdleCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetIdleCurrentA, METH_NOARGS, NULL },
    {(char *) "GetTotalEnergyConsumption", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetTotalEnergyConsumption, METH_NOARGS, NULL },
    {(char *) "GetRxCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetRxCurrentA, METH_NOARGS, NULL },
    {(char *) "ChangeState", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_ChangeState, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetNode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRxCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetRxCurrentA, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTxCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetTxCurrentA, METH_NOARGS, NULL },
    {(char *) "SetSleepCurrentA", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_SetSleepCurrentA, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel_GetNode, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3WifiRadioEnergyModel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRadioEnergyModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiRadioEnergyModel__tp_clear(PyNs3WifiRadioEnergyModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiRadioEnergyModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiRadioEnergyModel__tp_traverse(PyNs3WifiRadioEnergyModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3WifiRadioEnergyModel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiRadioEnergyModel__tp_dealloc(PyNs3WifiRadioEnergyModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiRadioEnergyModel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRadioEnergyModel__tp_richcompare (PyNs3WifiRadioEnergyModel *PYBINDGEN_UNUSED(self), PyNs3WifiRadioEnergyModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRadioEnergyModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRadioEnergyModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiRadioEnergyModel",            /* tp_name */
    sizeof(PyNs3WifiRadioEnergyModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRadioEnergyModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiRadioEnergyModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiRadioEnergyModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRadioEnergyModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRadioEnergyModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiRadioEnergyModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRadioEnergyModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3BasicEnergySource__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3BasicEnergySource *self)
{
    PyObject *py_retval;
    PyNs3BasicEnergySource__PythonHelper *helper = dynamic_cast< PyNs3BasicEnergySource__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3BasicEnergySource__PythonHelper::_wrap_NotifyNewAggregate(PyNs3BasicEnergySource *self)
{
    PyObject *py_retval;
    PyNs3BasicEnergySource__PythonHelper *helper = dynamic_cast< PyNs3BasicEnergySource__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3BasicEnergySource__PythonHelper::DecreaseRemainingEnergy(double energyJ)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DecreaseRemainingEnergy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::BasicEnergySource::DecreaseRemainingEnergy(energyJ);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = (ns3::BasicEnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DecreaseRemainingEnergy", (char *) "d", energyJ);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

double
PyNs3BasicEnergySource__PythonHelper::GetEnergyFraction()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEnergyFraction"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetEnergyFraction();
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = (ns3::BasicEnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEnergyFraction", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetEnergyFraction();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetEnergyFraction();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3BasicEnergySource__PythonHelper::GetInitialEnergy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInitialEnergy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetInitialEnergy();
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = const_cast< ns3::BasicEnergySource* >((const ns3::BasicEnergySource*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInitialEnergy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetInitialEnergy();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetInitialEnergy();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3BasicEnergySource__PythonHelper::GetRemainingEnergy()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetRemainingEnergy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetRemainingEnergy();
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = (ns3::BasicEnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetRemainingEnergy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetRemainingEnergy();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetRemainingEnergy();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3BasicEnergySource__PythonHelper::GetSupplyVoltage() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSupplyVoltage"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetSupplyVoltage();
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = const_cast< ns3::BasicEnergySource* >((const ns3::BasicEnergySource*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSupplyVoltage", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetSupplyVoltage();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::BasicEnergySource::GetSupplyVoltage();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BasicEnergySource__PythonHelper::IncreaseRemainingEnergy(double energyJ)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IncreaseRemainingEnergy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::BasicEnergySource::IncreaseRemainingEnergy(energyJ);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = (ns3::BasicEnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IncreaseRemainingEnergy", (char *) "d", energyJ);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BasicEnergySource__PythonHelper::UpdateEnergySource()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "UpdateEnergySource"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::BasicEnergySource::UpdateEnergySource();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = (ns3::BasicEnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "UpdateEnergySource", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BasicEnergySource__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = (ns3::BasicEnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BasicEnergySource__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::BasicEnergySource *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj;
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = (ns3::BasicEnergySource*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3BasicEnergySource* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3BasicEnergySource__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3BasicEnergySource__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3BasicEnergySource__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3BasicEnergySource__tp_init__0(PyNs3BasicEnergySource *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BasicEnergySource *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BasicEnergySource_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3BasicEnergySource_Type)
    {
        self->obj = new PyNs3BasicEnergySource__PythonHelper(*((PyNs3BasicEnergySource *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3BasicEnergySource__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BasicEnergySource(*((PyNs3BasicEnergySource *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3BasicEnergySource__tp_init__1(PyNs3BasicEnergySource *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3BasicEnergySource_Type)
    {
        self->obj = new PyNs3BasicEnergySource__PythonHelper();
        self->obj->Ref ();
        ((PyNs3BasicEnergySource__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::BasicEnergySource();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3BasicEnergySource__tp_init(PyNs3BasicEnergySource *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3BasicEnergySource__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BasicEnergySource__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BasicEnergySource_UpdateEnergySource(PyNs3BasicEnergySource *self)
{
    PyObject *py_retval;
    PyNs3BasicEnergySource__PythonHelper *helper_class = dynamic_cast<PyNs3BasicEnergySource__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->UpdateEnergySource()) : (self->obj->ns3::BasicEnergySource::UpdateEnergySource());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_GetEnergyUpdateInterval(PyNs3BasicEnergySource *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetEnergyUpdateInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_GetSupplyVoltage(PyNs3BasicEnergySource *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3BasicEnergySource__PythonHelper *helper_class = dynamic_cast<PyNs3BasicEnergySource__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSupplyVoltage()) : (self->obj->ns3::BasicEnergySource::GetSupplyVoltage());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::BasicEnergySource::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_DecreaseRemainingEnergy(PyNs3BasicEnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double energyJ;
    PyNs3BasicEnergySource__PythonHelper *helper_class = dynamic_cast<PyNs3BasicEnergySource__PythonHelper*> (self->obj);
    const char *keywords[] = {"energyJ", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &energyJ)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->DecreaseRemainingEnergy(energyJ)) : (self->obj->ns3::BasicEnergySource::DecreaseRemainingEnergy(energyJ));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_GetEnergyFraction(PyNs3BasicEnergySource *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3BasicEnergySource__PythonHelper *helper_class = dynamic_cast<PyNs3BasicEnergySource__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetEnergyFraction()) : (self->obj->ns3::BasicEnergySource::GetEnergyFraction());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_GetRemainingEnergy(PyNs3BasicEnergySource *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3BasicEnergySource__PythonHelper *helper_class = dynamic_cast<PyNs3BasicEnergySource__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetRemainingEnergy()) : (self->obj->ns3::BasicEnergySource::GetRemainingEnergy());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_SetInitialEnergy(PyNs3BasicEnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double initialEnergyJ;
    const char *keywords[] = {"initialEnergyJ", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &initialEnergyJ)) {
        return NULL;
    }
    self->obj->SetInitialEnergy(initialEnergyJ);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_SetSupplyVoltage(PyNs3BasicEnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double supplyVoltageV;
    const char *keywords[] = {"supplyVoltageV", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &supplyVoltageV)) {
        return NULL;
    }
    self->obj->SetSupplyVoltage(supplyVoltageV);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_SetEnergyUpdateInterval(PyNs3BasicEnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *interval;
    ns3::Time interval2;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &interval)) {
        return NULL;
    }
    if (PyObject_IsInstance(interval, (PyObject*) &PyNs3Time_Type)) {
        interval2 = *((PyNs3Time *) interval)->obj;
    } else if (PyObject_IsInstance(interval, (PyObject*) &PyNs3Scalar_Type)) {
        interval2 = *((PyNs3Scalar *) interval)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", interval->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetEnergyUpdateInterval(interval2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_GetInitialEnergy(PyNs3BasicEnergySource *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3BasicEnergySource__PythonHelper *helper_class = dynamic_cast<PyNs3BasicEnergySource__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetInitialEnergy()) : (self->obj->ns3::BasicEnergySource::GetInitialEnergy());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BasicEnergySource_IncreaseRemainingEnergy(PyNs3BasicEnergySource *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double energyJ;
    PyNs3BasicEnergySource__PythonHelper *helper_class = dynamic_cast<PyNs3BasicEnergySource__PythonHelper*> (self->obj);
    const char *keywords[] = {"energyJ", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &energyJ)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->IncreaseRemainingEnergy(energyJ)) : (self->obj->ns3::BasicEnergySource::IncreaseRemainingEnergy(energyJ));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3BasicEnergySource__copy__(PyNs3BasicEnergySource *self)
{

    PyNs3BasicEnergySource *py_copy;
    py_copy = PyObject_GC_New(PyNs3BasicEnergySource, &PyNs3BasicEnergySource_Type);
    py_copy->obj = new ns3::BasicEnergySource(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BasicEnergySource_methods[] = {
    {(char *) "UpdateEnergySource", (PyCFunction) _wrap_PyNs3BasicEnergySource_UpdateEnergySource, METH_NOARGS, NULL },
    {(char *) "GetEnergyUpdateInterval", (PyCFunction) _wrap_PyNs3BasicEnergySource_GetEnergyUpdateInterval, METH_NOARGS, NULL },
    {(char *) "GetSupplyVoltage", (PyCFunction) _wrap_PyNs3BasicEnergySource_GetSupplyVoltage, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3BasicEnergySource_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "DecreaseRemainingEnergy", (PyCFunction) _wrap_PyNs3BasicEnergySource_DecreaseRemainingEnergy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEnergyFraction", (PyCFunction) _wrap_PyNs3BasicEnergySource_GetEnergyFraction, METH_NOARGS, NULL },
    {(char *) "GetRemainingEnergy", (PyCFunction) _wrap_PyNs3BasicEnergySource_GetRemainingEnergy, METH_NOARGS, NULL },
    {(char *) "SetInitialEnergy", (PyCFunction) _wrap_PyNs3BasicEnergySource_SetInitialEnergy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSupplyVoltage", (PyCFunction) _wrap_PyNs3BasicEnergySource_SetSupplyVoltage, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetEnergyUpdateInterval", (PyCFunction) _wrap_PyNs3BasicEnergySource_SetEnergyUpdateInterval, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInitialEnergy", (PyCFunction) _wrap_PyNs3BasicEnergySource_GetInitialEnergy, METH_NOARGS, NULL },
    {(char *) "IncreaseRemainingEnergy", (PyCFunction) _wrap_PyNs3BasicEnergySource_IncreaseRemainingEnergy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3BasicEnergySource__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3BasicEnergySource__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BasicEnergySource__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3BasicEnergySource__tp_clear(PyNs3BasicEnergySource *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::BasicEnergySource *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3BasicEnergySource__tp_traverse(PyNs3BasicEnergySource *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3BasicEnergySource__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3BasicEnergySource__tp_dealloc(PyNs3BasicEnergySource *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3BasicEnergySource__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BasicEnergySource__tp_richcompare (PyNs3BasicEnergySource *PYBINDGEN_UNUSED(self), PyNs3BasicEnergySource *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BasicEnergySource_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BasicEnergySource_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.BasicEnergySource",            /* tp_name */
    sizeof(PyNs3BasicEnergySource),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BasicEnergySource__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3BasicEnergySource__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3BasicEnergySource__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BasicEnergySource__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BasicEnergySource_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3BasicEnergySource, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BasicEnergySource__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyStdOstream_wrapper_registry;

static int
_wrap_PyStdOstream__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'ostream' cannot be constructed (abstract base class)");
    return -1;
}

static PyMethodDef PyStdOstream_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyStdOstream__tp_dealloc(PyStdOstream *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyStdOstream_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyStdOstream_wrapper_registry.end()) {
        PyStdOstream_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ::std::ostream *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyStdOstream__tp_richcompare (PyStdOstream *PYBINDGEN_UNUSED(self), PyStdOstream *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyStdOstream_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyStdOstream_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Ostream",            /* tp_name */
    sizeof(PyStdOstream),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyStdOstream__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyStdOstream__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyStdOstream_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyStdOstream__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyStdOfstream__tp_init(PyStdOfstream *self, PyObject *args, PyObject *kwargs)
{
    char const *filename;
    std::ofstream::openmode mode = std::ios_base::out;
    const char *keywords[] = {"filename", "mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s|i", (char **) keywords, &filename, &mode)) {
        return -1;
    }
    self->obj = new ::std::ofstream(filename, mode);
    return 0;
}


PyObject *
_wrap_PyStdOfstream_close(PyStdOfstream *self)
{
    PyObject *py_retval;
    
    self->obj->close();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyStdOfstream_methods[] = {
    {(char *) "close", (PyCFunction) _wrap_PyStdOfstream_close, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyStdOfstream__tp_dealloc(PyStdOfstream *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyStdOstream_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyStdOstream_wrapper_registry.end()) {
        PyStdOstream_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ::std::ofstream *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyStdOfstream__tp_richcompare (PyStdOfstream *PYBINDGEN_UNUSED(self), PyStdOfstream *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyStdOfstream_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyStdOfstream_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Ofstream",            /* tp_name */
    sizeof(PyStdOfstream),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyStdOfstream__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyStdOfstream__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyStdOfstream_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyStdOfstream__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__vector__lt___unsigned_int___gt__Iter__tp_clear(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___unsigned_int___gt__Iter__tp_traverse(Pystd__vector__lt___unsigned_int___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_dealloc(Pystd__vector__lt___unsigned_int___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_dealloc(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_iter(Pystd__vector__lt___unsigned_int___gt__ *self)
{
    Pystd__vector__lt___unsigned_int___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___unsigned_int___gt__Iter, &Pystd__vector__lt___unsigned_int___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< unsigned int >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iter(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iternext(Pystd__vector__lt___unsigned_int___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< unsigned int >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(PyObject *arg, std::vector< unsigned int > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___unsigned_int___gt___Type)) {
        *container = *((Pystd__vector__lt___unsigned_int___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            unsigned int item;
            if (!_wrap_convert_py2c__unsigned_int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___unsigned_int___gt__ instance, or a list of unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___unsigned_int___gt____tp_init(Pystd__vector__lt___unsigned_int___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< unsigned int >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___unsigned_int___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___unsigned_int___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_int___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___unsigned_int___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___unsigned_int___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___unsigned_int___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_int___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___unsigned_int___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___unsigned_int___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___unsigned_int___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___bool___gt__Iter__tp_clear(Pystd__vector__lt___bool___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___bool___gt__Iter__tp_traverse(Pystd__vector__lt___bool___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___bool___gt____tp_dealloc(Pystd__vector__lt___bool___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___bool___gt__Iter__tp_dealloc(Pystd__vector__lt___bool___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___bool___gt____tp_iter(Pystd__vector__lt___bool___gt__ *self)
{
    Pystd__vector__lt___bool___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___bool___gt__Iter, &Pystd__vector__lt___bool___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< bool >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___bool___gt__Iter__tp_iter(Pystd__vector__lt___bool___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___bool___gt__Iter__tp_iternext(Pystd__vector__lt___bool___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< bool >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__bool(PyObject *value, bool *address)
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___bool___gt___Type)) {
        *container = *((Pystd__vector__lt___bool___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            bool item;
            if (!_wrap_convert_py2c__bool(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___bool___gt__ instance, or a list of bool");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___bool___gt____tp_init(Pystd__vector__lt___bool___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< bool >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___bool___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___bool___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___bool___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___bool___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___bool___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___bool___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___bool___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___bool___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___bool___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___bool___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___bool___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___bool___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___bool___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___bool___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Tap___gt__Iter__tp_clear(Pystd__vector__lt___ns3__Tap___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Tap___gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Tap___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Tap___gt____tp_dealloc(Pystd__vector__lt___ns3__Tap___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Tap___gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Tap___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Tap___gt____tp_iter(Pystd__vector__lt___ns3__Tap___gt__ *self)
{
    Pystd__vector__lt___ns3__Tap___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Tap___gt__Iter, &Pystd__vector__lt___ns3__Tap___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Tap >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Tap___gt__Iter__tp_iter(Pystd__vector__lt___ns3__Tap___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Tap___gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Tap___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Tap >::iterator iter;
    PyNs3Tap *py_Tap;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Tap = PyObject_New(PyNs3Tap, &PyNs3Tap_Type);
    py_Tap->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Tap->obj = new ns3::Tap((*iter));
    PyNs3Tap_wrapper_registry[(void *) py_Tap->obj] = (PyObject *) py_Tap;
    py_retval = Py_BuildValue((char *) "N", py_Tap);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Tap(PyObject *value, ns3::Tap *address)
{
    PyObject *py_retval;
    PyNs3Tap *tmp_Tap;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Tap_Type, &tmp_Tap)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Tap->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Tap___gt__(PyObject *arg, std::vector< ns3::Tap > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Tap___gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Tap___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Tap item;
            if (!_wrap_convert_py2c__ns3__Tap(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Tap___gt__ instance, or a list of ns3::Tap");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Tap___gt____tp_init(Pystd__vector__lt___ns3__Tap___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Tap >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Tap___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Tap___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___ns3__Tap___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Tap___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Tap___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Tap___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Tap___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Tap___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___ns3__Tap___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Tap___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Tap___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Tap___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Tap___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Tap___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Tap___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___double___gt__Iter__tp_clear(Pystd__vector__lt___double___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___double___gt__Iter__tp_traverse(Pystd__vector__lt___double___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___double___gt____tp_dealloc(Pystd__vector__lt___double___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___double___gt__Iter__tp_dealloc(Pystd__vector__lt___double___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___double___gt____tp_iter(Pystd__vector__lt___double___gt__ *self)
{
    Pystd__vector__lt___double___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___double___gt__Iter, &Pystd__vector__lt___double___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< double >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___double___gt__Iter__tp_iter(Pystd__vector__lt___double___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___double___gt__Iter__tp_iternext(Pystd__vector__lt___double___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< double >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "d", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___double___gt___Type)) {
        *container = *((Pystd__vector__lt___double___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            double item;
            if (!_wrap_convert_py2c__double(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___double___gt__ instance, or a list of double");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___double___gt____tp_init(Pystd__vector__lt___double___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< double >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___double___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___double___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___double___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___double___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___double___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___double___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___double___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___double___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___double___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___double___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___double___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___double___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___double___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___double___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___double___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pyns3__bvecIter__tp_clear(Pyns3__bvecIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__bvecIter__tp_traverse(Pyns3__bvecIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__bvec__tp_dealloc(Pyns3__bvec *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__bvecIter__tp_dealloc(Pyns3__bvecIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__bvec__tp_iter(Pyns3__bvec *self)
{
    Pyns3__bvecIter *iter = PyObject_GC_New(Pyns3__bvecIter, &Pyns3__bvecIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::bvec::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__bvecIter__tp_iter(Pyns3__bvecIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__bvecIter__tp_iternext(Pyns3__bvecIter *self)
{
    PyObject *py_retval;
    ns3::bvec::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__ns3__bvec(PyObject *arg, ns3::bvec *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__bvec_Type)) {
        *container = *((Pyns3__bvec*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            bool item;
            if (!_wrap_convert_py2c__bool(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__bvec instance, or a list of bool");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__bvec__tp_init(Pyns3__bvec *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::bvec;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__bvec(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__bvec_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Ns3__bvec",            /* tp_name */
    sizeof(Pyns3__bvec),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__bvec__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__bvec__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__bvec__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__bvecIter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Ns3__bvecIter",            /* tp_name */
    sizeof(Pyns3__bvecIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__bvecIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__bvecIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__bvecIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__bvecIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__bvecIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__map__lt___std__string__std__string___gt__Iter__tp_clear(Pystd__map__lt___std__string__std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__map__lt___std__string__std__string___gt__Iter__tp_traverse(Pystd__map__lt___std__string__std__string___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__map__lt___std__string__std__string___gt____tp_dealloc(Pystd__map__lt___std__string__std__string___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_dealloc(Pystd__map__lt___std__string__std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__map__lt___std__string__std__string___gt____tp_iter(Pystd__map__lt___std__string__std__string___gt__ *self)
{
    Pystd__map__lt___std__string__std__string___gt__Iter *iter = PyObject_GC_New(Pystd__map__lt___std__string__std__string___gt__Iter, &Pystd__map__lt___std__string__std__string___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::map< std::string, std::string >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_iter(Pystd__map__lt___std__string__std__string___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_iternext(Pystd__map__lt___std__string__std__string___gt__Iter *self)
{
    PyObject *py_retval;
    std::map< std::string, std::string >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "s#s#", (iter->first).c_str(), (iter->first).size(), (iter->second).c_str(), (iter->second).size());
    return py_retval;
}

int _wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(PyObject *arg, std::map< std::string, std::string > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__map__lt___std__string__std__string___gt___Type)) {
        *container = *((Pystd__map__lt___std__string__std__string___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair<std::string, std::string> item;
            if (!_wrap_convert_py2c__std__string(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__std__string(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__map__lt___std__string__std__string___gt__ instance, or a list of std::string");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__map__lt___std__string__std__string___gt____tp_init(Pystd__map__lt___std__string__std__string___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::map< std::string, std::string >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__map__lt___std__string__std__string___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__map__lt___std__string__std__string___gt__",            /* tp_name */
    sizeof(Pystd__map__lt___std__string__std__string___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___std__string__std__string___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___std__string__std__string___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__map__lt___std__string__std__string___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__map__lt___std__string__std__string___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__map__lt___std__string__std__string___gt__Iter",            /* tp_name */
    sizeof(Pystd__map__lt___std__string__std__string___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__map__lt___std__string__std__string___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__map__lt___std__string__std__string___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_clear(Pystd__list__lt___ns3__UanPacketArrival___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_traverse(Pystd__list__lt___ns3__UanPacketArrival___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt____tp_dealloc(Pystd__list__lt___ns3__UanPacketArrival___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_dealloc(Pystd__list__lt___ns3__UanPacketArrival___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt____tp_iter(Pystd__list__lt___ns3__UanPacketArrival___gt__ *self)
{
    Pystd__list__lt___ns3__UanPacketArrival___gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___ns3__UanPacketArrival___gt__Iter, &Pystd__list__lt___ns3__UanPacketArrival___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< ns3::UanPacketArrival >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_iter(Pystd__list__lt___ns3__UanPacketArrival___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_iternext(Pystd__list__lt___ns3__UanPacketArrival___gt__Iter *self)
{
    PyObject *py_retval;
    std::list< ns3::UanPacketArrival >::iterator iter;
    PyNs3UanPacketArrival *py_UanPacketArrival;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_UanPacketArrival = PyObject_New(PyNs3UanPacketArrival, &PyNs3UanPacketArrival_Type);
    py_UanPacketArrival->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_UanPacketArrival->obj = new ns3::UanPacketArrival((*iter));
    PyNs3UanPacketArrival_wrapper_registry[(void *) py_UanPacketArrival->obj] = (PyObject *) py_UanPacketArrival;
    py_retval = Py_BuildValue((char *) "N", py_UanPacketArrival);
    return py_retval;
}

int _wrap_convert_py2c__ns3__UanPacketArrival(PyObject *value, ns3::UanPacketArrival *address)
{
    PyObject *py_retval;
    PyNs3UanPacketArrival *tmp_UanPacketArrival;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3UanPacketArrival_Type, &tmp_UanPacketArrival)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_UanPacketArrival->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___ns3__UanPacketArrival___gt__(PyObject *arg, std::list< ns3::UanPacketArrival > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___ns3__UanPacketArrival___gt___Type)) {
        *container = *((Pystd__list__lt___ns3__UanPacketArrival___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::UanPacketArrival item;
            if (!_wrap_convert_py2c__ns3__UanPacketArrival(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___ns3__UanPacketArrival___gt__ instance, or a list of ns3::UanPacketArrival");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt____tp_init(Pystd__list__lt___ns3__UanPacketArrival___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< ns3::UanPacketArrival >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___ns3__UanPacketArrival___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___ns3__UanPacketArrival___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__list__lt___ns3__UanPacketArrival___gt__",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__UanPacketArrival___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___ns3__UanPacketArrival___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__list__lt___ns3__UanPacketArrival___gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__UanPacketArrival___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___ns3__UanPacketArrival___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_clear(Pystd__vector__lt___unsigned_long_long___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_traverse(Pystd__vector__lt___unsigned_long_long___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___unsigned_long_long___gt____tp_dealloc(Pystd__vector__lt___unsigned_long_long___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_dealloc(Pystd__vector__lt___unsigned_long_long___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_long_long___gt____tp_iter(Pystd__vector__lt___unsigned_long_long___gt__ *self)
{
    Pystd__vector__lt___unsigned_long_long___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___unsigned_long_long___gt__Iter, &Pystd__vector__lt___unsigned_long_long___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< unsigned long long >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_iter(Pystd__vector__lt___unsigned_long_long___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_iternext(Pystd__vector__lt___unsigned_long_long___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< unsigned long long >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "K", (*iter));
    return py_retval;
}

int _wrap_convert_py2c__long_long_unsigned_int(PyObject *value, long long unsigned int *address)
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___unsigned_long_long___gt__(PyObject *arg, std::vector< unsigned long long > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___unsigned_long_long___gt___Type)) {
        *container = *((Pystd__vector__lt___unsigned_long_long___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            long long unsigned int item;
            if (!_wrap_convert_py2c__long_long_unsigned_int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___unsigned_long_long___gt__ instance, or a list of long long unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___unsigned_long_long___gt____tp_init(Pystd__vector__lt___unsigned_long_long___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< unsigned long long >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___unsigned_long_long___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___unsigned_long_long___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___unsigned_long_long___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_long_long___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_long_long___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_long_long___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___unsigned_long_long___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___unsigned_long_long___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__vector__lt___unsigned_long_long___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___unsigned_long_long___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___unsigned_long_long___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___unsigned_int___gt__Iter__tp_clear(Pystd__list__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___unsigned_int___gt__Iter__tp_traverse(Pystd__list__lt___unsigned_int___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___unsigned_int___gt____tp_dealloc(Pystd__list__lt___unsigned_int___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___unsigned_int___gt__Iter__tp_dealloc(Pystd__list__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___unsigned_int___gt____tp_iter(Pystd__list__lt___unsigned_int___gt__ *self)
{
    Pystd__list__lt___unsigned_int___gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___unsigned_int___gt__Iter, &Pystd__list__lt___unsigned_int___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< unsigned int >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___unsigned_int___gt__Iter__tp_iter(Pystd__list__lt___unsigned_int___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___unsigned_int___gt__Iter__tp_iternext(Pystd__list__lt___unsigned_int___gt__Iter *self)
{
    PyObject *py_retval;
    std::list< unsigned int >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__std__list__lt___unsigned_int___gt__(PyObject *arg, std::list< unsigned int > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___unsigned_int___gt___Type)) {
        *container = *((Pystd__list__lt___unsigned_int___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            unsigned int item;
            if (!_wrap_convert_py2c__unsigned_int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___unsigned_int___gt__ instance, or a list of unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___unsigned_int___gt____tp_init(Pystd__list__lt___unsigned_int___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< unsigned int >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___unsigned_int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___unsigned_int___gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__list__lt___unsigned_int___gt__",            /* tp_name */
    sizeof(Pystd__list__lt___unsigned_int___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___unsigned_int___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___unsigned_int___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___unsigned_int___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___unsigned_int___gt__Iter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Std__list__lt___unsigned_int___gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___unsigned_int___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___unsigned_int___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___unsigned_int___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___unsigned_int___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___unsigned_int___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___unsigned_int___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */















PyMODINIT_FUNC
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif
init_ns3(void)
{
    PyObject *m;
    PyObject *submodule;
    m = Py_InitModule3((char *) "_ns3", ns3_functions, NULL);
    if (m == NULL) {
        return;
    }
    PyModule_AddIntConstant(m, (char *) "STD_IOS_IN", std::ios::in);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_OUT", std::ios::out);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_ATE", std::ios::ate);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_APP", std::ios::app);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_TRUNC", std::ios::trunc);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_BINARY", std::ios::binary);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >), &PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Object), &PyNs3Object_Type);
    PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >), &PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >), &PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >), &PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type);
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >), &PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type);
    PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::RefCountBase, ns3::empty, ns3::DefaultDeleter<ns3::RefCountBase> >), &PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt___Type);
    PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::SystemThread, ns3::empty, ns3::DefaultDeleter<ns3::SystemThread> >), &PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt___Type);
    PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >), &PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type);
    PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt____typeid_map.register_wrapper(typeid(ns3::SystemThread), &PyNs3SystemThread_Type);
    PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map.register_wrapper(typeid(ns3::TraceSourceAccessor), &PyNs3TraceSourceAccessor_Type);
    PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map.register_wrapper(typeid(ns3::AttributeAccessor), &PyNs3AttributeAccessor_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::AttributeChecker), &PyNs3AttributeChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::AttributeValue), &PyNs3AttributeValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::BooleanChecker), &PyNs3BooleanChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::BooleanValue), &PyNs3BooleanValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::CallbackChecker), &PyNs3CallbackChecker_Type);
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map.register_wrapper(typeid(ns3::CallbackImplBase), &PyNs3CallbackImplBase_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::CallbackValue), &PyNs3CallbackValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::DoubleValue), &PyNs3DoubleValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::EmptyAttributeValue), &PyNs3EmptyAttributeValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::EnumChecker), &PyNs3EnumChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::EnumValue), &PyNs3EnumValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::IntegerValue), &PyNs3IntegerValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::ObjectFactoryChecker), &PyNs3ObjectFactoryChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::ObjectFactoryValue), &PyNs3ObjectFactoryValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map.register_wrapper(typeid(ns3::ObjectVectorAccessor), &PyNs3ObjectVectorAccessor_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::ObjectVectorChecker), &PyNs3ObjectVectorChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::ObjectVectorValue), &PyNs3ObjectVectorValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::PointerChecker), &PyNs3PointerChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::PointerValue), &PyNs3PointerValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::RandomVariableChecker), &PyNs3RandomVariableChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::RandomVariableValue), &PyNs3RandomVariableValue_Type);
    PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt____typeid_map.register_wrapper(typeid(ns3::RefCountBase), &PyNs3RefCountBase_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::StringChecker), &PyNs3StringChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::StringValue), &PyNs3StringValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::TypeIdChecker), &PyNs3TypeIdChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::TypeIdValue), &PyNs3TypeIdValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::UintegerValue), &PyNs3UintegerValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::Vector2DChecker), &PyNs3Vector2DChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::Vector2DValue), &PyNs3Vector2DValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::Vector3DChecker), &PyNs3Vector3DChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::Vector3DValue), &PyNs3Vector3DValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Scheduler), &PyNs3Scheduler_Type);
    PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >), &PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimulatorImpl), &PyNs3SimulatorImpl_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Synchronizer), &PyNs3Synchronizer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::CalendarScheduler), &PyNs3CalendarScheduler_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::DefaultSimulatorImpl), &PyNs3DefaultSimulatorImpl_Type);
    PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map.register_wrapper(typeid(ns3::EventImpl), &PyNs3EventImpl_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::HeapScheduler), &PyNs3HeapScheduler_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ListScheduler), &PyNs3ListScheduler_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MapScheduler), &PyNs3MapScheduler_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ns2CalendarScheduler), &PyNs3Ns2CalendarScheduler_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::TimeChecker), &PyNs3TimeChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::TimeValue), &PyNs3TimeValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PacketBurst), &PyNs3PacketBurst_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PcapFileWrapper), &PyNs3PcapFileWrapper_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PropagationDelayModel), &PyNs3PropagationDelayModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PropagationLossModel), &PyNs3PropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RandomPropagationDelayModel), &PyNs3RandomPropagationDelayModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RandomPropagationLossModel), &PyNs3RandomPropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RangePropagationLossModel), &PyNs3RangePropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >), &PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type);
    PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >), &PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type);
    PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >), &PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type);
    PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::SpectrumConverter, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumConverter> >), &PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt___Type);
    PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >), &PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type);
    PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >), &PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type);
    PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt____typeid_map.register_wrapper(typeid(ns3::SpectrumConverter), &PyNs3SpectrumConverter_Type);
    PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map.register_wrapper(typeid(ns3::SpectrumModel), &PyNs3SpectrumModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SpectrumPropagationLossModel), &PyNs3SpectrumPropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map.register_wrapper(typeid(ns3::SpectrumValue), &PyNs3SpectrumValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ThreeLogDistancePropagationLossModel), &PyNs3ThreeLogDistancePropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::TwoRayGroundPropagationLossModel), &PyNs3TwoRayGroundPropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ConstantSpeedPropagationDelayModel), &PyNs3ConstantSpeedPropagationDelayModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Cost231PropagationLossModel), &PyNs3Cost231PropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::DataRateChecker), &PyNs3DataRateChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::DataRateValue), &PyNs3DataRateValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ErrorModel), &PyNs3ErrorModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::FixedRssLossModel), &PyNs3FixedRssLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::FriisPropagationLossModel), &PyNs3FriisPropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::FriisSpectrumPropagationLossModel), &PyNs3FriisSpectrumPropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::JakesPropagationLossModel), &PyNs3JakesPropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ListErrorModel), &PyNs3ListErrorModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::LogDistancePropagationLossModel), &PyNs3LogDistancePropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MatrixPropagationLossModel), &PyNs3MatrixPropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::NakagamiPropagationLossModel), &PyNs3NakagamiPropagationLossModel_Type);
    PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map.register_wrapper(typeid(ns3::NixVector), &PyNs3NixVector_Type);
    PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map.register_wrapper(typeid(ns3::OutputStreamWrapper), &PyNs3OutputStreamWrapper_Type);
    PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.register_wrapper(typeid(ns3::Packet), &PyNs3Packet_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RateErrorModel), &PyNs3RateErrorModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ReceiveListErrorModel), &PyNs3ReceiveListErrorModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PositionAllocator), &PyNs3PositionAllocator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RandomBoxPositionAllocator), &PyNs3RandomBoxPositionAllocator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RandomDiscPositionAllocator), &PyNs3RandomDiscPositionAllocator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RandomRectanglePositionAllocator), &PyNs3RandomRectanglePositionAllocator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UniformDiscPositionAllocator), &PyNs3UniformDiscPositionAllocator_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::BoxChecker), &PyNs3BoxChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::BoxValue), &PyNs3BoxValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::GridPositionAllocator), &PyNs3GridPositionAllocator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ListPositionAllocator), &PyNs3ListPositionAllocator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MobilityModel), &PyNs3MobilityModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RandomDirection2dMobilityModel), &PyNs3RandomDirection2dMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RandomWalk2dMobilityModel), &PyNs3RandomWalk2dMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RandomWaypointMobilityModel), &PyNs3RandomWaypointMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::RectangleChecker), &PyNs3RectangleChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::RectangleValue), &PyNs3RectangleValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SteadyStateRandomWaypointMobilityModel), &PyNs3SteadyStateRandomWaypointMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::WaypointChecker), &PyNs3WaypointChecker_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WaypointMobilityModel), &PyNs3WaypointMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::WaypointValue), &PyNs3WaypointValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ConstantAccelerationMobilityModel), &PyNs3ConstantAccelerationMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ConstantPositionMobilityModel), &PyNs3ConstantPositionMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ConstantVelocityMobilityModel), &PyNs3ConstantVelocityMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::GaussMarkovMobilityModel), &PyNs3GaussMarkovMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::HierarchicalMobilityModel), &PyNs3HierarchicalMobilityModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::DistributedSimulatorImpl), &PyNs3DistributedSimulatorImpl_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Queue), &PyNs3Queue_Type);
    PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >), &PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type);
    PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >), &PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type);
    PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> >), &PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type);
    PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> >), &PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt___Type);
    PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::PbbAddressBlock, ns3::empty, ns3::DefaultDeleter<ns3::PbbAddressBlock> >), &PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt___Type);
    PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::PbbMessage, ns3::empty, ns3::DefaultDeleter<ns3::PbbMessage> >), &PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt___Type);
    PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::PbbPacket, ns3::Header, ns3::DefaultDeleter<ns3::PbbPacket> >), &PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt___Type);
    PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::PbbTlv, ns3::empty, ns3::DefaultDeleter<ns3::PbbTlv> >), &PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt___Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Socket), &PyNs3Socket_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SocketFactory), &PyNs3SocketFactory_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SpectrumPhy), &PyNs3SpectrumPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::TcpSocket), &PyNs3TcpSocket_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::TcpSocketFactory), &PyNs3TcpSocketFactory_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UdpSocket), &PyNs3UdpSocket_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UdpSocketFactory), &PyNs3UdpSocketFactory_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Application), &PyNs3Application_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Channel), &PyNs3Channel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::DropTailQueue), &PyNs3DropTailQueue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4), &PyNs3Ipv4_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::Ipv4AddressChecker), &PyNs3Ipv4AddressChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::Ipv4AddressValue), &PyNs3Ipv4AddressValue_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::Ipv4MaskChecker), &PyNs3Ipv4MaskChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::Ipv4MaskValue), &PyNs3Ipv4MaskValue_Type);
    PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map.register_wrapper(typeid(ns3::Ipv4MulticastRoute), &PyNs3Ipv4MulticastRoute_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4RawSocketFactory), &PyNs3Ipv4RawSocketFactory_Type);
    PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map.register_wrapper(typeid(ns3::Ipv4Route), &PyNs3Ipv4Route_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4RoutingProtocol), &PyNs3Ipv4RoutingProtocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv6), &PyNs3Ipv6_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::Ipv6AddressChecker), &PyNs3Ipv6AddressChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::Ipv6AddressValue), &PyNs3Ipv6AddressValue_Type);
    PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt____typeid_map.register_wrapper(typeid(ns3::Ipv6MulticastRoute), &PyNs3Ipv6MulticastRoute_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::Ipv6PrefixChecker), &PyNs3Ipv6PrefixChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::Ipv6PrefixValue), &PyNs3Ipv6PrefixValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv6RawSocketFactory), &PyNs3Ipv6RawSocketFactory_Type);
    PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt____typeid_map.register_wrapper(typeid(ns3::Ipv6Route), &PyNs3Ipv6Route_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv6RoutingProtocol), &PyNs3Ipv6RoutingProtocol_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::Mac48AddressChecker), &PyNs3Mac48AddressChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::Mac48AddressValue), &PyNs3Mac48AddressValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::NetDevice), &PyNs3NetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Node), &PyNs3Node_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PacketSocketFactory), &PyNs3PacketSocketFactory_Type);
    PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt____typeid_map.register_wrapper(typeid(ns3::PbbAddressBlock), &PyNs3PbbAddressBlock_Type);
    PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt____typeid_map.register_wrapper(typeid(ns3::PbbAddressBlockIpv4), &PyNs3PbbAddressBlockIpv4_Type);
    PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt____typeid_map.register_wrapper(typeid(ns3::PbbAddressBlockIpv6), &PyNs3PbbAddressBlockIpv6_Type);
    PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt____typeid_map.register_wrapper(typeid(ns3::PbbMessage), &PyNs3PbbMessage_Type);
    PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt____typeid_map.register_wrapper(typeid(ns3::PbbMessageIpv4), &PyNs3PbbMessageIpv4_Type);
    PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt____typeid_map.register_wrapper(typeid(ns3::PbbMessageIpv6), &PyNs3PbbMessageIpv6_Type);
    PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt____typeid_map.register_wrapper(typeid(ns3::PbbPacket), &PyNs3PbbPacket_Type);
    PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt____typeid_map.register_wrapper(typeid(ns3::PbbTlv), &PyNs3PbbTlv_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimpleChannel), &PyNs3SimpleChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimpleNetDevice), &PyNs3SimpleNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SpectrumChannel), &PyNs3SpectrumChannel_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::AddressChecker), &PyNs3AddressChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::AddressValue), &PyNs3AddressValue_Type);
    PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt____typeid_map.register_wrapper(typeid(ns3::PbbAddressTlv), &PyNs3PbbAddressTlv_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BridgeChannel), &PyNs3BridgeChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BridgeNetDevice), &PyNs3BridgeNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::CsmaChannel), &PyNs3CsmaChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::CsmaNetDevice), &PyNs3CsmaNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::GlobalRouter), &PyNs3GlobalRouter_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4GlobalRouting), &PyNs3Ipv4GlobalRouting_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ArpCache), &PyNs3ArpCache_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ArpL3Protocol), &PyNs3ArpL3Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4Interface), &PyNs3Ipv4Interface_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4L3Protocol), &PyNs3Ipv4L3Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4L4Protocol), &PyNs3Ipv4L4Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv6Interface), &PyNs3Ipv6Interface_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv6L3Protocol), &PyNs3Ipv6L3Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv6L4Protocol), &PyNs3Ipv6L4Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::NdiscCache), &PyNs3NdiscCache_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::TcpL4Protocol), &PyNs3TcpL4Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UdpL4Protocol), &PyNs3UdpL4Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Icmpv4L4Protocol), &PyNs3Icmpv4L4Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Icmpv6L4Protocol), &PyNs3Icmpv6L4Protocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::LoopbackNetDevice), &PyNs3LoopbackNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4ListRouting), &PyNs3Ipv4ListRouting_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv6ListRouting), &PyNs3Ipv6ListRouting_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::OnOffApplication), &PyNs3OnOffApplication_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PacketSink), &PyNs3PacketSink_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PointToPointChannel), &PyNs3PointToPointChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PointToPointNetDevice), &PyNs3PointToPointNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PointToPointRemoteChannel), &PyNs3PointToPointRemoteChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SpectrumErrorModel), &PyNs3SpectrumErrorModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SpectrumInterference), &PyNs3SpectrumInterference_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WaveformGenerator), &PyNs3WaveformGenerator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::HalfDuplexIdealPhy), &PyNs3HalfDuplexIdealPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::NonCommunicatingNetDevice), &PyNs3NonCommunicatingNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ShannonSpectrumErrorModel), &PyNs3ShannonSpectrumErrorModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SpectrumAnalyzer), &PyNs3SpectrumAnalyzer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AlohaNoackNetDevice), &PyNs3AlohaNoackNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MultiModelSpectrumChannel), &PyNs3MultiModelSpectrumChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SingleModelSpectrumChannel), &PyNs3SingleModelSpectrumChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4StaticRouting), &PyNs3Ipv4StaticRouting_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv6StaticRouting), &PyNs3Ipv6StaticRouting_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::DataCalculator), &PyNs3DataCalculator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::DataCollector), &PyNs3DataCollector_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::DataOutputInterface), &PyNs3DataOutputInterface_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MinMaxAvgTotalCalculator< unsigned int >), &PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::OmnetDataOutput), &PyNs3OmnetDataOutput_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PacketSizeMinMaxAvgTotalCalculator), &PyNs3PacketSizeMinMaxAvgTotalCalculator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SqliteDataOutput), &PyNs3SqliteDataOutput_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::TimeMinMaxAvgTotalCalculator), &PyNs3TimeMinMaxAvgTotalCalculator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::CounterCalculator< unsigned int >), &PyNs3CounterCalculator__Unsigned_int_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PacketCounterCalculator), &PyNs3PacketCounterCalculator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::TopologyReader), &PyNs3TopologyReader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::InetTopologyReader), &PyNs3InetTopologyReader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::OrbisTopologyReader), &PyNs3OrbisTopologyReader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RocketfuelTopologyReader), &PyNs3RocketfuelTopologyReader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::V4Ping), &PyNs3V4Ping_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::VirtualNetDevice), &PyNs3VirtualNetDevice_Type);
    PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >), &PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >), &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::WifiInformationElement), &PyNs3WifiInformationElement_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiMac), &PyNs3WifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiPhy), &PyNs3WifiPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiRemoteStationManager), &PyNs3WifiRemoteStationManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::YansWifiPhy), &PyNs3YansWifiPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AarfWifiManager), &PyNs3AarfWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AarfcdWifiManager), &PyNs3AarfcdWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AdhocWifiMac), &PyNs3AdhocWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AmrrWifiManager), &PyNs3AmrrWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ArfWifiManager), &PyNs3ArfWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::CaraWifiManager), &PyNs3CaraWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ConstantRateWifiManager), &PyNs3ConstantRateWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Dcf), &PyNs3Dcf_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::EdcaTxopN), &PyNs3EdcaTxopN_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ErrorRateModel), &PyNs3ErrorRateModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::IdealWifiManager), &PyNs3IdealWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MacLow), &PyNs3MacLow_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MinstrelWifiManager), &PyNs3MinstrelWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MsduAggregator), &PyNs3MsduAggregator_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::NistErrorRateModel), &PyNs3NistErrorRateModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::NqapWifiMac), &PyNs3NqapWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::NqstaWifiMac), &PyNs3NqstaWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::OnoeWifiManager), &PyNs3OnoeWifiManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::QadhocWifiMac), &PyNs3QadhocWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::QapWifiMac), &PyNs3QapWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::QstaWifiMac), &PyNs3QstaWifiMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::RraaWifiManager), &PyNs3RraaWifiManager_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::Ssid), &PyNs3Ssid_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::SsidChecker), &PyNs3SsidChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::SsidValue), &PyNs3SsidValue_Type);
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.register_wrapper(typeid(ns3::SupportedRates), &PyNs3SupportedRates_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiChannel), &PyNs3WifiChannel_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::WifiModeChecker), &PyNs3WifiModeChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::WifiModeValue), &PyNs3WifiModeValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiNetDevice), &PyNs3WifiNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::YansErrorRateModel), &PyNs3YansErrorRateModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::YansWifiChannel), &PyNs3YansWifiChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::DcaTxop), &PyNs3DcaTxop_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::PriorityUlJob), &PyNs3PriorityUlJob_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SSManager), &PyNs3SSManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ServiceFlowManager), &PyNs3ServiceFlowManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SsServiceFlowManager), &PyNs3SsServiceFlowManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UlJob), &PyNs3UlJob_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UplinkScheduler), &PyNs3UplinkScheduler_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UplinkSchedulerMBQoS), &PyNs3UplinkSchedulerMBQoS_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UplinkSchedulerRtps), &PyNs3UplinkSchedulerRtps_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UplinkSchedulerSimple), &PyNs3UplinkSchedulerSimple_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxConnection), &PyNs3WimaxConnection_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxMacQueue), &PyNs3WimaxMacQueue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxPhy), &PyNs3WimaxPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BSScheduler), &PyNs3BSScheduler_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BSSchedulerRtps), &PyNs3BSSchedulerRtps_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BSSchedulerSimple), &PyNs3BSSchedulerSimple_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BsServiceFlowManager), &PyNs3BsServiceFlowManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ConnectionManager), &PyNs3ConnectionManager_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::IpcsClassifier), &PyNs3IpcsClassifier_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimpleOfdmWimaxPhy), &PyNs3SimpleOfdmWimaxPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxChannel), &PyNs3WimaxChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WimaxNetDevice), &PyNs3WimaxNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BaseStationNetDevice), &PyNs3BaseStationNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SimpleOfdmWimaxChannel), &PyNs3SimpleOfdmWimaxChannel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::SubscriberStationNetDevice), &PyNs3SubscriberStationNetDevice_Type);
    PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier> >), &PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___Type);
    PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::FlowProbe, ns3::empty, ns3::DefaultDeleter<ns3::FlowProbe> >), &PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt___Type);
    PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt____typeid_map.register_wrapper(typeid(ns3::FlowClassifier), &PyNs3FlowClassifier_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::FlowMonitor), &PyNs3FlowMonitor_Type);
    PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt____typeid_map.register_wrapper(typeid(ns3::FlowProbe), &PyNs3FlowProbe_Type);
    PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt____typeid_map.register_wrapper(typeid(ns3::Ipv4FlowClassifier), &PyNs3Ipv4FlowClassifier_Type);
    PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt____typeid_map.register_wrapper(typeid(ns3::Ipv4FlowProbe), &PyNs3Ipv4FlowProbe_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ipv4NixVectorRouting), &PyNs3Ipv4NixVectorRouting_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Ping6), &PyNs3Ping6_Type);
    PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::RadvdInterface, ns3::empty, ns3::DefaultDeleter<ns3::RadvdInterface> >), &PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt___Type);
    PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::RadvdPrefix, ns3::empty, ns3::DefaultDeleter<ns3::RadvdPrefix> >), &PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt___Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Radvd), &PyNs3Radvd_Type);
    PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt____typeid_map.register_wrapper(typeid(ns3::RadvdInterface), &PyNs3RadvdInterface_Type);
    PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt____typeid_map.register_wrapper(typeid(ns3::RadvdPrefix), &PyNs3RadvdPrefix_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UdpClient), &PyNs3UdpClient_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UdpServer), &PyNs3UdpServer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UdpTraceClient), &PyNs3UdpTraceClient_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UdpEchoClient), &PyNs3UdpEchoClient_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UdpEchoServer), &PyNs3UdpEchoServer_Type);
    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> >), &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MeshL2RoutingProtocol), &PyNs3MeshL2RoutingProtocol_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MeshWifiInterfaceMac), &PyNs3MeshWifiInterfaceMac_Type);
    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map.register_wrapper(typeid(ns3::MeshWifiInterfaceMacPlugin), &PyNs3MeshWifiInterfaceMacPlugin_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MeshPointDevice), &PyNs3MeshPointDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::AthstatsWifiTraceSink), &PyNs3AthstatsWifiTraceSink_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::CanvasLocation), &PyNs3CanvasLocation_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::MeshStack), &PyNs3MeshStack_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::Dot11sStack), &PyNs3Dot11sStack_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::FlameStack), &PyNs3FlameStack_Type);
    PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> >), &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanMac), &PyNs3UanMac_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanMacAloha), &PyNs3UanMacAloha_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanMacCw), &PyNs3UanMacCw_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanMacRc), &PyNs3UanMacRc_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanMacRcGw), &PyNs3UanMacRcGw_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanNoiseModel), &PyNs3UanNoiseModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanNoiseModelDefault), &PyNs3UanNoiseModelDefault_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhy), &PyNs3UanPhy_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyCalcSinr), &PyNs3UanPhyCalcSinr_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyCalcSinrDefault), &PyNs3UanPhyCalcSinrDefault_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyCalcSinrDual), &PyNs3UanPhyCalcSinrDual_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyCalcSinrFhFsk), &PyNs3UanPhyCalcSinrFhFsk_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyDual), &PyNs3UanPhyDual_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyGen), &PyNs3UanPhyGen_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyPer), &PyNs3UanPhyPer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyPerGenDefault), &PyNs3UanPhyPerGenDefault_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPhyPerUmodem), &PyNs3UanPhyPerUmodem_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPropModel), &PyNs3UanPropModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPropModelIdeal), &PyNs3UanPropModelIdeal_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanPropModelThorp), &PyNs3UanPropModelThorp_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanTransducer), &PyNs3UanTransducer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanTransducerHd), &PyNs3UanTransducerHd_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::DeviceEnergyModel), &PyNs3DeviceEnergyModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::EnergySource), &PyNs3EnergySource_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::EnergySourceContainer), &PyNs3EnergySourceContainer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanChannel), &PyNs3UanChannel_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::UanModesListChecker), &PyNs3UanModesListChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::UanModesListValue), &PyNs3UanModesListValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::UanNetDevice), &PyNs3UanNetDevice_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::WifiRadioEnergyModel), &PyNs3WifiRadioEnergyModel_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::BasicEnergySource), &PyNs3BasicEnergySource_Type);
    /* Register the 'ns3::AttributeList' class */
    if (PyType_Ready(&PyNs3AttributeList_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AttributeList", (PyObject *) &PyNs3AttributeList_Type);
    /* Register the 'ns3::CallbackBase' class */
    if (PyType_Ready(&PyNs3CallbackBase_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CallbackBase", (PyObject *) &PyNs3CallbackBase_Type);
    /* Register the 'ns3::CommandLine' class */
    if (PyType_Ready(&PyNs3CommandLine_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CommandLine", (PyObject *) &PyNs3CommandLine_Type);
    /* Register the 'ns3::CriticalSection' class */
    if (PyType_Ready(&PyNs3CriticalSection_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CriticalSection", (PyObject *) &PyNs3CriticalSection_Type);
    /* Register the 'ns3::GlobalValue' class */
    if (PyType_Ready(&PyNs3GlobalValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GlobalValue", (PyObject *) &PyNs3GlobalValue_Type);
    /* Register the 'ns3::IntToType< 0 >' class */
    if (PyType_Ready(&PyNs3IntToType__0_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntToType__0", (PyObject *) &PyNs3IntToType__0_Type);
    /* Register the 'ns3::IntToType< 1 >' class */
    if (PyType_Ready(&PyNs3IntToType__1_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntToType__1", (PyObject *) &PyNs3IntToType__1_Type);
    /* Register the 'ns3::IntToType< 2 >' class */
    if (PyType_Ready(&PyNs3IntToType__2_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntToType__2", (PyObject *) &PyNs3IntToType__2_Type);
    /* Register the 'ns3::IntToType< 3 >' class */
    if (PyType_Ready(&PyNs3IntToType__3_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntToType__3", (PyObject *) &PyNs3IntToType__3_Type);
    /* Register the 'ns3::IntToType< 4 >' class */
    if (PyType_Ready(&PyNs3IntToType__4_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntToType__4", (PyObject *) &PyNs3IntToType__4_Type);
    /* Register the 'ns3::IntToType< 5 >' class */
    if (PyType_Ready(&PyNs3IntToType__5_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntToType__5", (PyObject *) &PyNs3IntToType__5_Type);
    /* Register the 'ns3::IntToType< 6 >' class */
    if (PyType_Ready(&PyNs3IntToType__6_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntToType__6", (PyObject *) &PyNs3IntToType__6_Type);
    /* Register the 'ns3::Names' class */
    if (PyType_Ready(&PyNs3Names_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Names", (PyObject *) &PyNs3Names_Type);
    /* Register the 'ns3::ObjectBase' class */
    if (PyType_Ready(&PyNs3ObjectBase_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ObjectBase", (PyObject *) &PyNs3ObjectBase_Type);
    /* Register the 'ns3::ObjectDeleter' class */
    if (PyType_Ready(&PyNs3ObjectDeleter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ObjectDeleter", (PyObject *) &PyNs3ObjectDeleter_Type);
    /* Register the 'ns3::ObjectFactory' class */
    if (PyType_Ready(&PyNs3ObjectFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ObjectFactory", (PyObject *) &PyNs3ObjectFactory_Type);
    /* Register the 'ns3::RandomVariable' class */
    if (PyType_Ready(&PyNs3RandomVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomVariable", (PyObject *) &PyNs3RandomVariable_Type);
    /* Register the 'ns3::RngStream' class */
    if (PyType_Ready(&PyNs3RngStream_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RngStream", (PyObject *) &PyNs3RngStream_Type);
    /* Register the 'ns3::SeedManager' class */
    if (PyType_Ready(&PyNs3SeedManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SeedManager", (PyObject *) &PyNs3SeedManager_Type);
    /* Register the 'ns3::SequentialVariable' class */
    PyNs3SequentialVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3SequentialVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SequentialVariable", (PyObject *) &PyNs3SequentialVariable_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class */
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type.tp_base = &PyNs3ObjectBase_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter", (PyObject *) &PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type);
    /* Register the 'ns3::SystemCondition' class */
    if (PyType_Ready(&PyNs3SystemCondition_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SystemCondition", (PyObject *) &PyNs3SystemCondition_Type);
    /* Register the 'ns3::SystemMutex' class */
    if (PyType_Ready(&PyNs3SystemMutex_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SystemMutex", (PyObject *) &PyNs3SystemMutex_Type);
    /* Register the 'ns3::SystemWallClockMs' class */
    if (PyType_Ready(&PyNs3SystemWallClockMs_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SystemWallClockMs", (PyObject *) &PyNs3SystemWallClockMs_Type);
    /* Register the 'ns3::TestCase' class */
    if (PyType_Ready(&PyNs3TestCase_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TestCase", (PyObject *) &PyNs3TestCase_Type);
    /* Register the 'ns3::TestRunner' class */
    if (PyType_Ready(&PyNs3TestRunner_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TestRunner", (PyObject *) &PyNs3TestRunner_Type);
    /* Register the 'ns3::TestSuite' class */
    if (PyType_Ready(&PyNs3TestSuite_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TestSuite", (PyObject *) &PyNs3TestSuite_Type);
    /* Register the 'ns3::TracedValue< double >' class */
    if (PyType_Ready(&PyNs3TracedValue__Double_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TracedValue__Double", (PyObject *) &PyNs3TracedValue__Double_Type);
    /* Register the 'ns3::TriangularVariable' class */
    PyNs3TriangularVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3TriangularVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TriangularVariable", (PyObject *) &PyNs3TriangularVariable_Type);
    /* Register the 'ns3::TypeId' class */
    if (PyType_Ready(&PyNs3TypeId_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TypeId", (PyObject *) &PyNs3TypeId_Type);
    /* Register the 'ns3::TypeId::AttributeInfo' class */
    if (PyType_Ready(&PyNs3TypeIdAttributeInfo_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3TypeId_Type.tp_dict, (char *) "AttributeInfo", (PyObject *) &PyNs3TypeIdAttributeInfo_Type);
    /* Register the 'ns3::UniformVariable' class */
    PyNs3UniformVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3UniformVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UniformVariable", (PyObject *) &PyNs3UniformVariable_Type);
    /* Register the 'ns3::UnsafeAttributeList' class */
    if (PyType_Ready(&PyNs3UnsafeAttributeList_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UnsafeAttributeList", (PyObject *) &PyNs3UnsafeAttributeList_Type);
    /* Register the 'ns3::Vector2D' class */
    if (PyType_Ready(&PyNs3Vector2D_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Vector2D", (PyObject *) &PyNs3Vector2D_Type);
    /* Register the 'ns3::Vector3D' class */
    if (PyType_Ready(&PyNs3Vector3D_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Vector3D", (PyObject *) &PyNs3Vector3D_Type);
    /* Register the 'ns3::WeibullVariable' class */
    PyNs3WeibullVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3WeibullVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WeibullVariable", (PyObject *) &PyNs3WeibullVariable_Type);
    /* Register the 'ns3::ZetaVariable' class */
    PyNs3ZetaVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3ZetaVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ZetaVariable", (PyObject *) &PyNs3ZetaVariable_Type);
    /* Register the 'ns3::ZipfVariable' class */
    PyNs3ZipfVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3ZipfVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ZipfVariable", (PyObject *) &PyNs3ZipfVariable_Type);
    /* Register the 'ns3::empty' class */
    if (PyType_Ready(&PyNs3Empty_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "empty", (PyObject *) &PyNs3Empty_Type);
    /* Register the 'ns3::ConstantVariable' class */
    PyNs3ConstantVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3ConstantVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConstantVariable", (PyObject *) &PyNs3ConstantVariable_Type);
    /* Register the 'ns3::DeterministicVariable' class */
    PyNs3DeterministicVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3DeterministicVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DeterministicVariable", (PyObject *) &PyNs3DeterministicVariable_Type);
    /* Register the 'ns3::EmpiricalVariable' class */
    PyNs3EmpiricalVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3EmpiricalVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EmpiricalVariable", (PyObject *) &PyNs3EmpiricalVariable_Type);
    /* Register the 'ns3::ErlangVariable' class */
    PyNs3ErlangVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3ErlangVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ErlangVariable", (PyObject *) &PyNs3ErlangVariable_Type);
    /* Register the 'ns3::ExponentialVariable' class */
    PyNs3ExponentialVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3ExponentialVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ExponentialVariable", (PyObject *) &PyNs3ExponentialVariable_Type);
    /* Register the 'ns3::GammaVariable' class */
    PyNs3GammaVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3GammaVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GammaVariable", (PyObject *) &PyNs3GammaVariable_Type);
    /* Register the 'ns3::IntEmpiricalVariable' class */
    PyNs3IntEmpiricalVariable_Type.tp_base = &PyNs3EmpiricalVariable_Type;
    if (PyType_Ready(&PyNs3IntEmpiricalVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntEmpiricalVariable", (PyObject *) &PyNs3IntEmpiricalVariable_Type);
    /* Register the 'ns3::LogNormalVariable' class */
    PyNs3LogNormalVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3LogNormalVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "LogNormalVariable", (PyObject *) &PyNs3LogNormalVariable_Type);
    /* Register the 'ns3::NormalVariable' class */
    PyNs3NormalVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3NormalVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NormalVariable", (PyObject *) &PyNs3NormalVariable_Type);
    /* Register the 'ns3::Object' class */
    PyNs3Object_Type.tp_base = &PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
    if (PyType_Ready(&PyNs3Object_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Object", (PyObject *) &PyNs3Object_Type);
    /* Register the 'ns3::Object::AggregateIterator' class */
    if (PyType_Ready(&PyNs3ObjectAggregateIterator_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3Object_Type.tp_dict, (char *) "AggregateIterator", (PyObject *) &PyNs3ObjectAggregateIterator_Type);
    /* Register the 'ns3::ParetoVariable' class */
    PyNs3ParetoVariable_Type.tp_base = &PyNs3RandomVariable_Type;
    if (PyType_Ready(&PyNs3ParetoVariable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ParetoVariable", (PyObject *) &PyNs3ParetoVariable_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class */
    PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class */
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class */
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class */
    PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::RefCountBase, ns3::empty, ns3::DefaultDeleter<ns3::RefCountBase> >' class */
    PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::SystemThread, ns3::empty, ns3::DefaultDeleter<ns3::SystemThread> >' class */
    PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class */
    PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type);
    /* Register the 'ns3::SystemThread' class */
    PyNs3SystemThread_Type.tp_base = &PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt___Type;
    if (PyType_Ready(&PyNs3SystemThread_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SystemThread", (PyObject *) &PyNs3SystemThread_Type);
    /* Register the 'ns3::TraceSourceAccessor' class */
    PyNs3TraceSourceAccessor_Type.tp_base = &PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
    if (PyType_Ready(&PyNs3TraceSourceAccessor_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TraceSourceAccessor", (PyObject *) &PyNs3TraceSourceAccessor_Type);
    /* Register the 'ns3::AttributeAccessor' class */
    PyNs3AttributeAccessor_Type.tp_base = &PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
    if (PyType_Ready(&PyNs3AttributeAccessor_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AttributeAccessor", (PyObject *) &PyNs3AttributeAccessor_Type);
    /* Register the 'ns3::AttributeChecker' class */
    PyNs3AttributeChecker_Type.tp_base = &PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
    if (PyType_Ready(&PyNs3AttributeChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AttributeChecker", (PyObject *) &PyNs3AttributeChecker_Type);
    /* Register the 'ns3::AttributeValue' class */
    PyNs3AttributeValue_Type.tp_base = &PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
    if (PyType_Ready(&PyNs3AttributeValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AttributeValue", (PyObject *) &PyNs3AttributeValue_Type);
    /* Register the 'ns3::BooleanChecker' class */
    PyNs3BooleanChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3BooleanChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BooleanChecker", (PyObject *) &PyNs3BooleanChecker_Type);
    /* Register the 'ns3::BooleanValue' class */
    PyNs3BooleanValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3BooleanValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BooleanValue", (PyObject *) &PyNs3BooleanValue_Type);
    /* Register the 'ns3::CallbackChecker' class */
    PyNs3CallbackChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3CallbackChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CallbackChecker", (PyObject *) &PyNs3CallbackChecker_Type);
    /* Register the 'ns3::CallbackImplBase' class */
    PyNs3CallbackImplBase_Type.tp_base = &PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
    if (PyType_Ready(&PyNs3CallbackImplBase_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CallbackImplBase", (PyObject *) &PyNs3CallbackImplBase_Type);
    /* Register the 'ns3::CallbackValue' class */
    PyNs3CallbackValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3CallbackValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CallbackValue", (PyObject *) &PyNs3CallbackValue_Type);
    /* Register the 'ns3::DoubleValue' class */
    PyNs3DoubleValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3DoubleValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DoubleValue", (PyObject *) &PyNs3DoubleValue_Type);
    /* Register the 'ns3::EmptyAttributeValue' class */
    PyNs3EmptyAttributeValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3EmptyAttributeValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EmptyAttributeValue", (PyObject *) &PyNs3EmptyAttributeValue_Type);
    /* Register the 'ns3::EnumChecker' class */
    PyNs3EnumChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3EnumChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EnumChecker", (PyObject *) &PyNs3EnumChecker_Type);
    /* Register the 'ns3::EnumValue' class */
    PyNs3EnumValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3EnumValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EnumValue", (PyObject *) &PyNs3EnumValue_Type);
    /* Register the 'ns3::IntegerValue' class */
    PyNs3IntegerValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3IntegerValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IntegerValue", (PyObject *) &PyNs3IntegerValue_Type);
    /* Register the 'ns3::ObjectFactoryChecker' class */
    PyNs3ObjectFactoryChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3ObjectFactoryChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ObjectFactoryChecker", (PyObject *) &PyNs3ObjectFactoryChecker_Type);
    /* Register the 'ns3::ObjectFactoryValue' class */
    PyNs3ObjectFactoryValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3ObjectFactoryValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ObjectFactoryValue", (PyObject *) &PyNs3ObjectFactoryValue_Type);
    /* Register the 'ns3::ObjectVectorAccessor' class */
    PyNs3ObjectVectorAccessor_Type.tp_base = &PyNs3AttributeAccessor_Type;
    if (PyType_Ready(&PyNs3ObjectVectorAccessor_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ObjectVectorAccessor", (PyObject *) &PyNs3ObjectVectorAccessor_Type);
    /* Register the 'ns3::ObjectVectorChecker' class */
    PyNs3ObjectVectorChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3ObjectVectorChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ObjectVectorChecker", (PyObject *) &PyNs3ObjectVectorChecker_Type);
    /* Register the 'ns3::ObjectVectorValue' class */
    PyNs3ObjectVectorValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3ObjectVectorValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ObjectVectorValue", (PyObject *) &PyNs3ObjectVectorValue_Type);
    /* Register the 'ns3::PointerChecker' class */
    PyNs3PointerChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3PointerChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointerChecker", (PyObject *) &PyNs3PointerChecker_Type);
    /* Register the 'ns3::PointerValue' class */
    PyNs3PointerValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3PointerValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointerValue", (PyObject *) &PyNs3PointerValue_Type);
    /* Register the 'ns3::RandomVariableChecker' class */
    PyNs3RandomVariableChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3RandomVariableChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomVariableChecker", (PyObject *) &PyNs3RandomVariableChecker_Type);
    /* Register the 'ns3::RandomVariableValue' class */
    PyNs3RandomVariableValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3RandomVariableValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomVariableValue", (PyObject *) &PyNs3RandomVariableValue_Type);
    /* Register the 'ns3::RefCountBase' class */
    PyNs3RefCountBase_Type.tp_base = &PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt___Type;
    if (PyType_Ready(&PyNs3RefCountBase_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RefCountBase", (PyObject *) &PyNs3RefCountBase_Type);
    /* Register the 'ns3::StringChecker' class */
    PyNs3StringChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3StringChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "StringChecker", (PyObject *) &PyNs3StringChecker_Type);
    /* Register the 'ns3::StringValue' class */
    PyNs3StringValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3StringValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "StringValue", (PyObject *) &PyNs3StringValue_Type);
    /* Register the 'ns3::TypeIdChecker' class */
    PyNs3TypeIdChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3TypeIdChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TypeIdChecker", (PyObject *) &PyNs3TypeIdChecker_Type);
    /* Register the 'ns3::TypeIdValue' class */
    PyNs3TypeIdValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3TypeIdValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TypeIdValue", (PyObject *) &PyNs3TypeIdValue_Type);
    /* Register the 'ns3::UintegerValue' class */
    PyNs3UintegerValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3UintegerValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UintegerValue", (PyObject *) &PyNs3UintegerValue_Type);
    /* Register the 'ns3::Vector2DChecker' class */
    PyNs3Vector2DChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Vector2DChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Vector2DChecker", (PyObject *) &PyNs3Vector2DChecker_Type);
    /* Register the 'ns3::Vector2DValue' class */
    PyNs3Vector2DValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Vector2DValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Vector2DValue", (PyObject *) &PyNs3Vector2DValue_Type);
    /* Register the 'ns3::Vector3DChecker' class */
    PyNs3Vector3DChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Vector3DChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Vector3DChecker", (PyObject *) &PyNs3Vector3DChecker_Type);
    /* Register the 'ns3::Vector3DValue' class */
    PyNs3Vector3DValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Vector3DValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Vector3DValue", (PyObject *) &PyNs3Vector3DValue_Type);
    /* Register the 'ns3::EventId' class */
    if (PyType_Ready(&PyNs3EventId_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EventId", (PyObject *) &PyNs3EventId_Type);
    /* Register the 'ns3::HighPrecision' class */
    if (PyType_Ready(&PyNs3HighPrecision_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "HighPrecision", (PyObject *) &PyNs3HighPrecision_Type);
    /* Register the 'ns3::Simulator' class */
    if (PyType_Ready(&PyNs3Simulator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Simulator", (PyObject *) &PyNs3Simulator_Type);
    /* Register the 'ns3::Time' class */
    if (PyType_Ready(&PyNs3Time_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Time", (PyObject *) &PyNs3Time_Type);
    /* Register the 'ns3::TimeBase' class */
    if (PyType_Ready(&PyNs3TimeBase_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TimeBase", (PyObject *) &PyNs3TimeBase_Type);
    /* Register the 'ns3::Timer' class */
    if (PyType_Ready(&PyNs3Timer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Timer", (PyObject *) &PyNs3Timer_Type);
    /* Register the 'ns3::TimerImpl' class */
    if (PyType_Ready(&PyNs3TimerImpl_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TimerImpl", (PyObject *) &PyNs3TimerImpl_Type);
    /* Register the 'ns3::Watchdog' class */
    if (PyType_Ready(&PyNs3Watchdog_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Watchdog", (PyObject *) &PyNs3Watchdog_Type);
    /* Register the 'ns3::Scalar' class */
    if (PyType_Ready(&PyNs3Scalar_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Scalar", (PyObject *) &PyNs3Scalar_Type);
    /* Register the 'ns3::Scheduler' class */
    PyNs3Scheduler_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Scheduler_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Scheduler", (PyObject *) &PyNs3Scheduler_Type);
    /* Register the 'ns3::Scheduler::Event' class */
    if (PyType_Ready(&PyNs3SchedulerEvent_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3Scheduler_Type.tp_dict, (char *) "Event", (PyObject *) &PyNs3SchedulerEvent_Type);
    /* Register the 'ns3::Scheduler::EventKey' class */
    if (PyType_Ready(&PyNs3SchedulerEventKey_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3Scheduler_Type.tp_dict, (char *) "EventKey", (PyObject *) &PyNs3SchedulerEventKey_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class */
    PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type);
    /* Register the 'ns3::SimulatorImpl' class */
    PyNs3SimulatorImpl_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3SimulatorImpl_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimulatorImpl", (PyObject *) &PyNs3SimulatorImpl_Type);
    /* Register the 'ns3::Synchronizer' class */
    PyNs3Synchronizer_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Synchronizer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Synchronizer", (PyObject *) &PyNs3Synchronizer_Type);
    /* Register the 'ns3::CalendarScheduler' class */
    PyNs3CalendarScheduler_Type.tp_base = &PyNs3Scheduler_Type;
    if (PyType_Ready(&PyNs3CalendarScheduler_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CalendarScheduler", (PyObject *) &PyNs3CalendarScheduler_Type);
    /* Register the 'ns3::DefaultSimulatorImpl' class */
    PyNs3DefaultSimulatorImpl_Type.tp_base = &PyNs3SimulatorImpl_Type;
    if (PyType_Ready(&PyNs3DefaultSimulatorImpl_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DefaultSimulatorImpl", (PyObject *) &PyNs3DefaultSimulatorImpl_Type);
    /* Register the 'ns3::EventImpl' class */
    PyNs3EventImpl_Type.tp_base = &PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
    if (PyType_Ready(&PyNs3EventImpl_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EventImpl", (PyObject *) &PyNs3EventImpl_Type);
    /* Register the 'ns3::HeapScheduler' class */
    PyNs3HeapScheduler_Type.tp_base = &PyNs3Scheduler_Type;
    if (PyType_Ready(&PyNs3HeapScheduler_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "HeapScheduler", (PyObject *) &PyNs3HeapScheduler_Type);
    /* Register the 'ns3::ListScheduler' class */
    PyNs3ListScheduler_Type.tp_base = &PyNs3Scheduler_Type;
    if (PyType_Ready(&PyNs3ListScheduler_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ListScheduler", (PyObject *) &PyNs3ListScheduler_Type);
    /* Register the 'ns3::MapScheduler' class */
    PyNs3MapScheduler_Type.tp_base = &PyNs3Scheduler_Type;
    if (PyType_Ready(&PyNs3MapScheduler_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MapScheduler", (PyObject *) &PyNs3MapScheduler_Type);
    /* Register the 'ns3::Ns2CalendarScheduler' class */
    PyNs3Ns2CalendarScheduler_Type.tp_base = &PyNs3Scheduler_Type;
    if (PyType_Ready(&PyNs3Ns2CalendarScheduler_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ns2CalendarScheduler", (PyObject *) &PyNs3Ns2CalendarScheduler_Type);
    /* Register the 'ns3::TimeChecker' class */
    PyNs3TimeChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3TimeChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TimeChecker", (PyObject *) &PyNs3TimeChecker_Type);
    /* Register the 'ns3::TimeValue' class */
    PyNs3TimeValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3TimeValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TimeValue", (PyObject *) &PyNs3TimeValue_Type);
    /* Register the 'ns3::BandInfo' class */
    if (PyType_Ready(&PyNs3BandInfo_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BandInfo", (PyObject *) &PyNs3BandInfo_Type);
    /* Register the 'ns3::Buffer' class */
    if (PyType_Ready(&PyNs3Buffer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Buffer", (PyObject *) &PyNs3Buffer_Type);
    /* Register the 'ns3::Buffer::Iterator' class */
    if (PyType_Ready(&PyNs3BufferIterator_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3Buffer_Type.tp_dict, (char *) "Iterator", (PyObject *) &PyNs3BufferIterator_Type);
    /* Register the 'ns3::ByteTagIterator' class */
    if (PyType_Ready(&PyNs3ByteTagIterator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ByteTagIterator", (PyObject *) &PyNs3ByteTagIterator_Type);
    /* Register the 'ns3::ByteTagIterator::Item' class */
    if (PyType_Ready(&PyNs3ByteTagIteratorItem_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3ByteTagIterator_Type.tp_dict, (char *) "Item", (PyObject *) &PyNs3ByteTagIteratorItem_Type);
    /* Register the 'ns3::ByteTagList' class */
    if (PyType_Ready(&PyNs3ByteTagList_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ByteTagList", (PyObject *) &PyNs3ByteTagList_Type);
    /* Register the 'ns3::ByteTagList::Iterator' class */
    if (PyType_Ready(&PyNs3ByteTagListIterator_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3ByteTagList_Type.tp_dict, (char *) "Iterator", (PyObject *) &PyNs3ByteTagListIterator_Type);
    /* Register the 'ns3::ByteTagList::Iterator::Item' class */
    if (PyType_Ready(&PyNs3ByteTagListIteratorItem_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3ByteTagListIterator_Type.tp_dict, (char *) "Item", (PyObject *) &PyNs3ByteTagListIteratorItem_Type);
    /* Register the 'ns3::DataRate' class */
    if (PyType_Ready(&PyNs3DataRate_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DataRate", (PyObject *) &PyNs3DataRate_Type);
    /* Register the 'ns3::PacketMetadata' class */
    if (PyType_Ready(&PyNs3PacketMetadata_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketMetadata", (PyObject *) &PyNs3PacketMetadata_Type);
    /* Register the 'ns3::PacketMetadata::Item' class */
    if (PyType_Ready(&PyNs3PacketMetadataItem_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3PacketMetadata_Type.tp_dict, (char *) "Item", (PyObject *) &PyNs3PacketMetadataItem_Type);
    /* Register the 'ns3::PacketMetadata::ItemIterator' class */
    if (PyType_Ready(&PyNs3PacketMetadataItemIterator_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3PacketMetadata_Type.tp_dict, (char *) "ItemIterator", (PyObject *) &PyNs3PacketMetadataItemIterator_Type);
    /* Register the 'ns3::PacketTagIterator' class */
    if (PyType_Ready(&PyNs3PacketTagIterator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketTagIterator", (PyObject *) &PyNs3PacketTagIterator_Type);
    /* Register the 'ns3::PacketTagIterator::Item' class */
    if (PyType_Ready(&PyNs3PacketTagIteratorItem_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3PacketTagIterator_Type.tp_dict, (char *) "Item", (PyObject *) &PyNs3PacketTagIteratorItem_Type);
    /* Register the 'ns3::PacketTagList' class */
    if (PyType_Ready(&PyNs3PacketTagList_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketTagList", (PyObject *) &PyNs3PacketTagList_Type);
    /* Register the 'ns3::PacketTagList::TagData' class */
    if (PyType_Ready(&PyNs3PacketTagListTagData_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3PacketTagList_Type.tp_dict, (char *) "TagData", (PyObject *) &PyNs3PacketTagListTagData_Type);
    /* Register the 'ns3::PcapFile' class */
    
    PyNs3PcapFileMeta_Type.tp_base = PyBaseObject_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3PcapFileMeta_Type.tp_traverse = PyBaseObject_Type.ob_type->tp_traverse;
    PyNs3PcapFileMeta_Type.tp_clear = PyBaseObject_Type.ob_type->tp_clear;
    PyNs3PcapFileMeta_Type.tp_is_gc = PyBaseObject_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3PcapFileMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3PcapFileMeta_Type);
    
    PyNs3PcapFile_Type.ob_type = &PyNs3PcapFileMeta_Type;
    if (PyType_Ready(&PyNs3PcapFile_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PcapFile", (PyObject *) &PyNs3PcapFile_Type);
    /* Register the 'ns3::SequenceNumber32' class */
    if (PyType_Ready(&PyNs3SequenceNumber32_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SequenceNumber32", (PyObject *) &PyNs3SequenceNumber32_Type);
    /* Register the 'ns3::SpectrumType' class */
    if (PyType_Ready(&PyNs3SpectrumType_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumType", (PyObject *) &PyNs3SpectrumType_Type);
    /* Register the 'ns3::SpectrumTypeFactory' class */
    if (PyType_Ready(&PyNs3SpectrumTypeFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumTypeFactory", (PyObject *) &PyNs3SpectrumTypeFactory_Type);
    /* Register the 'ns3::Tag' class */
    PyNs3Tag_Type.tp_base = &PyNs3ObjectBase_Type;
    if (PyType_Ready(&PyNs3Tag_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Tag", (PyObject *) &PyNs3Tag_Type);
    /* Register the 'ns3::TagBuffer' class */
    if (PyType_Ready(&PyNs3TagBuffer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TagBuffer", (PyObject *) &PyNs3TagBuffer_Type);
    /* Register the 'ns3::Chunk' class */
    PyNs3Chunk_Type.tp_base = &PyNs3ObjectBase_Type;
    if (PyType_Ready(&PyNs3Chunk_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Chunk", (PyObject *) &PyNs3Chunk_Type);
    /* Register the 'ns3::Header' class */
    PyNs3Header_Type.tp_base = &PyNs3Chunk_Type;
    if (PyType_Ready(&PyNs3Header_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Header", (PyObject *) &PyNs3Header_Type);
    /* Register the 'ns3::PacketBurst' class */
    PyNs3PacketBurst_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3PacketBurst_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketBurst", (PyObject *) &PyNs3PacketBurst_Type);
    /* Register the 'ns3::PcapFileWrapper' class */
    PyNs3PcapFileWrapper_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3PcapFileWrapper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PcapFileWrapper", (PyObject *) &PyNs3PcapFileWrapper_Type);
    /* Register the 'ns3::PropagationDelayModel' class */
    PyNs3PropagationDelayModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3PropagationDelayModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PropagationDelayModel", (PyObject *) &PyNs3PropagationDelayModel_Type);
    /* Register the 'ns3::PropagationLossModel' class */
    PyNs3PropagationLossModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3PropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PropagationLossModel", (PyObject *) &PyNs3PropagationLossModel_Type);
    /* Register the 'ns3::RandomPropagationDelayModel' class */
    PyNs3RandomPropagationDelayModel_Type.tp_base = &PyNs3PropagationDelayModel_Type;
    if (PyType_Ready(&PyNs3RandomPropagationDelayModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomPropagationDelayModel", (PyObject *) &PyNs3RandomPropagationDelayModel_Type);
    /* Register the 'ns3::RandomPropagationLossModel' class */
    PyNs3RandomPropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3RandomPropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomPropagationLossModel", (PyObject *) &PyNs3RandomPropagationLossModel_Type);
    /* Register the 'ns3::RangePropagationLossModel' class */
    PyNs3RangePropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3RangePropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RangePropagationLossModel", (PyObject *) &PyNs3RangePropagationLossModel_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class */
    PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> >' class */
    PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class */
    PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::SpectrumConverter, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumConverter> >' class */
    PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> >' class */
    PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> >' class */
    PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type);
    /* Register the 'ns3::SpectrumConverter' class */
    PyNs3SpectrumConverter_Type.tp_base = &PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt___Type;
    if (PyType_Ready(&PyNs3SpectrumConverter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumConverter", (PyObject *) &PyNs3SpectrumConverter_Type);
    /* Register the 'ns3::SpectrumModel' class */
    PyNs3SpectrumModel_Type.tp_base = &PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;
    if (PyType_Ready(&PyNs3SpectrumModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumModel", (PyObject *) &PyNs3SpectrumModel_Type);
    /* Register the 'ns3::SpectrumPropagationLossModel' class */
    PyNs3SpectrumPropagationLossModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3SpectrumPropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumPropagationLossModel", (PyObject *) &PyNs3SpectrumPropagationLossModel_Type);
    /* Register the 'ns3::SpectrumValue' class */
    PyNs3SpectrumValue_Type.tp_base = &PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type;
    if (PyType_Ready(&PyNs3SpectrumValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumValue", (PyObject *) &PyNs3SpectrumValue_Type);
    /* Register the 'ns3::ThreeLogDistancePropagationLossModel' class */
    PyNs3ThreeLogDistancePropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3ThreeLogDistancePropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ThreeLogDistancePropagationLossModel", (PyObject *) &PyNs3ThreeLogDistancePropagationLossModel_Type);
    /* Register the 'ns3::Trailer' class */
    PyNs3Trailer_Type.tp_base = &PyNs3Chunk_Type;
    if (PyType_Ready(&PyNs3Trailer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Trailer", (PyObject *) &PyNs3Trailer_Type);
    /* Register the 'ns3::TwoRayGroundPropagationLossModel' class */
    PyNs3TwoRayGroundPropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3TwoRayGroundPropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TwoRayGroundPropagationLossModel", (PyObject *) &PyNs3TwoRayGroundPropagationLossModel_Type);
    /* Register the 'ns3::ConstantSpeedPropagationDelayModel' class */
    PyNs3ConstantSpeedPropagationDelayModel_Type.tp_base = &PyNs3PropagationDelayModel_Type;
    if (PyType_Ready(&PyNs3ConstantSpeedPropagationDelayModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConstantSpeedPropagationDelayModel", (PyObject *) &PyNs3ConstantSpeedPropagationDelayModel_Type);
    /* Register the 'ns3::Cost231PropagationLossModel' class */
    PyNs3Cost231PropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3Cost231PropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Cost231PropagationLossModel", (PyObject *) &PyNs3Cost231PropagationLossModel_Type);
    /* Register the 'ns3::DataRateChecker' class */
    PyNs3DataRateChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3DataRateChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DataRateChecker", (PyObject *) &PyNs3DataRateChecker_Type);
    /* Register the 'ns3::DataRateValue' class */
    PyNs3DataRateValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3DataRateValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DataRateValue", (PyObject *) &PyNs3DataRateValue_Type);
    /* Register the 'ns3::ErrorModel' class */
    PyNs3ErrorModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ErrorModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ErrorModel", (PyObject *) &PyNs3ErrorModel_Type);
    /* Register the 'ns3::FixedRssLossModel' class */
    PyNs3FixedRssLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3FixedRssLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FixedRssLossModel", (PyObject *) &PyNs3FixedRssLossModel_Type);
    /* Register the 'ns3::FriisPropagationLossModel' class */
    PyNs3FriisPropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3FriisPropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FriisPropagationLossModel", (PyObject *) &PyNs3FriisPropagationLossModel_Type);
    /* Register the 'ns3::FriisSpectrumPropagationLossModel' class */
    PyNs3FriisSpectrumPropagationLossModel_Type.tp_base = &PyNs3SpectrumPropagationLossModel_Type;
    if (PyType_Ready(&PyNs3FriisSpectrumPropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FriisSpectrumPropagationLossModel", (PyObject *) &PyNs3FriisSpectrumPropagationLossModel_Type);
    /* Register the 'ns3::JakesPropagationLossModel' class */
    PyNs3JakesPropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3JakesPropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "JakesPropagationLossModel", (PyObject *) &PyNs3JakesPropagationLossModel_Type);
    /* Register the 'ns3::ListErrorModel' class */
    PyNs3ListErrorModel_Type.tp_base = &PyNs3ErrorModel_Type;
    if (PyType_Ready(&PyNs3ListErrorModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ListErrorModel", (PyObject *) &PyNs3ListErrorModel_Type);
    /* Register the 'ns3::LogDistancePropagationLossModel' class */
    PyNs3LogDistancePropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3LogDistancePropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "LogDistancePropagationLossModel", (PyObject *) &PyNs3LogDistancePropagationLossModel_Type);
    /* Register the 'ns3::MatrixPropagationLossModel' class */
    PyNs3MatrixPropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3MatrixPropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MatrixPropagationLossModel", (PyObject *) &PyNs3MatrixPropagationLossModel_Type);
    /* Register the 'ns3::NakagamiPropagationLossModel' class */
    PyNs3NakagamiPropagationLossModel_Type.tp_base = &PyNs3PropagationLossModel_Type;
    if (PyType_Ready(&PyNs3NakagamiPropagationLossModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NakagamiPropagationLossModel", (PyObject *) &PyNs3NakagamiPropagationLossModel_Type);
    /* Register the 'ns3::NixVector' class */
    PyNs3NixVector_Type.tp_base = &PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
    if (PyType_Ready(&PyNs3NixVector_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NixVector", (PyObject *) &PyNs3NixVector_Type);
    /* Register the 'ns3::OutputStreamWrapper' class */
    PyNs3OutputStreamWrapper_Type.tp_base = &PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;
    if (PyType_Ready(&PyNs3OutputStreamWrapper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OutputStreamWrapper", (PyObject *) &PyNs3OutputStreamWrapper_Type);
    /* Register the 'ns3::Packet' class */
    PyNs3Packet_Type.tp_base = &PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
    if (PyType_Ready(&PyNs3Packet_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Packet", (PyObject *) &PyNs3Packet_Type);
    /* Register the 'ns3::RateErrorModel' class */
    PyNs3RateErrorModel_Type.tp_base = &PyNs3ErrorModel_Type;
    if (PyType_Ready(&PyNs3RateErrorModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RateErrorModel", (PyObject *) &PyNs3RateErrorModel_Type);
    /* Register the 'ns3::ReceiveListErrorModel' class */
    PyNs3ReceiveListErrorModel_Type.tp_base = &PyNs3ErrorModel_Type;
    if (PyType_Ready(&PyNs3ReceiveListErrorModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ReceiveListErrorModel", (PyObject *) &PyNs3ReceiveListErrorModel_Type);
    /* Register the 'ns3::Box' class */
    if (PyType_Ready(&PyNs3Box_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Box", (PyObject *) &PyNs3Box_Type);
    /* Register the 'ns3::ConstantVelocityHelper' class */
    if (PyType_Ready(&PyNs3ConstantVelocityHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConstantVelocityHelper", (PyObject *) &PyNs3ConstantVelocityHelper_Type);
    /* Register the 'ns3::Rectangle' class */
    if (PyType_Ready(&PyNs3Rectangle_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Rectangle", (PyObject *) &PyNs3Rectangle_Type);
    /* Register the 'ns3::Waypoint' class */
    if (PyType_Ready(&PyNs3Waypoint_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Waypoint", (PyObject *) &PyNs3Waypoint_Type);
    /* Register the 'ns3::PositionAllocator' class */
    PyNs3PositionAllocator_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3PositionAllocator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PositionAllocator", (PyObject *) &PyNs3PositionAllocator_Type);
    /* Register the 'ns3::RandomBoxPositionAllocator' class */
    PyNs3RandomBoxPositionAllocator_Type.tp_base = &PyNs3PositionAllocator_Type;
    if (PyType_Ready(&PyNs3RandomBoxPositionAllocator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomBoxPositionAllocator", (PyObject *) &PyNs3RandomBoxPositionAllocator_Type);
    /* Register the 'ns3::RandomDiscPositionAllocator' class */
    PyNs3RandomDiscPositionAllocator_Type.tp_base = &PyNs3PositionAllocator_Type;
    if (PyType_Ready(&PyNs3RandomDiscPositionAllocator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomDiscPositionAllocator", (PyObject *) &PyNs3RandomDiscPositionAllocator_Type);
    /* Register the 'ns3::RandomRectanglePositionAllocator' class */
    PyNs3RandomRectanglePositionAllocator_Type.tp_base = &PyNs3PositionAllocator_Type;
    if (PyType_Ready(&PyNs3RandomRectanglePositionAllocator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomRectanglePositionAllocator", (PyObject *) &PyNs3RandomRectanglePositionAllocator_Type);
    /* Register the 'ns3::UniformDiscPositionAllocator' class */
    PyNs3UniformDiscPositionAllocator_Type.tp_base = &PyNs3PositionAllocator_Type;
    if (PyType_Ready(&PyNs3UniformDiscPositionAllocator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UniformDiscPositionAllocator", (PyObject *) &PyNs3UniformDiscPositionAllocator_Type);
    /* Register the 'ns3::BoxChecker' class */
    PyNs3BoxChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3BoxChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BoxChecker", (PyObject *) &PyNs3BoxChecker_Type);
    /* Register the 'ns3::BoxValue' class */
    PyNs3BoxValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3BoxValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BoxValue", (PyObject *) &PyNs3BoxValue_Type);
    /* Register the 'ns3::GridPositionAllocator' class */
    PyNs3GridPositionAllocator_Type.tp_base = &PyNs3PositionAllocator_Type;
    if (PyType_Ready(&PyNs3GridPositionAllocator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GridPositionAllocator", (PyObject *) &PyNs3GridPositionAllocator_Type);
    /* Register the 'ns3::ListPositionAllocator' class */
    PyNs3ListPositionAllocator_Type.tp_base = &PyNs3PositionAllocator_Type;
    if (PyType_Ready(&PyNs3ListPositionAllocator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ListPositionAllocator", (PyObject *) &PyNs3ListPositionAllocator_Type);
    /* Register the 'ns3::MobilityModel' class */
    PyNs3MobilityModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MobilityModel", (PyObject *) &PyNs3MobilityModel_Type);
    /* Register the 'ns3::RandomDirection2dMobilityModel' class */
    PyNs3RandomDirection2dMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3RandomDirection2dMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomDirection2dMobilityModel", (PyObject *) &PyNs3RandomDirection2dMobilityModel_Type);
    /* Register the 'ns3::RandomWalk2dMobilityModel' class */
    PyNs3RandomWalk2dMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3RandomWalk2dMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomWalk2dMobilityModel", (PyObject *) &PyNs3RandomWalk2dMobilityModel_Type);
    /* Register the 'ns3::RandomWaypointMobilityModel' class */
    PyNs3RandomWaypointMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3RandomWaypointMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RandomWaypointMobilityModel", (PyObject *) &PyNs3RandomWaypointMobilityModel_Type);
    /* Register the 'ns3::RectangleChecker' class */
    PyNs3RectangleChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3RectangleChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RectangleChecker", (PyObject *) &PyNs3RectangleChecker_Type);
    /* Register the 'ns3::RectangleValue' class */
    PyNs3RectangleValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3RectangleValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RectangleValue", (PyObject *) &PyNs3RectangleValue_Type);
    /* Register the 'ns3::SteadyStateRandomWaypointMobilityModel' class */
    PyNs3SteadyStateRandomWaypointMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3SteadyStateRandomWaypointMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SteadyStateRandomWaypointMobilityModel", (PyObject *) &PyNs3SteadyStateRandomWaypointMobilityModel_Type);
    /* Register the 'ns3::WaypointChecker' class */
    PyNs3WaypointChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3WaypointChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WaypointChecker", (PyObject *) &PyNs3WaypointChecker_Type);
    /* Register the 'ns3::WaypointMobilityModel' class */
    PyNs3WaypointMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3WaypointMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WaypointMobilityModel", (PyObject *) &PyNs3WaypointMobilityModel_Type);
    /* Register the 'ns3::WaypointValue' class */
    PyNs3WaypointValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3WaypointValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WaypointValue", (PyObject *) &PyNs3WaypointValue_Type);
    /* Register the 'ns3::ConstantAccelerationMobilityModel' class */
    PyNs3ConstantAccelerationMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3ConstantAccelerationMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConstantAccelerationMobilityModel", (PyObject *) &PyNs3ConstantAccelerationMobilityModel_Type);
    /* Register the 'ns3::ConstantPositionMobilityModel' class */
    PyNs3ConstantPositionMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3ConstantPositionMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConstantPositionMobilityModel", (PyObject *) &PyNs3ConstantPositionMobilityModel_Type);
    /* Register the 'ns3::ConstantVelocityMobilityModel' class */
    PyNs3ConstantVelocityMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3ConstantVelocityMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConstantVelocityMobilityModel", (PyObject *) &PyNs3ConstantVelocityMobilityModel_Type);
    /* Register the 'ns3::GaussMarkovMobilityModel' class */
    PyNs3GaussMarkovMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3GaussMarkovMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GaussMarkovMobilityModel", (PyObject *) &PyNs3GaussMarkovMobilityModel_Type);
    /* Register the 'ns3::HierarchicalMobilityModel' class */
    PyNs3HierarchicalMobilityModel_Type.tp_base = &PyNs3MobilityModel_Type;
    if (PyType_Ready(&PyNs3HierarchicalMobilityModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "HierarchicalMobilityModel", (PyObject *) &PyNs3HierarchicalMobilityModel_Type);
    /* Register the 'ns3::LbtsMessage' class */
    if (PyType_Ready(&PyNs3LbtsMessage_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "LbtsMessage", (PyObject *) &PyNs3LbtsMessage_Type);
    /* Register the 'ns3::MpiInterface' class */
    if (PyType_Ready(&PyNs3MpiInterface_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MpiInterface", (PyObject *) &PyNs3MpiInterface_Type);
    /* Register the 'ns3::SentBuffer' class */
    if (PyType_Ready(&PyNs3SentBuffer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SentBuffer", (PyObject *) &PyNs3SentBuffer_Type);
    /* Register the 'ns3::DistributedSimulatorImpl' class */
    PyNs3DistributedSimulatorImpl_Type.tp_base = &PyNs3SimulatorImpl_Type;
    if (PyType_Ready(&PyNs3DistributedSimulatorImpl_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DistributedSimulatorImpl", (PyObject *) &PyNs3DistributedSimulatorImpl_Type);
    /* Register the 'ns3::Average< double >' class */
    if (PyType_Ready(&PyNs3Average__Double_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Average__Double", (PyObject *) &PyNs3Average__Double_Type);
    /* Register the 'ns3::DelayJitterEstimation' class */
    if (PyType_Ready(&PyNs3DelayJitterEstimation_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DelayJitterEstimation", (PyObject *) &PyNs3DelayJitterEstimation_Type);
    /* Register the 'ns3::EventGarbageCollector' class */
    if (PyType_Ready(&PyNs3EventGarbageCollector_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EventGarbageCollector", (PyObject *) &PyNs3EventGarbageCollector_Type);
    /* Register the 'ns3::FileConfig' class */
    if (PyType_Ready(&PyNs3FileConfig_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FileConfig", (PyObject *) &PyNs3FileConfig_Type);
    /* Register the 'ns3::Gnuplot' class */
    if (PyType_Ready(&PyNs3Gnuplot_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Gnuplot", (PyObject *) &PyNs3Gnuplot_Type);
    /* Register the 'ns3::GnuplotCollection' class */
    if (PyType_Ready(&PyNs3GnuplotCollection_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GnuplotCollection", (PyObject *) &PyNs3GnuplotCollection_Type);
    /* Register the 'ns3::GnuplotDataset' class */
    if (PyType_Ready(&PyNs3GnuplotDataset_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GnuplotDataset", (PyObject *) &PyNs3GnuplotDataset_Type);
    /* Register the 'ns3::NoneFileConfig' class */
    PyNs3NoneFileConfig_Type.tp_base = &PyNs3FileConfig_Type;
    if (PyType_Ready(&PyNs3NoneFileConfig_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NoneFileConfig", (PyObject *) &PyNs3NoneFileConfig_Type);
    /* Register the 'ns3::ConfigStore' class */
    PyNs3ConfigStore_Type.tp_base = &PyNs3ObjectBase_Type;
    if (PyType_Ready(&PyNs3ConfigStore_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConfigStore", (PyObject *) &PyNs3ConfigStore_Type);
    /* Register the 'ns3::FlowIdTag' class */
    PyNs3FlowIdTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3FlowIdTag_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FlowIdTag", (PyObject *) &PyNs3FlowIdTag_Type);
    /* Register the 'ns3::Gnuplot2dDataset' class */
    PyNs3Gnuplot2dDataset_Type.tp_base = &PyNs3GnuplotDataset_Type;
    if (PyType_Ready(&PyNs3Gnuplot2dDataset_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Gnuplot2dDataset", (PyObject *) &PyNs3Gnuplot2dDataset_Type);
    /* Register the 'ns3::Gnuplot2dFunction' class */
    PyNs3Gnuplot2dFunction_Type.tp_base = &PyNs3GnuplotDataset_Type;
    if (PyType_Ready(&PyNs3Gnuplot2dFunction_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Gnuplot2dFunction", (PyObject *) &PyNs3Gnuplot2dFunction_Type);
    /* Register the 'ns3::Gnuplot3dDataset' class */
    PyNs3Gnuplot3dDataset_Type.tp_base = &PyNs3GnuplotDataset_Type;
    if (PyType_Ready(&PyNs3Gnuplot3dDataset_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Gnuplot3dDataset", (PyObject *) &PyNs3Gnuplot3dDataset_Type);
    /* Register the 'ns3::Gnuplot3dFunction' class */
    PyNs3Gnuplot3dFunction_Type.tp_base = &PyNs3GnuplotDataset_Type;
    if (PyType_Ready(&PyNs3Gnuplot3dFunction_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Gnuplot3dFunction", (PyObject *) &PyNs3Gnuplot3dFunction_Type);
    /* Register the 'ns3::Address' class */
    if (PyType_Ready(&PyNs3Address_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Address", (PyObject *) &PyNs3Address_Type);
    /* Register the 'ns3::ChannelList' class */
    if (PyType_Ready(&PyNs3ChannelList_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ChannelList", (PyObject *) &PyNs3ChannelList_Type);
    /* Register the 'ns3::Inet6SocketAddress' class */
    if (PyType_Ready(&PyNs3Inet6SocketAddress_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Inet6SocketAddress", (PyObject *) &PyNs3Inet6SocketAddress_Type);
    /* Register the 'ns3::InetSocketAddress' class */
    if (PyType_Ready(&PyNs3InetSocketAddress_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "InetSocketAddress", (PyObject *) &PyNs3InetSocketAddress_Type);
    /* Register the 'ns3::Ipv4Address' class */
    if (PyType_Ready(&PyNs3Ipv4Address_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4Address", (PyObject *) &PyNs3Ipv4Address_Type);
    /* Register the 'ns3::Ipv4AddressGenerator' class */
    if (PyType_Ready(&PyNs3Ipv4AddressGenerator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4AddressGenerator", (PyObject *) &PyNs3Ipv4AddressGenerator_Type);
    /* Register the 'ns3::Ipv4InterfaceAddress' class */
    if (PyType_Ready(&PyNs3Ipv4InterfaceAddress_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4InterfaceAddress", (PyObject *) &PyNs3Ipv4InterfaceAddress_Type);
    /* Register the 'ns3::Ipv4Mask' class */
    if (PyType_Ready(&PyNs3Ipv4Mask_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4Mask", (PyObject *) &PyNs3Ipv4Mask_Type);
    /* Register the 'ns3::Ipv6Address' class */
    if (PyType_Ready(&PyNs3Ipv6Address_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6Address", (PyObject *) &PyNs3Ipv6Address_Type);
    /* Register the 'ns3::Ipv6InterfaceAddress' class */
    if (PyType_Ready(&PyNs3Ipv6InterfaceAddress_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6InterfaceAddress", (PyObject *) &PyNs3Ipv6InterfaceAddress_Type);
    /* Register the 'ns3::Ipv6Prefix' class */
    if (PyType_Ready(&PyNs3Ipv6Prefix_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6Prefix", (PyObject *) &PyNs3Ipv6Prefix_Type);
    /* Register the 'ns3::Mac48Address' class */
    if (PyType_Ready(&PyNs3Mac48Address_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Mac48Address", (PyObject *) &PyNs3Mac48Address_Type);
    /* Register the 'ns3::Mac64Address' class */
    if (PyType_Ready(&PyNs3Mac64Address_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Mac64Address", (PyObject *) &PyNs3Mac64Address_Type);
    /* Register the 'ns3::NodeList' class */
    if (PyType_Ready(&PyNs3NodeList_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NodeList", (PyObject *) &PyNs3NodeList_Type);
    /* Register the 'ns3::PacketSocketAddress' class */
    if (PyType_Ready(&PyNs3PacketSocketAddress_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketSocketAddress", (PyObject *) &PyNs3PacketSocketAddress_Type);
    /* Register the 'ns3::PbbAddressTlvBlock' class */
    if (PyType_Ready(&PyNs3PbbAddressTlvBlock_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbAddressTlvBlock", (PyObject *) &PyNs3PbbAddressTlvBlock_Type);
    /* Register the 'ns3::PbbTlvBlock' class */
    if (PyType_Ready(&PyNs3PbbTlvBlock_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbTlvBlock", (PyObject *) &PyNs3PbbTlvBlock_Type);
    /* Register the 'ns3::Ipv4Header' class */
    PyNs3Ipv4Header_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Ipv4Header_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4Header", (PyObject *) &PyNs3Ipv4Header_Type);
    /* Register the 'ns3::Ipv4PacketInfoTag' class */
    PyNs3Ipv4PacketInfoTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3Ipv4PacketInfoTag_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4PacketInfoTag", (PyObject *) &PyNs3Ipv4PacketInfoTag_Type);
    /* Register the 'ns3::Ipv6Header' class */
    PyNs3Ipv6Header_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Ipv6Header_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6Header", (PyObject *) &PyNs3Ipv6Header_Type);
    /* Register the 'ns3::Ipv6PacketInfoTag' class */
    PyNs3Ipv6PacketInfoTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3Ipv6PacketInfoTag_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6PacketInfoTag", (PyObject *) &PyNs3Ipv6PacketInfoTag_Type);
    /* Register the 'ns3::LlcSnapHeader' class */
    PyNs3LlcSnapHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3LlcSnapHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "LlcSnapHeader", (PyObject *) &PyNs3LlcSnapHeader_Type);
    /* Register the 'ns3::Queue' class */
    PyNs3Queue_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Queue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Queue", (PyObject *) &PyNs3Queue_Type);
    /* Register the 'ns3::RadiotapHeader' class */
    PyNs3RadiotapHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3RadiotapHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RadiotapHeader", (PyObject *) &PyNs3RadiotapHeader_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> >' class */
    PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> >' class */
    PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> >' class */
    PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> >' class */
    PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::PbbAddressBlock, ns3::empty, ns3::DefaultDeleter<ns3::PbbAddressBlock> >' class */
    PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::PbbMessage, ns3::empty, ns3::DefaultDeleter<ns3::PbbMessage> >' class */
    PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::PbbPacket, ns3::Header, ns3::DefaultDeleter<ns3::PbbPacket> >' class */
    PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt___Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::PbbTlv, ns3::empty, ns3::DefaultDeleter<ns3::PbbTlv> >' class */
    PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt___Type);
    /* Register the 'ns3::Socket' class */
    PyNs3Socket_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Socket_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Socket", (PyObject *) &PyNs3Socket_Type);
    /* Register the 'ns3::SocketAddressTag' class */
    PyNs3SocketAddressTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3SocketAddressTag_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SocketAddressTag", (PyObject *) &PyNs3SocketAddressTag_Type);
    /* Register the 'ns3::SocketFactory' class */
    PyNs3SocketFactory_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3SocketFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SocketFactory", (PyObject *) &PyNs3SocketFactory_Type);
    /* Register the 'ns3::SocketIpTtlTag' class */
    PyNs3SocketIpTtlTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3SocketIpTtlTag_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SocketIpTtlTag", (PyObject *) &PyNs3SocketIpTtlTag_Type);
    /* Register the 'ns3::SocketSetDontFragmentTag' class */
    PyNs3SocketSetDontFragmentTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3SocketSetDontFragmentTag_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SocketSetDontFragmentTag", (PyObject *) &PyNs3SocketSetDontFragmentTag_Type);
    /* Register the 'ns3::SpectrumPhy' class */
    PyNs3SpectrumPhy_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3SpectrumPhy_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumPhy", (PyObject *) &PyNs3SpectrumPhy_Type);
    /* Register the 'ns3::TcpSocket' class */
    PyNs3TcpSocket_Type.tp_base = &PyNs3Socket_Type;
    if (PyType_Ready(&PyNs3TcpSocket_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TcpSocket", (PyObject *) &PyNs3TcpSocket_Type);
    /* Register the 'ns3::TcpSocketFactory' class */
    PyNs3TcpSocketFactory_Type.tp_base = &PyNs3SocketFactory_Type;
    if (PyType_Ready(&PyNs3TcpSocketFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TcpSocketFactory", (PyObject *) &PyNs3TcpSocketFactory_Type);
    /* Register the 'ns3::UdpSocket' class */
    PyNs3UdpSocket_Type.tp_base = &PyNs3Socket_Type;
    if (PyType_Ready(&PyNs3UdpSocket_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpSocket", (PyObject *) &PyNs3UdpSocket_Type);
    /* Register the 'ns3::UdpSocketFactory' class */
    PyNs3UdpSocketFactory_Type.tp_base = &PyNs3SocketFactory_Type;
    if (PyType_Ready(&PyNs3UdpSocketFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpSocketFactory", (PyObject *) &PyNs3UdpSocketFactory_Type);
    /* Register the 'ns3::Application' class */
    PyNs3Application_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Application_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Application", (PyObject *) &PyNs3Application_Type);
    /* Register the 'ns3::Channel' class */
    PyNs3Channel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Channel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Channel", (PyObject *) &PyNs3Channel_Type);
    /* Register the 'ns3::DropTailQueue' class */
    PyNs3DropTailQueue_Type.tp_base = &PyNs3Queue_Type;
    if (PyType_Ready(&PyNs3DropTailQueue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DropTailQueue", (PyObject *) &PyNs3DropTailQueue_Type);
    /* Register the 'ns3::EthernetHeader' class */
    PyNs3EthernetHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3EthernetHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EthernetHeader", (PyObject *) &PyNs3EthernetHeader_Type);
    /* Register the 'ns3::EthernetTrailer' class */
    PyNs3EthernetTrailer_Type.tp_base = &PyNs3Trailer_Type;
    if (PyType_Ready(&PyNs3EthernetTrailer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EthernetTrailer", (PyObject *) &PyNs3EthernetTrailer_Type);
    /* Register the 'ns3::Ipv4' class */
    
    PyNs3Ipv4Meta_Type.tp_base = PyNs3Object_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Ipv4Meta_Type.tp_traverse = PyNs3Object_Type.ob_type->tp_traverse;
    PyNs3Ipv4Meta_Type.tp_clear = PyNs3Object_Type.ob_type->tp_clear;
    PyNs3Ipv4Meta_Type.tp_is_gc = PyNs3Object_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Ipv4Meta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Ipv4Meta_Type);
    
    PyNs3Ipv4_Type.tp_base = &PyNs3Object_Type;
    PyNs3Ipv4_Type.ob_type = &PyNs3Ipv4Meta_Type;
    if (PyType_Ready(&PyNs3Ipv4_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4", (PyObject *) &PyNs3Ipv4_Type);
    /* Register the 'ns3::Ipv4AddressChecker' class */
    PyNs3Ipv4AddressChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Ipv4AddressChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4AddressChecker", (PyObject *) &PyNs3Ipv4AddressChecker_Type);
    /* Register the 'ns3::Ipv4AddressValue' class */
    PyNs3Ipv4AddressValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Ipv4AddressValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4AddressValue", (PyObject *) &PyNs3Ipv4AddressValue_Type);
    /* Register the 'ns3::Ipv4MaskChecker' class */
    PyNs3Ipv4MaskChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Ipv4MaskChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4MaskChecker", (PyObject *) &PyNs3Ipv4MaskChecker_Type);
    /* Register the 'ns3::Ipv4MaskValue' class */
    PyNs3Ipv4MaskValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Ipv4MaskValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4MaskValue", (PyObject *) &PyNs3Ipv4MaskValue_Type);
    /* Register the 'ns3::Ipv4MulticastRoute' class */
    
    PyNs3Ipv4MulticastRouteMeta_Type.tp_base = PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Ipv4MulticastRouteMeta_Type.tp_traverse = PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type.ob_type->tp_traverse;
    PyNs3Ipv4MulticastRouteMeta_Type.tp_clear = PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type.ob_type->tp_clear;
    PyNs3Ipv4MulticastRouteMeta_Type.tp_is_gc = PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Ipv4MulticastRouteMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Ipv4MulticastRouteMeta_Type);
    
    PyNs3Ipv4MulticastRoute_Type.tp_base = &PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type;
    PyNs3Ipv4MulticastRoute_Type.ob_type = &PyNs3Ipv4MulticastRouteMeta_Type;
    if (PyType_Ready(&PyNs3Ipv4MulticastRoute_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4MulticastRoute", (PyObject *) &PyNs3Ipv4MulticastRoute_Type);
    /* Register the 'ns3::Ipv4RawSocketFactory' class */
    PyNs3Ipv4RawSocketFactory_Type.tp_base = &PyNs3SocketFactory_Type;
    if (PyType_Ready(&PyNs3Ipv4RawSocketFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4RawSocketFactory", (PyObject *) &PyNs3Ipv4RawSocketFactory_Type);
    /* Register the 'ns3::Ipv4Route' class */
    PyNs3Ipv4Route_Type.tp_base = &PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type;
    if (PyType_Ready(&PyNs3Ipv4Route_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4Route", (PyObject *) &PyNs3Ipv4Route_Type);
    /* Register the 'ns3::Ipv4RoutingProtocol' class */
    PyNs3Ipv4RoutingProtocol_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Ipv4RoutingProtocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4RoutingProtocol", (PyObject *) &PyNs3Ipv4RoutingProtocol_Type);
    /* Register the 'ns3::Ipv6' class */
    
    PyNs3Ipv6Meta_Type.tp_base = PyNs3Object_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Ipv6Meta_Type.tp_traverse = PyNs3Object_Type.ob_type->tp_traverse;
    PyNs3Ipv6Meta_Type.tp_clear = PyNs3Object_Type.ob_type->tp_clear;
    PyNs3Ipv6Meta_Type.tp_is_gc = PyNs3Object_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Ipv6Meta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Ipv6Meta_Type);
    
    PyNs3Ipv6_Type.tp_base = &PyNs3Object_Type;
    PyNs3Ipv6_Type.ob_type = &PyNs3Ipv6Meta_Type;
    if (PyType_Ready(&PyNs3Ipv6_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6", (PyObject *) &PyNs3Ipv6_Type);
    /* Register the 'ns3::Ipv6AddressChecker' class */
    PyNs3Ipv6AddressChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Ipv6AddressChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6AddressChecker", (PyObject *) &PyNs3Ipv6AddressChecker_Type);
    /* Register the 'ns3::Ipv6AddressValue' class */
    PyNs3Ipv6AddressValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Ipv6AddressValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6AddressValue", (PyObject *) &PyNs3Ipv6AddressValue_Type);
    /* Register the 'ns3::Ipv6MulticastRoute' class */
    
    PyNs3Ipv6MulticastRouteMeta_Type.tp_base = PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Ipv6MulticastRouteMeta_Type.tp_traverse = PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type.ob_type->tp_traverse;
    PyNs3Ipv6MulticastRouteMeta_Type.tp_clear = PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type.ob_type->tp_clear;
    PyNs3Ipv6MulticastRouteMeta_Type.tp_is_gc = PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Ipv6MulticastRouteMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Ipv6MulticastRouteMeta_Type);
    
    PyNs3Ipv6MulticastRoute_Type.tp_base = &PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type;
    PyNs3Ipv6MulticastRoute_Type.ob_type = &PyNs3Ipv6MulticastRouteMeta_Type;
    if (PyType_Ready(&PyNs3Ipv6MulticastRoute_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6MulticastRoute", (PyObject *) &PyNs3Ipv6MulticastRoute_Type);
    /* Register the 'ns3::Ipv6PrefixChecker' class */
    PyNs3Ipv6PrefixChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Ipv6PrefixChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6PrefixChecker", (PyObject *) &PyNs3Ipv6PrefixChecker_Type);
    /* Register the 'ns3::Ipv6PrefixValue' class */
    PyNs3Ipv6PrefixValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Ipv6PrefixValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6PrefixValue", (PyObject *) &PyNs3Ipv6PrefixValue_Type);
    /* Register the 'ns3::Ipv6RawSocketFactory' class */
    PyNs3Ipv6RawSocketFactory_Type.tp_base = &PyNs3SocketFactory_Type;
    if (PyType_Ready(&PyNs3Ipv6RawSocketFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6RawSocketFactory", (PyObject *) &PyNs3Ipv6RawSocketFactory_Type);
    /* Register the 'ns3::Ipv6Route' class */
    PyNs3Ipv6Route_Type.tp_base = &PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt___Type;
    if (PyType_Ready(&PyNs3Ipv6Route_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6Route", (PyObject *) &PyNs3Ipv6Route_Type);
    /* Register the 'ns3::Ipv6RoutingProtocol' class */
    PyNs3Ipv6RoutingProtocol_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Ipv6RoutingProtocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6RoutingProtocol", (PyObject *) &PyNs3Ipv6RoutingProtocol_Type);
    /* Register the 'ns3::Mac48AddressChecker' class */
    PyNs3Mac48AddressChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3Mac48AddressChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Mac48AddressChecker", (PyObject *) &PyNs3Mac48AddressChecker_Type);
    /* Register the 'ns3::Mac48AddressValue' class */
    PyNs3Mac48AddressValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3Mac48AddressValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Mac48AddressValue", (PyObject *) &PyNs3Mac48AddressValue_Type);
    /* Register the 'ns3::NetDevice' class */
    PyNs3NetDevice_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NetDevice", (PyObject *) &PyNs3NetDevice_Type);
    /* Register the 'ns3::Node' class */
    PyNs3Node_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Node_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Node", (PyObject *) &PyNs3Node_Type);
    /* Register the 'ns3::PacketSocketFactory' class */
    PyNs3PacketSocketFactory_Type.tp_base = &PyNs3SocketFactory_Type;
    if (PyType_Ready(&PyNs3PacketSocketFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketSocketFactory", (PyObject *) &PyNs3PacketSocketFactory_Type);
    /* Register the 'ns3::PbbAddressBlock' class */
    PyNs3PbbAddressBlock_Type.tp_base = &PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt___Type;
    if (PyType_Ready(&PyNs3PbbAddressBlock_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbAddressBlock", (PyObject *) &PyNs3PbbAddressBlock_Type);
    /* Register the 'ns3::PbbAddressBlockIpv4' class */
    PyNs3PbbAddressBlockIpv4_Type.tp_base = &PyNs3PbbAddressBlock_Type;
    if (PyType_Ready(&PyNs3PbbAddressBlockIpv4_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbAddressBlockIpv4", (PyObject *) &PyNs3PbbAddressBlockIpv4_Type);
    /* Register the 'ns3::PbbAddressBlockIpv6' class */
    PyNs3PbbAddressBlockIpv6_Type.tp_base = &PyNs3PbbAddressBlock_Type;
    if (PyType_Ready(&PyNs3PbbAddressBlockIpv6_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbAddressBlockIpv6", (PyObject *) &PyNs3PbbAddressBlockIpv6_Type);
    /* Register the 'ns3::PbbMessage' class */
    PyNs3PbbMessage_Type.tp_base = &PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt___Type;
    if (PyType_Ready(&PyNs3PbbMessage_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbMessage", (PyObject *) &PyNs3PbbMessage_Type);
    /* Register the 'ns3::PbbMessageIpv4' class */
    PyNs3PbbMessageIpv4_Type.tp_base = &PyNs3PbbMessage_Type;
    if (PyType_Ready(&PyNs3PbbMessageIpv4_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbMessageIpv4", (PyObject *) &PyNs3PbbMessageIpv4_Type);
    /* Register the 'ns3::PbbMessageIpv6' class */
    PyNs3PbbMessageIpv6_Type.tp_base = &PyNs3PbbMessage_Type;
    if (PyType_Ready(&PyNs3PbbMessageIpv6_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbMessageIpv6", (PyObject *) &PyNs3PbbMessageIpv6_Type);
    /* Register the 'ns3::PbbPacket' class */
    PyNs3PbbPacket_Type.tp_base = &PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt___Type;
    if (PyType_Ready(&PyNs3PbbPacket_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbPacket", (PyObject *) &PyNs3PbbPacket_Type);
    /* Register the 'ns3::PbbTlv' class */
    PyNs3PbbTlv_Type.tp_base = &PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt___Type;
    if (PyType_Ready(&PyNs3PbbTlv_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbTlv", (PyObject *) &PyNs3PbbTlv_Type);
    /* Register the 'ns3::SimpleChannel' class */
    PyNs3SimpleChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3SimpleChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleChannel", (PyObject *) &PyNs3SimpleChannel_Type);
    /* Register the 'ns3::SimpleNetDevice' class */
    PyNs3SimpleNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3SimpleNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleNetDevice", (PyObject *) &PyNs3SimpleNetDevice_Type);
    /* Register the 'ns3::SpectrumChannel' class */
    PyNs3SpectrumChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3SpectrumChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumChannel", (PyObject *) &PyNs3SpectrumChannel_Type);
    /* Register the 'ns3::AddressChecker' class */
    PyNs3AddressChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3AddressChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AddressChecker", (PyObject *) &PyNs3AddressChecker_Type);
    /* Register the 'ns3::AddressValue' class */
    PyNs3AddressValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3AddressValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AddressValue", (PyObject *) &PyNs3AddressValue_Type);
    /* Register the 'ns3::PbbAddressTlv' class */
    PyNs3PbbAddressTlv_Type.tp_base = &PyNs3PbbTlv_Type;
    if (PyType_Ready(&PyNs3PbbAddressTlv_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PbbAddressTlv", (PyObject *) &PyNs3PbbAddressTlv_Type);
    /* Register the 'ns3::BridgeChannel' class */
    PyNs3BridgeChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3BridgeChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BridgeChannel", (PyObject *) &PyNs3BridgeChannel_Type);
    /* Register the 'ns3::BridgeNetDevice' class */
    PyNs3BridgeNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3BridgeNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BridgeNetDevice", (PyObject *) &PyNs3BridgeNetDevice_Type);
    /* Register the 'ns3::Backoff' class */
    if (PyType_Ready(&PyNs3Backoff_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Backoff", (PyObject *) &PyNs3Backoff_Type);
    /* Register the 'ns3::CsmaDeviceRec' class */
    if (PyType_Ready(&PyNs3CsmaDeviceRec_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CsmaDeviceRec", (PyObject *) &PyNs3CsmaDeviceRec_Type);
    /* Register the 'ns3::CsmaChannel' class */
    PyNs3CsmaChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3CsmaChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CsmaChannel", (PyObject *) &PyNs3CsmaChannel_Type);
    /* Register the 'ns3::CsmaNetDevice' class */
    PyNs3CsmaNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3CsmaNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CsmaNetDevice", (PyObject *) &PyNs3CsmaNetDevice_Type);
    /* Register the 'ns3::GlobalRouteManager' class */
    if (PyType_Ready(&PyNs3GlobalRouteManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GlobalRouteManager", (PyObject *) &PyNs3GlobalRouteManager_Type);
    /* Register the 'ns3::GlobalRoutingLSA' class */
    if (PyType_Ready(&PyNs3GlobalRoutingLSA_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GlobalRoutingLSA", (PyObject *) &PyNs3GlobalRoutingLSA_Type);
    /* Register the 'ns3::GlobalRoutingLinkRecord' class */
    if (PyType_Ready(&PyNs3GlobalRoutingLinkRecord_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GlobalRoutingLinkRecord", (PyObject *) &PyNs3GlobalRoutingLinkRecord_Type);
    /* Register the 'ns3::GlobalRouter' class */
    PyNs3GlobalRouter_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3GlobalRouter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GlobalRouter", (PyObject *) &PyNs3GlobalRouter_Type);
    /* Register the 'ns3::Ipv4GlobalRouting' class */
    PyNs3Ipv4GlobalRouting_Type.tp_base = &PyNs3Ipv4RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3Ipv4GlobalRouting_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4GlobalRouting", (PyObject *) &PyNs3Ipv4GlobalRouting_Type);
    /* Register the 'ns3::OptionField' class */
    if (PyType_Ready(&PyNs3OptionField_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OptionField", (PyObject *) &PyNs3OptionField_Type);
    /* Register the 'ns3::Icmpv4DestinationUnreachable' class */
    PyNs3Icmpv4DestinationUnreachable_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Icmpv4DestinationUnreachable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv4DestinationUnreachable", (PyObject *) &PyNs3Icmpv4DestinationUnreachable_Type);
    /* Register the 'ns3::Icmpv4Echo' class */
    PyNs3Icmpv4Echo_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Icmpv4Echo_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv4Echo", (PyObject *) &PyNs3Icmpv4Echo_Type);
    /* Register the 'ns3::Icmpv4Header' class */
    PyNs3Icmpv4Header_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Icmpv4Header_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv4Header", (PyObject *) &PyNs3Icmpv4Header_Type);
    /* Register the 'ns3::Icmpv4TimeExceeded' class */
    PyNs3Icmpv4TimeExceeded_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Icmpv4TimeExceeded_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv4TimeExceeded", (PyObject *) &PyNs3Icmpv4TimeExceeded_Type);
    /* Register the 'ns3::Icmpv6Header' class */
    PyNs3Icmpv6Header_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6Header_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6Header", (PyObject *) &PyNs3Icmpv6Header_Type);
    /* Register the 'ns3::Icmpv6NA' class */
    PyNs3Icmpv6NA_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6NA_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6NA", (PyObject *) &PyNs3Icmpv6NA_Type);
    /* Register the 'ns3::Icmpv6NS' class */
    PyNs3Icmpv6NS_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6NS_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6NS", (PyObject *) &PyNs3Icmpv6NS_Type);
    /* Register the 'ns3::Icmpv6OptionHeader' class */
    PyNs3Icmpv6OptionHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6OptionHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6OptionHeader", (PyObject *) &PyNs3Icmpv6OptionHeader_Type);
    /* Register the 'ns3::Icmpv6OptionLinkLayerAddress' class */
    PyNs3Icmpv6OptionLinkLayerAddress_Type.tp_base = &PyNs3Icmpv6OptionHeader_Type;
    if (PyType_Ready(&PyNs3Icmpv6OptionLinkLayerAddress_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6OptionLinkLayerAddress", (PyObject *) &PyNs3Icmpv6OptionLinkLayerAddress_Type);
    /* Register the 'ns3::Icmpv6OptionMtu' class */
    PyNs3Icmpv6OptionMtu_Type.tp_base = &PyNs3Icmpv6OptionHeader_Type;
    if (PyType_Ready(&PyNs3Icmpv6OptionMtu_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6OptionMtu", (PyObject *) &PyNs3Icmpv6OptionMtu_Type);
    /* Register the 'ns3::Icmpv6OptionPrefixInformation' class */
    PyNs3Icmpv6OptionPrefixInformation_Type.tp_base = &PyNs3Icmpv6OptionHeader_Type;
    if (PyType_Ready(&PyNs3Icmpv6OptionPrefixInformation_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6OptionPrefixInformation", (PyObject *) &PyNs3Icmpv6OptionPrefixInformation_Type);
    /* Register the 'ns3::Icmpv6OptionRedirected' class */
    PyNs3Icmpv6OptionRedirected_Type.tp_base = &PyNs3Icmpv6OptionHeader_Type;
    if (PyType_Ready(&PyNs3Icmpv6OptionRedirected_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6OptionRedirected", (PyObject *) &PyNs3Icmpv6OptionRedirected_Type);
    /* Register the 'ns3::Icmpv6ParameterError' class */
    PyNs3Icmpv6ParameterError_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6ParameterError_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6ParameterError", (PyObject *) &PyNs3Icmpv6ParameterError_Type);
    /* Register the 'ns3::Icmpv6RA' class */
    PyNs3Icmpv6RA_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6RA_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6RA", (PyObject *) &PyNs3Icmpv6RA_Type);
    /* Register the 'ns3::Icmpv6RS' class */
    PyNs3Icmpv6RS_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6RS_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6RS", (PyObject *) &PyNs3Icmpv6RS_Type);
    /* Register the 'ns3::Icmpv6Redirection' class */
    PyNs3Icmpv6Redirection_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6Redirection_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6Redirection", (PyObject *) &PyNs3Icmpv6Redirection_Type);
    /* Register the 'ns3::Icmpv6TimeExceeded' class */
    PyNs3Icmpv6TimeExceeded_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6TimeExceeded_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6TimeExceeded", (PyObject *) &PyNs3Icmpv6TimeExceeded_Type);
    /* Register the 'ns3::Icmpv6TooBig' class */
    PyNs3Icmpv6TooBig_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6TooBig_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6TooBig", (PyObject *) &PyNs3Icmpv6TooBig_Type);
    /* Register the 'ns3::Ipv6ExtensionHeader' class */
    PyNs3Ipv6ExtensionHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Ipv6ExtensionHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ExtensionHeader", (PyObject *) &PyNs3Ipv6ExtensionHeader_Type);
    /* Register the 'ns3::Ipv6ExtensionHopByHopHeader' class */
    PyNs3Ipv6ExtensionHopByHopHeader_Type.tp_base = &PyNs3Ipv6ExtensionHeader_Type;
    PyNs3Ipv6ExtensionHopByHopHeader_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3Ipv6ExtensionHeader_Type);
        PyTuple_SET_ITEM(PyNs3Ipv6ExtensionHopByHopHeader_Type.tp_bases, 0, (PyObject *) &PyNs3Ipv6ExtensionHeader_Type);
        Py_INCREF((PyObject *) &PyNs3OptionField_Type);
        PyTuple_SET_ITEM(PyNs3Ipv6ExtensionHopByHopHeader_Type.tp_bases, 1, (PyObject *) &PyNs3OptionField_Type);
    if (PyType_Ready(&PyNs3Ipv6ExtensionHopByHopHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ExtensionHopByHopHeader", (PyObject *) &PyNs3Ipv6ExtensionHopByHopHeader_Type);
    /* Register the 'ns3::Ipv6ExtensionRoutingHeader' class */
    PyNs3Ipv6ExtensionRoutingHeader_Type.tp_base = &PyNs3Ipv6ExtensionHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6ExtensionRoutingHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ExtensionRoutingHeader", (PyObject *) &PyNs3Ipv6ExtensionRoutingHeader_Type);
    /* Register the 'ns3::Ipv6OptionHeader' class */
    PyNs3Ipv6OptionHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Ipv6OptionHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6OptionHeader", (PyObject *) &PyNs3Ipv6OptionHeader_Type);
    /* Register the 'ns3::Ipv6OptionHeader::Alignment' class */
    if (PyType_Ready(&PyNs3Ipv6OptionHeaderAlignment_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3Ipv6OptionHeader_Type.tp_dict, (char *) "Alignment", (PyObject *) &PyNs3Ipv6OptionHeaderAlignment_Type);
    /* Register the 'ns3::Ipv6OptionJumbogramHeader' class */
    PyNs3Ipv6OptionJumbogramHeader_Type.tp_base = &PyNs3Ipv6OptionHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6OptionJumbogramHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6OptionJumbogramHeader", (PyObject *) &PyNs3Ipv6OptionJumbogramHeader_Type);
    /* Register the 'ns3::Ipv6OptionPad1Header' class */
    PyNs3Ipv6OptionPad1Header_Type.tp_base = &PyNs3Ipv6OptionHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6OptionPad1Header_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6OptionPad1Header", (PyObject *) &PyNs3Ipv6OptionPad1Header_Type);
    /* Register the 'ns3::Ipv6OptionPadnHeader' class */
    PyNs3Ipv6OptionPadnHeader_Type.tp_base = &PyNs3Ipv6OptionHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6OptionPadnHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6OptionPadnHeader", (PyObject *) &PyNs3Ipv6OptionPadnHeader_Type);
    /* Register the 'ns3::Ipv6OptionRouterAlertHeader' class */
    PyNs3Ipv6OptionRouterAlertHeader_Type.tp_base = &PyNs3Ipv6OptionHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6OptionRouterAlertHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6OptionRouterAlertHeader", (PyObject *) &PyNs3Ipv6OptionRouterAlertHeader_Type);
    /* Register the 'ns3::TcpHeader' class */
    PyNs3TcpHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3TcpHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TcpHeader", (PyObject *) &PyNs3TcpHeader_Type);
    /* Register the 'ns3::UdpHeader' class */
    PyNs3UdpHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UdpHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpHeader", (PyObject *) &PyNs3UdpHeader_Type);
    /* Register the 'ns3::ArpCache' class */
    PyNs3ArpCache_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ArpCache_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ArpCache", (PyObject *) &PyNs3ArpCache_Type);
    /* Register the 'ns3::ArpCache::Entry' class */
    if (PyType_Ready(&PyNs3ArpCacheEntry_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3ArpCache_Type.tp_dict, (char *) "Entry", (PyObject *) &PyNs3ArpCacheEntry_Type);
    /* Register the 'ns3::ArpHeader' class */
    PyNs3ArpHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3ArpHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ArpHeader", (PyObject *) &PyNs3ArpHeader_Type);
    /* Register the 'ns3::ArpL3Protocol' class */
    
    PyNs3ArpL3ProtocolMeta_Type.tp_base = PyNs3Object_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3ArpL3ProtocolMeta_Type.tp_traverse = PyNs3Object_Type.ob_type->tp_traverse;
    PyNs3ArpL3ProtocolMeta_Type.tp_clear = PyNs3Object_Type.ob_type->tp_clear;
    PyNs3ArpL3ProtocolMeta_Type.tp_is_gc = PyNs3Object_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3ArpL3ProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3ArpL3ProtocolMeta_Type);
    
    PyNs3ArpL3Protocol_Type.tp_base = &PyNs3Object_Type;
    PyNs3ArpL3Protocol_Type.ob_type = &PyNs3ArpL3ProtocolMeta_Type;
    if (PyType_Ready(&PyNs3ArpL3Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ArpL3Protocol", (PyObject *) &PyNs3ArpL3Protocol_Type);
    /* Register the 'ns3::Icmpv6DestinationUnreachable' class */
    PyNs3Icmpv6DestinationUnreachable_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6DestinationUnreachable_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6DestinationUnreachable", (PyObject *) &PyNs3Icmpv6DestinationUnreachable_Type);
    /* Register the 'ns3::Icmpv6Echo' class */
    PyNs3Icmpv6Echo_Type.tp_base = &PyNs3Icmpv6Header_Type;
    if (PyType_Ready(&PyNs3Icmpv6Echo_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6Echo", (PyObject *) &PyNs3Icmpv6Echo_Type);
    /* Register the 'ns3::Ipv4Interface' class */
    PyNs3Ipv4Interface_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Ipv4Interface_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4Interface", (PyObject *) &PyNs3Ipv4Interface_Type);
    /* Register the 'ns3::Ipv4L3Protocol' class */
    
    PyNs3Ipv4L3ProtocolMeta_Type.tp_base = PyNs3Ipv4_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Ipv4L3ProtocolMeta_Type.tp_traverse = PyNs3Ipv4_Type.ob_type->tp_traverse;
    PyNs3Ipv4L3ProtocolMeta_Type.tp_clear = PyNs3Ipv4_Type.ob_type->tp_clear;
    PyNs3Ipv4L3ProtocolMeta_Type.tp_is_gc = PyNs3Ipv4_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Ipv4L3ProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Ipv4L3ProtocolMeta_Type);
    
    PyNs3Ipv4L3Protocol_Type.tp_base = &PyNs3Ipv4_Type;
    PyNs3Ipv4L3Protocol_Type.ob_type = &PyNs3Ipv4L3ProtocolMeta_Type;
    if (PyType_Ready(&PyNs3Ipv4L3Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4L3Protocol", (PyObject *) &PyNs3Ipv4L3Protocol_Type);
    /* Register the 'ns3::Ipv4L4Protocol' class */
    PyNs3Ipv4L4Protocol_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Ipv4L4Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4L4Protocol", (PyObject *) &PyNs3Ipv4L4Protocol_Type);
    /* Register the 'ns3::Ipv6ExtensionAHHeader' class */
    PyNs3Ipv6ExtensionAHHeader_Type.tp_base = &PyNs3Ipv6ExtensionHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6ExtensionAHHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ExtensionAHHeader", (PyObject *) &PyNs3Ipv6ExtensionAHHeader_Type);
    /* Register the 'ns3::Ipv6ExtensionDestinationHeader' class */
    PyNs3Ipv6ExtensionDestinationHeader_Type.tp_base = &PyNs3Ipv6ExtensionHeader_Type;
    PyNs3Ipv6ExtensionDestinationHeader_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3Ipv6ExtensionHeader_Type);
        PyTuple_SET_ITEM(PyNs3Ipv6ExtensionDestinationHeader_Type.tp_bases, 0, (PyObject *) &PyNs3Ipv6ExtensionHeader_Type);
        Py_INCREF((PyObject *) &PyNs3OptionField_Type);
        PyTuple_SET_ITEM(PyNs3Ipv6ExtensionDestinationHeader_Type.tp_bases, 1, (PyObject *) &PyNs3OptionField_Type);
    if (PyType_Ready(&PyNs3Ipv6ExtensionDestinationHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ExtensionDestinationHeader", (PyObject *) &PyNs3Ipv6ExtensionDestinationHeader_Type);
    /* Register the 'ns3::Ipv6ExtensionESPHeader' class */
    PyNs3Ipv6ExtensionESPHeader_Type.tp_base = &PyNs3Ipv6ExtensionHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6ExtensionESPHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ExtensionESPHeader", (PyObject *) &PyNs3Ipv6ExtensionESPHeader_Type);
    /* Register the 'ns3::Ipv6ExtensionFragmentHeader' class */
    PyNs3Ipv6ExtensionFragmentHeader_Type.tp_base = &PyNs3Ipv6ExtensionHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6ExtensionFragmentHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ExtensionFragmentHeader", (PyObject *) &PyNs3Ipv6ExtensionFragmentHeader_Type);
    /* Register the 'ns3::Ipv6ExtensionLooseRoutingHeader' class */
    PyNs3Ipv6ExtensionLooseRoutingHeader_Type.tp_base = &PyNs3Ipv6ExtensionRoutingHeader_Type;
    if (PyType_Ready(&PyNs3Ipv6ExtensionLooseRoutingHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ExtensionLooseRoutingHeader", (PyObject *) &PyNs3Ipv6ExtensionLooseRoutingHeader_Type);
    /* Register the 'ns3::Ipv6Interface' class */
    PyNs3Ipv6Interface_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Ipv6Interface_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6Interface", (PyObject *) &PyNs3Ipv6Interface_Type);
    /* Register the 'ns3::Ipv6L3Protocol' class */
    
    PyNs3Ipv6L3ProtocolMeta_Type.tp_base = PyNs3Ipv6_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Ipv6L3ProtocolMeta_Type.tp_traverse = PyNs3Ipv6_Type.ob_type->tp_traverse;
    PyNs3Ipv6L3ProtocolMeta_Type.tp_clear = PyNs3Ipv6_Type.ob_type->tp_clear;
    PyNs3Ipv6L3ProtocolMeta_Type.tp_is_gc = PyNs3Ipv6_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Ipv6L3ProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Ipv6L3ProtocolMeta_Type);
    
    PyNs3Ipv6L3Protocol_Type.tp_base = &PyNs3Ipv6_Type;
    PyNs3Ipv6L3Protocol_Type.ob_type = &PyNs3Ipv6L3ProtocolMeta_Type;
    if (PyType_Ready(&PyNs3Ipv6L3Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6L3Protocol", (PyObject *) &PyNs3Ipv6L3Protocol_Type);
    /* Register the 'ns3::Ipv6L4Protocol' class */
    PyNs3Ipv6L4Protocol_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Ipv6L4Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6L4Protocol", (PyObject *) &PyNs3Ipv6L4Protocol_Type);
    /* Register the 'ns3::NdiscCache' class */
    
    PyNs3NdiscCacheMeta_Type.tp_base = PyNs3Object_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3NdiscCacheMeta_Type.tp_traverse = PyNs3Object_Type.ob_type->tp_traverse;
    PyNs3NdiscCacheMeta_Type.tp_clear = PyNs3Object_Type.ob_type->tp_clear;
    PyNs3NdiscCacheMeta_Type.tp_is_gc = PyNs3Object_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3NdiscCacheMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3NdiscCacheMeta_Type);
    
    PyNs3NdiscCache_Type.tp_base = &PyNs3Object_Type;
    PyNs3NdiscCache_Type.ob_type = &PyNs3NdiscCacheMeta_Type;
    if (PyType_Ready(&PyNs3NdiscCache_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NdiscCache", (PyObject *) &PyNs3NdiscCache_Type);
    /* Register the 'ns3::NdiscCache::Entry' class */
    if (PyType_Ready(&PyNs3NdiscCacheEntry_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3NdiscCache_Type.tp_dict, (char *) "Entry", (PyObject *) &PyNs3NdiscCacheEntry_Type);
    /* Register the 'ns3::TcpL4Protocol' class */
    
    PyNs3TcpL4ProtocolMeta_Type.tp_base = PyNs3Ipv4L4Protocol_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3TcpL4ProtocolMeta_Type.tp_traverse = PyNs3Ipv4L4Protocol_Type.ob_type->tp_traverse;
    PyNs3TcpL4ProtocolMeta_Type.tp_clear = PyNs3Ipv4L4Protocol_Type.ob_type->tp_clear;
    PyNs3TcpL4ProtocolMeta_Type.tp_is_gc = PyNs3Ipv4L4Protocol_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3TcpL4ProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3TcpL4ProtocolMeta_Type);
    
    PyNs3TcpL4Protocol_Type.tp_base = &PyNs3Ipv4L4Protocol_Type;
    PyNs3TcpL4Protocol_Type.ob_type = &PyNs3TcpL4ProtocolMeta_Type;
    if (PyType_Ready(&PyNs3TcpL4Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TcpL4Protocol", (PyObject *) &PyNs3TcpL4Protocol_Type);
    /* Register the 'ns3::UdpL4Protocol' class */
    
    PyNs3UdpL4ProtocolMeta_Type.tp_base = PyNs3Ipv4L4Protocol_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3UdpL4ProtocolMeta_Type.tp_traverse = PyNs3Ipv4L4Protocol_Type.ob_type->tp_traverse;
    PyNs3UdpL4ProtocolMeta_Type.tp_clear = PyNs3Ipv4L4Protocol_Type.ob_type->tp_clear;
    PyNs3UdpL4ProtocolMeta_Type.tp_is_gc = PyNs3Ipv4L4Protocol_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3UdpL4ProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3UdpL4ProtocolMeta_Type);
    
    PyNs3UdpL4Protocol_Type.tp_base = &PyNs3Ipv4L4Protocol_Type;
    PyNs3UdpL4Protocol_Type.ob_type = &PyNs3UdpL4ProtocolMeta_Type;
    if (PyType_Ready(&PyNs3UdpL4Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpL4Protocol", (PyObject *) &PyNs3UdpL4Protocol_Type);
    /* Register the 'ns3::Icmpv4L4Protocol' class */
    
    PyNs3Icmpv4L4ProtocolMeta_Type.tp_base = PyNs3Ipv4L4Protocol_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Icmpv4L4ProtocolMeta_Type.tp_traverse = PyNs3Ipv4L4Protocol_Type.ob_type->tp_traverse;
    PyNs3Icmpv4L4ProtocolMeta_Type.tp_clear = PyNs3Ipv4L4Protocol_Type.ob_type->tp_clear;
    PyNs3Icmpv4L4ProtocolMeta_Type.tp_is_gc = PyNs3Ipv4L4Protocol_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Icmpv4L4ProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Icmpv4L4ProtocolMeta_Type);
    
    PyNs3Icmpv4L4Protocol_Type.tp_base = &PyNs3Ipv4L4Protocol_Type;
    PyNs3Icmpv4L4Protocol_Type.ob_type = &PyNs3Icmpv4L4ProtocolMeta_Type;
    if (PyType_Ready(&PyNs3Icmpv4L4Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv4L4Protocol", (PyObject *) &PyNs3Icmpv4L4Protocol_Type);
    /* Register the 'ns3::Icmpv6L4Protocol' class */
    
    PyNs3Icmpv6L4ProtocolMeta_Type.tp_base = PyNs3Ipv6L4Protocol_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3Icmpv6L4ProtocolMeta_Type.tp_traverse = PyNs3Ipv6L4Protocol_Type.ob_type->tp_traverse;
    PyNs3Icmpv6L4ProtocolMeta_Type.tp_clear = PyNs3Ipv6L4Protocol_Type.ob_type->tp_clear;
    PyNs3Icmpv6L4ProtocolMeta_Type.tp_is_gc = PyNs3Ipv6L4Protocol_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3Icmpv6L4ProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3Icmpv6L4ProtocolMeta_Type);
    
    PyNs3Icmpv6L4Protocol_Type.tp_base = &PyNs3Ipv6L4Protocol_Type;
    PyNs3Icmpv6L4Protocol_Type.ob_type = &PyNs3Icmpv6L4ProtocolMeta_Type;
    if (PyType_Ready(&PyNs3Icmpv6L4Protocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Icmpv6L4Protocol", (PyObject *) &PyNs3Icmpv6L4Protocol_Type);
    /* Register the 'ns3::LoopbackNetDevice' class */
    PyNs3LoopbackNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3LoopbackNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "LoopbackNetDevice", (PyObject *) &PyNs3LoopbackNetDevice_Type);
    /* Register the 'ns3::Ipv4ListRouting' class */
    PyNs3Ipv4ListRouting_Type.tp_base = &PyNs3Ipv4RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3Ipv4ListRouting_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4ListRouting", (PyObject *) &PyNs3Ipv4ListRouting_Type);
    /* Register the 'ns3::Ipv6ListRouting' class */
    PyNs3Ipv6ListRouting_Type.tp_base = &PyNs3Ipv6RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3Ipv6ListRouting_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ListRouting", (PyObject *) &PyNs3Ipv6ListRouting_Type);
    /* Register the 'ns3::OnOffApplication' class */
    PyNs3OnOffApplication_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3OnOffApplication_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OnOffApplication", (PyObject *) &PyNs3OnOffApplication_Type);
    /* Register the 'ns3::PacketSink' class */
    PyNs3PacketSink_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3PacketSink_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketSink", (PyObject *) &PyNs3PacketSink_Type);
    /* Register the 'ns3::PppHeader' class */
    PyNs3PppHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3PppHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PppHeader", (PyObject *) &PyNs3PppHeader_Type);
    /* Register the 'ns3::PointToPointChannel' class */
    PyNs3PointToPointChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3PointToPointChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointToPointChannel", (PyObject *) &PyNs3PointToPointChannel_Type);
    /* Register the 'ns3::PointToPointNetDevice' class */
    PyNs3PointToPointNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3PointToPointNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointToPointNetDevice", (PyObject *) &PyNs3PointToPointNetDevice_Type);
    /* Register the 'ns3::PointToPointRemoteChannel' class */
    PyNs3PointToPointRemoteChannel_Type.tp_base = &PyNs3PointToPointChannel_Type;
    if (PyType_Ready(&PyNs3PointToPointRemoteChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointToPointRemoteChannel", (PyObject *) &PyNs3PointToPointRemoteChannel_Type);
    /* Register the 'ns3::MicrowaveOvenSpectrumValueHelper' class */
    if (PyType_Ready(&PyNs3MicrowaveOvenSpectrumValueHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MicrowaveOvenSpectrumValueHelper", (PyObject *) &PyNs3MicrowaveOvenSpectrumValueHelper_Type);
    /* Register the 'ns3::RxSpectrumModelInfo' class */
    if (PyType_Ready(&PyNs3RxSpectrumModelInfo_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RxSpectrumModelInfo", (PyObject *) &PyNs3RxSpectrumModelInfo_Type);
    /* Register the 'ns3::TxSpectrumModelInfo' class */
    if (PyType_Ready(&PyNs3TxSpectrumModelInfo_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TxSpectrumModelInfo", (PyObject *) &PyNs3TxSpectrumModelInfo_Type);
    /* Register the 'ns3::WifiSpectrumValue5MhzFactory' class */
    if (PyType_Ready(&PyNs3WifiSpectrumValue5MhzFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiSpectrumValue5MhzFactory", (PyObject *) &PyNs3WifiSpectrumValue5MhzFactory_Type);
    /* Register the 'ns3::WifiSpectrumValueHelper' class */
    if (PyType_Ready(&PyNs3WifiSpectrumValueHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiSpectrumValueHelper", (PyObject *) &PyNs3WifiSpectrumValueHelper_Type);
    /* Register the 'ns3::SpectrumErrorModel' class */
    PyNs3SpectrumErrorModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3SpectrumErrorModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumErrorModel", (PyObject *) &PyNs3SpectrumErrorModel_Type);
    /* Register the 'ns3::SpectrumInterference' class */
    PyNs3SpectrumInterference_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3SpectrumInterference_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumInterference", (PyObject *) &PyNs3SpectrumInterference_Type);
    /* Register the 'ns3::WaveformGenerator' class */
    PyNs3WaveformGenerator_Type.tp_base = &PyNs3SpectrumPhy_Type;
    if (PyType_Ready(&PyNs3WaveformGenerator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WaveformGenerator", (PyObject *) &PyNs3WaveformGenerator_Type);
    /* Register the 'ns3::AlohaNoackMacHeader' class */
    PyNs3AlohaNoackMacHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AlohaNoackMacHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AlohaNoackMacHeader", (PyObject *) &PyNs3AlohaNoackMacHeader_Type);
    /* Register the 'ns3::HalfDuplexIdealPhy' class */
    PyNs3HalfDuplexIdealPhy_Type.tp_base = &PyNs3SpectrumPhy_Type;
    if (PyType_Ready(&PyNs3HalfDuplexIdealPhy_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "HalfDuplexIdealPhy", (PyObject *) &PyNs3HalfDuplexIdealPhy_Type);
    /* Register the 'ns3::NonCommunicatingNetDevice' class */
    PyNs3NonCommunicatingNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3NonCommunicatingNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NonCommunicatingNetDevice", (PyObject *) &PyNs3NonCommunicatingNetDevice_Type);
    /* Register the 'ns3::ShannonSpectrumErrorModel' class */
    PyNs3ShannonSpectrumErrorModel_Type.tp_base = &PyNs3SpectrumErrorModel_Type;
    if (PyType_Ready(&PyNs3ShannonSpectrumErrorModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ShannonSpectrumErrorModel", (PyObject *) &PyNs3ShannonSpectrumErrorModel_Type);
    /* Register the 'ns3::SpectrumAnalyzer' class */
    PyNs3SpectrumAnalyzer_Type.tp_base = &PyNs3SpectrumPhy_Type;
    if (PyType_Ready(&PyNs3SpectrumAnalyzer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumAnalyzer", (PyObject *) &PyNs3SpectrumAnalyzer_Type);
    /* Register the 'ns3::AlohaNoackNetDevice' class */
    PyNs3AlohaNoackNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3AlohaNoackNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AlohaNoackNetDevice", (PyObject *) &PyNs3AlohaNoackNetDevice_Type);
    /* Register the 'ns3::MultiModelSpectrumChannel' class */
    PyNs3MultiModelSpectrumChannel_Type.tp_base = &PyNs3SpectrumChannel_Type;
    if (PyType_Ready(&PyNs3MultiModelSpectrumChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MultiModelSpectrumChannel", (PyObject *) &PyNs3MultiModelSpectrumChannel_Type);
    /* Register the 'ns3::SingleModelSpectrumChannel' class */
    PyNs3SingleModelSpectrumChannel_Type.tp_base = &PyNs3SpectrumChannel_Type;
    if (PyType_Ready(&PyNs3SingleModelSpectrumChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SingleModelSpectrumChannel", (PyObject *) &PyNs3SingleModelSpectrumChannel_Type);
    /* Register the 'ns3::Ipv4MulticastRoutingTableEntry' class */
    if (PyType_Ready(&PyNs3Ipv4MulticastRoutingTableEntry_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4MulticastRoutingTableEntry", (PyObject *) &PyNs3Ipv4MulticastRoutingTableEntry_Type);
    /* Register the 'ns3::Ipv4RoutingTableEntry' class */
    if (PyType_Ready(&PyNs3Ipv4RoutingTableEntry_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4RoutingTableEntry", (PyObject *) &PyNs3Ipv4RoutingTableEntry_Type);
    /* Register the 'ns3::Ipv6MulticastRoutingTableEntry' class */
    if (PyType_Ready(&PyNs3Ipv6MulticastRoutingTableEntry_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6MulticastRoutingTableEntry", (PyObject *) &PyNs3Ipv6MulticastRoutingTableEntry_Type);
    /* Register the 'ns3::Ipv6RoutingTableEntry' class */
    if (PyType_Ready(&PyNs3Ipv6RoutingTableEntry_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6RoutingTableEntry", (PyObject *) &PyNs3Ipv6RoutingTableEntry_Type);
    /* Register the 'ns3::Ipv4StaticRouting' class */
    PyNs3Ipv4StaticRouting_Type.tp_base = &PyNs3Ipv4RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3Ipv4StaticRouting_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4StaticRouting", (PyObject *) &PyNs3Ipv4StaticRouting_Type);
    /* Register the 'ns3::Ipv6StaticRouting' class */
    PyNs3Ipv6StaticRouting_Type.tp_base = &PyNs3Ipv6RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3Ipv6StaticRouting_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6StaticRouting", (PyObject *) &PyNs3Ipv6StaticRouting_Type);
    /* Register the 'ns3::DataOutputCallback' class */
    if (PyType_Ready(&PyNs3DataOutputCallback_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DataOutputCallback", (PyObject *) &PyNs3DataOutputCallback_Type);
    /* Register the 'ns3::StatisticalSummary' class */
    if (PyType_Ready(&PyNs3StatisticalSummary_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "StatisticalSummary", (PyObject *) &PyNs3StatisticalSummary_Type);
    /* Register the 'ns3::DataCalculator' class */
    PyNs3DataCalculator_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DataCalculator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DataCalculator", (PyObject *) &PyNs3DataCalculator_Type);
    /* Register the 'ns3::DataCollector' class */
    PyNs3DataCollector_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DataCollector_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DataCollector", (PyObject *) &PyNs3DataCollector_Type);
    /* Register the 'ns3::DataOutputInterface' class */
    PyNs3DataOutputInterface_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DataOutputInterface_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DataOutputInterface", (PyObject *) &PyNs3DataOutputInterface_Type);
    /* Register the 'ns3::MinMaxAvgTotalCalculator< unsigned int >' class */
    PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type.tp_base = &PyNs3DataCalculator_Type;
    PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3DataCalculator_Type);
        PyTuple_SET_ITEM(PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type.tp_bases, 0, (PyObject *) &PyNs3DataCalculator_Type);
        Py_INCREF((PyObject *) &PyNs3StatisticalSummary_Type);
        PyTuple_SET_ITEM(PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type.tp_bases, 1, (PyObject *) &PyNs3StatisticalSummary_Type);
    if (PyType_Ready(&PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MinMaxAvgTotalCalculator__Unsigned_int", (PyObject *) &PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type);
    /* Register the 'ns3::OmnetDataOutput' class */
    PyNs3OmnetDataOutput_Type.tp_base = &PyNs3DataOutputInterface_Type;
    if (PyType_Ready(&PyNs3OmnetDataOutput_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OmnetDataOutput", (PyObject *) &PyNs3OmnetDataOutput_Type);
    /* Register the 'ns3::PacketSizeMinMaxAvgTotalCalculator' class */
    PyNs3PacketSizeMinMaxAvgTotalCalculator_Type.tp_base = &PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type;
    if (PyType_Ready(&PyNs3PacketSizeMinMaxAvgTotalCalculator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketSizeMinMaxAvgTotalCalculator", (PyObject *) &PyNs3PacketSizeMinMaxAvgTotalCalculator_Type);
    /* Register the 'ns3::SqliteDataOutput' class */
    PyNs3SqliteDataOutput_Type.tp_base = &PyNs3DataOutputInterface_Type;
    if (PyType_Ready(&PyNs3SqliteDataOutput_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SqliteDataOutput", (PyObject *) &PyNs3SqliteDataOutput_Type);
    /* Register the 'ns3::TimeMinMaxAvgTotalCalculator' class */
    PyNs3TimeMinMaxAvgTotalCalculator_Type.tp_base = &PyNs3DataCalculator_Type;
    if (PyType_Ready(&PyNs3TimeMinMaxAvgTotalCalculator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TimeMinMaxAvgTotalCalculator", (PyObject *) &PyNs3TimeMinMaxAvgTotalCalculator_Type);
    /* Register the 'ns3::CounterCalculator< unsigned int >' class */
    PyNs3CounterCalculator__Unsigned_int_Type.tp_base = &PyNs3DataCalculator_Type;
    if (PyType_Ready(&PyNs3CounterCalculator__Unsigned_int_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CounterCalculator__Unsigned_int", (PyObject *) &PyNs3CounterCalculator__Unsigned_int_Type);
    /* Register the 'ns3::PacketCounterCalculator' class */
    PyNs3PacketCounterCalculator_Type.tp_base = &PyNs3CounterCalculator__Unsigned_int_Type;
    if (PyType_Ready(&PyNs3PacketCounterCalculator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketCounterCalculator", (PyObject *) &PyNs3PacketCounterCalculator_Type);
    /* Register the 'ns3::TopologyReader' class */
    PyNs3TopologyReader_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3TopologyReader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TopologyReader", (PyObject *) &PyNs3TopologyReader_Type);
    /* Register the 'ns3::TopologyReader::Link' class */
    if (PyType_Ready(&PyNs3TopologyReaderLink_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3TopologyReader_Type.tp_dict, (char *) "Link", (PyObject *) &PyNs3TopologyReaderLink_Type);
    /* Register the 'ns3::InetTopologyReader' class */
    PyNs3InetTopologyReader_Type.tp_base = &PyNs3TopologyReader_Type;
    if (PyType_Ready(&PyNs3InetTopologyReader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "InetTopologyReader", (PyObject *) &PyNs3InetTopologyReader_Type);
    /* Register the 'ns3::OrbisTopologyReader' class */
    PyNs3OrbisTopologyReader_Type.tp_base = &PyNs3TopologyReader_Type;
    if (PyType_Ready(&PyNs3OrbisTopologyReader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OrbisTopologyReader", (PyObject *) &PyNs3OrbisTopologyReader_Type);
    /* Register the 'ns3::RocketfuelTopologyReader' class */
    PyNs3RocketfuelTopologyReader_Type.tp_base = &PyNs3TopologyReader_Type;
    if (PyType_Ready(&PyNs3RocketfuelTopologyReader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RocketfuelTopologyReader", (PyObject *) &PyNs3RocketfuelTopologyReader_Type);
    /* Register the 'ns3::V4Ping' class */
    PyNs3V4Ping_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3V4Ping_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "V4Ping", (PyObject *) &PyNs3V4Ping_Type);
    /* Register the 'ns3::VirtualNetDevice' class */
    PyNs3VirtualNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3VirtualNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "VirtualNetDevice", (PyObject *) &PyNs3VirtualNetDevice_Type);
    /* Register the 'ns3::Bar' class */
    if (PyType_Ready(&PyNs3Bar_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Bar", (PyObject *) &PyNs3Bar_Type);
    /* Register the 'ns3::BlockAckAgreement' class */
    if (PyType_Ready(&PyNs3BlockAckAgreement_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BlockAckAgreement", (PyObject *) &PyNs3BlockAckAgreement_Type);
    /* Register the 'ns3::BlockAckManager' class */
    if (PyType_Ready(&PyNs3BlockAckManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BlockAckManager", (PyObject *) &PyNs3BlockAckManager_Type);
    /* Register the 'ns3::CapabilityInformation' class */
    if (PyType_Ready(&PyNs3CapabilityInformation_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CapabilityInformation", (PyObject *) &PyNs3CapabilityInformation_Type);
    /* Register the 'ns3::DcfManager' class */
    if (PyType_Ready(&PyNs3DcfManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DcfManager", (PyObject *) &PyNs3DcfManager_Type);
    /* Register the 'ns3::DcfState' class */
    if (PyType_Ready(&PyNs3DcfState_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DcfState", (PyObject *) &PyNs3DcfState_Type);
    /* Register the 'ns3::DsssErrorRateModel' class */
    if (PyType_Ready(&PyNs3DsssErrorRateModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DsssErrorRateModel", (PyObject *) &PyNs3DsssErrorRateModel_Type);
    /* Register the 'ns3::InterferenceHelper' class */
    if (PyType_Ready(&PyNs3InterferenceHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "InterferenceHelper", (PyObject *) &PyNs3InterferenceHelper_Type);
    /* Register the 'ns3::InterferenceHelper::SnrPer' class */
    if (PyType_Ready(&PyNs3InterferenceHelperSnrPer_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3InterferenceHelper_Type.tp_dict, (char *) "SnrPer", (PyObject *) &PyNs3InterferenceHelperSnrPer_Type);
    /* Register the 'ns3::MacLowBlockAckEventListener' class */
    if (PyType_Ready(&PyNs3MacLowBlockAckEventListener_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MacLowBlockAckEventListener", (PyObject *) &PyNs3MacLowBlockAckEventListener_Type);
    /* Register the 'ns3::MacLowDcfListener' class */
    if (PyType_Ready(&PyNs3MacLowDcfListener_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MacLowDcfListener", (PyObject *) &PyNs3MacLowDcfListener_Type);
    /* Register the 'ns3::MacLowTransmissionListener' class */
    if (PyType_Ready(&PyNs3MacLowTransmissionListener_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MacLowTransmissionListener", (PyObject *) &PyNs3MacLowTransmissionListener_Type);
    /* Register the 'ns3::MacLowTransmissionParameters' class */
    if (PyType_Ready(&PyNs3MacLowTransmissionParameters_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MacLowTransmissionParameters", (PyObject *) &PyNs3MacLowTransmissionParameters_Type);
    /* Register the 'ns3::MacRxMiddle' class */
    if (PyType_Ready(&PyNs3MacRxMiddle_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MacRxMiddle", (PyObject *) &PyNs3MacRxMiddle_Type);
    /* Register the 'ns3::OriginatorBlockAckAgreement' class */
    PyNs3OriginatorBlockAckAgreement_Type.tp_base = &PyNs3BlockAckAgreement_Type;
    if (PyType_Ready(&PyNs3OriginatorBlockAckAgreement_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OriginatorBlockAckAgreement", (PyObject *) &PyNs3OriginatorBlockAckAgreement_Type);
    /* Register the 'ns3::RateInfo' class */
    if (PyType_Ready(&PyNs3RateInfo_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RateInfo", (PyObject *) &PyNs3RateInfo_Type);
    /* Register the 'ns3::StatusCode' class */
    if (PyType_Ready(&PyNs3StatusCode_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "StatusCode", (PyObject *) &PyNs3StatusCode_Type);
    /* Register the 'ns3::WifiMode' class */
    if (PyType_Ready(&PyNs3WifiMode_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiMode", (PyObject *) &PyNs3WifiMode_Type);
    /* Register the 'ns3::WifiModeFactory' class */
    if (PyType_Ready(&PyNs3WifiModeFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiModeFactory", (PyObject *) &PyNs3WifiModeFactory_Type);
    /* Register the 'ns3::WifiPhyListener' class */
    if (PyType_Ready(&PyNs3WifiPhyListener_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiPhyListener", (PyObject *) &PyNs3WifiPhyListener_Type);
    /* Register the 'ns3::WifiRemoteStation' class */
    if (PyType_Ready(&PyNs3WifiRemoteStation_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiRemoteStation", (PyObject *) &PyNs3WifiRemoteStation_Type);
    /* Register the 'ns3::WifiRemoteStationInfo' class */
    if (PyType_Ready(&PyNs3WifiRemoteStationInfo_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiRemoteStationInfo", (PyObject *) &PyNs3WifiRemoteStationInfo_Type);
    /* Register the 'ns3::WifiRemoteStationState' class */
    if (PyType_Ready(&PyNs3WifiRemoteStationState_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiRemoteStationState", (PyObject *) &PyNs3WifiRemoteStationState_Type);
    /* Register the 'ns3::MgtAddBaRequestHeader' class */
    PyNs3MgtAddBaRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtAddBaRequestHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MgtAddBaRequestHeader", (PyObject *) &PyNs3MgtAddBaRequestHeader_Type);
    /* Register the 'ns3::MgtAddBaResponseHeader' class */
    PyNs3MgtAddBaResponseHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtAddBaResponseHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MgtAddBaResponseHeader", (PyObject *) &PyNs3MgtAddBaResponseHeader_Type);
    /* Register the 'ns3::MgtAssocRequestHeader' class */
    PyNs3MgtAssocRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtAssocRequestHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MgtAssocRequestHeader", (PyObject *) &PyNs3MgtAssocRequestHeader_Type);
    /* Register the 'ns3::MgtAssocResponseHeader' class */
    PyNs3MgtAssocResponseHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtAssocResponseHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MgtAssocResponseHeader", (PyObject *) &PyNs3MgtAssocResponseHeader_Type);
    /* Register the 'ns3::MgtDelBaHeader' class */
    PyNs3MgtDelBaHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtDelBaHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MgtDelBaHeader", (PyObject *) &PyNs3MgtDelBaHeader_Type);
    /* Register the 'ns3::MgtProbeRequestHeader' class */
    PyNs3MgtProbeRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtProbeRequestHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MgtProbeRequestHeader", (PyObject *) &PyNs3MgtProbeRequestHeader_Type);
    /* Register the 'ns3::MgtProbeResponseHeader' class */
    PyNs3MgtProbeResponseHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MgtProbeResponseHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MgtProbeResponseHeader", (PyObject *) &PyNs3MgtProbeResponseHeader_Type);
    /* Register the 'ns3::QosTag' class */
    PyNs3QosTag_Type.tp_base = &PyNs3Tag_Type;
    if (PyType_Ready(&PyNs3QosTag_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "QosTag", (PyObject *) &PyNs3QosTag_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >' class */
    PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >' class */
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type);
    /* Register the 'ns3::WifiActionHeader' class */
    PyNs3WifiActionHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3WifiActionHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiActionHeader", (PyObject *) &PyNs3WifiActionHeader_Type);
    /* Register the 'ns3::WifiActionHeader::ActionValue' class */
    if (PyType_Ready(&PyNs3WifiActionHeaderActionValue_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, (char *) "ActionValue", (PyObject *) &PyNs3WifiActionHeaderActionValue_Type);
    /* Register the 'ns3::WifiInformationElement' class */
    PyNs3WifiInformationElement_Type.tp_base = &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type;
    if (PyType_Ready(&PyNs3WifiInformationElement_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiInformationElement", (PyObject *) &PyNs3WifiInformationElement_Type);
    /* Register the 'ns3::WifiInformationElementVector' class */
    PyNs3WifiInformationElementVector_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3WifiInformationElementVector_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiInformationElementVector", (PyObject *) &PyNs3WifiInformationElementVector_Type);
    /* Register the 'ns3::WifiMac' class */
    PyNs3WifiMac_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WifiMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiMac", (PyObject *) &PyNs3WifiMac_Type);
    /* Register the 'ns3::WifiMacHeader' class */
    PyNs3WifiMacHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3WifiMacHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiMacHeader", (PyObject *) &PyNs3WifiMacHeader_Type);
    /* Register the 'ns3::WifiPhy' class */
    PyNs3WifiPhy_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WifiPhy_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiPhy", (PyObject *) &PyNs3WifiPhy_Type);
    /* Register the 'ns3::WifiRemoteStationManager' class */
    PyNs3WifiRemoteStationManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WifiRemoteStationManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiRemoteStationManager", (PyObject *) &PyNs3WifiRemoteStationManager_Type);
    /* Register the 'ns3::YansWifiPhy' class */
    PyNs3YansWifiPhy_Type.tp_base = &PyNs3WifiPhy_Type;
    if (PyType_Ready(&PyNs3YansWifiPhy_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "YansWifiPhy", (PyObject *) &PyNs3YansWifiPhy_Type);
    /* Register the 'ns3::AarfWifiManager' class */
    PyNs3AarfWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3AarfWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AarfWifiManager", (PyObject *) &PyNs3AarfWifiManager_Type);
    /* Register the 'ns3::AarfcdWifiManager' class */
    PyNs3AarfcdWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3AarfcdWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AarfcdWifiManager", (PyObject *) &PyNs3AarfcdWifiManager_Type);
    /* Register the 'ns3::AdhocWifiMac' class */
    PyNs3AdhocWifiMac_Type.tp_base = &PyNs3WifiMac_Type;
    if (PyType_Ready(&PyNs3AdhocWifiMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AdhocWifiMac", (PyObject *) &PyNs3AdhocWifiMac_Type);
    /* Register the 'ns3::AmrrWifiManager' class */
    PyNs3AmrrWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3AmrrWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AmrrWifiManager", (PyObject *) &PyNs3AmrrWifiManager_Type);
    /* Register the 'ns3::AmsduSubframeHeader' class */
    PyNs3AmsduSubframeHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3AmsduSubframeHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AmsduSubframeHeader", (PyObject *) &PyNs3AmsduSubframeHeader_Type);
    /* Register the 'ns3::ArfWifiManager' class */
    PyNs3ArfWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3ArfWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ArfWifiManager", (PyObject *) &PyNs3ArfWifiManager_Type);
    /* Register the 'ns3::CaraWifiManager' class */
    PyNs3CaraWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3CaraWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CaraWifiManager", (PyObject *) &PyNs3CaraWifiManager_Type);
    /* Register the 'ns3::ConstantRateWifiManager' class */
    PyNs3ConstantRateWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3ConstantRateWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConstantRateWifiManager", (PyObject *) &PyNs3ConstantRateWifiManager_Type);
    /* Register the 'ns3::CtrlBAckRequestHeader' class */
    PyNs3CtrlBAckRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3CtrlBAckRequestHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CtrlBAckRequestHeader", (PyObject *) &PyNs3CtrlBAckRequestHeader_Type);
    /* Register the 'ns3::CtrlBAckResponseHeader' class */
    PyNs3CtrlBAckResponseHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3CtrlBAckResponseHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CtrlBAckResponseHeader", (PyObject *) &PyNs3CtrlBAckResponseHeader_Type);
    /* Register the 'ns3::Dcf' class */
    PyNs3Dcf_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3Dcf_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Dcf", (PyObject *) &PyNs3Dcf_Type);
    /* Register the 'ns3::EdcaTxopN' class */
    PyNs3EdcaTxopN_Type.tp_base = &PyNs3Dcf_Type;
    if (PyType_Ready(&PyNs3EdcaTxopN_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EdcaTxopN", (PyObject *) &PyNs3EdcaTxopN_Type);
    /* Register the 'ns3::ErrorRateModel' class */
    PyNs3ErrorRateModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ErrorRateModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ErrorRateModel", (PyObject *) &PyNs3ErrorRateModel_Type);
    /* Register the 'ns3::IdealWifiManager' class */
    PyNs3IdealWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3IdealWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IdealWifiManager", (PyObject *) &PyNs3IdealWifiManager_Type);
    /* Register the 'ns3::MacLow' class */
    PyNs3MacLow_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MacLow_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MacLow", (PyObject *) &PyNs3MacLow_Type);
    /* Register the 'ns3::MgtBeaconHeader' class */
    PyNs3MgtBeaconHeader_Type.tp_base = &PyNs3MgtProbeResponseHeader_Type;
    if (PyType_Ready(&PyNs3MgtBeaconHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MgtBeaconHeader", (PyObject *) &PyNs3MgtBeaconHeader_Type);
    /* Register the 'ns3::MinstrelWifiManager' class */
    PyNs3MinstrelWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3MinstrelWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MinstrelWifiManager", (PyObject *) &PyNs3MinstrelWifiManager_Type);
    /* Register the 'ns3::MsduAggregator' class */
    PyNs3MsduAggregator_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MsduAggregator_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MsduAggregator", (PyObject *) &PyNs3MsduAggregator_Type);
    /* Register the 'ns3::NistErrorRateModel' class */
    PyNs3NistErrorRateModel_Type.tp_base = &PyNs3ErrorRateModel_Type;
    if (PyType_Ready(&PyNs3NistErrorRateModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NistErrorRateModel", (PyObject *) &PyNs3NistErrorRateModel_Type);
    /* Register the 'ns3::NqapWifiMac' class */
    PyNs3NqapWifiMac_Type.tp_base = &PyNs3WifiMac_Type;
    if (PyType_Ready(&PyNs3NqapWifiMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NqapWifiMac", (PyObject *) &PyNs3NqapWifiMac_Type);
    /* Register the 'ns3::NqstaWifiMac' class */
    PyNs3NqstaWifiMac_Type.tp_base = &PyNs3WifiMac_Type;
    if (PyType_Ready(&PyNs3NqstaWifiMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NqstaWifiMac", (PyObject *) &PyNs3NqstaWifiMac_Type);
    /* Register the 'ns3::OnoeWifiManager' class */
    PyNs3OnoeWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3OnoeWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OnoeWifiManager", (PyObject *) &PyNs3OnoeWifiManager_Type);
    /* Register the 'ns3::QadhocWifiMac' class */
    PyNs3QadhocWifiMac_Type.tp_base = &PyNs3WifiMac_Type;
    if (PyType_Ready(&PyNs3QadhocWifiMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "QadhocWifiMac", (PyObject *) &PyNs3QadhocWifiMac_Type);
    /* Register the 'ns3::QapWifiMac' class */
    PyNs3QapWifiMac_Type.tp_base = &PyNs3WifiMac_Type;
    if (PyType_Ready(&PyNs3QapWifiMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "QapWifiMac", (PyObject *) &PyNs3QapWifiMac_Type);
    /* Register the 'ns3::QstaWifiMac' class */
    PyNs3QstaWifiMac_Type.tp_base = &PyNs3WifiMac_Type;
    if (PyType_Ready(&PyNs3QstaWifiMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "QstaWifiMac", (PyObject *) &PyNs3QstaWifiMac_Type);
    /* Register the 'ns3::RraaWifiManager' class */
    PyNs3RraaWifiManager_Type.tp_base = &PyNs3WifiRemoteStationManager_Type;
    if (PyType_Ready(&PyNs3RraaWifiManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RraaWifiManager", (PyObject *) &PyNs3RraaWifiManager_Type);
    /* Register the 'ns3::Ssid' class */
    PyNs3Ssid_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3Ssid_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ssid", (PyObject *) &PyNs3Ssid_Type);
    /* Register the 'ns3::SsidChecker' class */
    PyNs3SsidChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3SsidChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SsidChecker", (PyObject *) &PyNs3SsidChecker_Type);
    /* Register the 'ns3::SsidValue' class */
    PyNs3SsidValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3SsidValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SsidValue", (PyObject *) &PyNs3SsidValue_Type);
    /* Register the 'ns3::SupportedRates' class */
    PyNs3SupportedRates_Type.tp_base = &PyNs3WifiInformationElement_Type;
    if (PyType_Ready(&PyNs3SupportedRates_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SupportedRates", (PyObject *) &PyNs3SupportedRates_Type);
    /* Register the 'ns3::WifiChannel' class */
    PyNs3WifiChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3WifiChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiChannel", (PyObject *) &PyNs3WifiChannel_Type);
    /* Register the 'ns3::WifiModeChecker' class */
    PyNs3WifiModeChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3WifiModeChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiModeChecker", (PyObject *) &PyNs3WifiModeChecker_Type);
    /* Register the 'ns3::WifiModeValue' class */
    PyNs3WifiModeValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3WifiModeValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiModeValue", (PyObject *) &PyNs3WifiModeValue_Type);
    /* Register the 'ns3::WifiNetDevice' class */
    PyNs3WifiNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3WifiNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiNetDevice", (PyObject *) &PyNs3WifiNetDevice_Type);
    /* Register the 'ns3::YansErrorRateModel' class */
    PyNs3YansErrorRateModel_Type.tp_base = &PyNs3ErrorRateModel_Type;
    if (PyType_Ready(&PyNs3YansErrorRateModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "YansErrorRateModel", (PyObject *) &PyNs3YansErrorRateModel_Type);
    /* Register the 'ns3::YansWifiChannel' class */
    PyNs3YansWifiChannel_Type.tp_base = &PyNs3WifiChannel_Type;
    if (PyType_Ready(&PyNs3YansWifiChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "YansWifiChannel", (PyObject *) &PyNs3YansWifiChannel_Type);
    /* Register the 'ns3::DcaTxop' class */
    PyNs3DcaTxop_Type.tp_base = &PyNs3Dcf_Type;
    if (PyType_Ready(&PyNs3DcaTxop_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DcaTxop", (PyObject *) &PyNs3DcaTxop_Type);
    /* Register the 'ns3::Cid' class */
    if (PyType_Ready(&PyNs3Cid_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Cid", (PyObject *) &PyNs3Cid_Type);
    /* Register the 'ns3::CidFactory' class */
    if (PyType_Ready(&PyNs3CidFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CidFactory", (PyObject *) &PyNs3CidFactory_Type);
    /* Register the 'ns3::CsParameters' class */
    if (PyType_Ready(&PyNs3CsParameters_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CsParameters", (PyObject *) &PyNs3CsParameters_Type);
    /* Register the 'ns3::DcdChannelEncodings' class */
    if (PyType_Ready(&PyNs3DcdChannelEncodings_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DcdChannelEncodings", (PyObject *) &PyNs3DcdChannelEncodings_Type);
    /* Register the 'ns3::DlFramePrefixIe' class */
    if (PyType_Ready(&PyNs3DlFramePrefixIe_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DlFramePrefixIe", (PyObject *) &PyNs3DlFramePrefixIe_Type);
    /* Register the 'ns3::IpcsClassifierRecord' class */
    if (PyType_Ready(&PyNs3IpcsClassifierRecord_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IpcsClassifierRecord", (PyObject *) &PyNs3IpcsClassifierRecord_Type);
    /* Register the 'ns3::OfdmDcdChannelEncodings' class */
    PyNs3OfdmDcdChannelEncodings_Type.tp_base = &PyNs3DcdChannelEncodings_Type;
    if (PyType_Ready(&PyNs3OfdmDcdChannelEncodings_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OfdmDcdChannelEncodings", (PyObject *) &PyNs3OfdmDcdChannelEncodings_Type);
    /* Register the 'ns3::OfdmDlBurstProfile' class */
    if (PyType_Ready(&PyNs3OfdmDlBurstProfile_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OfdmDlBurstProfile", (PyObject *) &PyNs3OfdmDlBurstProfile_Type);
    /* Register the 'ns3::OfdmDlMapIe' class */
    if (PyType_Ready(&PyNs3OfdmDlMapIe_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OfdmDlMapIe", (PyObject *) &PyNs3OfdmDlMapIe_Type);
    /* Register the 'ns3::OfdmUlBurstProfile' class */
    if (PyType_Ready(&PyNs3OfdmUlBurstProfile_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OfdmUlBurstProfile", (PyObject *) &PyNs3OfdmUlBurstProfile_Type);
    /* Register the 'ns3::OfdmUlMapIe' class */
    if (PyType_Ready(&PyNs3OfdmUlMapIe_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OfdmUlMapIe", (PyObject *) &PyNs3OfdmUlMapIe_Type);
    /* Register the 'ns3::SNRToBlockErrorRateManager' class */
    if (PyType_Ready(&PyNs3SNRToBlockErrorRateManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SNRToBlockErrorRateManager", (PyObject *) &PyNs3SNRToBlockErrorRateManager_Type);
    /* Register the 'ns3::SNRToBlockErrorRateRecord' class */
    if (PyType_Ready(&PyNs3SNRToBlockErrorRateRecord_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SNRToBlockErrorRateRecord", (PyObject *) &PyNs3SNRToBlockErrorRateRecord_Type);
    /* Register the 'ns3::SSRecord' class */
    if (PyType_Ready(&PyNs3SSRecord_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SSRecord", (PyObject *) &PyNs3SSRecord_Type);
    /* Register the 'ns3::SendParams' class */
    if (PyType_Ready(&PyNs3SendParams_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SendParams", (PyObject *) &PyNs3SendParams_Type);
    /* Register the 'ns3::ServiceFlow' class */
    if (PyType_Ready(&PyNs3ServiceFlow_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ServiceFlow", (PyObject *) &PyNs3ServiceFlow_Type);
    /* Register the 'ns3::ServiceFlowRecord' class */
    if (PyType_Ready(&PyNs3ServiceFlowRecord_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ServiceFlowRecord", (PyObject *) &PyNs3ServiceFlowRecord_Type);
    /* Register the 'ns3::TlvValue' class */
    if (PyType_Ready(&PyNs3TlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TlvValue", (PyObject *) &PyNs3TlvValue_Type);
    /* Register the 'ns3::TosTlvValue' class */
    PyNs3TosTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3TosTlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TosTlvValue", (PyObject *) &PyNs3TosTlvValue_Type);
    /* Register the 'ns3::U16TlvValue' class */
    PyNs3U16TlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3U16TlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "U16TlvValue", (PyObject *) &PyNs3U16TlvValue_Type);
    /* Register the 'ns3::U32TlvValue' class */
    PyNs3U32TlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3U32TlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "U32TlvValue", (PyObject *) &PyNs3U32TlvValue_Type);
    /* Register the 'ns3::U8TlvValue' class */
    PyNs3U8TlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3U8TlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "U8TlvValue", (PyObject *) &PyNs3U8TlvValue_Type);
    /* Register the 'ns3::UcdChannelEncodings' class */
    if (PyType_Ready(&PyNs3UcdChannelEncodings_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UcdChannelEncodings", (PyObject *) &PyNs3UcdChannelEncodings_Type);
    /* Register the 'ns3::VectorTlvValue' class */
    PyNs3VectorTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3VectorTlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "VectorTlvValue", (PyObject *) &PyNs3VectorTlvValue_Type);
    /* Register the 'ns3::simpleOfdmSendParam' class */
    if (PyType_Ready(&PyNs3SimpleOfdmSendParam_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "simpleOfdmSendParam", (PyObject *) &PyNs3SimpleOfdmSendParam_Type);
    /* Register the 'ns3::ClassificationRuleVectorTlvValue' class */
    PyNs3ClassificationRuleVectorTlvValue_Type.tp_base = &PyNs3VectorTlvValue_Type;
    if (PyType_Ready(&PyNs3ClassificationRuleVectorTlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ClassificationRuleVectorTlvValue", (PyObject *) &PyNs3ClassificationRuleVectorTlvValue_Type);
    /* Register the 'ns3::CsParamVectorTlvValue' class */
    PyNs3CsParamVectorTlvValue_Type.tp_base = &PyNs3VectorTlvValue_Type;
    if (PyType_Ready(&PyNs3CsParamVectorTlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CsParamVectorTlvValue", (PyObject *) &PyNs3CsParamVectorTlvValue_Type);
    /* Register the 'ns3::Ipv4AddressTlvValue' class */
    PyNs3Ipv4AddressTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3Ipv4AddressTlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4AddressTlvValue", (PyObject *) &PyNs3Ipv4AddressTlvValue_Type);
    /* Register the 'ns3::Ipv4AddressTlvValue::ipv4Addr' class */
    if (PyType_Ready(&PyNs3Ipv4AddressTlvValueIpv4Addr_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3Ipv4AddressTlvValue_Type.tp_dict, (char *) "ipv4Addr", (PyObject *) &PyNs3Ipv4AddressTlvValueIpv4Addr_Type);
    /* Register the 'ns3::MacHeaderType' class */
    PyNs3MacHeaderType_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3MacHeaderType_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MacHeaderType", (PyObject *) &PyNs3MacHeaderType_Type);
    /* Register the 'ns3::ManagementMessageType' class */
    PyNs3ManagementMessageType_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3ManagementMessageType_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ManagementMessageType", (PyObject *) &PyNs3ManagementMessageType_Type);
    /* Register the 'ns3::OfdmDownlinkFramePrefix' class */
    PyNs3OfdmDownlinkFramePrefix_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3OfdmDownlinkFramePrefix_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OfdmDownlinkFramePrefix", (PyObject *) &PyNs3OfdmDownlinkFramePrefix_Type);
    /* Register the 'ns3::OfdmSendParams' class */
    PyNs3OfdmSendParams_Type.tp_base = &PyNs3SendParams_Type;
    if (PyType_Ready(&PyNs3OfdmSendParams_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OfdmSendParams", (PyObject *) &PyNs3OfdmSendParams_Type);
    /* Register the 'ns3::OfdmUcdChannelEncodings' class */
    PyNs3OfdmUcdChannelEncodings_Type.tp_base = &PyNs3UcdChannelEncodings_Type;
    if (PyType_Ready(&PyNs3OfdmUcdChannelEncodings_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OfdmUcdChannelEncodings", (PyObject *) &PyNs3OfdmUcdChannelEncodings_Type);
    /* Register the 'ns3::PortRangeTlvValue' class */
    PyNs3PortRangeTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3PortRangeTlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PortRangeTlvValue", (PyObject *) &PyNs3PortRangeTlvValue_Type);
    /* Register the 'ns3::PortRangeTlvValue::PortRange' class */
    if (PyType_Ready(&PyNs3PortRangeTlvValuePortRange_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3PortRangeTlvValue_Type.tp_dict, (char *) "PortRange", (PyObject *) &PyNs3PortRangeTlvValuePortRange_Type);
    /* Register the 'ns3::PriorityUlJob' class */
    PyNs3PriorityUlJob_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3PriorityUlJob_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PriorityUlJob", (PyObject *) &PyNs3PriorityUlJob_Type);
    /* Register the 'ns3::ProtocolTlvValue' class */
    PyNs3ProtocolTlvValue_Type.tp_base = &PyNs3TlvValue_Type;
    if (PyType_Ready(&PyNs3ProtocolTlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ProtocolTlvValue", (PyObject *) &PyNs3ProtocolTlvValue_Type);
    /* Register the 'ns3::RngReq' class */
    PyNs3RngReq_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3RngReq_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RngReq", (PyObject *) &PyNs3RngReq_Type);
    /* Register the 'ns3::RngRsp' class */
    PyNs3RngRsp_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3RngRsp_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RngRsp", (PyObject *) &PyNs3RngRsp_Type);
    /* Register the 'ns3::SSManager' class */
    PyNs3SSManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3SSManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SSManager", (PyObject *) &PyNs3SSManager_Type);
    /* Register the 'ns3::ServiceFlowManager' class */
    PyNs3ServiceFlowManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ServiceFlowManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ServiceFlowManager", (PyObject *) &PyNs3ServiceFlowManager_Type);
    /* Register the 'ns3::SfVectorTlvValue' class */
    PyNs3SfVectorTlvValue_Type.tp_base = &PyNs3VectorTlvValue_Type;
    if (PyType_Ready(&PyNs3SfVectorTlvValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SfVectorTlvValue", (PyObject *) &PyNs3SfVectorTlvValue_Type);
    /* Register the 'ns3::SsServiceFlowManager' class */
    PyNs3SsServiceFlowManager_Type.tp_base = &PyNs3ServiceFlowManager_Type;
    if (PyType_Ready(&PyNs3SsServiceFlowManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SsServiceFlowManager", (PyObject *) &PyNs3SsServiceFlowManager_Type);
    /* Register the 'ns3::Tlv' class */
    PyNs3Tlv_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Tlv_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Tlv", (PyObject *) &PyNs3Tlv_Type);
    /* Register the 'ns3::Ucd' class */
    PyNs3Ucd_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Ucd_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ucd", (PyObject *) &PyNs3Ucd_Type);
    /* Register the 'ns3::UlJob' class */
    PyNs3UlJob_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UlJob_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UlJob", (PyObject *) &PyNs3UlJob_Type);
    /* Register the 'ns3::UlMap' class */
    PyNs3UlMap_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UlMap_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UlMap", (PyObject *) &PyNs3UlMap_Type);
    /* Register the 'ns3::UplinkScheduler' class */
    PyNs3UplinkScheduler_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UplinkScheduler_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UplinkScheduler", (PyObject *) &PyNs3UplinkScheduler_Type);
    /* Register the 'ns3::UplinkSchedulerMBQoS' class */
    PyNs3UplinkSchedulerMBQoS_Type.tp_base = &PyNs3UplinkScheduler_Type;
    if (PyType_Ready(&PyNs3UplinkSchedulerMBQoS_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UplinkSchedulerMBQoS", (PyObject *) &PyNs3UplinkSchedulerMBQoS_Type);
    /* Register the 'ns3::UplinkSchedulerRtps' class */
    PyNs3UplinkSchedulerRtps_Type.tp_base = &PyNs3UplinkScheduler_Type;
    if (PyType_Ready(&PyNs3UplinkSchedulerRtps_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UplinkSchedulerRtps", (PyObject *) &PyNs3UplinkSchedulerRtps_Type);
    /* Register the 'ns3::UplinkSchedulerSimple' class */
    PyNs3UplinkSchedulerSimple_Type.tp_base = &PyNs3UplinkScheduler_Type;
    if (PyType_Ready(&PyNs3UplinkSchedulerSimple_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UplinkSchedulerSimple", (PyObject *) &PyNs3UplinkSchedulerSimple_Type);
    /* Register the 'ns3::WimaxConnection' class */
    PyNs3WimaxConnection_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WimaxConnection_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WimaxConnection", (PyObject *) &PyNs3WimaxConnection_Type);
    /* Register the 'ns3::WimaxMacQueue' class */
    PyNs3WimaxMacQueue_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WimaxMacQueue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WimaxMacQueue", (PyObject *) &PyNs3WimaxMacQueue_Type);
    /* Register the 'ns3::WimaxMacToMacHeader' class */
    PyNs3WimaxMacToMacHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3WimaxMacToMacHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WimaxMacToMacHeader", (PyObject *) &PyNs3WimaxMacToMacHeader_Type);
    /* Register the 'ns3::WimaxPhy' class */
    PyNs3WimaxPhy_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3WimaxPhy_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WimaxPhy", (PyObject *) &PyNs3WimaxPhy_Type);
    /* Register the 'ns3::BSScheduler' class */
    PyNs3BSScheduler_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3BSScheduler_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BSScheduler", (PyObject *) &PyNs3BSScheduler_Type);
    /* Register the 'ns3::BSSchedulerRtps' class */
    PyNs3BSSchedulerRtps_Type.tp_base = &PyNs3BSScheduler_Type;
    if (PyType_Ready(&PyNs3BSSchedulerRtps_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BSSchedulerRtps", (PyObject *) &PyNs3BSSchedulerRtps_Type);
    /* Register the 'ns3::BSSchedulerSimple' class */
    PyNs3BSSchedulerSimple_Type.tp_base = &PyNs3BSScheduler_Type;
    if (PyType_Ready(&PyNs3BSSchedulerSimple_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BSSchedulerSimple", (PyObject *) &PyNs3BSSchedulerSimple_Type);
    /* Register the 'ns3::BandwidthRequestHeader' class */
    PyNs3BandwidthRequestHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3BandwidthRequestHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BandwidthRequestHeader", (PyObject *) &PyNs3BandwidthRequestHeader_Type);
    /* Register the 'ns3::BsServiceFlowManager' class */
    PyNs3BsServiceFlowManager_Type.tp_base = &PyNs3ServiceFlowManager_Type;
    if (PyType_Ready(&PyNs3BsServiceFlowManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BsServiceFlowManager", (PyObject *) &PyNs3BsServiceFlowManager_Type);
    /* Register the 'ns3::ConnectionManager' class */
    PyNs3ConnectionManager_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3ConnectionManager_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ConnectionManager", (PyObject *) &PyNs3ConnectionManager_Type);
    /* Register the 'ns3::Dcd' class */
    PyNs3Dcd_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3Dcd_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Dcd", (PyObject *) &PyNs3Dcd_Type);
    /* Register the 'ns3::DlMap' class */
    PyNs3DlMap_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DlMap_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DlMap", (PyObject *) &PyNs3DlMap_Type);
    /* Register the 'ns3::DsaAck' class */
    PyNs3DsaAck_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DsaAck_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DsaAck", (PyObject *) &PyNs3DsaAck_Type);
    /* Register the 'ns3::DsaReq' class */
    PyNs3DsaReq_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DsaReq_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DsaReq", (PyObject *) &PyNs3DsaReq_Type);
    /* Register the 'ns3::DsaRsp' class */
    PyNs3DsaRsp_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3DsaRsp_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DsaRsp", (PyObject *) &PyNs3DsaRsp_Type);
    /* Register the 'ns3::FragmentationSubheader' class */
    PyNs3FragmentationSubheader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3FragmentationSubheader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FragmentationSubheader", (PyObject *) &PyNs3FragmentationSubheader_Type);
    /* Register the 'ns3::GenericMacHeader' class */
    PyNs3GenericMacHeader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3GenericMacHeader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GenericMacHeader", (PyObject *) &PyNs3GenericMacHeader_Type);
    /* Register the 'ns3::GrantManagementSubheader' class */
    PyNs3GrantManagementSubheader_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3GrantManagementSubheader_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "GrantManagementSubheader", (PyObject *) &PyNs3GrantManagementSubheader_Type);
    /* Register the 'ns3::IpcsClassifier' class */
    PyNs3IpcsClassifier_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3IpcsClassifier_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "IpcsClassifier", (PyObject *) &PyNs3IpcsClassifier_Type);
    /* Register the 'ns3::SimpleOfdmWimaxPhy' class */
    PyNs3SimpleOfdmWimaxPhy_Type.tp_base = &PyNs3WimaxPhy_Type;
    if (PyType_Ready(&PyNs3SimpleOfdmWimaxPhy_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleOfdmWimaxPhy", (PyObject *) &PyNs3SimpleOfdmWimaxPhy_Type);
    /* Register the 'ns3::WimaxChannel' class */
    PyNs3WimaxChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3WimaxChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WimaxChannel", (PyObject *) &PyNs3WimaxChannel_Type);
    /* Register the 'ns3::WimaxNetDevice' class */
    
    PyNs3WimaxNetDeviceMeta_Type.tp_base = PyNs3NetDevice_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3WimaxNetDeviceMeta_Type.tp_traverse = PyNs3NetDevice_Type.ob_type->tp_traverse;
    PyNs3WimaxNetDeviceMeta_Type.tp_clear = PyNs3NetDevice_Type.ob_type->tp_clear;
    PyNs3WimaxNetDeviceMeta_Type.tp_is_gc = PyNs3NetDevice_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3WimaxNetDeviceMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3WimaxNetDeviceMeta_Type);
    
    PyNs3WimaxNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    PyNs3WimaxNetDevice_Type.ob_type = &PyNs3WimaxNetDeviceMeta_Type;
    if (PyType_Ready(&PyNs3WimaxNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WimaxNetDevice", (PyObject *) &PyNs3WimaxNetDevice_Type);
    /* Register the 'ns3::BaseStationNetDevice' class */
    PyNs3BaseStationNetDevice_Type.tp_base = &PyNs3WimaxNetDevice_Type;
    if (PyType_Ready(&PyNs3BaseStationNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BaseStationNetDevice", (PyObject *) &PyNs3BaseStationNetDevice_Type);
    /* Register the 'ns3::SimpleOfdmWimaxChannel' class */
    PyNs3SimpleOfdmWimaxChannel_Type.tp_base = &PyNs3WimaxChannel_Type;
    if (PyType_Ready(&PyNs3SimpleOfdmWimaxChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleOfdmWimaxChannel", (PyObject *) &PyNs3SimpleOfdmWimaxChannel_Type);
    /* Register the 'ns3::SubscriberStationNetDevice' class */
    PyNs3SubscriberStationNetDevice_Type.tp_base = &PyNs3WimaxNetDevice_Type;
    if (PyType_Ready(&PyNs3SubscriberStationNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SubscriberStationNetDevice", (PyObject *) &PyNs3SubscriberStationNetDevice_Type);
    /* Register the 'ns3::Histogram' class */
    if (PyType_Ready(&PyNs3Histogram_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Histogram", (PyObject *) &PyNs3Histogram_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier> >' class */
    PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::FlowProbe, ns3::empty, ns3::DefaultDeleter<ns3::FlowProbe> >' class */
    PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt___Type);
    /* Register the 'ns3::FlowClassifier' class */
    PyNs3FlowClassifier_Type.tp_base = &PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___Type;
    if (PyType_Ready(&PyNs3FlowClassifier_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FlowClassifier", (PyObject *) &PyNs3FlowClassifier_Type);
    /* Register the 'ns3::FlowMonitor' class */
    PyNs3FlowMonitor_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3FlowMonitor_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FlowMonitor", (PyObject *) &PyNs3FlowMonitor_Type);
    /* Register the 'ns3::FlowMonitor::FlowStats' class */
    if (PyType_Ready(&PyNs3FlowMonitorFlowStats_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3FlowMonitor_Type.tp_dict, (char *) "FlowStats", (PyObject *) &PyNs3FlowMonitorFlowStats_Type);
    /* Register the 'ns3::FlowProbe' class */
    PyNs3FlowProbe_Type.tp_base = &PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt___Type;
    if (PyType_Ready(&PyNs3FlowProbe_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FlowProbe", (PyObject *) &PyNs3FlowProbe_Type);
    /* Register the 'ns3::FlowProbe::FlowStats' class */
    if (PyType_Ready(&PyNs3FlowProbeFlowStats_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3FlowProbe_Type.tp_dict, (char *) "FlowStats", (PyObject *) &PyNs3FlowProbeFlowStats_Type);
    /* Register the 'ns3::Ipv4FlowClassifier' class */
    PyNs3Ipv4FlowClassifier_Type.tp_base = &PyNs3FlowClassifier_Type;
    if (PyType_Ready(&PyNs3Ipv4FlowClassifier_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4FlowClassifier", (PyObject *) &PyNs3Ipv4FlowClassifier_Type);
    /* Register the 'ns3::Ipv4FlowClassifier::FiveTuple' class */
    if (PyType_Ready(&PyNs3Ipv4FlowClassifierFiveTuple_Type)) {
        return;
    }
    PyDict_SetItemString((PyObject*) PyNs3Ipv4FlowClassifier_Type.tp_dict, (char *) "FiveTuple", (PyObject *) &PyNs3Ipv4FlowClassifierFiveTuple_Type);
    /* Register the 'ns3::Ipv4FlowProbe' class */
    PyNs3Ipv4FlowProbe_Type.tp_base = &PyNs3FlowProbe_Type;
    if (PyType_Ready(&PyNs3Ipv4FlowProbe_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4FlowProbe", (PyObject *) &PyNs3Ipv4FlowProbe_Type);
    /* Register the 'ns3::Ipv4NixVectorRouting' class */
    PyNs3Ipv4NixVectorRouting_Type.tp_base = &PyNs3Ipv4RoutingProtocol_Type;
    if (PyType_Ready(&PyNs3Ipv4NixVectorRouting_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4NixVectorRouting", (PyObject *) &PyNs3Ipv4NixVectorRouting_Type);
    /* Register the 'ns3::OlsrState' class */
    if (PyType_Ready(&PyNs3OlsrState_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OlsrState", (PyObject *) &PyNs3OlsrState_Type);
    /* Register the 'ns3::Ping6' class */
    PyNs3Ping6_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3Ping6_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ping6", (PyObject *) &PyNs3Ping6_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::RadvdInterface, ns3::empty, ns3::DefaultDeleter<ns3::RadvdInterface> >' class */
    PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::RadvdPrefix, ns3::empty, ns3::DefaultDeleter<ns3::RadvdPrefix> >' class */
    PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt___Type);
    /* Register the 'ns3::Radvd' class */
    
    PyNs3RadvdMeta_Type.tp_base = PyNs3Application_Type.ob_type;
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3RadvdMeta_Type.tp_traverse = PyNs3Application_Type.ob_type->tp_traverse;
    PyNs3RadvdMeta_Type.tp_clear = PyNs3Application_Type.ob_type->tp_clear;
    PyNs3RadvdMeta_Type.tp_is_gc = PyNs3Application_Type.ob_type->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3RadvdMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3RadvdMeta_Type);
    
    PyNs3Radvd_Type.tp_base = &PyNs3Application_Type;
    PyNs3Radvd_Type.ob_type = &PyNs3RadvdMeta_Type;
    if (PyType_Ready(&PyNs3Radvd_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Radvd", (PyObject *) &PyNs3Radvd_Type);
    /* Register the 'ns3::RadvdInterface' class */
    PyNs3RadvdInterface_Type.tp_base = &PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt___Type;
    if (PyType_Ready(&PyNs3RadvdInterface_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RadvdInterface", (PyObject *) &PyNs3RadvdInterface_Type);
    /* Register the 'ns3::RadvdPrefix' class */
    PyNs3RadvdPrefix_Type.tp_base = &PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt___Type;
    if (PyType_Ready(&PyNs3RadvdPrefix_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "RadvdPrefix", (PyObject *) &PyNs3RadvdPrefix_Type);
    /* Register the 'ns3::PacketLossCounter' class */
    if (PyType_Ready(&PyNs3PacketLossCounter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketLossCounter", (PyObject *) &PyNs3PacketLossCounter_Type);
    /* Register the 'ns3::UdpClient' class */
    PyNs3UdpClient_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3UdpClient_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpClient", (PyObject *) &PyNs3UdpClient_Type);
    /* Register the 'ns3::UdpServer' class */
    PyNs3UdpServer_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3UdpServer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpServer", (PyObject *) &PyNs3UdpServer_Type);
    /* Register the 'ns3::UdpTraceClient' class */
    PyNs3UdpTraceClient_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3UdpTraceClient_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpTraceClient", (PyObject *) &PyNs3UdpTraceClient_Type);
    /* Register the 'ns3::UdpEchoClient' class */
    PyNs3UdpEchoClient_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3UdpEchoClient_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpEchoClient", (PyObject *) &PyNs3UdpEchoClient_Type);
    /* Register the 'ns3::UdpEchoServer' class */
    PyNs3UdpEchoServer_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3UdpEchoServer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpEchoServer", (PyObject *) &PyNs3UdpEchoServer_Type);
    /* Register the 'ns3::MeshWifiBeacon' class */
    if (PyType_Ready(&PyNs3MeshWifiBeacon_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MeshWifiBeacon", (PyObject *) &PyNs3MeshWifiBeacon_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> >' class */
    PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type);
    /* Register the 'ns3::MeshInformationElementVector' class */
    PyNs3MeshInformationElementVector_Type.tp_base = &PyNs3WifiInformationElementVector_Type;
    if (PyType_Ready(&PyNs3MeshInformationElementVector_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MeshInformationElementVector", (PyObject *) &PyNs3MeshInformationElementVector_Type);
    /* Register the 'ns3::MeshL2RoutingProtocol' class */
    PyNs3MeshL2RoutingProtocol_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MeshL2RoutingProtocol_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MeshL2RoutingProtocol", (PyObject *) &PyNs3MeshL2RoutingProtocol_Type);
    /* Register the 'ns3::MeshWifiInterfaceMac' class */
    PyNs3MeshWifiInterfaceMac_Type.tp_base = &PyNs3WifiMac_Type;
    if (PyType_Ready(&PyNs3MeshWifiInterfaceMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MeshWifiInterfaceMac", (PyObject *) &PyNs3MeshWifiInterfaceMac_Type);
    /* Register the 'ns3::MeshWifiInterfaceMacPlugin' class */
    PyNs3MeshWifiInterfaceMacPlugin_Type.tp_base = &PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type;
    if (PyType_Ready(&PyNs3MeshWifiInterfaceMacPlugin_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MeshWifiInterfaceMacPlugin", (PyObject *) &PyNs3MeshWifiInterfaceMacPlugin_Type);
    /* Register the 'ns3::MeshPointDevice' class */
    PyNs3MeshPointDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3MeshPointDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MeshPointDevice", (PyObject *) &PyNs3MeshPointDevice_Type);
    /* Register the 'ns3::AdhocAlohaNoackIdealPhyHelper' class */
    if (PyType_Ready(&PyNs3AdhocAlohaNoackIdealPhyHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AdhocAlohaNoackIdealPhyHelper", (PyObject *) &PyNs3AdhocAlohaNoackIdealPhyHelper_Type);
    /* Register the 'ns3::AnimationInterface' class */
    if (PyType_Ready(&PyNs3AnimationInterface_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AnimationInterface", (PyObject *) &PyNs3AnimationInterface_Type);
    /* Register the 'ns3::ApplicationContainer' class */
    if (PyType_Ready(&PyNs3ApplicationContainer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ApplicationContainer", (PyObject *) &PyNs3ApplicationContainer_Type);
    /* Register the 'ns3::AsciiTraceHelper' class */
    if (PyType_Ready(&PyNs3AsciiTraceHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AsciiTraceHelper", (PyObject *) &PyNs3AsciiTraceHelper_Type);
    /* Register the 'ns3::AsciiTraceHelperForDevice' class */
    if (PyType_Ready(&PyNs3AsciiTraceHelperForDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AsciiTraceHelperForDevice", (PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
    /* Register the 'ns3::AsciiTraceHelperForIpv4' class */
    if (PyType_Ready(&PyNs3AsciiTraceHelperForIpv4_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AsciiTraceHelperForIpv4", (PyObject *) &PyNs3AsciiTraceHelperForIpv4_Type);
    /* Register the 'ns3::AsciiTraceHelperForIpv6' class */
    if (PyType_Ready(&PyNs3AsciiTraceHelperForIpv6_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AsciiTraceHelperForIpv6", (PyObject *) &PyNs3AsciiTraceHelperForIpv6_Type);
    /* Register the 'ns3::AthstatsHelper' class */
    if (PyType_Ready(&PyNs3AthstatsHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AthstatsHelper", (PyObject *) &PyNs3AthstatsHelper_Type);
    /* Register the 'ns3::BridgeHelper' class */
    if (PyType_Ready(&PyNs3BridgeHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BridgeHelper", (PyObject *) &PyNs3BridgeHelper_Type);
    /* Register the 'ns3::CsmaStarHelper' class */
    if (PyType_Ready(&PyNs3CsmaStarHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CsmaStarHelper", (PyObject *) &PyNs3CsmaStarHelper_Type);
    /* Register the 'ns3::FlowMonitorHelper' class */
    if (PyType_Ready(&PyNs3FlowMonitorHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FlowMonitorHelper", (PyObject *) &PyNs3FlowMonitorHelper_Type);
    /* Register the 'ns3::Ipv4AddressHelper' class */
    if (PyType_Ready(&PyNs3Ipv4AddressHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4AddressHelper", (PyObject *) &PyNs3Ipv4AddressHelper_Type);
    /* Register the 'ns3::Ipv4InterfaceContainer' class */
    if (PyType_Ready(&PyNs3Ipv4InterfaceContainer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4InterfaceContainer", (PyObject *) &PyNs3Ipv4InterfaceContainer_Type);
    /* Register the 'ns3::Ipv4RoutingHelper' class */
    if (PyType_Ready(&PyNs3Ipv4RoutingHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4RoutingHelper", (PyObject *) &PyNs3Ipv4RoutingHelper_Type);
    /* Register the 'ns3::Ipv4StaticRoutingHelper' class */
    PyNs3Ipv4StaticRoutingHelper_Type.tp_base = &PyNs3Ipv4RoutingHelper_Type;
    if (PyType_Ready(&PyNs3Ipv4StaticRoutingHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4StaticRoutingHelper", (PyObject *) &PyNs3Ipv4StaticRoutingHelper_Type);
    /* Register the 'ns3::Ipv6AddressHelper' class */
    if (PyType_Ready(&PyNs3Ipv6AddressHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6AddressHelper", (PyObject *) &PyNs3Ipv6AddressHelper_Type);
    /* Register the 'ns3::Ipv6InterfaceContainer' class */
    if (PyType_Ready(&PyNs3Ipv6InterfaceContainer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6InterfaceContainer", (PyObject *) &PyNs3Ipv6InterfaceContainer_Type);
    /* Register the 'ns3::Ipv6RoutingHelper' class */
    if (PyType_Ready(&PyNs3Ipv6RoutingHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6RoutingHelper", (PyObject *) &PyNs3Ipv6RoutingHelper_Type);
    /* Register the 'ns3::Ipv6StaticRoutingHelper' class */
    PyNs3Ipv6StaticRoutingHelper_Type.tp_base = &PyNs3Ipv6RoutingHelper_Type;
    if (PyType_Ready(&PyNs3Ipv6StaticRoutingHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6StaticRoutingHelper", (PyObject *) &PyNs3Ipv6StaticRoutingHelper_Type);
    /* Register the 'ns3::MeshHelper' class */
    if (PyType_Ready(&PyNs3MeshHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MeshHelper", (PyObject *) &PyNs3MeshHelper_Type);
    /* Register the 'ns3::MobilityHelper' class */
    if (PyType_Ready(&PyNs3MobilityHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MobilityHelper", (PyObject *) &PyNs3MobilityHelper_Type);
    /* Register the 'ns3::NetDeviceContainer' class */
    if (PyType_Ready(&PyNs3NetDeviceContainer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NetDeviceContainer", (PyObject *) &PyNs3NetDeviceContainer_Type);
    /* Register the 'ns3::NodeContainer' class */
    if (PyType_Ready(&PyNs3NodeContainer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NodeContainer", (PyObject *) &PyNs3NodeContainer_Type);
    /* Register the 'ns3::Ns2MobilityHelper' class */
    if (PyType_Ready(&PyNs3Ns2MobilityHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ns2MobilityHelper", (PyObject *) &PyNs3Ns2MobilityHelper_Type);
    /* Register the 'ns3::OlsrHelper' class */
    PyNs3OlsrHelper_Type.tp_base = &PyNs3Ipv4RoutingHelper_Type;
    if (PyType_Ready(&PyNs3OlsrHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OlsrHelper", (PyObject *) &PyNs3OlsrHelper_Type);
    /* Register the 'ns3::OnOffHelper' class */
    if (PyType_Ready(&PyNs3OnOffHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "OnOffHelper", (PyObject *) &PyNs3OnOffHelper_Type);
    /* Register the 'ns3::PacketSinkHelper' class */
    if (PyType_Ready(&PyNs3PacketSinkHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketSinkHelper", (PyObject *) &PyNs3PacketSinkHelper_Type);
    /* Register the 'ns3::PacketSocketHelper' class */
    if (PyType_Ready(&PyNs3PacketSocketHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PacketSocketHelper", (PyObject *) &PyNs3PacketSocketHelper_Type);
    /* Register the 'ns3::PcapHelper' class */
    if (PyType_Ready(&PyNs3PcapHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PcapHelper", (PyObject *) &PyNs3PcapHelper_Type);
    /* Register the 'ns3::PcapHelperForDevice' class */
    if (PyType_Ready(&PyNs3PcapHelperForDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PcapHelperForDevice", (PyObject *) &PyNs3PcapHelperForDevice_Type);
    /* Register the 'ns3::PcapHelperForIpv4' class */
    if (PyType_Ready(&PyNs3PcapHelperForIpv4_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PcapHelperForIpv4", (PyObject *) &PyNs3PcapHelperForIpv4_Type);
    /* Register the 'ns3::PcapHelperForIpv6' class */
    if (PyType_Ready(&PyNs3PcapHelperForIpv6_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PcapHelperForIpv6", (PyObject *) &PyNs3PcapHelperForIpv6_Type);
    /* Register the 'ns3::Ping6Helper' class */
    if (PyType_Ready(&PyNs3Ping6Helper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ping6Helper", (PyObject *) &PyNs3Ping6Helper_Type);
    /* Register the 'ns3::PointToPointDumbbellHelper' class */
    if (PyType_Ready(&PyNs3PointToPointDumbbellHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointToPointDumbbellHelper", (PyObject *) &PyNs3PointToPointDumbbellHelper_Type);
    /* Register the 'ns3::PointToPointGridHelper' class */
    if (PyType_Ready(&PyNs3PointToPointGridHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointToPointGridHelper", (PyObject *) &PyNs3PointToPointGridHelper_Type);
    /* Register the 'ns3::PointToPointHelper' class */
    PyNs3PointToPointHelper_Type.tp_base = &PyNs3PcapHelperForDevice_Type;
    PyNs3PointToPointHelper_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3PcapHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3PointToPointHelper_Type.tp_bases, 0, (PyObject *) &PyNs3PcapHelperForDevice_Type);
        Py_INCREF((PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3PointToPointHelper_Type.tp_bases, 1, (PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
    if (PyType_Ready(&PyNs3PointToPointHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointToPointHelper", (PyObject *) &PyNs3PointToPointHelper_Type);
    /* Register the 'ns3::PointToPointStarHelper' class */
    if (PyType_Ready(&PyNs3PointToPointStarHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "PointToPointStarHelper", (PyObject *) &PyNs3PointToPointStarHelper_Type);
    /* Register the 'ns3::SpectrumAnalyzerHelper' class */
    if (PyType_Ready(&PyNs3SpectrumAnalyzerHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumAnalyzerHelper", (PyObject *) &PyNs3SpectrumAnalyzerHelper_Type);
    /* Register the 'ns3::SpectrumChannelHelper' class */
    if (PyType_Ready(&PyNs3SpectrumChannelHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumChannelHelper", (PyObject *) &PyNs3SpectrumChannelHelper_Type);
    /* Register the 'ns3::SpectrumPhyHelper' class */
    if (PyType_Ready(&PyNs3SpectrumPhyHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SpectrumPhyHelper", (PyObject *) &PyNs3SpectrumPhyHelper_Type);
    /* Register the 'ns3::TopologyReaderHelper' class */
    if (PyType_Ready(&PyNs3TopologyReaderHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "TopologyReaderHelper", (PyObject *) &PyNs3TopologyReaderHelper_Type);
    /* Register the 'ns3::UdpClientHelper' class */
    if (PyType_Ready(&PyNs3UdpClientHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpClientHelper", (PyObject *) &PyNs3UdpClientHelper_Type);
    /* Register the 'ns3::UdpEchoClientHelper' class */
    if (PyType_Ready(&PyNs3UdpEchoClientHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpEchoClientHelper", (PyObject *) &PyNs3UdpEchoClientHelper_Type);
    /* Register the 'ns3::UdpEchoServerHelper' class */
    if (PyType_Ready(&PyNs3UdpEchoServerHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpEchoServerHelper", (PyObject *) &PyNs3UdpEchoServerHelper_Type);
    /* Register the 'ns3::UdpServerHelper' class */
    if (PyType_Ready(&PyNs3UdpServerHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpServerHelper", (PyObject *) &PyNs3UdpServerHelper_Type);
    /* Register the 'ns3::UdpTraceClientHelper' class */
    if (PyType_Ready(&PyNs3UdpTraceClientHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UdpTraceClientHelper", (PyObject *) &PyNs3UdpTraceClientHelper_Type);
    /* Register the 'ns3::V4PingHelper' class */
    if (PyType_Ready(&PyNs3V4PingHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "V4PingHelper", (PyObject *) &PyNs3V4PingHelper_Type);
    /* Register the 'ns3::WaveformGeneratorHelper' class */
    if (PyType_Ready(&PyNs3WaveformGeneratorHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WaveformGeneratorHelper", (PyObject *) &PyNs3WaveformGeneratorHelper_Type);
    /* Register the 'ns3::WifiHelper' class */
    if (PyType_Ready(&PyNs3WifiHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiHelper", (PyObject *) &PyNs3WifiHelper_Type);
    /* Register the 'ns3::WifiMacHelper' class */
    if (PyType_Ready(&PyNs3WifiMacHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiMacHelper", (PyObject *) &PyNs3WifiMacHelper_Type);
    /* Register the 'ns3::WifiPhyHelper' class */
    if (PyType_Ready(&PyNs3WifiPhyHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiPhyHelper", (PyObject *) &PyNs3WifiPhyHelper_Type);
    /* Register the 'ns3::WimaxHelper' class */
    PyNs3WimaxHelper_Type.tp_base = &PyNs3PcapHelperForDevice_Type;
    PyNs3WimaxHelper_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3PcapHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3WimaxHelper_Type.tp_bases, 0, (PyObject *) &PyNs3PcapHelperForDevice_Type);
        Py_INCREF((PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3WimaxHelper_Type.tp_bases, 1, (PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
    if (PyType_Ready(&PyNs3WimaxHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WimaxHelper", (PyObject *) &PyNs3WimaxHelper_Type);
    /* Register the 'ns3::YansWifiChannelHelper' class */
    if (PyType_Ready(&PyNs3YansWifiChannelHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "YansWifiChannelHelper", (PyObject *) &PyNs3YansWifiChannelHelper_Type);
    /* Register the 'ns3::YansWifiPhyHelper' class */
    PyNs3YansWifiPhyHelper_Type.tp_base = &PyNs3WifiPhyHelper_Type;
    PyNs3YansWifiPhyHelper_Type.tp_bases = PyTuple_New(3);
        Py_INCREF((PyObject *) &PyNs3WifiPhyHelper_Type);
        PyTuple_SET_ITEM(PyNs3YansWifiPhyHelper_Type.tp_bases, 0, (PyObject *) &PyNs3WifiPhyHelper_Type);
        Py_INCREF((PyObject *) &PyNs3PcapHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3YansWifiPhyHelper_Type.tp_bases, 1, (PyObject *) &PyNs3PcapHelperForDevice_Type);
        Py_INCREF((PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3YansWifiPhyHelper_Type.tp_bases, 2, (PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
    if (PyType_Ready(&PyNs3YansWifiPhyHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "YansWifiPhyHelper", (PyObject *) &PyNs3YansWifiPhyHelper_Type);
    /* Register the 'ns3::AodvHelper' class */
    PyNs3AodvHelper_Type.tp_base = &PyNs3Ipv4RoutingHelper_Type;
    if (PyType_Ready(&PyNs3AodvHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AodvHelper", (PyObject *) &PyNs3AodvHelper_Type);
    /* Register the 'ns3::CsmaHelper' class */
    PyNs3CsmaHelper_Type.tp_base = &PyNs3PcapHelperForDevice_Type;
    PyNs3CsmaHelper_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3PcapHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3CsmaHelper_Type.tp_bases, 0, (PyObject *) &PyNs3PcapHelperForDevice_Type);
        Py_INCREF((PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
        PyTuple_SET_ITEM(PyNs3CsmaHelper_Type.tp_bases, 1, (PyObject *) &PyNs3AsciiTraceHelperForDevice_Type);
    if (PyType_Ready(&PyNs3CsmaHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CsmaHelper", (PyObject *) &PyNs3CsmaHelper_Type);
    /* Register the 'ns3::InternetStackHelper' class */
    PyNs3InternetStackHelper_Type.tp_base = &PyNs3PcapHelperForIpv4_Type;
    PyNs3InternetStackHelper_Type.tp_bases = PyTuple_New(4);
        Py_INCREF((PyObject *) &PyNs3PcapHelperForIpv4_Type);
        PyTuple_SET_ITEM(PyNs3InternetStackHelper_Type.tp_bases, 0, (PyObject *) &PyNs3PcapHelperForIpv4_Type);
        Py_INCREF((PyObject *) &PyNs3PcapHelperForIpv6_Type);
        PyTuple_SET_ITEM(PyNs3InternetStackHelper_Type.tp_bases, 1, (PyObject *) &PyNs3PcapHelperForIpv6_Type);
        Py_INCREF((PyObject *) &PyNs3AsciiTraceHelperForIpv4_Type);
        PyTuple_SET_ITEM(PyNs3InternetStackHelper_Type.tp_bases, 2, (PyObject *) &PyNs3AsciiTraceHelperForIpv4_Type);
        Py_INCREF((PyObject *) &PyNs3AsciiTraceHelperForIpv6_Type);
        PyTuple_SET_ITEM(PyNs3InternetStackHelper_Type.tp_bases, 3, (PyObject *) &PyNs3AsciiTraceHelperForIpv6_Type);
    if (PyType_Ready(&PyNs3InternetStackHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "InternetStackHelper", (PyObject *) &PyNs3InternetStackHelper_Type);
    /* Register the 'ns3::Ipv4GlobalRoutingHelper' class */
    PyNs3Ipv4GlobalRoutingHelper_Type.tp_base = &PyNs3Ipv4RoutingHelper_Type;
    if (PyType_Ready(&PyNs3Ipv4GlobalRoutingHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4GlobalRoutingHelper", (PyObject *) &PyNs3Ipv4GlobalRoutingHelper_Type);
    /* Register the 'ns3::Ipv4ListRoutingHelper' class */
    PyNs3Ipv4ListRoutingHelper_Type.tp_base = &PyNs3Ipv4RoutingHelper_Type;
    if (PyType_Ready(&PyNs3Ipv4ListRoutingHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4ListRoutingHelper", (PyObject *) &PyNs3Ipv4ListRoutingHelper_Type);
    /* Register the 'ns3::Ipv4NixVectorHelper' class */
    PyNs3Ipv4NixVectorHelper_Type.tp_base = &PyNs3Ipv4RoutingHelper_Type;
    if (PyType_Ready(&PyNs3Ipv4NixVectorHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv4NixVectorHelper", (PyObject *) &PyNs3Ipv4NixVectorHelper_Type);
    /* Register the 'ns3::Ipv6ListRoutingHelper' class */
    PyNs3Ipv6ListRoutingHelper_Type.tp_base = &PyNs3Ipv6RoutingHelper_Type;
    if (PyType_Ready(&PyNs3Ipv6ListRoutingHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ipv6ListRoutingHelper", (PyObject *) &PyNs3Ipv6ListRoutingHelper_Type);
    /* Register the 'ns3::NqosWifiMacHelper' class */
    PyNs3NqosWifiMacHelper_Type.tp_base = &PyNs3WifiMacHelper_Type;
    if (PyType_Ready(&PyNs3NqosWifiMacHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "NqosWifiMacHelper", (PyObject *) &PyNs3NqosWifiMacHelper_Type);
    /* Register the 'ns3::QosWifiMacHelper' class */
    PyNs3QosWifiMacHelper_Type.tp_base = &PyNs3WifiMacHelper_Type;
    if (PyType_Ready(&PyNs3QosWifiMacHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "QosWifiMacHelper", (PyObject *) &PyNs3QosWifiMacHelper_Type);
    /* Register the 'ns3::AthstatsWifiTraceSink' class */
    PyNs3AthstatsWifiTraceSink_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3AthstatsWifiTraceSink_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "AthstatsWifiTraceSink", (PyObject *) &PyNs3AthstatsWifiTraceSink_Type);
    /* Register the 'ns3::CanvasLocation' class */
    PyNs3CanvasLocation_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3CanvasLocation_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "CanvasLocation", (PyObject *) &PyNs3CanvasLocation_Type);
    /* Register the 'ns3::MeshStack' class */
    PyNs3MeshStack_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3MeshStack_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "MeshStack", (PyObject *) &PyNs3MeshStack_Type);
    /* Register the 'ns3::Dot11sStack' class */
    PyNs3Dot11sStack_Type.tp_base = &PyNs3MeshStack_Type;
    if (PyType_Ready(&PyNs3Dot11sStack_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Dot11sStack", (PyObject *) &PyNs3Dot11sStack_Type);
    /* Register the 'ns3::FlameStack' class */
    PyNs3FlameStack_Type.tp_base = &PyNs3MeshStack_Type;
    if (PyType_Ready(&PyNs3FlameStack_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "FlameStack", (PyObject *) &PyNs3FlameStack_Type);
    /* Register the 'ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> >' class */
    PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type);
    /* Register the 'ns3::DeviceEnergyModelContainer' class */
    if (PyType_Ready(&PyNs3DeviceEnergyModelContainer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DeviceEnergyModelContainer", (PyObject *) &PyNs3DeviceEnergyModelContainer_Type);
    /* Register the 'ns3::DeviceEnergyModelHelper' class */
    if (PyType_Ready(&PyNs3DeviceEnergyModelHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DeviceEnergyModelHelper", (PyObject *) &PyNs3DeviceEnergyModelHelper_Type);
    /* Register the 'ns3::EnergySourceHelper' class */
    if (PyType_Ready(&PyNs3EnergySourceHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EnergySourceHelper", (PyObject *) &PyNs3EnergySourceHelper_Type);
    /* Register the 'ns3::Reservation' class */
    if (PyType_Ready(&PyNs3Reservation_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Reservation", (PyObject *) &PyNs3Reservation_Type);
    /* Register the 'ns3::Tap' class */
    if (PyType_Ready(&PyNs3Tap_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Tap", (PyObject *) &PyNs3Tap_Type);
    /* Register the 'ns3::UanAddress' class */
    if (PyType_Ready(&PyNs3UanAddress_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanAddress", (PyObject *) &PyNs3UanAddress_Type);
    /* Register the 'ns3::UanHelper' class */
    if (PyType_Ready(&PyNs3UanHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanHelper", (PyObject *) &PyNs3UanHelper_Type);
    /* Register the 'ns3::UanModesList' class */
    if (PyType_Ready(&PyNs3UanModesList_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanModesList", (PyObject *) &PyNs3UanModesList_Type);
    /* Register the 'ns3::UanPacketArrival' class */
    if (PyType_Ready(&PyNs3UanPacketArrival_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPacketArrival", (PyObject *) &PyNs3UanPacketArrival_Type);
    /* Register the 'ns3::UanPdp' class */
    if (PyType_Ready(&PyNs3UanPdp_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPdp", (PyObject *) &PyNs3UanPdp_Type);
    /* Register the 'ns3::UanPhyListener' class */
    if (PyType_Ready(&PyNs3UanPhyListener_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyListener", (PyObject *) &PyNs3UanPhyListener_Type);
    /* Register the 'ns3::UanTxMode' class */
    if (PyType_Ready(&PyNs3UanTxMode_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanTxMode", (PyObject *) &PyNs3UanTxMode_Type);
    /* Register the 'ns3::UanTxModeFactory' class */
    if (PyType_Ready(&PyNs3UanTxModeFactory_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanTxModeFactory", (PyObject *) &PyNs3UanTxModeFactory_Type);
    /* Register the 'ns3::WifiRadioEnergyModelHelper' class */
    PyNs3WifiRadioEnergyModelHelper_Type.tp_base = &PyNs3DeviceEnergyModelHelper_Type;
    if (PyType_Ready(&PyNs3WifiRadioEnergyModelHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiRadioEnergyModelHelper", (PyObject *) &PyNs3WifiRadioEnergyModelHelper_Type);
    /* Register the 'ns3::BasicEnergySourceHelper' class */
    PyNs3BasicEnergySourceHelper_Type.tp_base = &PyNs3EnergySourceHelper_Type;
    if (PyType_Ready(&PyNs3BasicEnergySourceHelper_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BasicEnergySourceHelper", (PyObject *) &PyNs3BasicEnergySourceHelper_Type);
    /* Register the 'ns3::UanHeaderCommon' class */
    PyNs3UanHeaderCommon_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UanHeaderCommon_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanHeaderCommon", (PyObject *) &PyNs3UanHeaderCommon_Type);
    /* Register the 'ns3::UanHeaderRcAck' class */
    PyNs3UanHeaderRcAck_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UanHeaderRcAck_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanHeaderRcAck", (PyObject *) &PyNs3UanHeaderRcAck_Type);
    /* Register the 'ns3::UanHeaderRcCts' class */
    PyNs3UanHeaderRcCts_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UanHeaderRcCts_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanHeaderRcCts", (PyObject *) &PyNs3UanHeaderRcCts_Type);
    /* Register the 'ns3::UanHeaderRcCtsGlobal' class */
    PyNs3UanHeaderRcCtsGlobal_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UanHeaderRcCtsGlobal_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanHeaderRcCtsGlobal", (PyObject *) &PyNs3UanHeaderRcCtsGlobal_Type);
    /* Register the 'ns3::UanHeaderRcData' class */
    PyNs3UanHeaderRcData_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UanHeaderRcData_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanHeaderRcData", (PyObject *) &PyNs3UanHeaderRcData_Type);
    /* Register the 'ns3::UanHeaderRcRts' class */
    PyNs3UanHeaderRcRts_Type.tp_base = &PyNs3Header_Type;
    if (PyType_Ready(&PyNs3UanHeaderRcRts_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanHeaderRcRts", (PyObject *) &PyNs3UanHeaderRcRts_Type);
    /* Register the 'ns3::UanMac' class */
    PyNs3UanMac_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UanMac_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanMac", (PyObject *) &PyNs3UanMac_Type);
    /* Register the 'ns3::UanMacAloha' class */
    PyNs3UanMacAloha_Type.tp_base = &PyNs3UanMac_Type;
    if (PyType_Ready(&PyNs3UanMacAloha_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanMacAloha", (PyObject *) &PyNs3UanMacAloha_Type);
    /* Register the 'ns3::UanMacCw' class */
    PyNs3UanMacCw_Type.tp_base = &PyNs3UanMac_Type;
    PyNs3UanMacCw_Type.tp_bases = PyTuple_New(2);
        Py_INCREF((PyObject *) &PyNs3UanMac_Type);
        PyTuple_SET_ITEM(PyNs3UanMacCw_Type.tp_bases, 0, (PyObject *) &PyNs3UanMac_Type);
        Py_INCREF((PyObject *) &PyNs3UanPhyListener_Type);
        PyTuple_SET_ITEM(PyNs3UanMacCw_Type.tp_bases, 1, (PyObject *) &PyNs3UanPhyListener_Type);
    if (PyType_Ready(&PyNs3UanMacCw_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanMacCw", (PyObject *) &PyNs3UanMacCw_Type);
    /* Register the 'ns3::UanMacRc' class */
    PyNs3UanMacRc_Type.tp_base = &PyNs3UanMac_Type;
    if (PyType_Ready(&PyNs3UanMacRc_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanMacRc", (PyObject *) &PyNs3UanMacRc_Type);
    /* Register the 'ns3::UanMacRcGw' class */
    PyNs3UanMacRcGw_Type.tp_base = &PyNs3UanMac_Type;
    if (PyType_Ready(&PyNs3UanMacRcGw_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanMacRcGw", (PyObject *) &PyNs3UanMacRcGw_Type);
    /* Register the 'ns3::UanNoiseModel' class */
    PyNs3UanNoiseModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UanNoiseModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanNoiseModel", (PyObject *) &PyNs3UanNoiseModel_Type);
    /* Register the 'ns3::UanNoiseModelDefault' class */
    PyNs3UanNoiseModelDefault_Type.tp_base = &PyNs3UanNoiseModel_Type;
    if (PyType_Ready(&PyNs3UanNoiseModelDefault_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanNoiseModelDefault", (PyObject *) &PyNs3UanNoiseModelDefault_Type);
    /* Register the 'ns3::UanPhy' class */
    PyNs3UanPhy_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UanPhy_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhy", (PyObject *) &PyNs3UanPhy_Type);
    /* Register the 'ns3::UanPhyCalcSinr' class */
    PyNs3UanPhyCalcSinr_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UanPhyCalcSinr_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyCalcSinr", (PyObject *) &PyNs3UanPhyCalcSinr_Type);
    /* Register the 'ns3::UanPhyCalcSinrDefault' class */
    PyNs3UanPhyCalcSinrDefault_Type.tp_base = &PyNs3UanPhyCalcSinr_Type;
    if (PyType_Ready(&PyNs3UanPhyCalcSinrDefault_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyCalcSinrDefault", (PyObject *) &PyNs3UanPhyCalcSinrDefault_Type);
    /* Register the 'ns3::UanPhyCalcSinrDual' class */
    PyNs3UanPhyCalcSinrDual_Type.tp_base = &PyNs3UanPhyCalcSinr_Type;
    if (PyType_Ready(&PyNs3UanPhyCalcSinrDual_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyCalcSinrDual", (PyObject *) &PyNs3UanPhyCalcSinrDual_Type);
    /* Register the 'ns3::UanPhyCalcSinrFhFsk' class */
    PyNs3UanPhyCalcSinrFhFsk_Type.tp_base = &PyNs3UanPhyCalcSinr_Type;
    if (PyType_Ready(&PyNs3UanPhyCalcSinrFhFsk_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyCalcSinrFhFsk", (PyObject *) &PyNs3UanPhyCalcSinrFhFsk_Type);
    /* Register the 'ns3::UanPhyDual' class */
    PyNs3UanPhyDual_Type.tp_base = &PyNs3UanPhy_Type;
    if (PyType_Ready(&PyNs3UanPhyDual_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyDual", (PyObject *) &PyNs3UanPhyDual_Type);
    /* Register the 'ns3::UanPhyGen' class */
    PyNs3UanPhyGen_Type.tp_base = &PyNs3UanPhy_Type;
    if (PyType_Ready(&PyNs3UanPhyGen_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyGen", (PyObject *) &PyNs3UanPhyGen_Type);
    /* Register the 'ns3::UanPhyPer' class */
    PyNs3UanPhyPer_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UanPhyPer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyPer", (PyObject *) &PyNs3UanPhyPer_Type);
    /* Register the 'ns3::UanPhyPerGenDefault' class */
    PyNs3UanPhyPerGenDefault_Type.tp_base = &PyNs3UanPhyPer_Type;
    if (PyType_Ready(&PyNs3UanPhyPerGenDefault_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyPerGenDefault", (PyObject *) &PyNs3UanPhyPerGenDefault_Type);
    /* Register the 'ns3::UanPhyPerUmodem' class */
    PyNs3UanPhyPerUmodem_Type.tp_base = &PyNs3UanPhyPer_Type;
    if (PyType_Ready(&PyNs3UanPhyPerUmodem_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPhyPerUmodem", (PyObject *) &PyNs3UanPhyPerUmodem_Type);
    /* Register the 'ns3::UanPropModel' class */
    PyNs3UanPropModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UanPropModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPropModel", (PyObject *) &PyNs3UanPropModel_Type);
    /* Register the 'ns3::UanPropModelIdeal' class */
    PyNs3UanPropModelIdeal_Type.tp_base = &PyNs3UanPropModel_Type;
    if (PyType_Ready(&PyNs3UanPropModelIdeal_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPropModelIdeal", (PyObject *) &PyNs3UanPropModelIdeal_Type);
    /* Register the 'ns3::UanPropModelThorp' class */
    PyNs3UanPropModelThorp_Type.tp_base = &PyNs3UanPropModel_Type;
    if (PyType_Ready(&PyNs3UanPropModelThorp_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanPropModelThorp", (PyObject *) &PyNs3UanPropModelThorp_Type);
    /* Register the 'ns3::UanTransducer' class */
    PyNs3UanTransducer_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3UanTransducer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanTransducer", (PyObject *) &PyNs3UanTransducer_Type);
    /* Register the 'ns3::UanTransducerHd' class */
    PyNs3UanTransducerHd_Type.tp_base = &PyNs3UanTransducer_Type;
    if (PyType_Ready(&PyNs3UanTransducerHd_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanTransducerHd", (PyObject *) &PyNs3UanTransducerHd_Type);
    /* Register the 'ns3::DeviceEnergyModel' class */
    PyNs3DeviceEnergyModel_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3DeviceEnergyModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "DeviceEnergyModel", (PyObject *) &PyNs3DeviceEnergyModel_Type);
    /* Register the 'ns3::EnergySource' class */
    PyNs3EnergySource_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3EnergySource_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EnergySource", (PyObject *) &PyNs3EnergySource_Type);
    /* Register the 'ns3::EnergySourceContainer' class */
    PyNs3EnergySourceContainer_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3EnergySourceContainer_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "EnergySourceContainer", (PyObject *) &PyNs3EnergySourceContainer_Type);
    /* Register the 'ns3::UanChannel' class */
    PyNs3UanChannel_Type.tp_base = &PyNs3Channel_Type;
    if (PyType_Ready(&PyNs3UanChannel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanChannel", (PyObject *) &PyNs3UanChannel_Type);
    /* Register the 'ns3::UanModesListChecker' class */
    PyNs3UanModesListChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3UanModesListChecker_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanModesListChecker", (PyObject *) &PyNs3UanModesListChecker_Type);
    /* Register the 'ns3::UanModesListValue' class */
    PyNs3UanModesListValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3UanModesListValue_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanModesListValue", (PyObject *) &PyNs3UanModesListValue_Type);
    /* Register the 'ns3::UanNetDevice' class */
    PyNs3UanNetDevice_Type.tp_base = &PyNs3NetDevice_Type;
    if (PyType_Ready(&PyNs3UanNetDevice_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "UanNetDevice", (PyObject *) &PyNs3UanNetDevice_Type);
    /* Register the 'ns3::WifiRadioEnergyModel' class */
    PyNs3WifiRadioEnergyModel_Type.tp_base = &PyNs3DeviceEnergyModel_Type;
    if (PyType_Ready(&PyNs3WifiRadioEnergyModel_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "WifiRadioEnergyModel", (PyObject *) &PyNs3WifiRadioEnergyModel_Type);
    /* Register the 'ns3::BasicEnergySource' class */
    PyNs3BasicEnergySource_Type.tp_base = &PyNs3EnergySource_Type;
    if (PyType_Ready(&PyNs3BasicEnergySource_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "BasicEnergySource", (PyObject *) &PyNs3BasicEnergySource_Type);
    /* Register the '::std::ostream' class */
    if (PyType_Ready(&PyStdOstream_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ostream", (PyObject *) &PyStdOstream_Type);
    /* Register the '::std::ofstream' class */
    PyStdOfstream_Type.tp_base = &PyStdOstream_Type;
    if (PyType_Ready(&PyStdOfstream_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "ofstream", (PyObject *) &PyStdOfstream_Type);
    /* Register the 'ns3::SpectrumConverterMap_t' class */
    if (PyType_Ready(&Pyns3__SpectrumConverterMap_t_Type)) {
        return;
    }
    if (PyType_Ready(&Pyns3__SpectrumConverterMap_tIter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ns3__SpectrumConverterMap_t", (PyObject *) &Pyns3__SpectrumConverterMap_t_Type);
    PyModule_AddObject(m, (char *) "Ns3__SpectrumConverterMap_tIter", (PyObject *) &Pyns3__SpectrumConverterMap_tIter_Type);
    /* Register the 'ns3::Bands' class */
    if (PyType_Ready(&Pyns3__Bands_Type)) {
        return;
    }
    if (PyType_Ready(&Pyns3__BandsIter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ns3__Bands", (PyObject *) &Pyns3__Bands_Type);
    PyModule_AddObject(m, (char *) "Ns3__BandsIter", (PyObject *) &Pyns3__BandsIter_Type);
    /* Register the 'ns3::olsr::MprSet' class */
    if (PyType_Ready(&Pyns3__olsr__MprSet_Type)) {
        return;
    }
    if (PyType_Ready(&Pyns3__olsr__MprSetIter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ns3__olsr__MprSet", (PyObject *) &Pyns3__olsr__MprSet_Type);
    PyModule_AddObject(m, (char *) "Ns3__olsr__MprSetIter", (PyObject *) &Pyns3__olsr__MprSetIter_Type);
    /* Register the 'std::vector< ns3::Ipv4Address >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ipv4Address___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ipv4Address___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ipv4Address___gt__", (PyObject *) &Pystd__vector__lt___ns3__Ipv4Address___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ipv4Address___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ipv4Address___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ipv6Address >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ipv6Address___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ipv6Address___gt__", (PyObject *) &Pystd__vector__lt___ns3__Ipv6Address___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ipv6Address___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type);
    /* Register the 'ns3::WifiModeList' class */
    if (PyType_Ready(&Pyns3__WifiModeList_Type)) {
        return;
    }
    if (PyType_Ready(&Pyns3__WifiModeListIter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ns3__WifiModeList", (PyObject *) &Pyns3__WifiModeList_Type);
    PyModule_AddObject(m, (char *) "Ns3__WifiModeListIter", (PyObject *) &Pyns3__WifiModeListIter_Type);
    /* Register the 'std::vector< ns3::DlFramePrefixIe >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__DlFramePrefixIe___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__DlFramePrefixIe___gt__", (PyObject *) &Pystd__vector__lt___ns3__DlFramePrefixIe___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__DlFramePrefixIe___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter_Type);
    /* Register the 'std::vector< ns3::OfdmUlBurstProfile >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__OfdmUlBurstProfile___gt__", (PyObject *) &Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter_Type);
    /* Register the 'std::list< ns3::OfdmUlMapIe >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__OfdmUlMapIe___gt__", (PyObject *) &Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__OfdmUlMapIe___gt__Iter", (PyObject *) &Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter_Type);
    /* Register the 'std::vector< ns3::OfdmDlBurstProfile >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__OfdmDlBurstProfile___gt__", (PyObject *) &Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter_Type);
    /* Register the 'std::list< ns3::OfdmDlMapIe >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__OfdmDlMapIe___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__OfdmDlMapIe___gt__", (PyObject *) &Pystd__list__lt___ns3__OfdmDlMapIe___gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__OfdmDlMapIe___gt__Iter", (PyObject *) &Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter_Type);
    /* Register the 'std::map< unsigned int, ns3::FlowMonitor::FlowStats >' class */
    if (PyType_Ready(&Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__", (PyObject *) &Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__Iter", (PyObject *) &Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__Iter_Type);
    /* Register the 'std::map< unsigned int, ns3::FlowProbe::FlowStats >' class */
    if (PyType_Ready(&Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__", (PyObject *) &Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__Iter", (PyObject *) &Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__Iter_Type);
    /* Register the 'std::vector< unsigned int >' class */
    if (PyType_Ready(&Pystd__vector__lt___unsigned_int___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___unsigned_int___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_int___gt__", (PyObject *) &Pystd__vector__lt___unsigned_int___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_int___gt__Iter", (PyObject *) &Pystd__vector__lt___unsigned_int___gt__Iter_Type);
    /* Register the 'std::vector< bool >' class */
    if (PyType_Ready(&Pystd__vector__lt___bool___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___bool___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___bool___gt__", (PyObject *) &Pystd__vector__lt___bool___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___bool___gt__Iter", (PyObject *) &Pystd__vector__lt___bool___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Tap >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Tap___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Tap___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Tap___gt__", (PyObject *) &Pystd__vector__lt___ns3__Tap___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Tap___gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Tap___gt__Iter_Type);
    /* Register the 'std::vector< double >' class */
    if (PyType_Ready(&Pystd__vector__lt___double___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___double___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___double___gt__", (PyObject *) &Pystd__vector__lt___double___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___double___gt__Iter", (PyObject *) &Pystd__vector__lt___double___gt__Iter_Type);
    /* Register the 'ns3::bvec' class */
    if (PyType_Ready(&Pyns3__bvec_Type)) {
        return;
    }
    if (PyType_Ready(&Pyns3__bvecIter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Ns3__bvec", (PyObject *) &Pyns3__bvec_Type);
    PyModule_AddObject(m, (char *) "Ns3__bvecIter", (PyObject *) &Pyns3__bvecIter_Type);
    /* Register the 'std::map< std::string, std::string >' class */
    if (PyType_Ready(&Pystd__map__lt___std__string__std__string___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__map__lt___std__string__std__string___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___std__string__std__string___gt__", (PyObject *) &Pystd__map__lt___std__string__std__string___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___std__string__std__string___gt__Iter", (PyObject *) &Pystd__map__lt___std__string__std__string___gt__Iter_Type);
    /* Register the 'std::list< ns3::UanPacketArrival >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__UanPacketArrival___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__UanPacketArrival___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__UanPacketArrival___gt__", (PyObject *) &Pystd__list__lt___ns3__UanPacketArrival___gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__UanPacketArrival___gt__Iter", (PyObject *) &Pystd__list__lt___ns3__UanPacketArrival___gt__Iter_Type);
    /* Register the 'std::vector< unsigned long long >' class */
    if (PyType_Ready(&Pystd__vector__lt___unsigned_long_long___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__vector__lt___unsigned_long_long___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_long_long___gt__", (PyObject *) &Pystd__vector__lt___unsigned_long_long___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___unsigned_long_long___gt__Iter", (PyObject *) &Pystd__vector__lt___unsigned_long_long___gt__Iter_Type);
    /* Register the 'std::list< unsigned int >' class */
    if (PyType_Ready(&Pystd__list__lt___unsigned_int___gt___Type)) {
        return;
    }
    if (PyType_Ready(&Pystd__list__lt___unsigned_int___gt__Iter_Type)) {
        return;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___unsigned_int___gt__", (PyObject *) &Pystd__list__lt___unsigned_int___gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___unsigned_int___gt__Iter", (PyObject *) &Pystd__list__lt___unsigned_int___gt__Iter_Type);
    PyModule_AddObject(m, (char *) "VectorChecker", (PyObject *) &PyNs3Vector3DChecker_Type);
    PyModule_AddObject(m, (char *) "Vector", (PyObject *) &PyNs3Vector3D_Type);
    PyModule_AddObject(m, (char *) "VectorValue", (PyObject *) &PyNs3Vector3DValue_Type);
    PyModule_AddObject(m, (char *) "TimeInvert", (PyObject *) &PyNs3Time_Type);
    PyModule_AddObject(m, (char *) "TimeSquare", (PyObject *) &PyNs3Time_Type);
    PyModule_AddIntConstant(m, (char *) "LOG_NONE", ns3::LOG_NONE);
    PyModule_AddIntConstant(m, (char *) "LOG_ERROR", ns3::LOG_ERROR);
    PyModule_AddIntConstant(m, (char *) "LOG_LEVEL_ERROR", ns3::LOG_LEVEL_ERROR);
    PyModule_AddIntConstant(m, (char *) "LOG_WARN", ns3::LOG_WARN);
    PyModule_AddIntConstant(m, (char *) "LOG_LEVEL_WARN", ns3::LOG_LEVEL_WARN);
    PyModule_AddIntConstant(m, (char *) "LOG_DEBUG", ns3::LOG_DEBUG);
    PyModule_AddIntConstant(m, (char *) "LOG_LEVEL_DEBUG", ns3::LOG_LEVEL_DEBUG);
    PyModule_AddIntConstant(m, (char *) "LOG_INFO", ns3::LOG_INFO);
    PyModule_AddIntConstant(m, (char *) "LOG_LEVEL_INFO", ns3::LOG_LEVEL_INFO);
    PyModule_AddIntConstant(m, (char *) "LOG_FUNCTION", ns3::LOG_FUNCTION);
    PyModule_AddIntConstant(m, (char *) "LOG_LEVEL_FUNCTION", ns3::LOG_LEVEL_FUNCTION);
    PyModule_AddIntConstant(m, (char *) "LOG_LOGIC", ns3::LOG_LOGIC);
    PyModule_AddIntConstant(m, (char *) "LOG_LEVEL_LOGIC", ns3::LOG_LEVEL_LOGIC);
    PyModule_AddIntConstant(m, (char *) "LOG_ALL", ns3::LOG_ALL);
    PyModule_AddIntConstant(m, (char *) "LOG_LEVEL_ALL", ns3::LOG_LEVEL_ALL);
    PyModule_AddIntConstant(m, (char *) "LOG_PREFIX_FUNC", ns3::LOG_PREFIX_FUNC);
    PyModule_AddIntConstant(m, (char *) "LOG_PREFIX_TIME", ns3::LOG_PREFIX_TIME);
    PyModule_AddIntConstant(m, (char *) "LOG_PREFIX_NODE", ns3::LOG_PREFIX_NODE);
    {
        PyObject *tmp_value;
         // ns3::IntToType< 0 >::value
        tmp_value = PyInt_FromLong(ns3::IntToType< 0 >::value);
        PyDict_SetItemString((PyObject*) PyNs3IntToType__0_Type.tp_dict, "value", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::IntToType< 1 >::value
        tmp_value = PyInt_FromLong(ns3::IntToType< 1 >::value);
        PyDict_SetItemString((PyObject*) PyNs3IntToType__1_Type.tp_dict, "value", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::IntToType< 2 >::value
        tmp_value = PyInt_FromLong(ns3::IntToType< 2 >::value);
        PyDict_SetItemString((PyObject*) PyNs3IntToType__2_Type.tp_dict, "value", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::IntToType< 3 >::value
        tmp_value = PyInt_FromLong(ns3::IntToType< 3 >::value);
        PyDict_SetItemString((PyObject*) PyNs3IntToType__3_Type.tp_dict, "value", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::IntToType< 4 >::value
        tmp_value = PyInt_FromLong(ns3::IntToType< 4 >::value);
        PyDict_SetItemString((PyObject*) PyNs3IntToType__4_Type.tp_dict, "value", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::IntToType< 5 >::value
        tmp_value = PyInt_FromLong(ns3::IntToType< 5 >::value);
        PyDict_SetItemString((PyObject*) PyNs3IntToType__5_Type.tp_dict, "value", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::IntToType< 6 >::value
        tmp_value = PyInt_FromLong(ns3::IntToType< 6 >::value);
        PyDict_SetItemString((PyObject*) PyNs3IntToType__6_Type.tp_dict, "value", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::TestSuite::BVT
        tmp_value = PyInt_FromLong(ns3::TestSuite::BVT);
        PyDict_SetItemString((PyObject*) PyNs3TestSuite_Type.tp_dict, "BVT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TestSuite::UNIT
        tmp_value = PyInt_FromLong(ns3::TestSuite::UNIT);
        PyDict_SetItemString((PyObject*) PyNs3TestSuite_Type.tp_dict, "UNIT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TestSuite::SYSTEM
        tmp_value = PyInt_FromLong(ns3::TestSuite::SYSTEM);
        PyDict_SetItemString((PyObject*) PyNs3TestSuite_Type.tp_dict, "SYSTEM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TestSuite::EXAMPLE
        tmp_value = PyInt_FromLong(ns3::TestSuite::EXAMPLE);
        PyDict_SetItemString((PyObject*) PyNs3TestSuite_Type.tp_dict, "EXAMPLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TestSuite::PERFORMANCE
        tmp_value = PyInt_FromLong(ns3::TestSuite::PERFORMANCE);
        PyDict_SetItemString((PyObject*) PyNs3TestSuite_Type.tp_dict, "PERFORMANCE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::TypeId::ATTR_GET
        tmp_value = PyInt_FromLong(ns3::TypeId::ATTR_GET);
        PyDict_SetItemString((PyObject*) PyNs3TypeId_Type.tp_dict, "ATTR_GET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TypeId::ATTR_SET
        tmp_value = PyInt_FromLong(ns3::TypeId::ATTR_SET);
        PyDict_SetItemString((PyObject*) PyNs3TypeId_Type.tp_dict, "ATTR_SET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TypeId::ATTR_CONSTRUCT
        tmp_value = PyInt_FromLong(ns3::TypeId::ATTR_CONSTRUCT);
        PyDict_SetItemString((PyObject*) PyNs3TypeId_Type.tp_dict, "ATTR_CONSTRUCT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TypeId::ATTR_SGC
        tmp_value = PyInt_FromLong(ns3::TypeId::ATTR_SGC);
        PyDict_SetItemString((PyObject*) PyNs3TypeId_Type.tp_dict, "ATTR_SGC", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Time::S
        tmp_value = PyInt_FromLong(ns3::Time::S);
        PyDict_SetItemString((PyObject*) PyNs3Time_Type.tp_dict, "S", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Time::MS
        tmp_value = PyInt_FromLong(ns3::Time::MS);
        PyDict_SetItemString((PyObject*) PyNs3Time_Type.tp_dict, "MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Time::US
        tmp_value = PyInt_FromLong(ns3::Time::US);
        PyDict_SetItemString((PyObject*) PyNs3Time_Type.tp_dict, "US", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Time::NS
        tmp_value = PyInt_FromLong(ns3::Time::NS);
        PyDict_SetItemString((PyObject*) PyNs3Time_Type.tp_dict, "NS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Time::PS
        tmp_value = PyInt_FromLong(ns3::Time::PS);
        PyDict_SetItemString((PyObject*) PyNs3Time_Type.tp_dict, "PS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Time::FS
        tmp_value = PyInt_FromLong(ns3::Time::FS);
        PyDict_SetItemString((PyObject*) PyNs3Time_Type.tp_dict, "FS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Time::LAST
        tmp_value = PyInt_FromLong(ns3::Time::LAST);
        PyDict_SetItemString((PyObject*) PyNs3Time_Type.tp_dict, "LAST", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::TimeBase::S
        tmp_value = PyInt_FromLong(ns3::TimeBase::S);
        PyDict_SetItemString((PyObject*) PyNs3TimeBase_Type.tp_dict, "S", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TimeBase::MS
        tmp_value = PyInt_FromLong(ns3::TimeBase::MS);
        PyDict_SetItemString((PyObject*) PyNs3TimeBase_Type.tp_dict, "MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TimeBase::US
        tmp_value = PyInt_FromLong(ns3::TimeBase::US);
        PyDict_SetItemString((PyObject*) PyNs3TimeBase_Type.tp_dict, "US", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TimeBase::NS
        tmp_value = PyInt_FromLong(ns3::TimeBase::NS);
        PyDict_SetItemString((PyObject*) PyNs3TimeBase_Type.tp_dict, "NS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TimeBase::PS
        tmp_value = PyInt_FromLong(ns3::TimeBase::PS);
        PyDict_SetItemString((PyObject*) PyNs3TimeBase_Type.tp_dict, "PS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TimeBase::FS
        tmp_value = PyInt_FromLong(ns3::TimeBase::FS);
        PyDict_SetItemString((PyObject*) PyNs3TimeBase_Type.tp_dict, "FS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TimeBase::LAST
        tmp_value = PyInt_FromLong(ns3::TimeBase::LAST);
        PyDict_SetItemString((PyObject*) PyNs3TimeBase_Type.tp_dict, "LAST", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Timer::CANCEL_ON_DESTROY
        tmp_value = PyInt_FromLong(ns3::Timer::CANCEL_ON_DESTROY);
        PyDict_SetItemString((PyObject*) PyNs3Timer_Type.tp_dict, "CANCEL_ON_DESTROY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Timer::REMOVE_ON_DESTROY
        tmp_value = PyInt_FromLong(ns3::Timer::REMOVE_ON_DESTROY);
        PyDict_SetItemString((PyObject*) PyNs3Timer_Type.tp_dict, "REMOVE_ON_DESTROY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Timer::CHECK_ON_DESTROY
        tmp_value = PyInt_FromLong(ns3::Timer::CHECK_ON_DESTROY);
        PyDict_SetItemString((PyObject*) PyNs3Timer_Type.tp_dict, "CHECK_ON_DESTROY", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Timer::RUNNING
        tmp_value = PyInt_FromLong(ns3::Timer::RUNNING);
        PyDict_SetItemString((PyObject*) PyNs3Timer_Type.tp_dict, "RUNNING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Timer::EXPIRED
        tmp_value = PyInt_FromLong(ns3::Timer::EXPIRED);
        PyDict_SetItemString((PyObject*) PyNs3Timer_Type.tp_dict, "EXPIRED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Timer::SUSPENDED
        tmp_value = PyInt_FromLong(ns3::Timer::SUSPENDED);
        PyDict_SetItemString((PyObject*) PyNs3Timer_Type.tp_dict, "SUSPENDED", tmp_value);
        Py_DECREF(tmp_value);
    }
    PyModule_AddIntConstant(m, (char *) "EU_BIT", ns3::EU_BIT);
    PyModule_AddIntConstant(m, (char *) "EU_BYTE", ns3::EU_BYTE);
    PyModule_AddIntConstant(m, (char *) "EU_PKT", ns3::EU_PKT);
    {
        PyObject *tmp_value;
         // ns3::PacketMetadata::Item::PAYLOAD
        tmp_value = PyInt_FromLong(ns3::PacketMetadata::Item::PAYLOAD);
        PyDict_SetItemString((PyObject*) PyNs3PacketMetadataItem_Type.tp_dict, "PAYLOAD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::PacketMetadata::Item::HEADER
        tmp_value = PyInt_FromLong(ns3::PacketMetadata::Item::HEADER);
        PyDict_SetItemString((PyObject*) PyNs3PacketMetadataItem_Type.tp_dict, "HEADER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::PacketMetadata::Item::TRAILER
        tmp_value = PyInt_FromLong(ns3::PacketMetadata::Item::TRAILER);
        PyDict_SetItemString((PyObject*) PyNs3PacketMetadataItem_Type.tp_dict, "TRAILER", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Cost231PropagationLossModel::SubUrban
        tmp_value = PyInt_FromLong(ns3::Cost231PropagationLossModel::SubUrban);
        PyDict_SetItemString((PyObject*) PyNs3Cost231PropagationLossModel_Type.tp_dict, "SubUrban", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cost231PropagationLossModel::MediumCity
        tmp_value = PyInt_FromLong(ns3::Cost231PropagationLossModel::MediumCity);
        PyDict_SetItemString((PyObject*) PyNs3Cost231PropagationLossModel_Type.tp_dict, "MediumCity", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cost231PropagationLossModel::Metropolitan
        tmp_value = PyInt_FromLong(ns3::Cost231PropagationLossModel::Metropolitan);
        PyDict_SetItemString((PyObject*) PyNs3Cost231PropagationLossModel_Type.tp_dict, "Metropolitan", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Box::RIGHT
        tmp_value = PyInt_FromLong(ns3::Box::RIGHT);
        PyDict_SetItemString((PyObject*) PyNs3Box_Type.tp_dict, "RIGHT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Box::LEFT
        tmp_value = PyInt_FromLong(ns3::Box::LEFT);
        PyDict_SetItemString((PyObject*) PyNs3Box_Type.tp_dict, "LEFT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Box::TOP
        tmp_value = PyInt_FromLong(ns3::Box::TOP);
        PyDict_SetItemString((PyObject*) PyNs3Box_Type.tp_dict, "TOP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Box::BOTTOM
        tmp_value = PyInt_FromLong(ns3::Box::BOTTOM);
        PyDict_SetItemString((PyObject*) PyNs3Box_Type.tp_dict, "BOTTOM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Box::UP
        tmp_value = PyInt_FromLong(ns3::Box::UP);
        PyDict_SetItemString((PyObject*) PyNs3Box_Type.tp_dict, "UP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Box::DOWN
        tmp_value = PyInt_FromLong(ns3::Box::DOWN);
        PyDict_SetItemString((PyObject*) PyNs3Box_Type.tp_dict, "DOWN", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Rectangle::RIGHT
        tmp_value = PyInt_FromLong(ns3::Rectangle::RIGHT);
        PyDict_SetItemString((PyObject*) PyNs3Rectangle_Type.tp_dict, "RIGHT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Rectangle::LEFT
        tmp_value = PyInt_FromLong(ns3::Rectangle::LEFT);
        PyDict_SetItemString((PyObject*) PyNs3Rectangle_Type.tp_dict, "LEFT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Rectangle::TOP
        tmp_value = PyInt_FromLong(ns3::Rectangle::TOP);
        PyDict_SetItemString((PyObject*) PyNs3Rectangle_Type.tp_dict, "TOP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Rectangle::BOTTOM
        tmp_value = PyInt_FromLong(ns3::Rectangle::BOTTOM);
        PyDict_SetItemString((PyObject*) PyNs3Rectangle_Type.tp_dict, "BOTTOM", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::GridPositionAllocator::ROW_FIRST
        tmp_value = PyInt_FromLong(ns3::GridPositionAllocator::ROW_FIRST);
        PyDict_SetItemString((PyObject*) PyNs3GridPositionAllocator_Type.tp_dict, "ROW_FIRST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GridPositionAllocator::COLUMN_FIRST
        tmp_value = PyInt_FromLong(ns3::GridPositionAllocator::COLUMN_FIRST);
        PyDict_SetItemString((PyObject*) PyNs3GridPositionAllocator_Type.tp_dict, "COLUMN_FIRST", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::RandomWalk2dMobilityModel::MODE_DISTANCE
        tmp_value = PyInt_FromLong(ns3::RandomWalk2dMobilityModel::MODE_DISTANCE);
        PyDict_SetItemString((PyObject*) PyNs3RandomWalk2dMobilityModel_Type.tp_dict, "MODE_DISTANCE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RandomWalk2dMobilityModel::MODE_TIME
        tmp_value = PyInt_FromLong(ns3::RandomWalk2dMobilityModel::MODE_TIME);
        PyDict_SetItemString((PyObject*) PyNs3RandomWalk2dMobilityModel_Type.tp_dict, "MODE_TIME", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ConfigStore::LOAD
        tmp_value = PyInt_FromLong(ns3::ConfigStore::LOAD);
        PyDict_SetItemString((PyObject*) PyNs3ConfigStore_Type.tp_dict, "LOAD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ConfigStore::SAVE
        tmp_value = PyInt_FromLong(ns3::ConfigStore::SAVE);
        PyDict_SetItemString((PyObject*) PyNs3ConfigStore_Type.tp_dict, "SAVE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ConfigStore::NONE
        tmp_value = PyInt_FromLong(ns3::ConfigStore::NONE);
        PyDict_SetItemString((PyObject*) PyNs3ConfigStore_Type.tp_dict, "NONE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ConfigStore::XML
        tmp_value = PyInt_FromLong(ns3::ConfigStore::XML);
        PyDict_SetItemString((PyObject*) PyNs3ConfigStore_Type.tp_dict, "XML", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ConfigStore::RAW_TEXT
        tmp_value = PyInt_FromLong(ns3::ConfigStore::RAW_TEXT);
        PyDict_SetItemString((PyObject*) PyNs3ConfigStore_Type.tp_dict, "RAW_TEXT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Gnuplot2dDataset::LINES
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::LINES);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "LINES", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::POINTS
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::POINTS);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "POINTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::LINES_POINTS
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::LINES_POINTS);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "LINES_POINTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::DOTS
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::DOTS);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "DOTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::IMPULSES
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::IMPULSES);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "IMPULSES", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::STEPS
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::STEPS);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "STEPS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::FSTEPS
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::FSTEPS);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "FSTEPS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::HISTEPS
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::HISTEPS);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "HISTEPS", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Gnuplot2dDataset::NONE
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::NONE);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "NONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::X
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::X);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "X", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::Y
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::Y);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "Y", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Gnuplot2dDataset::XY
        tmp_value = PyInt_FromLong(ns3::Gnuplot2dDataset::XY);
        PyDict_SetItemString((PyObject*) PyNs3Gnuplot2dDataset_Type.tp_dict, "XY", tmp_value);
        Py_DECREF(tmp_value);
    }
    PyModule_AddIntConstant(m, (char *) "IPV4", ns3::IPV4);
    PyModule_AddIntConstant(m, (char *) "IPV6", ns3::IPV6);
    PyModule_AddIntConstant(m, (char *) "LENGTH", ns3::LENGTH);
    PyModule_AddIntConstant(m, (char *) "VLAN", ns3::VLAN);
    PyModule_AddIntConstant(m, (char *) "QINQ", ns3::QINQ);
    {
        PyObject *tmp_value;
         // ns3::Address::MAX_SIZE
        tmp_value = PyInt_FromLong(ns3::Address::MAX_SIZE);
        PyDict_SetItemString((PyObject*) PyNs3Address_Type.tp_dict, "MAX_SIZE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv4InterfaceAddress::HOST
        tmp_value = PyInt_FromLong(ns3::Ipv4InterfaceAddress::HOST);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4InterfaceAddress_Type.tp_dict, "HOST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4InterfaceAddress::LINK
        tmp_value = PyInt_FromLong(ns3::Ipv4InterfaceAddress::LINK);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4InterfaceAddress_Type.tp_dict, "LINK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4InterfaceAddress::GLOBAL
        tmp_value = PyInt_FromLong(ns3::Ipv4InterfaceAddress::GLOBAL);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4InterfaceAddress_Type.tp_dict, "GLOBAL", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv6InterfaceAddress::TENTATIVE
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::TENTATIVE);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "TENTATIVE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6InterfaceAddress::DEPRECATED
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::DEPRECATED);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "DEPRECATED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6InterfaceAddress::PREFERRED
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::PREFERRED);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "PREFERRED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6InterfaceAddress::PERMANENT
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::PERMANENT);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "PERMANENT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6InterfaceAddress::HOMEADDRESS
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::HOMEADDRESS);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "HOMEADDRESS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6InterfaceAddress::TENTATIVE_OPTIMISTIC
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::TENTATIVE_OPTIMISTIC);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "TENTATIVE_OPTIMISTIC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6InterfaceAddress::INVALID
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::INVALID);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "INVALID", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv6InterfaceAddress::HOST
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::HOST);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "HOST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6InterfaceAddress::LINKLOCAL
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::LINKLOCAL);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "LINKLOCAL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6InterfaceAddress::GLOBAL
        tmp_value = PyInt_FromLong(ns3::Ipv6InterfaceAddress::GLOBAL);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6InterfaceAddress_Type.tp_dict, "GLOBAL", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv6Header::IPV6_EXT_HOP_BY_HOP
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_EXT_HOP_BY_HOP);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_EXT_HOP_BY_HOP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_IPV4
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_IPV4);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_IPV4", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_TCP
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_TCP);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_TCP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_UDP
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_UDP);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_UDP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_IPV6
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_IPV6);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_IPV6", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_EXT_ROUTING
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_EXT_ROUTING);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_EXT_ROUTING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_EXT_FRAGMENTATION
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_EXT_FRAGMENTATION);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_EXT_FRAGMENTATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_EXT_CONFIDENTIALITY
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_EXT_CONFIDENTIALITY);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_EXT_CONFIDENTIALITY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_EXT_AUTHENTIFICATION
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_EXT_AUTHENTIFICATION);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_EXT_AUTHENTIFICATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_ICMPV6
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_ICMPV6);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_ICMPV6", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_EXT_END
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_EXT_END);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_EXT_END", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_EXT_DESTINATION
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_EXT_DESTINATION);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_EXT_DESTINATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_SCTP
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_SCTP);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_SCTP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_EXT_MOBILITY
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_EXT_MOBILITY);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_EXT_MOBILITY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6Header::IPV6_UDP_LITE
        tmp_value = PyInt_FromLong(ns3::Ipv6Header::IPV6_UDP_LITE);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6Header_Type.tp_dict, "IPV6_UDP_LITE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::RadiotapHeader::FRAME_FLAG_NONE
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_NONE);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_NONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::FRAME_FLAG_CFP
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_CFP);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_CFP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::FRAME_FLAG_SHORT_PREAMBLE
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_SHORT_PREAMBLE);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_SHORT_PREAMBLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::FRAME_FLAG_WEP
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_WEP);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_WEP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::FRAME_FLAG_FRAGMENTED
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_FRAGMENTED);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_FRAGMENTED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::FRAME_FLAG_FCS_INCLUDED
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_FCS_INCLUDED);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_FCS_INCLUDED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::FRAME_FLAG_DATA_PADDING
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_DATA_PADDING);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_DATA_PADDING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::FRAME_FLAG_BAD_FCS
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_BAD_FCS);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_BAD_FCS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::FRAME_FLAG_SHORT_GUARD
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::FRAME_FLAG_SHORT_GUARD);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "FRAME_FLAG_SHORT_GUARD", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::RadiotapHeader::CHANNEL_FLAG_NONE
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_NONE);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_NONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::CHANNEL_FLAG_TURBO
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_TURBO);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_TURBO", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::CHANNEL_FLAG_CCK
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_CCK);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_CCK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::CHANNEL_FLAG_OFDM
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_OFDM);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_OFDM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::CHANNEL_FLAG_SPECTRUM_2GHZ
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_SPECTRUM_2GHZ);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_SPECTRUM_2GHZ", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::CHANNEL_FLAG_SPECTRUM_5GHZ
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_SPECTRUM_5GHZ);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_SPECTRUM_5GHZ", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::CHANNEL_FLAG_PASSIVE
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_PASSIVE);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_PASSIVE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::CHANNEL_FLAG_DYNAMIC
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_DYNAMIC);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_DYNAMIC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RadiotapHeader::CHANNEL_FLAG_GFSK
        tmp_value = PyInt_FromLong(ns3::RadiotapHeader::CHANNEL_FLAG_GFSK);
        PyDict_SetItemString((PyObject*) PyNs3RadiotapHeader_Type.tp_dict, "CHANNEL_FLAG_GFSK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Socket::ERROR_NOTERROR
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_NOTERROR);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_NOTERROR", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_ISCONN
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_ISCONN);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_ISCONN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_NOTCONN
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_NOTCONN);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_NOTCONN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_MSGSIZE
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_MSGSIZE);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_MSGSIZE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_AGAIN
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_AGAIN);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_AGAIN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_SHUTDOWN
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_SHUTDOWN);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_SHUTDOWN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_OPNOTSUPP
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_OPNOTSUPP);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_OPNOTSUPP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_AFNOSUPPORT
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_AFNOSUPPORT);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_AFNOSUPPORT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_INVAL
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_INVAL);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_INVAL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_BADF
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_BADF);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_BADF", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_NOROUTETOHOST
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_NOROUTETOHOST);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_NOROUTETOHOST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_NODEV
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_NODEV);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_NODEV", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::ERROR_ADDRNOTAVAIL
        tmp_value = PyInt_FromLong(ns3::Socket::ERROR_ADDRNOTAVAIL);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "ERROR_ADDRNOTAVAIL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Socket::SOCKET_ERRNO_LAST
        tmp_value = PyInt_FromLong(ns3::Socket::SOCKET_ERRNO_LAST);
        PyDict_SetItemString((PyObject*) PyNs3Socket_Type.tp_dict, "SOCKET_ERRNO_LAST", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::DropTailQueue::ILLEGAL
        tmp_value = PyInt_FromLong(ns3::DropTailQueue::ILLEGAL);
        PyDict_SetItemString((PyObject*) PyNs3DropTailQueue_Type.tp_dict, "ILLEGAL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::DropTailQueue::PACKETS
        tmp_value = PyInt_FromLong(ns3::DropTailQueue::PACKETS);
        PyDict_SetItemString((PyObject*) PyNs3DropTailQueue_Type.tp_dict, "PACKETS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::DropTailQueue::BYTES
        tmp_value = PyInt_FromLong(ns3::DropTailQueue::BYTES);
        PyDict_SetItemString((PyObject*) PyNs3DropTailQueue_Type.tp_dict, "BYTES", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::NetDevice::PACKET_HOST
        tmp_value = PyInt_FromLong(ns3::NetDevice::PACKET_HOST);
        PyDict_SetItemString((PyObject*) PyNs3NetDevice_Type.tp_dict, "PACKET_HOST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::NetDevice::NS3_PACKET_HOST
        tmp_value = PyInt_FromLong(ns3::NetDevice::NS3_PACKET_HOST);
        PyDict_SetItemString((PyObject*) PyNs3NetDevice_Type.tp_dict, "NS3_PACKET_HOST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::NetDevice::PACKET_BROADCAST
        tmp_value = PyInt_FromLong(ns3::NetDevice::PACKET_BROADCAST);
        PyDict_SetItemString((PyObject*) PyNs3NetDevice_Type.tp_dict, "PACKET_BROADCAST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::NetDevice::NS3_PACKET_BROADCAST
        tmp_value = PyInt_FromLong(ns3::NetDevice::NS3_PACKET_BROADCAST);
        PyDict_SetItemString((PyObject*) PyNs3NetDevice_Type.tp_dict, "NS3_PACKET_BROADCAST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::NetDevice::PACKET_MULTICAST
        tmp_value = PyInt_FromLong(ns3::NetDevice::PACKET_MULTICAST);
        PyDict_SetItemString((PyObject*) PyNs3NetDevice_Type.tp_dict, "PACKET_MULTICAST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::NetDevice::NS3_PACKET_MULTICAST
        tmp_value = PyInt_FromLong(ns3::NetDevice::NS3_PACKET_MULTICAST);
        PyDict_SetItemString((PyObject*) PyNs3NetDevice_Type.tp_dict, "NS3_PACKET_MULTICAST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::NetDevice::PACKET_OTHERHOST
        tmp_value = PyInt_FromLong(ns3::NetDevice::PACKET_OTHERHOST);
        PyDict_SetItemString((PyObject*) PyNs3NetDevice_Type.tp_dict, "PACKET_OTHERHOST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::NetDevice::NS3_PACKET_OTHERHOST
        tmp_value = PyInt_FromLong(ns3::NetDevice::NS3_PACKET_OTHERHOST);
        PyDict_SetItemString((PyObject*) PyNs3NetDevice_Type.tp_dict, "NS3_PACKET_OTHERHOST", tmp_value);
        Py_DECREF(tmp_value);
    }
    PyModule_AddIntConstant(m, (char *) "IDLE", ns3::IDLE);
    PyModule_AddIntConstant(m, (char *) "TRANSMITTING", ns3::TRANSMITTING);
    PyModule_AddIntConstant(m, (char *) "PROPAGATING", ns3::PROPAGATING);
    {
        PyObject *tmp_value;
         // ns3::CsmaNetDevice::ILLEGAL
        tmp_value = PyInt_FromLong(ns3::CsmaNetDevice::ILLEGAL);
        PyDict_SetItemString((PyObject*) PyNs3CsmaNetDevice_Type.tp_dict, "ILLEGAL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::CsmaNetDevice::DIX
        tmp_value = PyInt_FromLong(ns3::CsmaNetDevice::DIX);
        PyDict_SetItemString((PyObject*) PyNs3CsmaNetDevice_Type.tp_dict, "DIX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::CsmaNetDevice::LLC
        tmp_value = PyInt_FromLong(ns3::CsmaNetDevice::LLC);
        PyDict_SetItemString((PyObject*) PyNs3CsmaNetDevice_Type.tp_dict, "LLC", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::GlobalRoutingLSA::Unknown
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::Unknown);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "Unknown", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLSA::RouterLSA
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::RouterLSA);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "RouterLSA", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLSA::NetworkLSA
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::NetworkLSA);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "NetworkLSA", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLSA::SummaryLSA
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::SummaryLSA);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "SummaryLSA", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLSA::SummaryLSA_ASBR
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::SummaryLSA_ASBR);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "SummaryLSA_ASBR", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLSA::ASExternalLSAs
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::ASExternalLSAs);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "ASExternalLSAs", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::GlobalRoutingLSA::LSA_SPF_NOT_EXPLORED
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::LSA_SPF_NOT_EXPLORED);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "LSA_SPF_NOT_EXPLORED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLSA::LSA_SPF_CANDIDATE
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::LSA_SPF_CANDIDATE);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "LSA_SPF_CANDIDATE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLSA::LSA_SPF_IN_SPFTREE
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLSA::LSA_SPF_IN_SPFTREE);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLSA_Type.tp_dict, "LSA_SPF_IN_SPFTREE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::GlobalRoutingLinkRecord::Unknown
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLinkRecord::Unknown);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLinkRecord_Type.tp_dict, "Unknown", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLinkRecord::PointToPoint
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLinkRecord::PointToPoint);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLinkRecord_Type.tp_dict, "PointToPoint", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLinkRecord::TransitNetwork
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLinkRecord::TransitNetwork);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLinkRecord_Type.tp_dict, "TransitNetwork", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLinkRecord::StubNetwork
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLinkRecord::StubNetwork);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLinkRecord_Type.tp_dict, "StubNetwork", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::GlobalRoutingLinkRecord::VirtualLink
        tmp_value = PyInt_FromLong(ns3::GlobalRoutingLinkRecord::VirtualLink);
        PyDict_SetItemString((PyObject*) PyNs3GlobalRoutingLinkRecord_Type.tp_dict, "VirtualLink", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Icmpv4DestinationUnreachable::NET_UNREACHABLE
        tmp_value = PyInt_FromLong(ns3::Icmpv4DestinationUnreachable::NET_UNREACHABLE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4DestinationUnreachable_Type.tp_dict, "NET_UNREACHABLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4DestinationUnreachable::HOST_UNREACHABLE
        tmp_value = PyInt_FromLong(ns3::Icmpv4DestinationUnreachable::HOST_UNREACHABLE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4DestinationUnreachable_Type.tp_dict, "HOST_UNREACHABLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4DestinationUnreachable::PROTOCOL_UNREACHABLE
        tmp_value = PyInt_FromLong(ns3::Icmpv4DestinationUnreachable::PROTOCOL_UNREACHABLE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4DestinationUnreachable_Type.tp_dict, "PROTOCOL_UNREACHABLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4DestinationUnreachable::PORT_UNREACHABLE
        tmp_value = PyInt_FromLong(ns3::Icmpv4DestinationUnreachable::PORT_UNREACHABLE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4DestinationUnreachable_Type.tp_dict, "PORT_UNREACHABLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4DestinationUnreachable::FRAG_NEEDED
        tmp_value = PyInt_FromLong(ns3::Icmpv4DestinationUnreachable::FRAG_NEEDED);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4DestinationUnreachable_Type.tp_dict, "FRAG_NEEDED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4DestinationUnreachable::SOURCE_ROUTE_FAILED
        tmp_value = PyInt_FromLong(ns3::Icmpv4DestinationUnreachable::SOURCE_ROUTE_FAILED);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4DestinationUnreachable_Type.tp_dict, "SOURCE_ROUTE_FAILED", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Icmpv4Header::ECHO_REPLY
        tmp_value = PyInt_FromLong(ns3::Icmpv4Header::ECHO_REPLY);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4Header_Type.tp_dict, "ECHO_REPLY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4Header::DEST_UNREACH
        tmp_value = PyInt_FromLong(ns3::Icmpv4Header::DEST_UNREACH);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4Header_Type.tp_dict, "DEST_UNREACH", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4Header::ECHO
        tmp_value = PyInt_FromLong(ns3::Icmpv4Header::ECHO);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4Header_Type.tp_dict, "ECHO", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4Header::TIME_EXCEEDED
        tmp_value = PyInt_FromLong(ns3::Icmpv4Header::TIME_EXCEEDED);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4Header_Type.tp_dict, "TIME_EXCEEDED", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Icmpv4TimeExceeded::TIME_TO_LIVE
        tmp_value = PyInt_FromLong(ns3::Icmpv4TimeExceeded::TIME_TO_LIVE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4TimeExceeded_Type.tp_dict, "TIME_TO_LIVE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv4TimeExceeded::FRAGMENT_REASSEMBLY
        tmp_value = PyInt_FromLong(ns3::Icmpv4TimeExceeded::FRAGMENT_REASSEMBLY);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv4TimeExceeded_Type.tp_dict, "FRAGMENT_REASSEMBLY", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Icmpv6Header::ICMPV6_ERROR_DESTINATION_UNREACHABLE
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ERROR_DESTINATION_UNREACHABLE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ERROR_DESTINATION_UNREACHABLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ERROR_PACKET_TOO_BIG
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ERROR_PACKET_TOO_BIG);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ERROR_PACKET_TOO_BIG", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ERROR_TIME_EXCEEDED
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ERROR_TIME_EXCEEDED);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ERROR_TIME_EXCEEDED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ERROR_PARAMETER_ERROR
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ERROR_PARAMETER_ERROR);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ERROR_PARAMETER_ERROR", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ECHO_REQUEST
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ECHO_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ECHO_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ECHO_REPLY
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ECHO_REPLY);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ECHO_REPLY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_SUBSCRIBE_REQUEST
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_SUBSCRIBE_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_SUBSCRIBE_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_SUBSCRIBE_REPORT
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_SUBSCRIBE_REPORT);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_SUBSCRIBE_REPORT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_SUBSCRIVE_END
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_SUBSCRIVE_END);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_SUBSCRIVE_END", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ND_ROUTER_SOLICITATION
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ND_ROUTER_SOLICITATION);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ND_ROUTER_SOLICITATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ND_ROUTER_ADVERTISEMENT
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ND_ROUTER_ADVERTISEMENT);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ND_ROUTER_ADVERTISEMENT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ND_NEIGHBOR_SOLICITATION
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ND_NEIGHBOR_SOLICITATION);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ND_NEIGHBOR_SOLICITATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ND_NEIGHBOR_ADVERTISEMENT
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ND_NEIGHBOR_ADVERTISEMENT);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ND_NEIGHBOR_ADVERTISEMENT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ND_REDIRECTION
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ND_REDIRECTION);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ND_REDIRECTION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ROUTER_RENUMBER
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ROUTER_RENUMBER);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ROUTER_RENUMBER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_INFORMATION_REQUEST
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_INFORMATION_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_INFORMATION_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_INFORMATION_RESPONSE
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_INFORMATION_RESPONSE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_INFORMATION_RESPONSE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_INVERSE_ND_SOLICITATION
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_INVERSE_ND_SOLICITATION);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_INVERSE_ND_SOLICITATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_INVERSE_ND_ADVERSTISEMENT
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_INVERSE_ND_ADVERSTISEMENT);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_INVERSE_ND_ADVERSTISEMENT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_MLDV2_SUBSCRIBE_REPORT
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_MLDV2_SUBSCRIBE_REPORT);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_MLDV2_SUBSCRIBE_REPORT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_MOBILITY_HA_DISCOVER_REQUEST
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_MOBILITY_HA_DISCOVER_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_MOBILITY_HA_DISCOVER_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_MOBILITY_HA_DISCOVER_RESPONSE
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_MOBILITY_HA_DISCOVER_RESPONSE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_MOBILITY_HA_DISCOVER_RESPONSE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_MOBILITY_MOBILE_PREFIX_SOLICITATION
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_MOBILITY_MOBILE_PREFIX_SOLICITATION);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_MOBILITY_MOBILE_PREFIX_SOLICITATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_SECURE_ND_CERTIFICATE_PATH_SOLICITATION
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_SECURE_ND_CERTIFICATE_PATH_SOLICITATION);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_SECURE_ND_CERTIFICATE_PATH_SOLICITATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_SECURE_ND_CERTIFICATE_PATH_ADVERTISEMENT
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_SECURE_ND_CERTIFICATE_PATH_ADVERTISEMENT);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_SECURE_ND_CERTIFICATE_PATH_ADVERTISEMENT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_EXPERIMENTAL_MOBILITY
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_EXPERIMENTAL_MOBILITY);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_EXPERIMENTAL_MOBILITY", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Icmpv6Header::ICMPV6_OPT_LINK_LAYER_SOURCE
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_OPT_LINK_LAYER_SOURCE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_OPT_LINK_LAYER_SOURCE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_OPT_LINK_LAYER_TARGET
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_OPT_LINK_LAYER_TARGET);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_OPT_LINK_LAYER_TARGET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_OPT_PREFIX
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_OPT_PREFIX);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_OPT_PREFIX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_OPT_REDIRECTED
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_OPT_REDIRECTED);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_OPT_REDIRECTED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_OPT_MTU
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_OPT_MTU);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_OPT_MTU", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Icmpv6Header::ICMPV6_NO_ROUTE
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_NO_ROUTE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_NO_ROUTE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ADM_PROHIBITED
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ADM_PROHIBITED);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ADM_PROHIBITED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_NOT_NEIGHBOUR
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_NOT_NEIGHBOUR);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_NOT_NEIGHBOUR", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_ADDR_UNREACHABLE
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_ADDR_UNREACHABLE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_ADDR_UNREACHABLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_PORT_UNREACHABLE
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_PORT_UNREACHABLE);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_PORT_UNREACHABLE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Icmpv6Header::ICMPV6_HOPLIMIT
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_HOPLIMIT);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_HOPLIMIT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_FRAGTIME
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_FRAGTIME);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_FRAGTIME", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Icmpv6Header::ICMPV6_MALFORMED_HEADER
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_MALFORMED_HEADER);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_MALFORMED_HEADER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_UNKNOWN_NEXT_HEADER
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_UNKNOWN_NEXT_HEADER);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_UNKNOWN_NEXT_HEADER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Icmpv6Header::ICMPV6_UNKNOWN_OPTION
        tmp_value = PyInt_FromLong(ns3::Icmpv6Header::ICMPV6_UNKNOWN_OPTION);
        PyDict_SetItemString((PyObject*) PyNs3Icmpv6Header_Type.tp_dict, "ICMPV6_UNKNOWN_OPTION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::TcpHeader::NONE
        tmp_value = PyInt_FromLong(ns3::TcpHeader::NONE);
        PyDict_SetItemString((PyObject*) PyNs3TcpHeader_Type.tp_dict, "NONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TcpHeader::FIN
        tmp_value = PyInt_FromLong(ns3::TcpHeader::FIN);
        PyDict_SetItemString((PyObject*) PyNs3TcpHeader_Type.tp_dict, "FIN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TcpHeader::SYN
        tmp_value = PyInt_FromLong(ns3::TcpHeader::SYN);
        PyDict_SetItemString((PyObject*) PyNs3TcpHeader_Type.tp_dict, "SYN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TcpHeader::RST
        tmp_value = PyInt_FromLong(ns3::TcpHeader::RST);
        PyDict_SetItemString((PyObject*) PyNs3TcpHeader_Type.tp_dict, "RST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TcpHeader::PSH
        tmp_value = PyInt_FromLong(ns3::TcpHeader::PSH);
        PyDict_SetItemString((PyObject*) PyNs3TcpHeader_Type.tp_dict, "PSH", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TcpHeader::ACK
        tmp_value = PyInt_FromLong(ns3::TcpHeader::ACK);
        PyDict_SetItemString((PyObject*) PyNs3TcpHeader_Type.tp_dict, "ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::TcpHeader::URG
        tmp_value = PyInt_FromLong(ns3::TcpHeader::URG);
        PyDict_SetItemString((PyObject*) PyNs3TcpHeader_Type.tp_dict, "URG", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ArpHeader::ARP_TYPE_REQUEST
        tmp_value = PyInt_FromLong(ns3::ArpHeader::ARP_TYPE_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3ArpHeader_Type.tp_dict, "ARP_TYPE_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ArpHeader::ARP_TYPE_REPLY
        tmp_value = PyInt_FromLong(ns3::ArpHeader::ARP_TYPE_REPLY);
        PyDict_SetItemString((PyObject*) PyNs3ArpHeader_Type.tp_dict, "ARP_TYPE_REPLY", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv4L3Protocol::DROP_TTL_EXPIRED
        tmp_value = PyInt_FromLong(ns3::Ipv4L3Protocol::DROP_TTL_EXPIRED);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L3Protocol_Type.tp_dict, "DROP_TTL_EXPIRED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4L3Protocol::DROP_NO_ROUTE
        tmp_value = PyInt_FromLong(ns3::Ipv4L3Protocol::DROP_NO_ROUTE);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L3Protocol_Type.tp_dict, "DROP_NO_ROUTE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4L3Protocol::DROP_BAD_CHECKSUM
        tmp_value = PyInt_FromLong(ns3::Ipv4L3Protocol::DROP_BAD_CHECKSUM);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L3Protocol_Type.tp_dict, "DROP_BAD_CHECKSUM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4L3Protocol::DROP_INTERFACE_DOWN
        tmp_value = PyInt_FromLong(ns3::Ipv4L3Protocol::DROP_INTERFACE_DOWN);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L3Protocol_Type.tp_dict, "DROP_INTERFACE_DOWN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4L3Protocol::DROP_ROUTE_ERROR
        tmp_value = PyInt_FromLong(ns3::Ipv4L3Protocol::DROP_ROUTE_ERROR);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L3Protocol_Type.tp_dict, "DROP_ROUTE_ERROR", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv4L4Protocol::RX_OK
        tmp_value = PyInt_FromLong(ns3::Ipv4L4Protocol::RX_OK);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L4Protocol_Type.tp_dict, "RX_OK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4L4Protocol::RX_CSUM_FAILED
        tmp_value = PyInt_FromLong(ns3::Ipv4L4Protocol::RX_CSUM_FAILED);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L4Protocol_Type.tp_dict, "RX_CSUM_FAILED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4L4Protocol::RX_ENDPOINT_CLOSED
        tmp_value = PyInt_FromLong(ns3::Ipv4L4Protocol::RX_ENDPOINT_CLOSED);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L4Protocol_Type.tp_dict, "RX_ENDPOINT_CLOSED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4L4Protocol::RX_ENDPOINT_UNREACH
        tmp_value = PyInt_FromLong(ns3::Ipv4L4Protocol::RX_ENDPOINT_UNREACH);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4L4Protocol_Type.tp_dict, "RX_ENDPOINT_UNREACH", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv6L3Protocol::DROP_TTL_EXPIRED
        tmp_value = PyInt_FromLong(ns3::Ipv6L3Protocol::DROP_TTL_EXPIRED);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6L3Protocol_Type.tp_dict, "DROP_TTL_EXPIRED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6L3Protocol::DROP_NO_ROUTE
        tmp_value = PyInt_FromLong(ns3::Ipv6L3Protocol::DROP_NO_ROUTE);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6L3Protocol_Type.tp_dict, "DROP_NO_ROUTE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6L3Protocol::DROP_INTERFACE_DOWN
        tmp_value = PyInt_FromLong(ns3::Ipv6L3Protocol::DROP_INTERFACE_DOWN);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6L3Protocol_Type.tp_dict, "DROP_INTERFACE_DOWN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6L3Protocol::DROP_ROUTE_ERROR
        tmp_value = PyInt_FromLong(ns3::Ipv6L3Protocol::DROP_ROUTE_ERROR);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6L3Protocol_Type.tp_dict, "DROP_ROUTE_ERROR", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6L3Protocol::DROP_UNKNOWN_PROTOCOL
        tmp_value = PyInt_FromLong(ns3::Ipv6L3Protocol::DROP_UNKNOWN_PROTOCOL);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6L3Protocol_Type.tp_dict, "DROP_UNKNOWN_PROTOCOL", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv6L4Protocol::RX_OK
        tmp_value = PyInt_FromLong(ns3::Ipv6L4Protocol::RX_OK);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6L4Protocol_Type.tp_dict, "RX_OK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6L4Protocol::RX_CSUM_FAILED
        tmp_value = PyInt_FromLong(ns3::Ipv6L4Protocol::RX_CSUM_FAILED);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6L4Protocol_Type.tp_dict, "RX_CSUM_FAILED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv6L4Protocol::RX_ENDPOINT_UNREACH
        tmp_value = PyInt_FromLong(ns3::Ipv6L4Protocol::RX_ENDPOINT_UNREACH);
        PyDict_SetItemString((PyObject*) PyNs3Ipv6L4Protocol_Type.tp_dict, "RX_ENDPOINT_UNREACH", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::HalfDuplexIdealPhy::IDLE
        tmp_value = PyInt_FromLong(ns3::HalfDuplexIdealPhy::IDLE);
        PyDict_SetItemString((PyObject*) PyNs3HalfDuplexIdealPhy_Type.tp_dict, "IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::HalfDuplexIdealPhy::TX
        tmp_value = PyInt_FromLong(ns3::HalfDuplexIdealPhy::TX);
        PyDict_SetItemString((PyObject*) PyNs3HalfDuplexIdealPhy_Type.tp_dict, "TX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::HalfDuplexIdealPhy::RX
        tmp_value = PyInt_FromLong(ns3::HalfDuplexIdealPhy::RX);
        PyDict_SetItemString((PyObject*) PyNs3HalfDuplexIdealPhy_Type.tp_dict, "RX", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::AlohaNoackNetDevice::IDLE
        tmp_value = PyInt_FromLong(ns3::AlohaNoackNetDevice::IDLE);
        PyDict_SetItemString((PyObject*) PyNs3AlohaNoackNetDevice_Type.tp_dict, "IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::AlohaNoackNetDevice::TX
        tmp_value = PyInt_FromLong(ns3::AlohaNoackNetDevice::TX);
        PyDict_SetItemString((PyObject*) PyNs3AlohaNoackNetDevice_Type.tp_dict, "TX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::AlohaNoackNetDevice::RX
        tmp_value = PyInt_FromLong(ns3::AlohaNoackNetDevice::RX);
        PyDict_SetItemString((PyObject*) PyNs3AlohaNoackNetDevice_Type.tp_dict, "RX", tmp_value);
        Py_DECREF(tmp_value);
    }
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_RTS", ns3::WIFI_MAC_CTL_RTS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_CTS", ns3::WIFI_MAC_CTL_CTS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_ACK", ns3::WIFI_MAC_CTL_ACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_BACKREQ", ns3::WIFI_MAC_CTL_BACKREQ);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_CTL_BACKRESP", ns3::WIFI_MAC_CTL_BACKRESP);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_BEACON", ns3::WIFI_MAC_MGT_BEACON);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_ASSOCIATION_REQUEST", ns3::WIFI_MAC_MGT_ASSOCIATION_REQUEST);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_ASSOCIATION_RESPONSE", ns3::WIFI_MAC_MGT_ASSOCIATION_RESPONSE);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_DISASSOCIATION", ns3::WIFI_MAC_MGT_DISASSOCIATION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_REASSOCIATION_REQUEST", ns3::WIFI_MAC_MGT_REASSOCIATION_REQUEST);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_REASSOCIATION_RESPONSE", ns3::WIFI_MAC_MGT_REASSOCIATION_RESPONSE);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_PROBE_REQUEST", ns3::WIFI_MAC_MGT_PROBE_REQUEST);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_PROBE_RESPONSE", ns3::WIFI_MAC_MGT_PROBE_RESPONSE);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_AUTHENTICATION", ns3::WIFI_MAC_MGT_AUTHENTICATION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_DEAUTHENTICATION", ns3::WIFI_MAC_MGT_DEAUTHENTICATION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_ACTION", ns3::WIFI_MAC_MGT_ACTION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_ACTION_NO_ACK", ns3::WIFI_MAC_MGT_ACTION_NO_ACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_MGT_MULTIHOP_ACTION", ns3::WIFI_MAC_MGT_MULTIHOP_ACTION);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA", ns3::WIFI_MAC_DATA);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_CFACK", ns3::WIFI_MAC_DATA_CFACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_CFPOLL", ns3::WIFI_MAC_DATA_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_CFACK_CFPOLL", ns3::WIFI_MAC_DATA_CFACK_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_NULL", ns3::WIFI_MAC_DATA_NULL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_NULL_CFACK", ns3::WIFI_MAC_DATA_NULL_CFACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_NULL_CFPOLL", ns3::WIFI_MAC_DATA_NULL_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_DATA_NULL_CFACK_CFPOLL", ns3::WIFI_MAC_DATA_NULL_CFACK_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA", ns3::WIFI_MAC_QOSDATA);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_CFACK", ns3::WIFI_MAC_QOSDATA_CFACK);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_CFPOLL", ns3::WIFI_MAC_QOSDATA_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_CFACK_CFPOLL", ns3::WIFI_MAC_QOSDATA_CFACK_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_NULL", ns3::WIFI_MAC_QOSDATA_NULL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_NULL_CFPOLL", ns3::WIFI_MAC_QOSDATA_NULL_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_MAC_QOSDATA_NULL_CFACK_CFPOLL", ns3::WIFI_MAC_QOSDATA_NULL_CFACK_CFPOLL);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_LONG", ns3::WIFI_PREAMBLE_LONG);
    PyModule_AddIntConstant(m, (char *) "WIFI_PREAMBLE_SHORT", ns3::WIFI_PREAMBLE_SHORT);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_UNKNOWN", ns3::WIFI_MOD_CLASS_UNKNOWN);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_IR", ns3::WIFI_MOD_CLASS_IR);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_FHSS", ns3::WIFI_MOD_CLASS_FHSS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_DSSS", ns3::WIFI_MOD_CLASS_DSSS);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_ERP_PBCC", ns3::WIFI_MOD_CLASS_ERP_PBCC);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_DSSS_OFDM", ns3::WIFI_MOD_CLASS_DSSS_OFDM);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_ERP_OFDM", ns3::WIFI_MOD_CLASS_ERP_OFDM);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_OFDM", ns3::WIFI_MOD_CLASS_OFDM);
    PyModule_AddIntConstant(m, (char *) "WIFI_MOD_CLASS_HT", ns3::WIFI_MOD_CLASS_HT);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211a", ns3::WIFI_PHY_STANDARD_80211a);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211b", ns3::WIFI_PHY_STANDARD_80211b);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211_10Mhz", ns3::WIFI_PHY_STANDARD_80211_10Mhz);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211_5Mhz", ns3::WIFI_PHY_STANDARD_80211_5Mhz);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_holland", ns3::WIFI_PHY_STANDARD_holland);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211p_CCH", ns3::WIFI_PHY_STANDARD_80211p_CCH);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_STANDARD_80211p_SCH", ns3::WIFI_PHY_STANDARD_80211p_SCH);
    PyModule_AddIntConstant(m, (char *) "WIFI_PHY_UNKNOWN", ns3::WIFI_PHY_UNKNOWN);
    PyModule_AddIntConstant(m, (char *) "AC_BE", ns3::AC_BE);
    PyModule_AddIntConstant(m, (char *) "AC_BK", ns3::AC_BK);
    PyModule_AddIntConstant(m, (char *) "AC_VI", ns3::AC_VI);
    PyModule_AddIntConstant(m, (char *) "AC_VO", ns3::AC_VO);
    PyModule_AddIntConstant(m, (char *) "AC_BE_NQOS", ns3::AC_BE_NQOS);
    PyModule_AddIntConstant(m, (char *) "AC_UNDEF", ns3::AC_UNDEF);
    PyModule_AddIntConstant(m, (char *) "BASIC_BLOCK_ACK", ns3::BASIC_BLOCK_ACK);
    PyModule_AddIntConstant(m, (char *) "COMPRESSED_BLOCK_ACK", ns3::COMPRESSED_BLOCK_ACK);
    PyModule_AddIntConstant(m, (char *) "MULTI_TID_BLOCK_ACK", ns3::MULTI_TID_BLOCK_ACK);
    PyModule_AddIntConstant(m, (char *) "UP_BK", ns3::UP_BK);
    PyModule_AddIntConstant(m, (char *) "UP_BE", ns3::UP_BE);
    PyModule_AddIntConstant(m, (char *) "UP_EE", ns3::UP_EE);
    PyModule_AddIntConstant(m, (char *) "UP_CL", ns3::UP_CL);
    PyModule_AddIntConstant(m, (char *) "UP_VI", ns3::UP_VI);
    PyModule_AddIntConstant(m, (char *) "UP_VO", ns3::UP_VO);
    PyModule_AddIntConstant(m, (char *) "UP_NC", ns3::UP_NC);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_UNDEFINED", ns3::WIFI_CODE_RATE_UNDEFINED);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_3_4", ns3::WIFI_CODE_RATE_3_4);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_2_3", ns3::WIFI_CODE_RATE_2_3);
    PyModule_AddIntConstant(m, (char *) "WIFI_CODE_RATE_1_2", ns3::WIFI_CODE_RATE_1_2);
    PyModule_AddIntConstant(m, (char *) "STA", ns3::STA);
    PyModule_AddIntConstant(m, (char *) "AP", ns3::AP);
    PyModule_AddIntConstant(m, (char *) "ADHOC_STA", ns3::ADHOC_STA);
    {
        PyObject *tmp_value;
         // ns3::OriginatorBlockAckAgreement::PENDING
        tmp_value = PyInt_FromLong(ns3::OriginatorBlockAckAgreement::PENDING);
        PyDict_SetItemString((PyObject*) PyNs3OriginatorBlockAckAgreement_Type.tp_dict, "PENDING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OriginatorBlockAckAgreement::ESTABLISHED
        tmp_value = PyInt_FromLong(ns3::OriginatorBlockAckAgreement::ESTABLISHED);
        PyDict_SetItemString((PyObject*) PyNs3OriginatorBlockAckAgreement_Type.tp_dict, "ESTABLISHED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OriginatorBlockAckAgreement::INACTIVE
        tmp_value = PyInt_FromLong(ns3::OriginatorBlockAckAgreement::INACTIVE);
        PyDict_SetItemString((PyObject*) PyNs3OriginatorBlockAckAgreement_Type.tp_dict, "INACTIVE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OriginatorBlockAckAgreement::UNSUCCESSFUL
        tmp_value = PyInt_FromLong(ns3::OriginatorBlockAckAgreement::UNSUCCESSFUL);
        PyDict_SetItemString((PyObject*) PyNs3OriginatorBlockAckAgreement_Type.tp_dict, "UNSUCCESSFUL", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiRemoteStationState::BRAND_NEW
        tmp_value = PyInt_FromLong(ns3::WifiRemoteStationState::BRAND_NEW);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationState_Type.tp_dict, "BRAND_NEW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRemoteStationState::DISASSOC
        tmp_value = PyInt_FromLong(ns3::WifiRemoteStationState::DISASSOC);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationState_Type.tp_dict, "DISASSOC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRemoteStationState::WAIT_ASSOC_TX_OK
        tmp_value = PyInt_FromLong(ns3::WifiRemoteStationState::WAIT_ASSOC_TX_OK);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationState_Type.tp_dict, "WAIT_ASSOC_TX_OK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRemoteStationState::GOT_ASSOC_TX_OK
        tmp_value = PyInt_FromLong(ns3::WifiRemoteStationState::GOT_ASSOC_TX_OK);
        PyDict_SetItemString((PyObject*) PyNs3WifiRemoteStationState_Type.tp_dict, "GOT_ASSOC_TX_OK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::BLOCK_ACK
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::BLOCK_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BLOCK_ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MESH_PEERING_MGT
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MESH_PEERING_MGT);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MESH_PEERING_MGT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MESH_LINK_METRIC
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MESH_LINK_METRIC);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MESH_LINK_METRIC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MESH_PATH_SELECTION
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MESH_PATH_SELECTION);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MESH_PATH_SELECTION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MESH_INTERWORKING
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MESH_INTERWORKING);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MESH_INTERWORKING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MESH_RESOURCE_COORDINATION
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MESH_RESOURCE_COORDINATION);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MESH_RESOURCE_COORDINATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MESH_PROXY_FORWARDING
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MESH_PROXY_FORWARDING);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MESH_PROXY_FORWARDING", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::PEER_LINK_OPEN
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::PEER_LINK_OPEN);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PEER_LINK_OPEN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::PEER_LINK_CONFIRM
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::PEER_LINK_CONFIRM);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PEER_LINK_CONFIRM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::PEER_LINK_CLOSE
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::PEER_LINK_CLOSE);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PEER_LINK_CLOSE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::LINK_METRIC_REQUEST
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::LINK_METRIC_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "LINK_METRIC_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::LINK_METRIC_REPORT
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::LINK_METRIC_REPORT);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "LINK_METRIC_REPORT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::PATH_SELECTION
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::PATH_SELECTION);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PATH_SELECTION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::PORTAL_ANNOUNCEMENT
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::PORTAL_ANNOUNCEMENT);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "PORTAL_ANNOUNCEMENT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::CONGESTION_CONTROL_NOTIFICATION
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::CONGESTION_CONTROL_NOTIFICATION);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "CONGESTION_CONTROL_NOTIFICATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDA_SETUP_REQUEST
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MDA_SETUP_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDA_SETUP_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDA_SETUP_REPLY
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MDA_SETUP_REPLY);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDA_SETUP_REPLY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDAOP_ADVERTISMENT_REQUEST
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MDAOP_ADVERTISMENT_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDAOP_ADVERTISMENT_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDAOP_ADVERTISMENTS
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MDAOP_ADVERTISMENTS);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDAOP_ADVERTISMENTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MDAOP_SET_TEARDOWN
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MDAOP_SET_TEARDOWN);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MDAOP_SET_TEARDOWN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::BEACON_TIMING_REQUEST
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::BEACON_TIMING_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BEACON_TIMING_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::BEACON_TIMING_RESPONSE
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::BEACON_TIMING_RESPONSE);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BEACON_TIMING_RESPONSE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::TBTT_ADJUSTMENT_REQUEST
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::TBTT_ADJUSTMENT_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "TBTT_ADJUSTMENT_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::MESH_CHANNEL_SWITCH_ANNOUNCEMENT
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::MESH_CHANNEL_SWITCH_ANNOUNCEMENT);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "MESH_CHANNEL_SWITCH_ANNOUNCEMENT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiActionHeader::BLOCK_ACK_ADDBA_REQUEST
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::BLOCK_ACK_ADDBA_REQUEST);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BLOCK_ACK_ADDBA_REQUEST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::BLOCK_ACK_ADDBA_RESPONSE
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::BLOCK_ACK_ADDBA_RESPONSE);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BLOCK_ACK_ADDBA_RESPONSE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiActionHeader::BLOCK_ACK_DELBA
        tmp_value = PyInt_FromLong(ns3::WifiActionHeader::BLOCK_ACK_DELBA);
        PyDict_SetItemString((PyObject*) PyNs3WifiActionHeader_Type.tp_dict, "BLOCK_ACK_DELBA", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiMacHeader::NORMAL_ACK
        tmp_value = PyInt_FromLong(ns3::WifiMacHeader::NORMAL_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "NORMAL_ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::NO_ACK
        tmp_value = PyInt_FromLong(ns3::WifiMacHeader::NO_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "NO_ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::NO_EXPLICIT_ACK
        tmp_value = PyInt_FromLong(ns3::WifiMacHeader::NO_EXPLICIT_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "NO_EXPLICIT_ACK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::BLOCK_ACK
        tmp_value = PyInt_FromLong(ns3::WifiMacHeader::BLOCK_ACK);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "BLOCK_ACK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiMacHeader::ADDR1
        tmp_value = PyInt_FromLong(ns3::WifiMacHeader::ADDR1);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "ADDR1", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::ADDR2
        tmp_value = PyInt_FromLong(ns3::WifiMacHeader::ADDR2);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "ADDR2", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::ADDR3
        tmp_value = PyInt_FromLong(ns3::WifiMacHeader::ADDR3);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "ADDR3", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiMacHeader::ADDR4
        tmp_value = PyInt_FromLong(ns3::WifiMacHeader::ADDR4);
        PyDict_SetItemString((PyObject*) PyNs3WifiMacHeader_Type.tp_dict, "ADDR4", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiPhy::IDLE
        tmp_value = PyInt_FromLong(ns3::WifiPhy::IDLE);
        PyDict_SetItemString((PyObject*) PyNs3WifiPhy_Type.tp_dict, "IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiPhy::CCA_BUSY
        tmp_value = PyInt_FromLong(ns3::WifiPhy::CCA_BUSY);
        PyDict_SetItemString((PyObject*) PyNs3WifiPhy_Type.tp_dict, "CCA_BUSY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiPhy::TX
        tmp_value = PyInt_FromLong(ns3::WifiPhy::TX);
        PyDict_SetItemString((PyObject*) PyNs3WifiPhy_Type.tp_dict, "TX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiPhy::RX
        tmp_value = PyInt_FromLong(ns3::WifiPhy::RX);
        PyDict_SetItemString((PyObject*) PyNs3WifiPhy_Type.tp_dict, "RX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiPhy::SWITCHING
        tmp_value = PyInt_FromLong(ns3::WifiPhy::SWITCHING);
        PyDict_SetItemString((PyObject*) PyNs3WifiPhy_Type.tp_dict, "SWITCHING", tmp_value);
        Py_DECREF(tmp_value);
    }
    PyModule_AddIntConstant(m, (char *) "DATA", ns3::DATA);
    PyModule_AddIntConstant(m, (char *) "UNICAST_POLLING", ns3::UNICAST_POLLING);
    {
        PyObject *tmp_value;
         // ns3::Cid::BROADCAST
        tmp_value = PyInt_FromLong(ns3::Cid::BROADCAST);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "BROADCAST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::INITIAL_RANGING
        tmp_value = PyInt_FromLong(ns3::Cid::INITIAL_RANGING);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "INITIAL_RANGING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::BASIC
        tmp_value = PyInt_FromLong(ns3::Cid::BASIC);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "BASIC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::PRIMARY
        tmp_value = PyInt_FromLong(ns3::Cid::PRIMARY);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "PRIMARY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::TRANSPORT
        tmp_value = PyInt_FromLong(ns3::Cid::TRANSPORT);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "TRANSPORT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::MULTICAST
        tmp_value = PyInt_FromLong(ns3::Cid::MULTICAST);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "MULTICAST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Cid::PADDING
        tmp_value = PyInt_FromLong(ns3::Cid::PADDING);
        PyDict_SetItemString((PyObject*) PyNs3Cid_Type.tp_dict, "PADDING", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::CsParameters::ADD
        tmp_value = PyInt_FromLong(ns3::CsParameters::ADD);
        PyDict_SetItemString((PyObject*) PyNs3CsParameters_Type.tp_dict, "ADD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::CsParameters::REPLACE
        tmp_value = PyInt_FromLong(ns3::CsParameters::REPLACE);
        PyDict_SetItemString((PyObject*) PyNs3CsParameters_Type.tp_dict, "REPLACE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::CsParameters::DELETE
        tmp_value = PyInt_FromLong(ns3::CsParameters::DELETE);
        PyDict_SetItemString((PyObject*) PyNs3CsParameters_Type.tp_dict, "DELETE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::OfdmDlBurstProfile::DIUC_STC_ZONE
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_STC_ZONE);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_STC_ZONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_1
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_1);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_1", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_2
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_2);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_2", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_3
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_3);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_3", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_4
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_4);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_4", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_5
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_5);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_5", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_6
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_6);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_6", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_7
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_7);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_7", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_8
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_8);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_8", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_9
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_9);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_9", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_10
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_10);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_10", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_11
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_BURST_PROFILE_11);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_BURST_PROFILE_11", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_GAP
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_GAP);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_GAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmDlBurstProfile::DIUC_END_OF_MAP
        tmp_value = PyInt_FromLong(ns3::OfdmDlBurstProfile::DIUC_END_OF_MAP);
        PyDict_SetItemString((PyObject*) PyNs3OfdmDlBurstProfile_Type.tp_dict, "DIUC_END_OF_MAP", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::OfdmUlBurstProfile::UIUC_INITIAL_RANGING
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_INITIAL_RANGING);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_INITIAL_RANGING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_REQ_REGION_FULL
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_REQ_REGION_FULL);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_REQ_REGION_FULL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_REQ_REGION_FOCUSED
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_REQ_REGION_FOCUSED);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_REQ_REGION_FOCUSED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_FOCUSED_CONTENTION_IE
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_FOCUSED_CONTENTION_IE);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_FOCUSED_CONTENTION_IE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_5
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_5);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_5", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_6
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_6);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_6", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_7
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_7);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_7", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_8
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_8);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_8", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_9
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_9);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_9", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_10
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_10);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_10", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_11
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_11);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_11", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_12
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_BURST_PROFILE_12);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_BURST_PROFILE_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_SUBCH_NETWORK_ENTRY
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_SUBCH_NETWORK_ENTRY);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_SUBCH_NETWORK_ENTRY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::OfdmUlBurstProfile::UIUC_END_OF_MAP
        tmp_value = PyInt_FromLong(ns3::OfdmUlBurstProfile::UIUC_END_OF_MAP);
        PyDict_SetItemString((PyObject*) PyNs3OfdmUlBurstProfile_Type.tp_dict, "UIUC_END_OF_MAP", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::SF_DIRECTION_DOWN
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_DIRECTION_DOWN);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_DIRECTION_DOWN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_DIRECTION_UP
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_DIRECTION_UP);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_DIRECTION_UP", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::SF_TYPE_PROVISIONED
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_PROVISIONED);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_PROVISIONED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_ADMITTED
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_ADMITTED);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_ADMITTED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_ACTIVE
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_ACTIVE);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_ACTIVE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::SF_TYPE_NONE
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_NONE);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_NONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_UNDEF
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_UNDEF);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_UNDEF", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_BE
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_BE);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_BE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_NRTPS
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_NRTPS);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_NRTPS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_RTPS
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_RTPS);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_RTPS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_UGS
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_UGS);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_UGS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::SF_TYPE_ALL
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::SF_TYPE_ALL);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "SF_TYPE_ALL", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::ATM
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::ATM);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "ATM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV4
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::IPV4);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV4", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV6
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::IPV6);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV6", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::ETHERNET
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::ETHERNET);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "ETHERNET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::VLAN
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::VLAN);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "VLAN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV4_OVER_ETHERNET
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::IPV4_OVER_ETHERNET);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV4_OVER_ETHERNET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV6_OVER_ETHERNET
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::IPV6_OVER_ETHERNET);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV6_OVER_ETHERNET", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV4_OVER_VLAN
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::IPV4_OVER_VLAN);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV4_OVER_VLAN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::IPV6_OVER_VLAN
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::IPV6_OVER_VLAN);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "IPV6_OVER_VLAN", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlow::MODULATION_TYPE_BPSK_12
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::MODULATION_TYPE_BPSK_12);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_BPSK_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QPSK_12
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QPSK_12);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QPSK_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QPSK_34
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QPSK_34);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QPSK_34", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QAM16_12
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QAM16_12);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QAM16_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QAM16_34
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QAM16_34);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QAM16_34", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QAM64_23
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QAM64_23);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QAM64_23", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlow::MODULATION_TYPE_QAM64_34
        tmp_value = PyInt_FromLong(ns3::ServiceFlow::MODULATION_TYPE_QAM64_34);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlow_Type.tp_dict, "MODULATION_TYPE_QAM64_34", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ClassificationRuleVectorTlvValue::Priority
        tmp_value = PyInt_FromLong(ns3::ClassificationRuleVectorTlvValue::Priority);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Priority", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::ToS
        tmp_value = PyInt_FromLong(ns3::ClassificationRuleVectorTlvValue::ToS);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "ToS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::Protocol
        tmp_value = PyInt_FromLong(ns3::ClassificationRuleVectorTlvValue::Protocol);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Protocol", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::IP_src
        tmp_value = PyInt_FromLong(ns3::ClassificationRuleVectorTlvValue::IP_src);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "IP_src", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::IP_dst
        tmp_value = PyInt_FromLong(ns3::ClassificationRuleVectorTlvValue::IP_dst);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "IP_dst", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::Port_src
        tmp_value = PyInt_FromLong(ns3::ClassificationRuleVectorTlvValue::Port_src);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Port_src", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::Port_dst
        tmp_value = PyInt_FromLong(ns3::ClassificationRuleVectorTlvValue::Port_dst);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Port_dst", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ClassificationRuleVectorTlvValue::Index
        tmp_value = PyInt_FromLong(ns3::ClassificationRuleVectorTlvValue::Index);
        PyDict_SetItemString((PyObject*) PyNs3ClassificationRuleVectorTlvValue_Type.tp_dict, "Index", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::CsParamVectorTlvValue::Classifier_DSC_Action
        tmp_value = PyInt_FromLong(ns3::CsParamVectorTlvValue::Classifier_DSC_Action);
        PyDict_SetItemString((PyObject*) PyNs3CsParamVectorTlvValue_Type.tp_dict, "Classifier_DSC_Action", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::CsParamVectorTlvValue::Packet_Classification_Rule
        tmp_value = PyInt_FromLong(ns3::CsParamVectorTlvValue::Packet_Classification_Rule);
        PyDict_SetItemString((PyObject*) PyNs3CsParamVectorTlvValue_Type.tp_dict, "Packet_Classification_Rule", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::MacHeaderType::HEADER_TYPE_GENERIC
        tmp_value = PyInt_FromLong(ns3::MacHeaderType::HEADER_TYPE_GENERIC);
        PyDict_SetItemString((PyObject*) PyNs3MacHeaderType_Type.tp_dict, "HEADER_TYPE_GENERIC", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::MacHeaderType::HEADER_TYPE_BANDWIDTH
        tmp_value = PyInt_FromLong(ns3::MacHeaderType::HEADER_TYPE_BANDWIDTH);
        PyDict_SetItemString((PyObject*) PyNs3MacHeaderType_Type.tp_dict, "HEADER_TYPE_BANDWIDTH", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ManagementMessageType::MESSAGE_TYPE_UCD
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_UCD);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_UCD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DCD
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DCD);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DCD", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DL_MAP
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DL_MAP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DL_MAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_UL_MAP
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_UL_MAP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_UL_MAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_RNG_REQ
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_RNG_REQ);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_RNG_REQ", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_RNG_RSP
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_RNG_RSP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_RNG_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_REG_REQ
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_REG_REQ);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_REG_REQ", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_REG_RSP
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_REG_RSP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_REG_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DSA_REQ
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DSA_REQ);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DSA_REQ", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DSA_RSP
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DSA_RSP);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DSA_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ManagementMessageType::MESSAGE_TYPE_DSA_ACK
        tmp_value = PyInt_FromLong(ns3::ManagementMessageType::MESSAGE_TYPE_DSA_ACK);
        PyDict_SetItemString((PyObject*) PyNs3ManagementMessageType_Type.tp_dict, "MESSAGE_TYPE_DSA_ACK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ServiceFlowManager::CONFIRMATION_CODE_SUCCESS
        tmp_value = PyInt_FromLong(ns3::ServiceFlowManager::CONFIRMATION_CODE_SUCCESS);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_SUCCESS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ServiceFlowManager::CONFIRMATION_CODE_REJECT
        tmp_value = PyInt_FromLong(ns3::ServiceFlowManager::CONFIRMATION_CODE_REJECT);
        PyDict_SetItemString((PyObject*) PyNs3ServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_REJECT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SfVectorTlvValue::SFID
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::SFID);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "SFID", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::CID
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::CID);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "CID", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Service_Class_Name
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Service_Class_Name);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Service_Class_Name", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::reserved1
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::reserved1);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "reserved1", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::QoS_Parameter_Set_Type
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::QoS_Parameter_Set_Type);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "QoS_Parameter_Set_Type", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Traffic_Priority
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Traffic_Priority);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Traffic_Priority", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Maximum_Sustained_Traffic_Rate
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Maximum_Sustained_Traffic_Rate);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Maximum_Sustained_Traffic_Rate", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Maximum_Traffic_Burst
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Maximum_Traffic_Burst);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Maximum_Traffic_Burst", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Minimum_Reserved_Traffic_Rate
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Minimum_Reserved_Traffic_Rate);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Minimum_Reserved_Traffic_Rate", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Minimum_Tolerable_Traffic_Rate
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Minimum_Tolerable_Traffic_Rate);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Minimum_Tolerable_Traffic_Rate", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Service_Flow_Scheduling_Type
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Service_Flow_Scheduling_Type);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Service_Flow_Scheduling_Type", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Request_Transmission_Policy
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Request_Transmission_Policy);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Request_Transmission_Policy", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Tolerated_Jitter
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Tolerated_Jitter);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Tolerated_Jitter", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Maximum_Latency
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Maximum_Latency);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Maximum_Latency", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Fixed_length_versus_Variable_length_SDU_Indicator
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Fixed_length_versus_Variable_length_SDU_Indicator);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Fixed_length_versus_Variable_length_SDU_Indicator", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::SDU_Size
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::SDU_Size);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "SDU_Size", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::Target_SAID
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::Target_SAID);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "Target_SAID", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_Enable
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_Enable);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_Enable", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_WINDOW_SIZE
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_WINDOW_SIZE);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_WINDOW_SIZE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_RETRY_TIMEOUT_Transmitter_Delay
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_RETRY_TIMEOUT_Transmitter_Delay);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_RETRY_TIMEOUT_Transmitter_Delay", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_RETRY_TIMEOUT_Receiver_Delay
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_RETRY_TIMEOUT_Receiver_Delay);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_RETRY_TIMEOUT_Receiver_Delay", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_BLOCK_LIFETIME
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_BLOCK_LIFETIME);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_BLOCK_LIFETIME", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_SYNC_LOSS
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_SYNC_LOSS);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_SYNC_LOSS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_DELIVER_IN_ORDER
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_DELIVER_IN_ORDER);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_DELIVER_IN_ORDER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_PURGE_TIMEOUT
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_PURGE_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_PURGE_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::ARQ_BLOCK_SIZE
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::ARQ_BLOCK_SIZE);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "ARQ_BLOCK_SIZE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::reserved2
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::reserved2);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "reserved2", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::CS_Specification
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::CS_Specification);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "CS_Specification", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SfVectorTlvValue::IPV4_CS_Parameters
        tmp_value = PyInt_FromLong(ns3::SfVectorTlvValue::IPV4_CS_Parameters);
        PyDict_SetItemString((PyObject*) PyNs3SfVectorTlvValue_Type.tp_dict, "IPV4_CS_Parameters", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SsServiceFlowManager::CONFIRMATION_CODE_SUCCESS
        tmp_value = PyInt_FromLong(ns3::SsServiceFlowManager::CONFIRMATION_CODE_SUCCESS);
        PyDict_SetItemString((PyObject*) PyNs3SsServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_SUCCESS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SsServiceFlowManager::CONFIRMATION_CODE_REJECT
        tmp_value = PyInt_FromLong(ns3::SsServiceFlowManager::CONFIRMATION_CODE_REJECT);
        PyDict_SetItemString((PyObject*) PyNs3SsServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_REJECT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Tlv::HMAC_TUPLE
        tmp_value = PyInt_FromLong(ns3::Tlv::HMAC_TUPLE);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "HMAC_TUPLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::MAC_VERSION_ENCODING
        tmp_value = PyInt_FromLong(ns3::Tlv::MAC_VERSION_ENCODING);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "MAC_VERSION_ENCODING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::CURRENT_TRANSMIT_POWER
        tmp_value = PyInt_FromLong(ns3::Tlv::CURRENT_TRANSMIT_POWER);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "CURRENT_TRANSMIT_POWER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::DOWNLINK_SERVICE_FLOW
        tmp_value = PyInt_FromLong(ns3::Tlv::DOWNLINK_SERVICE_FLOW);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "DOWNLINK_SERVICE_FLOW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::UPLINK_SERVICE_FLOW
        tmp_value = PyInt_FromLong(ns3::Tlv::UPLINK_SERVICE_FLOW);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "UPLINK_SERVICE_FLOW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::VENDOR_ID_EMCODING
        tmp_value = PyInt_FromLong(ns3::Tlv::VENDOR_ID_EMCODING);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "VENDOR_ID_EMCODING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Tlv::VENDOR_SPECIFIC_INFORMATION
        tmp_value = PyInt_FromLong(ns3::Tlv::VENDOR_SPECIFIC_INFORMATION);
        PyDict_SetItemString((PyObject*) PyNs3Tlv_Type.tp_dict, "VENDOR_SPECIFIC_INFORMATION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::UlJob::LOW
        tmp_value = PyInt_FromLong(ns3::UlJob::LOW);
        PyDict_SetItemString((PyObject*) PyNs3UlJob_Type.tp_dict, "LOW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UlJob::INTERMEDIATE
        tmp_value = PyInt_FromLong(ns3::UlJob::INTERMEDIATE);
        PyDict_SetItemString((PyObject*) PyNs3UlJob_Type.tp_dict, "INTERMEDIATE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UlJob::HIGH
        tmp_value = PyInt_FromLong(ns3::UlJob::HIGH);
        PyDict_SetItemString((PyObject*) PyNs3UlJob_Type.tp_dict, "HIGH", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxPhy::MODULATION_TYPE_BPSK_12
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::MODULATION_TYPE_BPSK_12);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_BPSK_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QPSK_12
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QPSK_12);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QPSK_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QPSK_34
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QPSK_34);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QPSK_34", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QAM16_12
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QAM16_12);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QAM16_12", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QAM16_34
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QAM16_34);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QAM16_34", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QAM64_23
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QAM64_23);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QAM64_23", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::MODULATION_TYPE_QAM64_34
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::MODULATION_TYPE_QAM64_34);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "MODULATION_TYPE_QAM64_34", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxPhy::PHY_STATE_IDLE
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::PHY_STATE_IDLE);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "PHY_STATE_IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::PHY_STATE_SCANNING
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::PHY_STATE_SCANNING);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "PHY_STATE_SCANNING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::PHY_STATE_TX
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::PHY_STATE_TX);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "PHY_STATE_TX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::PHY_STATE_RX
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::PHY_STATE_RX);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "PHY_STATE_RX", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxPhy::SimpleWimaxPhy
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::SimpleWimaxPhy);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "SimpleWimaxPhy", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxPhy::simpleOfdmWimaxPhy
        tmp_value = PyInt_FromLong(ns3::WimaxPhy::simpleOfdmWimaxPhy);
        PyDict_SetItemString((PyObject*) PyNs3WimaxPhy_Type.tp_dict, "simpleOfdmWimaxPhy", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::BandwidthRequestHeader::HEADER_TYPE_INCREMENTAL
        tmp_value = PyInt_FromLong(ns3::BandwidthRequestHeader::HEADER_TYPE_INCREMENTAL);
        PyDict_SetItemString((PyObject*) PyNs3BandwidthRequestHeader_Type.tp_dict, "HEADER_TYPE_INCREMENTAL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BandwidthRequestHeader::HEADER_TYPE_AGGREGATE
        tmp_value = PyInt_FromLong(ns3::BandwidthRequestHeader::HEADER_TYPE_AGGREGATE);
        PyDict_SetItemString((PyObject*) PyNs3BandwidthRequestHeader_Type.tp_dict, "HEADER_TYPE_AGGREGATE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::BsServiceFlowManager::CONFIRMATION_CODE_SUCCESS
        tmp_value = PyInt_FromLong(ns3::BsServiceFlowManager::CONFIRMATION_CODE_SUCCESS);
        PyDict_SetItemString((PyObject*) PyNs3BsServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_SUCCESS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BsServiceFlowManager::CONFIRMATION_CODE_REJECT
        tmp_value = PyInt_FromLong(ns3::BsServiceFlowManager::CONFIRMATION_CODE_REJECT);
        PyDict_SetItemString((PyObject*) PyNs3BsServiceFlowManager_Type.tp_dict, "CONFIRMATION_CODE_REJECT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_2_POINT_5_MS
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_2_POINT_5_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_2_POINT_5_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_4_MS
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_4_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_4_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_5_MS
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_5_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_5_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_8_MS
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_8_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_8_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_10_MS
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_10_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_10_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_12_POINT_5_MS
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_12_POINT_5_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_12_POINT_5_MS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_20_MS
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxPhy::FRAME_DURATION_20_MS);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxPhy_Type.tp_dict, "FRAME_DURATION_20_MS", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxNetDevice::DIRECTION_DOWNLINK
        tmp_value = PyInt_FromLong(ns3::WimaxNetDevice::DIRECTION_DOWNLINK);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "DIRECTION_DOWNLINK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxNetDevice::DIRECTION_UPLINK
        tmp_value = PyInt_FromLong(ns3::WimaxNetDevice::DIRECTION_UPLINK);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "DIRECTION_UPLINK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxNetDevice::RANGING_STATUS_EXPIRED
        tmp_value = PyInt_FromLong(ns3::WimaxNetDevice::RANGING_STATUS_EXPIRED);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "RANGING_STATUS_EXPIRED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxNetDevice::RANGING_STATUS_CONTINUE
        tmp_value = PyInt_FromLong(ns3::WimaxNetDevice::RANGING_STATUS_CONTINUE);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "RANGING_STATUS_CONTINUE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxNetDevice::RANGING_STATUS_ABORT
        tmp_value = PyInt_FromLong(ns3::WimaxNetDevice::RANGING_STATUS_ABORT);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "RANGING_STATUS_ABORT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxNetDevice::RANGING_STATUS_SUCCESS
        tmp_value = PyInt_FromLong(ns3::WimaxNetDevice::RANGING_STATUS_SUCCESS);
        PyDict_SetItemString((PyObject*) PyNs3WimaxNetDevice_Type.tp_dict, "RANGING_STATUS_SUCCESS", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::BaseStationNetDevice::BS_STATE_DL_SUB_FRAME
        tmp_value = PyInt_FromLong(ns3::BaseStationNetDevice::BS_STATE_DL_SUB_FRAME);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "BS_STATE_DL_SUB_FRAME", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BaseStationNetDevice::BS_STATE_UL_SUB_FRAME
        tmp_value = PyInt_FromLong(ns3::BaseStationNetDevice::BS_STATE_UL_SUB_FRAME);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "BS_STATE_UL_SUB_FRAME", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BaseStationNetDevice::BS_STATE_TTG
        tmp_value = PyInt_FromLong(ns3::BaseStationNetDevice::BS_STATE_TTG);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "BS_STATE_TTG", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BaseStationNetDevice::BS_STATE_RTG
        tmp_value = PyInt_FromLong(ns3::BaseStationNetDevice::BS_STATE_RTG);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "BS_STATE_RTG", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::BaseStationNetDevice::SHORT_PREAMBLE
        tmp_value = PyInt_FromLong(ns3::BaseStationNetDevice::SHORT_PREAMBLE);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "SHORT_PREAMBLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::BaseStationNetDevice::LONG_PREAMBLE
        tmp_value = PyInt_FromLong(ns3::BaseStationNetDevice::LONG_PREAMBLE);
        PyDict_SetItemString((PyObject*) PyNs3BaseStationNetDevice_Type.tp_dict, "LONG_PREAMBLE", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SimpleOfdmWimaxChannel::RANDOM_PROPAGATION
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxChannel::RANDOM_PROPAGATION);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxChannel_Type.tp_dict, "RANDOM_PROPAGATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxChannel::FRIIS_PROPAGATION
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxChannel::FRIIS_PROPAGATION);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxChannel_Type.tp_dict, "FRIIS_PROPAGATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxChannel::LOG_DISTANCE_PROPAGATION
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxChannel::LOG_DISTANCE_PROPAGATION);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxChannel_Type.tp_dict, "LOG_DISTANCE_PROPAGATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SimpleOfdmWimaxChannel::COST231_PROPAGATION
        tmp_value = PyInt_FromLong(ns3::SimpleOfdmWimaxChannel::COST231_PROPAGATION);
        PyDict_SetItemString((PyObject*) PyNs3SimpleOfdmWimaxChannel_Type.tp_dict, "COST231_PROPAGATION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SubscriberStationNetDevice::SS_STATE_IDLE
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_IDLE);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_SCANNING
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_SCANNING);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_SCANNING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_SYNCHRONIZING
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_SYNCHRONIZING);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_SYNCHRONIZING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_ACQUIRING_PARAMETERS
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_ACQUIRING_PARAMETERS);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_ACQUIRING_PARAMETERS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_WAITING_REG_RANG_INTRVL
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_WAITING_REG_RANG_INTRVL);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_WAITING_REG_RANG_INTRVL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_WAITING_INV_RANG_INTRVL
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_WAITING_INV_RANG_INTRVL);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_WAITING_INV_RANG_INTRVL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_WAITING_RNG_RSP
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_WAITING_RNG_RSP);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_WAITING_RNG_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_ADJUSTING_PARAMETERS
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_ADJUSTING_PARAMETERS);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_ADJUSTING_PARAMETERS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_REGISTERED
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_REGISTERED);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_REGISTERED", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_TRANSMITTING
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_TRANSMITTING);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_TRANSMITTING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::SS_STATE_STOPPED
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::SS_STATE_STOPPED);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "SS_STATE_STOPPED", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::SubscriberStationNetDevice::EVENT_NONE
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::EVENT_NONE);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_NONE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_WAIT_FOR_RNG_RSP
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::EVENT_WAIT_FOR_RNG_RSP);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_WAIT_FOR_RNG_RSP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_DL_MAP_SYNC_TIMEOUT
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::EVENT_DL_MAP_SYNC_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_DL_MAP_SYNC_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_LOST_DL_MAP
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::EVENT_LOST_DL_MAP);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_LOST_DL_MAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_LOST_UL_MAP
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::EVENT_LOST_UL_MAP);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_LOST_UL_MAP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_DCD_WAIT_TIMEOUT
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::EVENT_DCD_WAIT_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_DCD_WAIT_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_UCD_WAIT_TIMEOUT
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::EVENT_UCD_WAIT_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_UCD_WAIT_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::SubscriberStationNetDevice::EVENT_RANG_OPP_WAIT_TIMEOUT
        tmp_value = PyInt_FromLong(ns3::SubscriberStationNetDevice::EVENT_RANG_OPP_WAIT_TIMEOUT);
        PyDict_SetItemString((PyObject*) PyNs3SubscriberStationNetDevice_Type.tp_dict, "EVENT_RANG_OPP_WAIT_TIMEOUT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::Ipv4FlowProbe::DROP_NO_ROUTE
        tmp_value = PyInt_FromLong(ns3::Ipv4FlowProbe::DROP_NO_ROUTE);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4FlowProbe_Type.tp_dict, "DROP_NO_ROUTE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4FlowProbe::DROP_TTL_EXPIRE
        tmp_value = PyInt_FromLong(ns3::Ipv4FlowProbe::DROP_TTL_EXPIRE);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4FlowProbe_Type.tp_dict, "DROP_TTL_EXPIRE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4FlowProbe::DROP_BAD_CHECKSUM
        tmp_value = PyInt_FromLong(ns3::Ipv4FlowProbe::DROP_BAD_CHECKSUM);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4FlowProbe_Type.tp_dict, "DROP_BAD_CHECKSUM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4FlowProbe::DROP_QUEUE
        tmp_value = PyInt_FromLong(ns3::Ipv4FlowProbe::DROP_QUEUE);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4FlowProbe_Type.tp_dict, "DROP_QUEUE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4FlowProbe::DROP_INTERFACE_DOWN
        tmp_value = PyInt_FromLong(ns3::Ipv4FlowProbe::DROP_INTERFACE_DOWN);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4FlowProbe_Type.tp_dict, "DROP_INTERFACE_DOWN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4FlowProbe::DROP_ROUTE_ERROR
        tmp_value = PyInt_FromLong(ns3::Ipv4FlowProbe::DROP_ROUTE_ERROR);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4FlowProbe_Type.tp_dict, "DROP_ROUTE_ERROR", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::Ipv4FlowProbe::DROP_INVALID_REASON
        tmp_value = PyInt_FromLong(ns3::Ipv4FlowProbe::DROP_INVALID_REASON);
        PyDict_SetItemString((PyObject*) PyNs3Ipv4FlowProbe_Type.tp_dict, "DROP_INVALID_REASON", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::MeshHelper::SPREAD_CHANNELS
        tmp_value = PyInt_FromLong(ns3::MeshHelper::SPREAD_CHANNELS);
        PyDict_SetItemString((PyObject*) PyNs3MeshHelper_Type.tp_dict, "SPREAD_CHANNELS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::MeshHelper::ZERO_CHANNEL
        tmp_value = PyInt_FromLong(ns3::MeshHelper::ZERO_CHANNEL);
        PyDict_SetItemString((PyObject*) PyNs3MeshHelper_Type.tp_dict, "ZERO_CHANNEL", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::PcapHelper::DLT_NULL
        tmp_value = PyInt_FromLong(ns3::PcapHelper::DLT_NULL);
        PyDict_SetItemString((PyObject*) PyNs3PcapHelper_Type.tp_dict, "DLT_NULL", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::PcapHelper::DLT_EN10MB
        tmp_value = PyInt_FromLong(ns3::PcapHelper::DLT_EN10MB);
        PyDict_SetItemString((PyObject*) PyNs3PcapHelper_Type.tp_dict, "DLT_EN10MB", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::PcapHelper::DLT_PPP
        tmp_value = PyInt_FromLong(ns3::PcapHelper::DLT_PPP);
        PyDict_SetItemString((PyObject*) PyNs3PcapHelper_Type.tp_dict, "DLT_PPP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::PcapHelper::DLT_RAW
        tmp_value = PyInt_FromLong(ns3::PcapHelper::DLT_RAW);
        PyDict_SetItemString((PyObject*) PyNs3PcapHelper_Type.tp_dict, "DLT_RAW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::PcapHelper::DLT_IEEE802_11
        tmp_value = PyInt_FromLong(ns3::PcapHelper::DLT_IEEE802_11);
        PyDict_SetItemString((PyObject*) PyNs3PcapHelper_Type.tp_dict, "DLT_IEEE802_11", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::PcapHelper::DLT_PRISM_HEADER
        tmp_value = PyInt_FromLong(ns3::PcapHelper::DLT_PRISM_HEADER);
        PyDict_SetItemString((PyObject*) PyNs3PcapHelper_Type.tp_dict, "DLT_PRISM_HEADER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::PcapHelper::DLT_IEEE802_11_RADIO
        tmp_value = PyInt_FromLong(ns3::PcapHelper::DLT_IEEE802_11_RADIO);
        PyDict_SetItemString((PyObject*) PyNs3PcapHelper_Type.tp_dict, "DLT_IEEE802_11_RADIO", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxHelper::DEVICE_TYPE_SUBSCRIBER_STATION
        tmp_value = PyInt_FromLong(ns3::WimaxHelper::DEVICE_TYPE_SUBSCRIBER_STATION);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "DEVICE_TYPE_SUBSCRIBER_STATION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxHelper::DEVICE_TYPE_BASE_STATION
        tmp_value = PyInt_FromLong(ns3::WimaxHelper::DEVICE_TYPE_BASE_STATION);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "DEVICE_TYPE_BASE_STATION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxHelper::SIMPLE_PHY_TYPE_OFDM
        tmp_value = PyInt_FromLong(ns3::WimaxHelper::SIMPLE_PHY_TYPE_OFDM);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "SIMPLE_PHY_TYPE_OFDM", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WimaxHelper::SCHED_TYPE_SIMPLE
        tmp_value = PyInt_FromLong(ns3::WimaxHelper::SCHED_TYPE_SIMPLE);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "SCHED_TYPE_SIMPLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxHelper::SCHED_TYPE_RTPS
        tmp_value = PyInt_FromLong(ns3::WimaxHelper::SCHED_TYPE_RTPS);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "SCHED_TYPE_RTPS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WimaxHelper::SCHED_TYPE_MBQOS
        tmp_value = PyInt_FromLong(ns3::WimaxHelper::SCHED_TYPE_MBQOS);
        PyDict_SetItemString((PyObject*) PyNs3WimaxHelper_Type.tp_dict, "SCHED_TYPE_MBQOS", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::YansWifiPhyHelper::DLT_IEEE802_11
        tmp_value = PyInt_FromLong(ns3::YansWifiPhyHelper::DLT_IEEE802_11);
        PyDict_SetItemString((PyObject*) PyNs3YansWifiPhyHelper_Type.tp_dict, "DLT_IEEE802_11", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::YansWifiPhyHelper::DLT_PRISM_HEADER
        tmp_value = PyInt_FromLong(ns3::YansWifiPhyHelper::DLT_PRISM_HEADER);
        PyDict_SetItemString((PyObject*) PyNs3YansWifiPhyHelper_Type.tp_dict, "DLT_PRISM_HEADER", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::YansWifiPhyHelper::DLT_IEEE802_11_RADIO
        tmp_value = PyInt_FromLong(ns3::YansWifiPhyHelper::DLT_IEEE802_11_RADIO);
        PyDict_SetItemString((PyObject*) PyNs3YansWifiPhyHelper_Type.tp_dict, "DLT_IEEE802_11_RADIO", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::UanTxMode::PSK
        tmp_value = PyInt_FromLong(ns3::UanTxMode::PSK);
        PyDict_SetItemString((PyObject*) PyNs3UanTxMode_Type.tp_dict, "PSK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanTxMode::QAM
        tmp_value = PyInt_FromLong(ns3::UanTxMode::QAM);
        PyDict_SetItemString((PyObject*) PyNs3UanTxMode_Type.tp_dict, "QAM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanTxMode::FSK
        tmp_value = PyInt_FromLong(ns3::UanTxMode::FSK);
        PyDict_SetItemString((PyObject*) PyNs3UanTxMode_Type.tp_dict, "FSK", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanTxMode::OTHER
        tmp_value = PyInt_FromLong(ns3::UanTxMode::OTHER);
        PyDict_SetItemString((PyObject*) PyNs3UanTxMode_Type.tp_dict, "OTHER", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::UanMacRc::TYPE_DATA
        tmp_value = PyInt_FromLong(ns3::UanMacRc::TYPE_DATA);
        PyDict_SetItemString((PyObject*) PyNs3UanMacRc_Type.tp_dict, "TYPE_DATA", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanMacRc::TYPE_GWPING
        tmp_value = PyInt_FromLong(ns3::UanMacRc::TYPE_GWPING);
        PyDict_SetItemString((PyObject*) PyNs3UanMacRc_Type.tp_dict, "TYPE_GWPING", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanMacRc::TYPE_RTS
        tmp_value = PyInt_FromLong(ns3::UanMacRc::TYPE_RTS);
        PyDict_SetItemString((PyObject*) PyNs3UanMacRc_Type.tp_dict, "TYPE_RTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanMacRc::TYPE_CTS
        tmp_value = PyInt_FromLong(ns3::UanMacRc::TYPE_CTS);
        PyDict_SetItemString((PyObject*) PyNs3UanMacRc_Type.tp_dict, "TYPE_CTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanMacRc::TYPE_ACK
        tmp_value = PyInt_FromLong(ns3::UanMacRc::TYPE_ACK);
        PyDict_SetItemString((PyObject*) PyNs3UanMacRc_Type.tp_dict, "TYPE_ACK", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::UanPhy::IDLE
        tmp_value = PyInt_FromLong(ns3::UanPhy::IDLE);
        PyDict_SetItemString((PyObject*) PyNs3UanPhy_Type.tp_dict, "IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanPhy::CCABUSY
        tmp_value = PyInt_FromLong(ns3::UanPhy::CCABUSY);
        PyDict_SetItemString((PyObject*) PyNs3UanPhy_Type.tp_dict, "CCABUSY", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanPhy::RX
        tmp_value = PyInt_FromLong(ns3::UanPhy::RX);
        PyDict_SetItemString((PyObject*) PyNs3UanPhy_Type.tp_dict, "RX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanPhy::TX
        tmp_value = PyInt_FromLong(ns3::UanPhy::TX);
        PyDict_SetItemString((PyObject*) PyNs3UanPhy_Type.tp_dict, "TX", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::UanTransducer::TX
        tmp_value = PyInt_FromLong(ns3::UanTransducer::TX);
        PyDict_SetItemString((PyObject*) PyNs3UanTransducer_Type.tp_dict, "TX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::UanTransducer::RX
        tmp_value = PyInt_FromLong(ns3::UanTransducer::RX);
        PyDict_SetItemString((PyObject*) PyNs3UanTransducer_Type.tp_dict, "RX", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::WifiRadioEnergyModel::TX
        tmp_value = PyInt_FromLong(ns3::WifiRadioEnergyModel::TX);
        PyDict_SetItemString((PyObject*) PyNs3WifiRadioEnergyModel_Type.tp_dict, "TX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRadioEnergyModel::RX
        tmp_value = PyInt_FromLong(ns3::WifiRadioEnergyModel::RX);
        PyDict_SetItemString((PyObject*) PyNs3WifiRadioEnergyModel_Type.tp_dict, "RX", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRadioEnergyModel::IDLE
        tmp_value = PyInt_FromLong(ns3::WifiRadioEnergyModel::IDLE);
        PyDict_SetItemString((PyObject*) PyNs3WifiRadioEnergyModel_Type.tp_dict, "IDLE", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::WifiRadioEnergyModel::SLEEP
        tmp_value = PyInt_FromLong(ns3::WifiRadioEnergyModel::SLEEP);
        PyDict_SetItemString((PyObject*) PyNs3WifiRadioEnergyModel_Type.tp_dict, "SLEEP", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // std::ios_base::app
        tmp_value = PyInt_FromLong(std::ios_base::app);
        PyDict_SetItemString((PyObject*) PyStdOfstream_Type.tp_dict, "app", tmp_value);
        Py_DECREF(tmp_value);
         // std::ios_base::ate
        tmp_value = PyInt_FromLong(std::ios_base::ate);
        PyDict_SetItemString((PyObject*) PyStdOfstream_Type.tp_dict, "ate", tmp_value);
        Py_DECREF(tmp_value);
         // std::ios_base::binary
        tmp_value = PyInt_FromLong(std::ios_base::binary);
        PyDict_SetItemString((PyObject*) PyStdOfstream_Type.tp_dict, "binary", tmp_value);
        Py_DECREF(tmp_value);
         // std::ios_base::in
        tmp_value = PyInt_FromLong(std::ios_base::in);
        PyDict_SetItemString((PyObject*) PyStdOfstream_Type.tp_dict, "in", tmp_value);
        Py_DECREF(tmp_value);
         // std::ios_base::out
        tmp_value = PyInt_FromLong(std::ios_base::out);
        PyDict_SetItemString((PyObject*) PyStdOfstream_Type.tp_dict, "out", tmp_value);
        Py_DECREF(tmp_value);
         // std::ios_base::trunc
        tmp_value = PyInt_FromLong(std::ios_base::trunc);
        PyDict_SetItemString((PyObject*) PyStdOfstream_Type.tp_dict, "trunc", tmp_value);
        Py_DECREF(tmp_value);
    }
    submodule = initns3_Config();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Config", submodule);
    submodule = initns3_FatalImpl();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "FatalImpl", submodule);
    submodule = initns3_addressUtils();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "addressUtils", submodule);
    submodule = initns3_aodv();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "aodv", submodule);
    submodule = initns3_dot11s();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "dot11s", submodule);
    submodule = initns3_flame();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "flame", submodule);
    submodule = initns3_internal();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "internal", submodule);
    submodule = initns3_olsr();
    if (submodule == NULL) {
        return;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "olsr", submodule);
}
