#include "ns3module.h"

PyObject *
_wrap_ns3QosUtilsMapSeqControlToUniqueInteger(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    int seqControl;
    int endSequence;
    const char *keywords[] = {"seqControl", "endSequence", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &seqControl, &endSequence)) {
        return NULL;
    }
    if (seqControl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (endSequence > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::QosUtilsMapSeqControlToUniqueInteger(seqControl, endSequence);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_ns3MakeSsidChecker()
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeChecker const > retval;
    PyNs3AttributeChecker *py_AttributeChecker;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = ns3::MakeSsidChecker();
    if (!(const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeChecker = NULL;
    } else {
        py_AttributeChecker = (PyNs3AttributeChecker *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeChecker);
    }
    
    if (py_AttributeChecker == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))), &PyNs3AttributeChecker_Type);
        py_AttributeChecker = PyObject_New(PyNs3AttributeChecker, wrapper_type);
        py_AttributeChecker->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeChecker->obj = const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeChecker->obj] = (PyObject *) py_AttributeChecker;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeChecker);
    return py_retval;
}


PyObject *
_wrap_ns3MakeWifiModeChecker()
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeChecker const > retval;
    PyNs3AttributeChecker *py_AttributeChecker;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = ns3::MakeWifiModeChecker();
    if (!(const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeChecker = NULL;
    } else {
        py_AttributeChecker = (PyNs3AttributeChecker *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeChecker);
    }
    
    if (py_AttributeChecker == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))), &PyNs3AttributeChecker_Type);
        py_AttributeChecker = PyObject_New(PyNs3AttributeChecker, wrapper_type);
        py_AttributeChecker->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeChecker->obj = const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeChecker->obj] = (PyObject *) py_AttributeChecker;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeChecker);
    return py_retval;
}


PyObject *
_wrap_ns3QosUtilsGetTidForPacket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = ns3::QosUtilsGetTidForPacket(ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_ns3QosUtilsMapTidToAc(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::AcIndex retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::QosUtilsMapTidToAc(tid);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


std::map<void*, PyObject*> PyNs3Bar_wrapper_registry;
static PyObject* _wrap_PyNs3Bar__get_bar(PyNs3Bar *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (self->obj->bar));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}
static int _wrap_PyNs3Bar__set_bar(PyNs3Bar *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Packet *tmp_Packet;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Packet_Type, &tmp_Packet)) {
        Py_DECREF(py_retval);
        return -1;
    }
    // dangerous!
    self->obj->bar = ns3::Ptr< ns3::Packet  > (tmp_Packet->obj);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Bar__get_immediate(PyNs3Bar *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->immediate));
    return py_retval;
}
static int _wrap_PyNs3Bar__set_immediate(PyNs3Bar *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->immediate = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Bar__get_recipient(PyNs3Bar *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->recipient);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3Bar__set_recipient(PyNs3Bar *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->recipient = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3Bar__get_tid(PyNs3Bar *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->tid);
    return py_retval;
}
static int _wrap_PyNs3Bar__set_tid(PyNs3Bar *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->tid = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3Bar__getsets[] = {
    {
        (char*) "tid", /* attribute name */
        (getter) _wrap_PyNs3Bar__get_tid, /* C function to get the attribute */
        (setter) _wrap_PyNs3Bar__set_tid, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "recipient", /* attribute name */
        (getter) _wrap_PyNs3Bar__get_recipient, /* C function to get the attribute */
        (setter) _wrap_PyNs3Bar__set_recipient, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "bar", /* attribute name */
        (getter) _wrap_PyNs3Bar__get_bar, /* C function to get the attribute */
        (setter) _wrap_PyNs3Bar__set_bar, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "immediate", /* attribute name */
        (getter) _wrap_PyNs3Bar__get_immediate, /* C function to get the attribute */
        (setter) _wrap_PyNs3Bar__set_immediate, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3Bar__tp_init__0(PyNs3Bar *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Bar *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Bar_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Bar(*((PyNs3Bar *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3Bar__tp_init__1(PyNs3Bar *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Bar();
    return 0;
}

static int
_wrap_PyNs3Bar__tp_init__2(PyNs3Bar *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *recipient;
    int tid;
    bool immediate;
    PyObject *py_immediate;
    const char *keywords[] = {"packet", "recipient", "tid", "immediate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!iO", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &recipient, &tid, &py_immediate)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    immediate = (bool) PyObject_IsTrue(py_immediate);
    self->obj = new ns3::Bar(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) recipient)->obj, tid, immediate);
    return 0;
}

int _wrap_PyNs3Bar__tp_init(PyNs3Bar *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3Bar__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Bar__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Bar__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3Bar__copy__(PyNs3Bar *self)
{

    PyNs3Bar *py_copy;
    py_copy = PyObject_New(PyNs3Bar, &PyNs3Bar_Type);
    py_copy->obj = new ns3::Bar(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Bar_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Bar_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Bar__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Bar__tp_dealloc(PyNs3Bar *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Bar_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Bar_wrapper_registry.end()) {
        PyNs3Bar_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::Bar *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Bar__tp_richcompare (PyNs3Bar *PYBINDGEN_UNUSED(self), PyNs3Bar *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Bar_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Bar_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Bar",            /* tp_name */
    sizeof(PyNs3Bar),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Bar__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Bar__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Bar_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3Bar__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Bar__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3BlockAckAgreement_wrapper_registry;


static int
_wrap_PyNs3BlockAckAgreement__tp_init__0(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3BlockAckAgreement *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BlockAckAgreement_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BlockAckAgreement(*((PyNs3BlockAckAgreement *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3BlockAckAgreement__tp_init__1(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BlockAckAgreement();
    return 0;
}

static int
_wrap_PyNs3BlockAckAgreement__tp_init__2(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *peer;
    int tid;
    const char *keywords[] = {"peer", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &peer, &tid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::BlockAckAgreement(*((PyNs3Mac48Address *) peer)->obj, tid);
    return 0;
}

int _wrap_PyNs3BlockAckAgreement__tp_init(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3BlockAckAgreement__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3BlockAckAgreement__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3BlockAckAgreement__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetStartingSequenceControl(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequenceControl();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetTimeout(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int timeout;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (timeout > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTimeout(timeout);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetStartingSequence(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequence();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetTimeout(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTimeout();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetStartingSequence(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequence(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetAmsduSupport(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool supported;
    PyObject *py_supported;
    const char *keywords[] = {"supported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_supported)) {
        return NULL;
    }
    supported = (bool) PyObject_IsTrue(py_supported);
    self->obj->SetAmsduSupport(supported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetImmediateBlockAck(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    
    self->obj->SetImmediateBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetBufferSize(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBufferSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_IsAmsduSupported(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAmsduSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetDelayedBlockAck(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    
    self->obj->SetDelayedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetPeer(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetPeer();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_GetTid(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_SetBufferSize(PyNs3BlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int bufferSize;
    const char *keywords[] = {"bufferSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &bufferSize)) {
        return NULL;
    }
    if (bufferSize > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBufferSize(bufferSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckAgreement_IsImmediateBlockAck(PyNs3BlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsImmediateBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3BlockAckAgreement__copy__(PyNs3BlockAckAgreement *self)
{

    PyNs3BlockAckAgreement *py_copy;
    py_copy = PyObject_New(PyNs3BlockAckAgreement, &PyNs3BlockAckAgreement_Type);
    py_copy->obj = new ns3::BlockAckAgreement(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3BlockAckAgreement_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3BlockAckAgreement_methods[] = {
    {(char *) "GetStartingSequenceControl", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetStartingSequenceControl, METH_NOARGS, NULL },
    {(char *) "SetTimeout", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetStartingSequence", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetStartingSequence, METH_NOARGS, NULL },
    {(char *) "GetTimeout", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetTimeout, METH_NOARGS, NULL },
    {(char *) "SetStartingSequence", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetStartingSequence, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAmsduSupport", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetAmsduSupport, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetImmediateBlockAck", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetImmediateBlockAck, METH_NOARGS, NULL },
    {(char *) "GetBufferSize", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetBufferSize, METH_NOARGS, NULL },
    {(char *) "IsAmsduSupported", (PyCFunction) _wrap_PyNs3BlockAckAgreement_IsAmsduSupported, METH_NOARGS, NULL },
    {(char *) "SetDelayedBlockAck", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetDelayedBlockAck, METH_NOARGS, NULL },
    {(char *) "GetPeer", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetPeer, METH_NOARGS, NULL },
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3BlockAckAgreement_GetTid, METH_NOARGS, NULL },
    {(char *) "SetBufferSize", (PyCFunction) _wrap_PyNs3BlockAckAgreement_SetBufferSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsImmediateBlockAck", (PyCFunction) _wrap_PyNs3BlockAckAgreement_IsImmediateBlockAck, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3BlockAckAgreement__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3BlockAckAgreement__tp_dealloc(PyNs3BlockAckAgreement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3BlockAckAgreement_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3BlockAckAgreement_wrapper_registry.end()) {
        PyNs3BlockAckAgreement_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::BlockAckAgreement *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BlockAckAgreement__tp_richcompare (PyNs3BlockAckAgreement *PYBINDGEN_UNUSED(self), PyNs3BlockAckAgreement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BlockAckAgreement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BlockAckAgreement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.BlockAckAgreement",            /* tp_name */
    sizeof(PyNs3BlockAckAgreement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BlockAckAgreement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BlockAckAgreement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BlockAckAgreement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BlockAckAgreement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3BlockAckManager_wrapper_registry;

static int
_wrap_PyNs3BlockAckManager__tp_init(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::BlockAckManager();
    return 0;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetNRetryNeededPackets(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetNRetryNeededPackets(*((PyNs3Mac48Address *) recipient)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_HasPackets(PyNs3BlockAckManager *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasPackets();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_ExistsAgreementInState(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *recipient;
    int tid;
    ns3::OriginatorBlockAckAgreement::State state;
    const char *keywords[] = {"recipient", "tid", "state", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid, &state)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->ExistsAgreementInState(*((PyNs3Mac48Address *) recipient)->obj, tid, state);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetBlockAckType(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::BlockAckType bAckType;
    const char *keywords[] = {"bAckType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &bAckType)) {
        return NULL;
    }
    self->obj->SetBlockAckType(bAckType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetBlockAckThreshold(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nPackets;
    const char *keywords[] = {"nPackets", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nPackets)) {
        return NULL;
    }
    if (nPackets > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBlockAckThreshold(nPackets);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NotifyGotBlockAck(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *blockAck;
    ns3::CtrlBAckResponseHeader *blockAck_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"blockAck", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3CtrlBAckResponseHeader_Type, &blockAck, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    blockAck_ptr = (blockAck ? blockAck->obj : NULL);
    self->obj->NotifyGotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetNBufferedPackets(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetNBufferedPackets(*((PyNs3Mac48Address *) recipient)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_UpdateAgreement(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaResponseHeader *respHdr;
    ns3::MgtAddBaResponseHeader *respHdr_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"respHdr", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtAddBaResponseHeader_Type, &respHdr, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    respHdr_ptr = (respHdr ? respHdr->obj : NULL);
    self->obj->UpdateAgreement(respHdr_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetNextPacket(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"hdr", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    retval = self->obj->GetNextPacket(*((PyNs3WifiMacHeader *) hdr)->obj);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NotifyMpduTransmission(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyMpduTransmission(*((PyNs3Mac48Address *) recipient)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NotifyAgreementEstablished(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    int startingSeq;
    const char *keywords[] = {"recipient", "tid", "startingSeq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid, &startingSeq)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (startingSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyAgreementEstablished(*((PyNs3Mac48Address *) recipient)->obj, tid, startingSeq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_NotifyAgreementUnsuccessful(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->NotifyAgreementUnsuccessful(*((PyNs3Mac48Address *) recipient)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_HasOtherFragments(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int sequenceNumber;
    const char *keywords[] = {"sequenceNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &sequenceNumber)) {
        return NULL;
    }
    if (sequenceNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->HasOtherFragments(sequenceNumber);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_DestroyAgreement(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->DestroyAgreement(*((PyNs3Mac48Address *) recipient)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_GetNextPacketSize(PyNs3BlockAckManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNextPacketSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_HasBar(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Bar *bar;
    const char *keywords[] = {"bar", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Bar_Type, &bar)) {
        return NULL;
    }
    retval = self->obj->HasBar(*((PyNs3Bar *) bar)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_ExistsAgreement(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->ExistsAgreement(*((PyNs3Mac48Address *) recipient)->obj, tid);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SetMaxPacketDelay(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *maxDelay;
    ns3::Time maxDelay2;
    const char *keywords[] = {"maxDelay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &maxDelay)) {
        return NULL;
    }
    if (PyObject_IsInstance(maxDelay, (PyObject*) &PyNs3Time_Type)) {
        maxDelay2 = *((PyNs3Time *) maxDelay)->obj;
    } else if (PyObject_IsInstance(maxDelay, (PyObject*) &PyNs3Scalar_Type)) {
        maxDelay2 = *((PyNs3Scalar *) maxDelay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", maxDelay->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetMaxPacketDelay(maxDelay2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_CreateAgreement(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaRequestHeader *reqHdr;
    ns3::MgtAddBaRequestHeader *reqHdr_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"reqHdr", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtAddBaRequestHeader_Type, &reqHdr, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    reqHdr_ptr = (reqHdr ? reqHdr->obj : NULL);
    self->obj->CreateAgreement(reqHdr_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_TearDownBlockAck(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->TearDownBlockAck(*((PyNs3Mac48Address *) recipient)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_SwitchToBlockAckIfNeeded(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *recipient;
    int tid;
    int startingSeq;
    const char *keywords[] = {"recipient", "tid", "startingSeq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!ii", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid, &startingSeq)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (startingSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->SwitchToBlockAckIfNeeded(*((PyNs3Mac48Address *) recipient)->obj, tid, startingSeq);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3BlockAckManager_StorePacket(PyNs3BlockAckManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    PyObject *tStamp;
    ns3::Time tStamp2;
    const char *keywords[] = {"packet", "hdr", "tStamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr, &tStamp)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(tStamp, (PyObject*) &PyNs3Time_Type)) {
        tStamp2 = *((PyNs3Time *) tStamp)->obj;
    } else if (PyObject_IsInstance(tStamp, (PyObject*) &PyNs3Scalar_Type)) {
        tStamp2 = *((PyNs3Scalar *) tStamp)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", tStamp->ob_type->tp_name);
        return NULL;
    }
    self->obj->StorePacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj, tStamp2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3BlockAckManager_methods[] = {
    {(char *) "GetNRetryNeededPackets", (PyCFunction) _wrap_PyNs3BlockAckManager_GetNRetryNeededPackets, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "HasPackets", (PyCFunction) _wrap_PyNs3BlockAckManager_HasPackets, METH_NOARGS, NULL },
    {(char *) "ExistsAgreementInState", (PyCFunction) _wrap_PyNs3BlockAckManager_ExistsAgreementInState, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBlockAckType", (PyCFunction) _wrap_PyNs3BlockAckManager_SetBlockAckType, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBlockAckThreshold", (PyCFunction) _wrap_PyNs3BlockAckManager_SetBlockAckThreshold, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyGotBlockAck", (PyCFunction) _wrap_PyNs3BlockAckManager_NotifyGotBlockAck, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNBufferedPackets", (PyCFunction) _wrap_PyNs3BlockAckManager_GetNBufferedPackets, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UpdateAgreement", (PyCFunction) _wrap_PyNs3BlockAckManager_UpdateAgreement, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNextPacket", (PyCFunction) _wrap_PyNs3BlockAckManager_GetNextPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyMpduTransmission", (PyCFunction) _wrap_PyNs3BlockAckManager_NotifyMpduTransmission, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyAgreementEstablished", (PyCFunction) _wrap_PyNs3BlockAckManager_NotifyAgreementEstablished, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyAgreementUnsuccessful", (PyCFunction) _wrap_PyNs3BlockAckManager_NotifyAgreementUnsuccessful, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "HasOtherFragments", (PyCFunction) _wrap_PyNs3BlockAckManager_HasOtherFragments, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DestroyAgreement", (PyCFunction) _wrap_PyNs3BlockAckManager_DestroyAgreement, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNextPacketSize", (PyCFunction) _wrap_PyNs3BlockAckManager_GetNextPacketSize, METH_NOARGS, NULL },
    {(char *) "HasBar", (PyCFunction) _wrap_PyNs3BlockAckManager_HasBar, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ExistsAgreement", (PyCFunction) _wrap_PyNs3BlockAckManager_ExistsAgreement, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMaxPacketDelay", (PyCFunction) _wrap_PyNs3BlockAckManager_SetMaxPacketDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CreateAgreement", (PyCFunction) _wrap_PyNs3BlockAckManager_CreateAgreement, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TearDownBlockAck", (PyCFunction) _wrap_PyNs3BlockAckManager_TearDownBlockAck, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SwitchToBlockAckIfNeeded", (PyCFunction) _wrap_PyNs3BlockAckManager_SwitchToBlockAckIfNeeded, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "StorePacket", (PyCFunction) _wrap_PyNs3BlockAckManager_StorePacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3BlockAckManager__tp_dealloc(PyNs3BlockAckManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3BlockAckManager_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3BlockAckManager_wrapper_registry.end()) {
        PyNs3BlockAckManager_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::BlockAckManager *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3BlockAckManager__tp_richcompare (PyNs3BlockAckManager *PYBINDGEN_UNUSED(self), PyNs3BlockAckManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3BlockAckManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3BlockAckManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.BlockAckManager",            /* tp_name */
    sizeof(PyNs3BlockAckManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3BlockAckManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3BlockAckManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3BlockAckManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3BlockAckManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3CapabilityInformation_wrapper_registry;


static int
_wrap_PyNs3CapabilityInformation__tp_init__0(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CapabilityInformation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CapabilityInformation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CapabilityInformation(*((PyNs3CapabilityInformation *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3CapabilityInformation__tp_init__1(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CapabilityInformation();
    return 0;
}

int _wrap_PyNs3CapabilityInformation__tp_init(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CapabilityInformation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CapabilityInformation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CapabilityInformation_SetEss(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    
    self->obj->SetEss();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_Deserialize(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_Serialize(PyNs3CapabilityInformation *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_IsIbss(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsIbss();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_GetSerializedSize(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_IsEss(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsEss();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CapabilityInformation_SetIbss(PyNs3CapabilityInformation *self)
{
    PyObject *py_retval;
    
    self->obj->SetIbss();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CapabilityInformation__copy__(PyNs3CapabilityInformation *self)
{

    PyNs3CapabilityInformation *py_copy;
    py_copy = PyObject_New(PyNs3CapabilityInformation, &PyNs3CapabilityInformation_Type);
    py_copy->obj = new ns3::CapabilityInformation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3CapabilityInformation_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CapabilityInformation_methods[] = {
    {(char *) "SetEss", (PyCFunction) _wrap_PyNs3CapabilityInformation_SetEss, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3CapabilityInformation_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3CapabilityInformation_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsIbss", (PyCFunction) _wrap_PyNs3CapabilityInformation_IsIbss, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3CapabilityInformation_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "IsEss", (PyCFunction) _wrap_PyNs3CapabilityInformation_IsEss, METH_NOARGS, NULL },
    {(char *) "SetIbss", (PyCFunction) _wrap_PyNs3CapabilityInformation_SetIbss, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CapabilityInformation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3CapabilityInformation__tp_dealloc(PyNs3CapabilityInformation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3CapabilityInformation_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3CapabilityInformation_wrapper_registry.end()) {
        PyNs3CapabilityInformation_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::CapabilityInformation *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CapabilityInformation__tp_richcompare (PyNs3CapabilityInformation *PYBINDGEN_UNUSED(self), PyNs3CapabilityInformation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CapabilityInformation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CapabilityInformation_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.CapabilityInformation",            /* tp_name */
    sizeof(PyNs3CapabilityInformation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CapabilityInformation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CapabilityInformation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CapabilityInformation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CapabilityInformation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DcfManager_wrapper_registry;


static int
_wrap_PyNs3DcfManager__tp_init__0(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DcfManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DcfManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DcfManager(*((PyNs3DcfManager *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3DcfManager__tp_init__1(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DcfManager();
    return 0;
}

int _wrap_PyNs3DcfManager__tp_init(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DcfManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DcfManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DcfManager_SetEifsNoDifs(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *eifsNoDifs;
    ns3::Time eifsNoDifs2;
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &eifsNoDifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Time_Type)) {
        eifsNoDifs2 = *((PyNs3Time *) eifsNoDifs)->obj;
    } else if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Scalar_Type)) {
        eifsNoDifs2 = *((PyNs3Scalar *) eifsNoDifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", eifsNoDifs->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetEifsNoDifs(eifsNoDifs2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_SetupPhyListener(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetupPhyListener(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyMaybeCcaBusyStartNow(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyMaybeCcaBusyStartNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_SetupLowListener(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MacLow *low;
    ns3::MacLow *low_ptr;
    const char *keywords[] = {"low", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLow_Type, &low)) {
        return NULL;
    }
    low_ptr = (low ? low->obj : NULL);
    self->obj->SetupLowListener(ns3::Ptr< ns3::MacLow  > (low_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyRxEndErrorNow(PyNs3DcfManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndErrorNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyTxStartNow(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyTxStartNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyCtsTimeoutStartNow(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyCtsTimeoutStartNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyNavResetNow(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyNavResetNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_SetSlot(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetSlot(slotTime2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_SetSifs(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetSifs(sifs2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyRxEndOkNow(PyNs3DcfManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndOkNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifySwitchingStartNow(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifySwitchingStartNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_GetEifsNoDifs(PyNs3DcfManager *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetEifsNoDifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyRxStartNow(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyRxStartNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyNavStartNow(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyNavStartNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyAckTimeoutResetNow(PyNs3DcfManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyAckTimeoutResetNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyCtsTimeoutResetNow(PyNs3DcfManager *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyCtsTimeoutResetNow();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfManager_NotifyAckTimeoutStartNow(PyNs3DcfManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyAckTimeoutStartNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3DcfManager__copy__(PyNs3DcfManager *self)
{

    PyNs3DcfManager *py_copy;
    py_copy = PyObject_New(PyNs3DcfManager, &PyNs3DcfManager_Type);
    py_copy->obj = new ns3::DcfManager(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DcfManager_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DcfManager_methods[] = {
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3DcfManager_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetupPhyListener", (PyCFunction) _wrap_PyNs3DcfManager_SetupPhyListener, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyMaybeCcaBusyStartNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyMaybeCcaBusyStartNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetupLowListener", (PyCFunction) _wrap_PyNs3DcfManager_SetupLowListener, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyRxEndErrorNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyRxEndErrorNow, METH_NOARGS, NULL },
    {(char *) "NotifyTxStartNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyTxStartNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyCtsTimeoutStartNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyCtsTimeoutStartNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyNavResetNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyNavResetNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3DcfManager_SetSlot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3DcfManager_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyRxEndOkNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyRxEndOkNow, METH_NOARGS, NULL },
    {(char *) "NotifySwitchingStartNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifySwitchingStartNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3DcfManager_GetEifsNoDifs, METH_NOARGS, NULL },
    {(char *) "NotifyRxStartNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyRxStartNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyNavStartNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyNavStartNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyAckTimeoutResetNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyAckTimeoutResetNow, METH_NOARGS, NULL },
    {(char *) "NotifyCtsTimeoutResetNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyCtsTimeoutResetNow, METH_NOARGS, NULL },
    {(char *) "NotifyAckTimeoutStartNow", (PyCFunction) _wrap_PyNs3DcfManager_NotifyAckTimeoutStartNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DcfManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DcfManager__tp_dealloc(PyNs3DcfManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DcfManager_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DcfManager_wrapper_registry.end()) {
        PyNs3DcfManager_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DcfManager *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DcfManager__tp_richcompare (PyNs3DcfManager *PYBINDGEN_UNUSED(self), PyNs3DcfManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DcfManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DcfManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.DcfManager",            /* tp_name */
    sizeof(PyNs3DcfManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DcfManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DcfManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DcfManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DcfManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DcfState_wrapper_registry;

void
PyNs3DcfState__PythonHelper::DoNotifyAccessGranted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcfState *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoNotifyAccessGranted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = (ns3::DcfState*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoNotifyAccessGranted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DcfState__PythonHelper::DoNotifyChannelSwitching()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcfState *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoNotifyChannelSwitching"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = (ns3::DcfState*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoNotifyChannelSwitching", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DcfState__PythonHelper::DoNotifyCollision()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcfState *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoNotifyCollision"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = (ns3::DcfState*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoNotifyCollision", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DcfState__PythonHelper::DoNotifyInternalCollision()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcfState *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoNotifyInternalCollision"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = (ns3::DcfState*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoNotifyInternalCollision", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcfState* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3DcfState__tp_init__0(PyNs3DcfState *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DcfState *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DcfState_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3DcfState_Type)
    {
        self->obj = new PyNs3DcfState__PythonHelper(*((PyNs3DcfState *) arg0)->obj);
        ((PyNs3DcfState__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'DcfState' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3DcfState__tp_init__1(PyNs3DcfState *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3DcfState_Type)
    {
        self->obj = new PyNs3DcfState__PythonHelper();
        ((PyNs3DcfState__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'DcfState' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3DcfState__tp_init(PyNs3DcfState *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DcfState__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DcfState__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DcfState_UpdateFailedCw(PyNs3DcfState *self)
{
    PyObject *py_retval;
    
    self->obj->UpdateFailedCw();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_SetCwMin(PyNs3DcfState *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int minCw;
    const char *keywords[] = {"minCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &minCw)) {
        return NULL;
    }
    self->obj->SetCwMin(minCw);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_GetAifsn(PyNs3DcfState *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetAifsn();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_GetCwMin(PyNs3DcfState *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetCwMin();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_GetCwMax(PyNs3DcfState *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetCwMax();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_StartBackoffNow(PyNs3DcfState *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int nSlots;
    const char *keywords[] = {"nSlots", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &nSlots)) {
        return NULL;
    }
    self->obj->StartBackoffNow(nSlots);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_IsAccessRequested(PyNs3DcfState *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAccessRequested();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_ResetCw(PyNs3DcfState *self)
{
    PyObject *py_retval;
    
    self->obj->ResetCw();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_SetAifsn(PyNs3DcfState *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int aifsn;
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &aifsn)) {
        return NULL;
    }
    self->obj->SetAifsn(aifsn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_SetCwMax(PyNs3DcfState *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxCw;
    const char *keywords[] = {"maxCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxCw)) {
        return NULL;
    }
    self->obj->SetCwMax(maxCw);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcfState_GetCw(PyNs3DcfState *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetCw();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3DcfState_methods[] = {
    {(char *) "UpdateFailedCw", (PyCFunction) _wrap_PyNs3DcfState_UpdateFailedCw, METH_NOARGS, NULL },
    {(char *) "SetCwMin", (PyCFunction) _wrap_PyNs3DcfState_SetCwMin, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAifsn", (PyCFunction) _wrap_PyNs3DcfState_GetAifsn, METH_NOARGS, NULL },
    {(char *) "GetCwMin", (PyCFunction) _wrap_PyNs3DcfState_GetCwMin, METH_NOARGS, NULL },
    {(char *) "GetCwMax", (PyCFunction) _wrap_PyNs3DcfState_GetCwMax, METH_NOARGS, NULL },
    {(char *) "StartBackoffNow", (PyCFunction) _wrap_PyNs3DcfState_StartBackoffNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsAccessRequested", (PyCFunction) _wrap_PyNs3DcfState_IsAccessRequested, METH_NOARGS, NULL },
    {(char *) "ResetCw", (PyCFunction) _wrap_PyNs3DcfState_ResetCw, METH_NOARGS, NULL },
    {(char *) "SetAifsn", (PyCFunction) _wrap_PyNs3DcfState_SetAifsn, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCwMax", (PyCFunction) _wrap_PyNs3DcfState_SetCwMax, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCw", (PyCFunction) _wrap_PyNs3DcfState_GetCw, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DcfState__tp_clear(PyNs3DcfState *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::DcfState *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3DcfState__tp_traverse(PyNs3DcfState *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3DcfState__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DcfState__tp_dealloc(PyNs3DcfState *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DcfState_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DcfState_wrapper_registry.end()) {
        PyNs3DcfState_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DcfState__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DcfState__tp_richcompare (PyNs3DcfState *PYBINDGEN_UNUSED(self), PyNs3DcfState *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DcfState_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DcfState_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.DcfState",            /* tp_name */
    sizeof(PyNs3DcfState),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DcfState__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3DcfState__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DcfState__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DcfState__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DcfState_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DcfState, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DcfState__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3DsssErrorRateModel_wrapper_registry;


static int
_wrap_PyNs3DsssErrorRateModel__tp_init__0(PyNs3DsssErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsssErrorRateModel();
    return 0;
}

static int
_wrap_PyNs3DsssErrorRateModel__tp_init__1(PyNs3DsssErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3DsssErrorRateModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3DsssErrorRateModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::DsssErrorRateModel(*((PyNs3DsssErrorRateModel *) arg0)->obj);
    return 0;
}

int _wrap_PyNs3DsssErrorRateModel__tp_init(PyNs3DsssErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3DsssErrorRateModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3DsssErrorRateModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_GetDsssDqpskCck11SuccessRate(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double sinr;
    unsigned int nbits;
    const char *keywords[] = {"sinr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dI", (char **) keywords, &sinr, &nbits)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::GetDsssDqpskCck11SuccessRate(sinr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_DqpskFunction(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double x;
    const char *keywords[] = {"x", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &x)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::DqpskFunction(x);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_GetDsssDbpskSuccessRate(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double sinr;
    unsigned int nbits;
    const char *keywords[] = {"sinr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dI", (char **) keywords, &sinr, &nbits)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::GetDsssDbpskSuccessRate(sinr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_GetDsssDqpskCck5_5SuccessRate(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double sinr;
    unsigned int nbits;
    const char *keywords[] = {"sinr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dI", (char **) keywords, &sinr, &nbits)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::GetDsssDqpskCck5_5SuccessRate(sinr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3DsssErrorRateModel_GetDsssDqpskSuccessRate(PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    double sinr;
    unsigned int nbits;
    const char *keywords[] = {"sinr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dI", (char **) keywords, &sinr, &nbits)) {
        return NULL;
    }
    retval = ns3::DsssErrorRateModel::GetDsssDqpskSuccessRate(sinr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3DsssErrorRateModel__copy__(PyNs3DsssErrorRateModel *self)
{

    PyNs3DsssErrorRateModel *py_copy;
    py_copy = PyObject_New(PyNs3DsssErrorRateModel, &PyNs3DsssErrorRateModel_Type);
    py_copy->obj = new ns3::DsssErrorRateModel(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3DsssErrorRateModel_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3DsssErrorRateModel_methods[] = {
    {(char *) "GetDsssDqpskCck11SuccessRate", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_GetDsssDqpskCck11SuccessRate, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "DqpskFunction", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_DqpskFunction, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "GetDsssDbpskSuccessRate", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_GetDsssDbpskSuccessRate, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "GetDsssDqpskCck5_5SuccessRate", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_GetDsssDqpskCck5_5SuccessRate, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "GetDsssDqpskSuccessRate", (PyCFunction) _wrap_PyNs3DsssErrorRateModel_GetDsssDqpskSuccessRate, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3DsssErrorRateModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3DsssErrorRateModel__tp_dealloc(PyNs3DsssErrorRateModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3DsssErrorRateModel_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3DsssErrorRateModel_wrapper_registry.end()) {
        PyNs3DsssErrorRateModel_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::DsssErrorRateModel *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DsssErrorRateModel__tp_richcompare (PyNs3DsssErrorRateModel *PYBINDGEN_UNUSED(self), PyNs3DsssErrorRateModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DsssErrorRateModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DsssErrorRateModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.DsssErrorRateModel",            /* tp_name */
    sizeof(PyNs3DsssErrorRateModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DsssErrorRateModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DsssErrorRateModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DsssErrorRateModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DsssErrorRateModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3InterferenceHelper_wrapper_registry;

static int
_wrap_PyNs3InterferenceHelper__tp_init(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::InterferenceHelper();
    return 0;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetNoiseFigure(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetNoiseFigure();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetEnergyDuration(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double energyW;
    const char *keywords[] = {"energyW", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &energyW)) {
        return NULL;
    }
    ns3::Time retval = self->obj->GetEnergyDuration(energyW);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetPlcpHeaderMode(PyNs3InterferenceHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMode *payloadMode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"payloadMode", "preamble", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3WifiMode_Type, &payloadMode, &preamble)) {
        return NULL;
    }
    ns3::WifiMode retval = ns3::InterferenceHelper::GetPlcpHeaderMode(*((PyNs3WifiMode *) payloadMode)->obj, preamble);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetPayloadDurationMicroSeconds(PyNs3InterferenceHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    unsigned int size;
    PyNs3WifiMode *payloadMode;
    const char *keywords[] = {"size", "payloadMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!", (char **) keywords, &size, &PyNs3WifiMode_Type, &payloadMode)) {
        return NULL;
    }
    retval = ns3::InterferenceHelper::GetPayloadDurationMicroSeconds(size, *((PyNs3WifiMode *) payloadMode)->obj);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetPlcpHeaderDurationMicroSeconds(PyNs3InterferenceHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WifiMode *payloadMode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"payloadMode", "preamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3WifiMode_Type, &payloadMode, &preamble)) {
        return NULL;
    }
    retval = ns3::InterferenceHelper::GetPlcpHeaderDurationMicroSeconds(*((PyNs3WifiMode *) payloadMode)->obj, preamble);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_EraseEvents(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    
    self->obj->EraseEvents();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetPlcpPreambleDurationMicroSeconds(PyNs3InterferenceHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WifiMode *mode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"mode", "preamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3WifiMode_Type, &mode, &preamble)) {
        return NULL;
    }
    retval = ns3::InterferenceHelper::GetPlcpPreambleDurationMicroSeconds(*((PyNs3WifiMode *) mode)->obj, preamble);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_SetErrorRateModel(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel *rate;
    ns3::ErrorRateModel *rate_ptr;
    const char *keywords[] = {"rate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ErrorRateModel_Type, &rate)) {
        return NULL;
    }
    rate_ptr = (rate ? rate->obj : NULL);
    self->obj->SetErrorRateModel(ns3::Ptr< ns3::ErrorRateModel  > (rate_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_NotifyRxEnd(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEnd();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_GetErrorRateModel(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ErrorRateModel > retval;
    PyNs3ErrorRateModel *py_ErrorRateModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetErrorRateModel();
    if (!(const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3ErrorRateModel__PythonHelper))
    {
        py_ErrorRateModel = reinterpret_cast< PyNs3ErrorRateModel* >(reinterpret_cast< PyNs3ErrorRateModel__PythonHelper* >(const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_ErrorRateModel->obj = const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_ErrorRateModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ErrorRateModel = NULL;
        } else {
            py_ErrorRateModel = (PyNs3ErrorRateModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_ErrorRateModel);
        }
    
        if (py_ErrorRateModel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))), &PyNs3ErrorRateModel_Type);
            py_ErrorRateModel = PyObject_GC_New(PyNs3ErrorRateModel, wrapper_type);
            py_ErrorRateModel->inst_dict = NULL;
            py_ErrorRateModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval))->Ref();
            py_ErrorRateModel->obj = const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ErrorRateModel->obj] = (PyObject *) py_ErrorRateModel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_ErrorRateModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_SetNoiseFigure(PyNs3InterferenceHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &value)) {
        return NULL;
    }
    self->obj->SetNoiseFigure(value);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_CalculateTxDuration(PyNs3InterferenceHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    PyNs3WifiMode *payloadMode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"size", "payloadMode", "preamble", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!i", (char **) keywords, &size, &PyNs3WifiMode_Type, &payloadMode, &preamble)) {
        return NULL;
    }
    ns3::Time retval = ns3::InterferenceHelper::CalculateTxDuration(size, *((PyNs3WifiMode *) payloadMode)->obj, preamble);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3InterferenceHelper_NotifyRxStart(PyNs3InterferenceHelper *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxStart();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3InterferenceHelper_methods[] = {
    {(char *) "GetNoiseFigure", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetNoiseFigure, METH_NOARGS, NULL },
    {(char *) "GetEnergyDuration", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetEnergyDuration, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPlcpHeaderMode", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetPlcpHeaderMode, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "GetPayloadDurationMicroSeconds", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetPayloadDurationMicroSeconds, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "GetPlcpHeaderDurationMicroSeconds", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetPlcpHeaderDurationMicroSeconds, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "EraseEvents", (PyCFunction) _wrap_PyNs3InterferenceHelper_EraseEvents, METH_NOARGS, NULL },
    {(char *) "GetPlcpPreambleDurationMicroSeconds", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetPlcpPreambleDurationMicroSeconds, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "SetErrorRateModel", (PyCFunction) _wrap_PyNs3InterferenceHelper_SetErrorRateModel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyRxEnd", (PyCFunction) _wrap_PyNs3InterferenceHelper_NotifyRxEnd, METH_NOARGS, NULL },
    {(char *) "GetErrorRateModel", (PyCFunction) _wrap_PyNs3InterferenceHelper_GetErrorRateModel, METH_NOARGS, NULL },
    {(char *) "SetNoiseFigure", (PyCFunction) _wrap_PyNs3InterferenceHelper_SetNoiseFigure, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CalculateTxDuration", (PyCFunction) _wrap_PyNs3InterferenceHelper_CalculateTxDuration, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "NotifyRxStart", (PyCFunction) _wrap_PyNs3InterferenceHelper_NotifyRxStart, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3InterferenceHelper__tp_dealloc(PyNs3InterferenceHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3InterferenceHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3InterferenceHelper_wrapper_registry.end()) {
        PyNs3InterferenceHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::InterferenceHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3InterferenceHelper__tp_richcompare (PyNs3InterferenceHelper *PYBINDGEN_UNUSED(self), PyNs3InterferenceHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3InterferenceHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3InterferenceHelper_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.InterferenceHelper",            /* tp_name */
    sizeof(PyNs3InterferenceHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3InterferenceHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3InterferenceHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3InterferenceHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3InterferenceHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3InterferenceHelperSnrPer_wrapper_registry;
static PyObject* _wrap_PyNs3InterferenceHelperSnrPer__get_per(PyNs3InterferenceHelperSnrPer *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->per);
    return py_retval;
}
static int _wrap_PyNs3InterferenceHelperSnrPer__set_per(PyNs3InterferenceHelperSnrPer *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->per)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3InterferenceHelperSnrPer__get_snr(PyNs3InterferenceHelperSnrPer *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->snr);
    return py_retval;
}
static int _wrap_PyNs3InterferenceHelperSnrPer__set_snr(PyNs3InterferenceHelperSnrPer *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->snr)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3InterferenceHelperSnrPer__getsets[] = {
    {
        (char*) "snr", /* attribute name */
        (getter) _wrap_PyNs3InterferenceHelperSnrPer__get_snr, /* C function to get the attribute */
        (setter) _wrap_PyNs3InterferenceHelperSnrPer__set_snr, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "per", /* attribute name */
        (getter) _wrap_PyNs3InterferenceHelperSnrPer__get_per, /* C function to get the attribute */
        (setter) _wrap_PyNs3InterferenceHelperSnrPer__set_per, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3InterferenceHelperSnrPer__tp_init__0(PyNs3InterferenceHelperSnrPer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::InterferenceHelper::SnrPer();
    return 0;
}

static int
_wrap_PyNs3InterferenceHelperSnrPer__tp_init__1(PyNs3InterferenceHelperSnrPer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3InterferenceHelperSnrPer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3InterferenceHelperSnrPer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::InterferenceHelper::SnrPer(*((PyNs3InterferenceHelperSnrPer *) arg0)->obj);
    return 0;
}

int _wrap_PyNs3InterferenceHelperSnrPer__tp_init(PyNs3InterferenceHelperSnrPer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3InterferenceHelperSnrPer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3InterferenceHelperSnrPer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3InterferenceHelperSnrPer__copy__(PyNs3InterferenceHelperSnrPer *self)
{

    PyNs3InterferenceHelperSnrPer *py_copy;
    py_copy = PyObject_New(PyNs3InterferenceHelperSnrPer, &PyNs3InterferenceHelperSnrPer_Type);
    py_copy->obj = new ns3::InterferenceHelper::SnrPer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3InterferenceHelperSnrPer_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3InterferenceHelperSnrPer_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3InterferenceHelperSnrPer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3InterferenceHelperSnrPer__tp_dealloc(PyNs3InterferenceHelperSnrPer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3InterferenceHelperSnrPer_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3InterferenceHelperSnrPer_wrapper_registry.end()) {
        PyNs3InterferenceHelperSnrPer_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::InterferenceHelper::SnrPer *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3InterferenceHelperSnrPer__tp_richcompare (PyNs3InterferenceHelperSnrPer *PYBINDGEN_UNUSED(self), PyNs3InterferenceHelperSnrPer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3InterferenceHelperSnrPer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3InterferenceHelperSnrPer_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.InterferenceHelper.SnrPer",            /* tp_name */
    sizeof(PyNs3InterferenceHelperSnrPer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3InterferenceHelperSnrPer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3InterferenceHelperSnrPer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3InterferenceHelperSnrPer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3InterferenceHelperSnrPer__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3InterferenceHelperSnrPer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3MacLowBlockAckEventListener_wrapper_registry;

void
PyNs3MacLowBlockAckEventListener__PythonHelper::BlockAckInactivityTimeout(ns3::Mac48Address originator, uint8_t tid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowBlockAckEventListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "BlockAckInactivityTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowBlockAckEventListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowBlockAckEventListener* >(m_pyself)->obj = (ns3::MacLowBlockAckEventListener*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(originator);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "BlockAckInactivityTimeout", (char *) "Ni", py_Mac48Address, (int) tid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowBlockAckEventListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowBlockAckEventListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowBlockAckEventListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MacLowBlockAckEventListener__tp_init__0(PyNs3MacLowBlockAckEventListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacLowBlockAckEventListener *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLowBlockAckEventListener_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MacLowBlockAckEventListener_Type)
    {
        self->obj = new PyNs3MacLowBlockAckEventListener__PythonHelper(*((PyNs3MacLowBlockAckEventListener *) arg0)->obj);
        ((PyNs3MacLowBlockAckEventListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'MacLowBlockAckEventListener' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3MacLowBlockAckEventListener__tp_init__1(PyNs3MacLowBlockAckEventListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MacLowBlockAckEventListener_Type)
    {
        self->obj = new PyNs3MacLowBlockAckEventListener__PythonHelper();
        ((PyNs3MacLowBlockAckEventListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'MacLowBlockAckEventListener' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3MacLowBlockAckEventListener__tp_init(PyNs3MacLowBlockAckEventListener *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacLowBlockAckEventListener__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacLowBlockAckEventListener__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacLowBlockAckEventListener_BlockAckInactivityTimeout(PyNs3MacLowBlockAckEventListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *originator;
    int tid;
    const char *keywords[] = {"originator", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &originator, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->BlockAckInactivityTimeout(*((PyNs3Mac48Address *) originator)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3MacLowBlockAckEventListener_methods[] = {
    {(char *) "BlockAckInactivityTimeout", (PyCFunction) _wrap_PyNs3MacLowBlockAckEventListener_BlockAckInactivityTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MacLowBlockAckEventListener__tp_clear(PyNs3MacLowBlockAckEventListener *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MacLowBlockAckEventListener *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MacLowBlockAckEventListener__tp_traverse(PyNs3MacLowBlockAckEventListener *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MacLowBlockAckEventListener__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MacLowBlockAckEventListener__tp_dealloc(PyNs3MacLowBlockAckEventListener *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MacLowBlockAckEventListener_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MacLowBlockAckEventListener_wrapper_registry.end()) {
        PyNs3MacLowBlockAckEventListener_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MacLowBlockAckEventListener__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacLowBlockAckEventListener__tp_richcompare (PyNs3MacLowBlockAckEventListener *PYBINDGEN_UNUSED(self), PyNs3MacLowBlockAckEventListener *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacLowBlockAckEventListener_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacLowBlockAckEventListener_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MacLowBlockAckEventListener",            /* tp_name */
    sizeof(PyNs3MacLowBlockAckEventListener),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacLowBlockAckEventListener__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MacLowBlockAckEventListener__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MacLowBlockAckEventListener__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacLowBlockAckEventListener__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacLowBlockAckEventListener_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MacLowBlockAckEventListener, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacLowBlockAckEventListener__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3MacLowDcfListener_wrapper_registry;

void
PyNs3MacLowDcfListener__PythonHelper::AckTimeoutReset()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowDcfListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AckTimeoutReset"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = (ns3::MacLowDcfListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AckTimeoutReset", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowDcfListener__PythonHelper::AckTimeoutStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowDcfListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AckTimeoutStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = (ns3::MacLowDcfListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AckTimeoutStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowDcfListener__PythonHelper::CtsTimeoutReset()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowDcfListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CtsTimeoutReset"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = (ns3::MacLowDcfListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CtsTimeoutReset", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowDcfListener__PythonHelper::CtsTimeoutStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowDcfListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CtsTimeoutStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = (ns3::MacLowDcfListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CtsTimeoutStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowDcfListener__PythonHelper::NavReset(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowDcfListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NavReset"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = (ns3::MacLowDcfListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NavReset", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowDcfListener__PythonHelper::NavStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowDcfListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NavStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = (ns3::MacLowDcfListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NavStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowDcfListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MacLowDcfListener__tp_init__0(PyNs3MacLowDcfListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacLowDcfListener *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLowDcfListener_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MacLowDcfListener_Type)
    {
        self->obj = new PyNs3MacLowDcfListener__PythonHelper(*((PyNs3MacLowDcfListener *) arg0)->obj);
        ((PyNs3MacLowDcfListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'MacLowDcfListener' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3MacLowDcfListener__tp_init__1(PyNs3MacLowDcfListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MacLowDcfListener_Type)
    {
        self->obj = new PyNs3MacLowDcfListener__PythonHelper();
        ((PyNs3MacLowDcfListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'MacLowDcfListener' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3MacLowDcfListener__tp_init(PyNs3MacLowDcfListener *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacLowDcfListener__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacLowDcfListener__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacLowDcfListener_NavReset(PyNs3MacLowDcfListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NavReset(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowDcfListener_NavStart(PyNs3MacLowDcfListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NavStart(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowDcfListener_CtsTimeoutReset(PyNs3MacLowDcfListener *self)
{
    PyObject *py_retval;
    
    self->obj->CtsTimeoutReset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowDcfListener_CtsTimeoutStart(PyNs3MacLowDcfListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->CtsTimeoutStart(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowDcfListener_AckTimeoutReset(PyNs3MacLowDcfListener *self)
{
    PyObject *py_retval;
    
    self->obj->AckTimeoutReset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowDcfListener_AckTimeoutStart(PyNs3MacLowDcfListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->AckTimeoutStart(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3MacLowDcfListener_methods[] = {
    {(char *) "NavReset", (PyCFunction) _wrap_PyNs3MacLowDcfListener_NavReset, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NavStart", (PyCFunction) _wrap_PyNs3MacLowDcfListener_NavStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CtsTimeoutReset", (PyCFunction) _wrap_PyNs3MacLowDcfListener_CtsTimeoutReset, METH_NOARGS, NULL },
    {(char *) "CtsTimeoutStart", (PyCFunction) _wrap_PyNs3MacLowDcfListener_CtsTimeoutStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AckTimeoutReset", (PyCFunction) _wrap_PyNs3MacLowDcfListener_AckTimeoutReset, METH_NOARGS, NULL },
    {(char *) "AckTimeoutStart", (PyCFunction) _wrap_PyNs3MacLowDcfListener_AckTimeoutStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MacLowDcfListener__tp_clear(PyNs3MacLowDcfListener *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MacLowDcfListener *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MacLowDcfListener__tp_traverse(PyNs3MacLowDcfListener *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MacLowDcfListener__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MacLowDcfListener__tp_dealloc(PyNs3MacLowDcfListener *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MacLowDcfListener_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MacLowDcfListener_wrapper_registry.end()) {
        PyNs3MacLowDcfListener_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MacLowDcfListener__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacLowDcfListener__tp_richcompare (PyNs3MacLowDcfListener *PYBINDGEN_UNUSED(self), PyNs3MacLowDcfListener *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacLowDcfListener_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacLowDcfListener_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MacLowDcfListener",            /* tp_name */
    sizeof(PyNs3MacLowDcfListener),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacLowDcfListener__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MacLowDcfListener__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MacLowDcfListener__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacLowDcfListener__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacLowDcfListener_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MacLowDcfListener, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacLowDcfListener__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3MacLowTransmissionListener_wrapper_registry;

void
PyNs3MacLowTransmissionListener__PythonHelper::Cancel()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowTransmissionListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Cancel"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = (ns3::MacLowTransmissionListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Cancel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowTransmissionListener__PythonHelper::GotAck(double snr, ns3::WifiMode txMode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowTransmissionListener *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GotAck"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = (ns3::MacLowTransmissionListener*) this;
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(txMode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GotAck", (char *) "dN", snr, py_WifiMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowTransmissionListener__PythonHelper::GotBlockAck(ns3::CtrlBAckResponseHeader const *blockAck, ns3::Mac48Address source)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowTransmissionListener *self_obj_before;
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *py_CtrlBAckResponseHeader;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GotBlockAck"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MacLowTransmissionListener::GotBlockAck(blockAck, source);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = (ns3::MacLowTransmissionListener*) this;
    if (typeid(*(blockAck)) == typeid(PyNs3CtrlBAckResponseHeader__PythonHelper))
    {
        py_CtrlBAckResponseHeader = (PyNs3CtrlBAckResponseHeader*) (((PyNs3CtrlBAckResponseHeader__PythonHelper*) ((ns3::CtrlBAckResponseHeader*) blockAck))->m_pyself);
        py_CtrlBAckResponseHeader->obj =  (ns3::CtrlBAckResponseHeader*) (blockAck);
        Py_INCREF(py_CtrlBAckResponseHeader);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) blockAck);
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_CtrlBAckResponseHeader = NULL;
        } else {
            py_CtrlBAckResponseHeader = (PyNs3CtrlBAckResponseHeader *) wrapper_lookup_iter->second;
            Py_INCREF(py_CtrlBAckResponseHeader);
        }
    
        if (py_CtrlBAckResponseHeader == NULL)
        {
            py_CtrlBAckResponseHeader = PyObject_GC_New(PyNs3CtrlBAckResponseHeader, &PyNs3CtrlBAckResponseHeader_Type);
            py_CtrlBAckResponseHeader->inst_dict = NULL;
            py_CtrlBAckResponseHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            py_CtrlBAckResponseHeader->obj = new ns3::CtrlBAckResponseHeader(*blockAck);
            PyNs3ObjectBase_wrapper_registry[(void *) py_CtrlBAckResponseHeader->obj] = (PyObject *) py_CtrlBAckResponseHeader;
        }
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(source);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GotBlockAck", (char *) "NN", py_CtrlBAckResponseHeader, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowTransmissionListener__PythonHelper::GotCts(double snr, ns3::WifiMode txMode)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowTransmissionListener *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GotCts"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = (ns3::MacLowTransmissionListener*) this;
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(txMode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GotCts", (char *) "dN", snr, py_WifiMode);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowTransmissionListener__PythonHelper::MissedAck()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowTransmissionListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedAck"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = (ns3::MacLowTransmissionListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedAck", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowTransmissionListener__PythonHelper::MissedBlockAck()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowTransmissionListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedBlockAck"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MacLowTransmissionListener::MissedBlockAck();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = (ns3::MacLowTransmissionListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedBlockAck", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowTransmissionListener__PythonHelper::MissedCts()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowTransmissionListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "MissedCts"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = (ns3::MacLowTransmissionListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "MissedCts", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLowTransmissionListener__PythonHelper::StartNext()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLowTransmissionListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartNext"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = (ns3::MacLowTransmissionListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartNext", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLowTransmissionListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MacLowTransmissionListener__tp_init__0(PyNs3MacLowTransmissionListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacLowTransmissionListener *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLowTransmissionListener_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MacLowTransmissionListener_Type)
    {
        self->obj = new PyNs3MacLowTransmissionListener__PythonHelper(*((PyNs3MacLowTransmissionListener *) arg0)->obj);
        ((PyNs3MacLowTransmissionListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'MacLowTransmissionListener' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3MacLowTransmissionListener__tp_init__1(PyNs3MacLowTransmissionListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MacLowTransmissionListener_Type)
    {
        self->obj = new PyNs3MacLowTransmissionListener__PythonHelper();
        ((PyNs3MacLowTransmissionListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'MacLowTransmissionListener' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3MacLowTransmissionListener__tp_init(PyNs3MacLowTransmissionListener *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacLowTransmissionListener__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacLowTransmissionListener__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacLowTransmissionListener_MissedCts(PyNs3MacLowTransmissionListener *self)
{
    PyObject *py_retval;
    
    self->obj->MissedCts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionListener_GotAck(PyNs3MacLowTransmissionListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double snr;
    PyNs3WifiMode *txMode;
    const char *keywords[] = {"snr", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dO!", (char **) keywords, &snr, &PyNs3WifiMode_Type, &txMode)) {
        return NULL;
    }
    self->obj->GotAck(snr, *((PyNs3WifiMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionListener_GotCts(PyNs3MacLowTransmissionListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double snr;
    PyNs3WifiMode *txMode;
    const char *keywords[] = {"snr", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dO!", (char **) keywords, &snr, &PyNs3WifiMode_Type, &txMode)) {
        return NULL;
    }
    self->obj->GotCts(snr, *((PyNs3WifiMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionListener_MissedBlockAck(PyNs3MacLowTransmissionListener *self)
{
    PyObject *py_retval;
    PyNs3MacLowTransmissionListener__PythonHelper *helper_class = dynamic_cast<PyNs3MacLowTransmissionListener__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->MissedBlockAck()) : (self->obj->ns3::MacLowTransmissionListener::MissedBlockAck());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionListener_MissedAck(PyNs3MacLowTransmissionListener *self)
{
    PyObject *py_retval;
    
    self->obj->MissedAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionListener_GotBlockAck(PyNs3MacLowTransmissionListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *blockAck;
    ns3::CtrlBAckResponseHeader *blockAck_ptr;
    PyNs3Mac48Address *source;
    PyNs3MacLowTransmissionListener__PythonHelper *helper_class = dynamic_cast<PyNs3MacLowTransmissionListener__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAck", "source", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3CtrlBAckResponseHeader_Type, &blockAck, &PyNs3Mac48Address_Type, &source)) {
        return NULL;
    }
    blockAck_ptr = (blockAck ? blockAck->obj : NULL);
    (helper_class == NULL)? (self->obj->GotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) source)->obj)) : (self->obj->ns3::MacLowTransmissionListener::GotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) source)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionListener_Cancel(PyNs3MacLowTransmissionListener *self)
{
    PyObject *py_retval;
    
    self->obj->Cancel();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionListener_StartNext(PyNs3MacLowTransmissionListener *self)
{
    PyObject *py_retval;
    
    self->obj->StartNext();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3MacLowTransmissionListener_methods[] = {
    {(char *) "MissedCts", (PyCFunction) _wrap_PyNs3MacLowTransmissionListener_MissedCts, METH_NOARGS, NULL },
    {(char *) "GotAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionListener_GotAck, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GotCts", (PyCFunction) _wrap_PyNs3MacLowTransmissionListener_GotCts, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MissedBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionListener_MissedBlockAck, METH_NOARGS, NULL },
    {(char *) "MissedAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionListener_MissedAck, METH_NOARGS, NULL },
    {(char *) "GotBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionListener_GotBlockAck, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Cancel", (PyCFunction) _wrap_PyNs3MacLowTransmissionListener_Cancel, METH_NOARGS, NULL },
    {(char *) "StartNext", (PyCFunction) _wrap_PyNs3MacLowTransmissionListener_StartNext, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MacLowTransmissionListener__tp_clear(PyNs3MacLowTransmissionListener *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MacLowTransmissionListener *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MacLowTransmissionListener__tp_traverse(PyNs3MacLowTransmissionListener *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MacLowTransmissionListener__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MacLowTransmissionListener__tp_dealloc(PyNs3MacLowTransmissionListener *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MacLowTransmissionListener_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MacLowTransmissionListener_wrapper_registry.end()) {
        PyNs3MacLowTransmissionListener_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MacLowTransmissionListener__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacLowTransmissionListener__tp_richcompare (PyNs3MacLowTransmissionListener *PYBINDGEN_UNUSED(self), PyNs3MacLowTransmissionListener *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacLowTransmissionListener_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacLowTransmissionListener_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MacLowTransmissionListener",            /* tp_name */
    sizeof(PyNs3MacLowTransmissionListener),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacLowTransmissionListener__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MacLowTransmissionListener__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MacLowTransmissionListener__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacLowTransmissionListener__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacLowTransmissionListener_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MacLowTransmissionListener, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacLowTransmissionListener__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3MacLowTransmissionParameters_wrapper_registry;


static int
_wrap_PyNs3MacLowTransmissionParameters__tp_init__0(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacLowTransmissionParameters *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLowTransmissionParameters_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacLowTransmissionParameters(*((PyNs3MacLowTransmissionParameters *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3MacLowTransmissionParameters__tp_init__1(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacLowTransmissionParameters();
    return 0;
}

int _wrap_PyNs3MacLowTransmissionParameters__tp_init(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacLowTransmissionParameters__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacLowTransmissionParameters__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitNormalAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitNormalAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableNextData(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &size)) {
        return NULL;
    }
    self->obj->EnableNextData(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitMultiTidBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitMultiTidBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_HasDurationId(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasDurationId();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableFastAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableFastAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitBasicBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitBasicBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableOverrideDurationId(PyNs3MacLowTransmissionParameters *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *durationId;
    ns3::Time durationId2;
    const char *keywords[] = {"durationId", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &durationId)) {
        return NULL;
    }
    if (PyObject_IsInstance(durationId, (PyObject*) &PyNs3Time_Type)) {
        durationId2 = *((PyNs3Time *) durationId)->obj;
    } else if (PyObject_IsInstance(durationId, (PyObject*) &PyNs3Scalar_Type)) {
        durationId2 = *((PyNs3Scalar *) durationId)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", durationId->ob_type->tp_name);
        return NULL;
    }
    self->obj->EnableOverrideDurationId(durationId2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_GetDurationId(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDurationId();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_DisableRts(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->DisableRts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_HasNextPacket(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->HasNextPacket();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitSuperFastAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitSuperFastAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitFastAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitFastAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableBasicBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableBasicBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_GetNextPacketSize(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNextPacketSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_DisableOverrideDurationId(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->DisableOverrideDurationId();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableSuperFastAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableSuperFastAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableMultiTidBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableMultiTidBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_DisableNextData(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->DisableNextData();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitCompressedBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitCompressedBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustWaitAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustWaitAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_DisableAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->DisableAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableRts(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableRts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_EnableCompressedBlockAck(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    
    self->obj->EnableCompressedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLowTransmissionParameters_MustSendRts(PyNs3MacLowTransmissionParameters *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustSendRts();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3MacLowTransmissionParameters__copy__(PyNs3MacLowTransmissionParameters *self)
{

    PyNs3MacLowTransmissionParameters *py_copy;
    py_copy = PyObject_New(PyNs3MacLowTransmissionParameters, &PyNs3MacLowTransmissionParameters_Type);
    py_copy->obj = new ns3::MacLowTransmissionParameters(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3MacLowTransmissionParameters_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MacLowTransmissionParameters_methods[] = {
    {(char *) "MustWaitNormalAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitNormalAck, METH_NOARGS, NULL },
    {(char *) "EnableNextData", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableNextData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MustWaitMultiTidBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitMultiTidBlockAck, METH_NOARGS, NULL },
    {(char *) "HasDurationId", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_HasDurationId, METH_NOARGS, NULL },
    {(char *) "EnableFastAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableFastAck, METH_NOARGS, NULL },
    {(char *) "MustWaitBasicBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitBasicBlockAck, METH_NOARGS, NULL },
    {(char *) "EnableOverrideDurationId", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableOverrideDurationId, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDurationId", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_GetDurationId, METH_NOARGS, NULL },
    {(char *) "DisableRts", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_DisableRts, METH_NOARGS, NULL },
    {(char *) "HasNextPacket", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_HasNextPacket, METH_NOARGS, NULL },
    {(char *) "MustWaitSuperFastAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitSuperFastAck, METH_NOARGS, NULL },
    {(char *) "MustWaitFastAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitFastAck, METH_NOARGS, NULL },
    {(char *) "EnableBasicBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableBasicBlockAck, METH_NOARGS, NULL },
    {(char *) "GetNextPacketSize", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_GetNextPacketSize, METH_NOARGS, NULL },
    {(char *) "DisableOverrideDurationId", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_DisableOverrideDurationId, METH_NOARGS, NULL },
    {(char *) "EnableSuperFastAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableSuperFastAck, METH_NOARGS, NULL },
    {(char *) "EnableMultiTidBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableMultiTidBlockAck, METH_NOARGS, NULL },
    {(char *) "EnableAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableAck, METH_NOARGS, NULL },
    {(char *) "DisableNextData", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_DisableNextData, METH_NOARGS, NULL },
    {(char *) "MustWaitCompressedBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitCompressedBlockAck, METH_NOARGS, NULL },
    {(char *) "MustWaitAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustWaitAck, METH_NOARGS, NULL },
    {(char *) "DisableAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_DisableAck, METH_NOARGS, NULL },
    {(char *) "EnableRts", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableRts, METH_NOARGS, NULL },
    {(char *) "EnableCompressedBlockAck", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_EnableCompressedBlockAck, METH_NOARGS, NULL },
    {(char *) "MustSendRts", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters_MustSendRts, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MacLowTransmissionParameters__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MacLowTransmissionParameters__tp_dealloc(PyNs3MacLowTransmissionParameters *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MacLowTransmissionParameters_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MacLowTransmissionParameters_wrapper_registry.end()) {
        PyNs3MacLowTransmissionParameters_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::MacLowTransmissionParameters *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3MacLowTransmissionParameters__tp_str(PyNs3MacLowTransmissionParameters *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3MacLowTransmissionParameters__tp_richcompare (PyNs3MacLowTransmissionParameters *PYBINDGEN_UNUSED(self), PyNs3MacLowTransmissionParameters *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacLowTransmissionParameters_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacLowTransmissionParameters_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MacLowTransmissionParameters",            /* tp_name */
    sizeof(PyNs3MacLowTransmissionParameters),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacLowTransmissionParameters__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3MacLowTransmissionParameters__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacLowTransmissionParameters__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacLowTransmissionParameters_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacLowTransmissionParameters__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3MacRxMiddle_wrapper_registry;


static int
_wrap_PyNs3MacRxMiddle__tp_init__0(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacRxMiddle *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacRxMiddle_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacRxMiddle(*((PyNs3MacRxMiddle *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3MacRxMiddle__tp_init__1(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MacRxMiddle();
    return 0;
}

int _wrap_PyNs3MacRxMiddle__tp_init(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacRxMiddle__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacRxMiddle__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacRxMiddle_Receive(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    self->obj->Receive(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacRxMiddle_SetForwardCallback(PyNs3MacRxMiddle *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl12> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl12> (callback);
    self->obj->SetForwardCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::WifiMacHeader const*, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MacRxMiddle__copy__(PyNs3MacRxMiddle *self)
{

    PyNs3MacRxMiddle *py_copy;
    py_copy = PyObject_New(PyNs3MacRxMiddle, &PyNs3MacRxMiddle_Type);
    py_copy->obj = new ns3::MacRxMiddle(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3MacRxMiddle_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MacRxMiddle_methods[] = {
    {(char *) "Receive", (PyCFunction) _wrap_PyNs3MacRxMiddle_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetForwardCallback", (PyCFunction) _wrap_PyNs3MacRxMiddle_SetForwardCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MacRxMiddle__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3MacRxMiddle__tp_dealloc(PyNs3MacRxMiddle *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3MacRxMiddle_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3MacRxMiddle_wrapper_registry.end()) {
        PyNs3MacRxMiddle_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::MacRxMiddle *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacRxMiddle__tp_richcompare (PyNs3MacRxMiddle *PYBINDGEN_UNUSED(self), PyNs3MacRxMiddle *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacRxMiddle_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacRxMiddle_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MacRxMiddle",            /* tp_name */
    sizeof(PyNs3MacRxMiddle),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacRxMiddle__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacRxMiddle__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacRxMiddle_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacRxMiddle__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3OriginatorBlockAckAgreement__tp_init__0(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OriginatorBlockAckAgreement *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OriginatorBlockAckAgreement_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OriginatorBlockAckAgreement(*((PyNs3OriginatorBlockAckAgreement *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3OriginatorBlockAckAgreement__tp_init__1(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OriginatorBlockAckAgreement();
    return 0;
}

static int
_wrap_PyNs3OriginatorBlockAckAgreement__tp_init__2(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Mac48Address *recipient;
    int tid;
    const char *keywords[] = {"recipient", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &recipient, &tid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OriginatorBlockAckAgreement(*((PyNs3Mac48Address *) recipient)->obj, tid);
    return 0;
}

int _wrap_PyNs3OriginatorBlockAckAgreement__tp_init(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3OriginatorBlockAckAgreement__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OriginatorBlockAckAgreement__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3OriginatorBlockAckAgreement__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_NotifyMpduTransmission(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyMpduTransmission();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsPending(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsPending();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsUnsuccessful(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsUnsuccessful();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_NeedBlockAckRequest(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->NeedBlockAckRequest();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsInactive(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsInactive();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_CompleteExchange(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    
    self->obj->CompleteExchange();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_SetState(PyNs3OriginatorBlockAckAgreement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::OriginatorBlockAckAgreement::State state;
    const char *keywords[] = {"state", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &state)) {
        return NULL;
    }
    self->obj->SetState(state);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3OriginatorBlockAckAgreement_IsEstablished(PyNs3OriginatorBlockAckAgreement *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsEstablished();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3OriginatorBlockAckAgreement__copy__(PyNs3OriginatorBlockAckAgreement *self)
{

    PyNs3OriginatorBlockAckAgreement *py_copy;
    py_copy = PyObject_New(PyNs3OriginatorBlockAckAgreement, &PyNs3OriginatorBlockAckAgreement_Type);
    py_copy->obj = new ns3::OriginatorBlockAckAgreement(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3BlockAckAgreement_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OriginatorBlockAckAgreement_methods[] = {
    {(char *) "NotifyMpduTransmission", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_NotifyMpduTransmission, METH_NOARGS, NULL },
    {(char *) "IsPending", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsPending, METH_NOARGS, NULL },
    {(char *) "IsUnsuccessful", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsUnsuccessful, METH_NOARGS, NULL },
    {(char *) "NeedBlockAckRequest", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_NeedBlockAckRequest, METH_NOARGS, NULL },
    {(char *) "IsInactive", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsInactive, METH_NOARGS, NULL },
    {(char *) "CompleteExchange", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_CompleteExchange, METH_NOARGS, NULL },
    {(char *) "SetState", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_SetState, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsEstablished", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement_IsEstablished, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OriginatorBlockAckAgreement__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3OriginatorBlockAckAgreement__tp_dealloc(PyNs3OriginatorBlockAckAgreement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3BlockAckAgreement_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3BlockAckAgreement_wrapper_registry.end()) {
        PyNs3BlockAckAgreement_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::OriginatorBlockAckAgreement *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OriginatorBlockAckAgreement__tp_richcompare (PyNs3OriginatorBlockAckAgreement *PYBINDGEN_UNUSED(self), PyNs3OriginatorBlockAckAgreement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OriginatorBlockAckAgreement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OriginatorBlockAckAgreement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.OriginatorBlockAckAgreement",            /* tp_name */
    sizeof(PyNs3OriginatorBlockAckAgreement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OriginatorBlockAckAgreement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OriginatorBlockAckAgreement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OriginatorBlockAckAgreement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OriginatorBlockAckAgreement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3RateInfo_wrapper_registry;
static PyObject* _wrap_PyNs3RateInfo__get_adjustedRetryCount(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->adjustedRetryCount));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_adjustedRetryCount(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->adjustedRetryCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_attemptHist(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "K", self->obj->attemptHist);
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_attemptHist(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &self->obj->attemptHist)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_ewmaProb(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->ewmaProb));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_ewmaProb(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->ewmaProb)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_numRateAttempt(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->numRateAttempt));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_numRateAttempt(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->numRateAttempt)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_numRateSuccess(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->numRateSuccess));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_numRateSuccess(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->numRateSuccess)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_perfectTxTime(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->perfectTxTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_perfectTxTime(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->perfectTxTime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_prevNumRateAttempt(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->prevNumRateAttempt));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_prevNumRateAttempt(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->prevNumRateAttempt)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_prevNumRateSuccess(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->prevNumRateSuccess));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_prevNumRateSuccess(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->prevNumRateSuccess)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_prob(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->prob));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_prob(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->prob)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_retryCount(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->retryCount));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_retryCount(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->retryCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_successHist(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "K", self->obj->successHist);
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_successHist(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "K", &self->obj->successHist)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3RateInfo__get_throughput(PyNs3RateInfo *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->throughput));
    return py_retval;
}
static int _wrap_PyNs3RateInfo__set_throughput(PyNs3RateInfo *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->throughput)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3RateInfo__getsets[] = {
    {
        (char*) "adjustedRetryCount", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_adjustedRetryCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_adjustedRetryCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "numRateSuccess", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_numRateSuccess, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_numRateSuccess, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "numRateAttempt", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_numRateAttempt, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_numRateAttempt, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prevNumRateSuccess", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_prevNumRateSuccess, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_prevNumRateSuccess, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "throughput", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_throughput, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_throughput, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "perfectTxTime", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_perfectTxTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_perfectTxTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "attemptHist", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_attemptHist, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_attemptHist, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "retryCount", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_retryCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_retryCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ewmaProb", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_ewmaProb, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_ewmaProb, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prevNumRateAttempt", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_prevNumRateAttempt, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_prevNumRateAttempt, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "prob", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_prob, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_prob, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "successHist", /* attribute name */
        (getter) _wrap_PyNs3RateInfo__get_successHist, /* C function to get the attribute */
        (setter) _wrap_PyNs3RateInfo__set_successHist, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3RateInfo__tp_init__0(PyNs3RateInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RateInfo();
    return 0;
}

static int
_wrap_PyNs3RateInfo__tp_init__1(PyNs3RateInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3RateInfo *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3RateInfo_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RateInfo(*((PyNs3RateInfo *) arg0)->obj);
    return 0;
}

int _wrap_PyNs3RateInfo__tp_init(PyNs3RateInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3RateInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3RateInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3RateInfo__copy__(PyNs3RateInfo *self)
{

    PyNs3RateInfo *py_copy;
    py_copy = PyObject_New(PyNs3RateInfo, &PyNs3RateInfo_Type);
    py_copy->obj = new ns3::RateInfo(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3RateInfo_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3RateInfo_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3RateInfo__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3RateInfo__tp_dealloc(PyNs3RateInfo *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3RateInfo_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3RateInfo_wrapper_registry.end()) {
        PyNs3RateInfo_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::RateInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RateInfo__tp_richcompare (PyNs3RateInfo *PYBINDGEN_UNUSED(self), PyNs3RateInfo *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RateInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RateInfo_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.RateInfo",            /* tp_name */
    sizeof(PyNs3RateInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RateInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RateInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RateInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3RateInfo__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RateInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3StatusCode_wrapper_registry;


static int
_wrap_PyNs3StatusCode__tp_init__0(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3StatusCode *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3StatusCode_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::StatusCode(*((PyNs3StatusCode *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3StatusCode__tp_init__1(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::StatusCode();
    return 0;
}

int _wrap_PyNs3StatusCode__tp_init(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3StatusCode__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3StatusCode__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3StatusCode_SetSuccess(PyNs3StatusCode *self)
{
    PyObject *py_retval;
    
    self->obj->SetSuccess();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_Deserialize(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_Serialize(PyNs3StatusCode *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_IsSuccess(PyNs3StatusCode *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsSuccess();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_GetSerializedSize(PyNs3StatusCode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3StatusCode_SetFailure(PyNs3StatusCode *self)
{
    PyObject *py_retval;
    
    self->obj->SetFailure();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3StatusCode__copy__(PyNs3StatusCode *self)
{

    PyNs3StatusCode *py_copy;
    py_copy = PyObject_New(PyNs3StatusCode, &PyNs3StatusCode_Type);
    py_copy->obj = new ns3::StatusCode(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3StatusCode_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3StatusCode_methods[] = {
    {(char *) "SetSuccess", (PyCFunction) _wrap_PyNs3StatusCode_SetSuccess, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3StatusCode_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3StatusCode_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsSuccess", (PyCFunction) _wrap_PyNs3StatusCode_IsSuccess, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3StatusCode_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetFailure", (PyCFunction) _wrap_PyNs3StatusCode_SetFailure, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3StatusCode__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3StatusCode__tp_dealloc(PyNs3StatusCode *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3StatusCode_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3StatusCode_wrapper_registry.end()) {
        PyNs3StatusCode_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::StatusCode *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3StatusCode__tp_str(PyNs3StatusCode *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3StatusCode__tp_richcompare (PyNs3StatusCode *PYBINDGEN_UNUSED(self), PyNs3StatusCode *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3StatusCode_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3StatusCode_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.StatusCode",            /* tp_name */
    sizeof(PyNs3StatusCode),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3StatusCode__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3StatusCode__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3StatusCode__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3StatusCode_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3StatusCode__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiMode_wrapper_registry;


static int
_wrap_PyNs3WifiMode__tp_init__0(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMode *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMode(*((PyNs3WifiMode *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3WifiMode__tp_init__1(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMode();
    return 0;
}

static int
_wrap_PyNs3WifiMode__tp_init__2(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *name;
    Py_ssize_t name_len;
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &name, &name_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiMode(std::string(name, name_len));
    return 0;
}

int _wrap_PyNs3WifiMode__tp_init(PyNs3WifiMode *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WifiMode__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMode__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiMode__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiMode_GetCodeRate(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    ns3::WifiCodeRate retval;
    
    retval = self->obj->GetCodeRate();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetUid(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetUid();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetPhyRate(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetPhyRate();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetDataRate(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetDataRate();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_IsMandatory(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMandatory();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetBandwidth(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetBandwidth();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetModulationClass(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    ns3::WifiModulationClass retval;
    
    retval = self->obj->GetModulationClass();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetConstellationSize(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetConstellationSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMode_GetUniqueName(PyNs3WifiMode *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetUniqueName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiMode__copy__(PyNs3WifiMode *self)
{

    PyNs3WifiMode *py_copy;
    py_copy = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_copy->obj = new ns3::WifiMode(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiMode_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiMode_methods[] = {
    {(char *) "GetCodeRate", (PyCFunction) _wrap_PyNs3WifiMode_GetCodeRate, METH_NOARGS, NULL },
    {(char *) "GetUid", (PyCFunction) _wrap_PyNs3WifiMode_GetUid, METH_NOARGS, NULL },
    {(char *) "GetPhyRate", (PyCFunction) _wrap_PyNs3WifiMode_GetPhyRate, METH_NOARGS, NULL },
    {(char *) "GetDataRate", (PyCFunction) _wrap_PyNs3WifiMode_GetDataRate, METH_NOARGS, NULL },
    {(char *) "IsMandatory", (PyCFunction) _wrap_PyNs3WifiMode_IsMandatory, METH_NOARGS, NULL },
    {(char *) "GetBandwidth", (PyCFunction) _wrap_PyNs3WifiMode_GetBandwidth, METH_NOARGS, NULL },
    {(char *) "GetModulationClass", (PyCFunction) _wrap_PyNs3WifiMode_GetModulationClass, METH_NOARGS, NULL },
    {(char *) "GetConstellationSize", (PyCFunction) _wrap_PyNs3WifiMode_GetConstellationSize, METH_NOARGS, NULL },
    {(char *) "GetUniqueName", (PyCFunction) _wrap_PyNs3WifiMode_GetUniqueName, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiMode__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiMode__tp_dealloc(PyNs3WifiMode *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiMode_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiMode_wrapper_registry.end()) {
        PyNs3WifiMode_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiMode *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3WifiMode__tp_str(PyNs3WifiMode *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3WifiMode__tp_richcompare (PyNs3WifiMode *PYBINDGEN_UNUSED(self), PyNs3WifiMode *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMode_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMode_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiMode",            /* tp_name */
    sizeof(PyNs3WifiMode),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMode__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3WifiMode__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMode__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMode_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMode__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiModeFactory_wrapper_registry;

static int
_wrap_PyNs3WifiModeFactory__tp_init(PyNs3WifiModeFactory *self, PyObject *args, PyObject *kwargs)
{
    PyNs3WifiModeFactory *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiModeFactory_Type, &arg0)) {
        return -1;
    }
    self->obj = new ns3::WifiModeFactory(*((PyNs3WifiModeFactory *) arg0)->obj);
    return 0;
}


PyObject *
_wrap_PyNs3WifiModeFactory_CreateWifiMode(PyNs3WifiModeFactory *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *uniqueName;
    Py_ssize_t uniqueName_len;
    ns3::WifiModulationClass modClass;
    bool isMandatory;
    PyObject *py_isMandatory;
    unsigned int bandwidth;
    unsigned int dataRate;
    ns3::WifiCodeRate codingRate;
    int constellationSize;
    const char *keywords[] = {"uniqueName", "modClass", "isMandatory", "bandwidth", "dataRate", "codingRate", "constellationSize", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#iOIIii", (char **) keywords, &uniqueName, &uniqueName_len, &modClass, &py_isMandatory, &bandwidth, &dataRate, &codingRate, &constellationSize)) {
        return NULL;
    }
    isMandatory = (bool) PyObject_IsTrue(py_isMandatory);
    if (constellationSize > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::WifiMode retval = ns3::WifiModeFactory::CreateWifiMode(std::string(uniqueName, uniqueName_len), modClass, isMandatory, bandwidth, dataRate, codingRate, constellationSize);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiModeFactory__copy__(PyNs3WifiModeFactory *self)
{

    PyNs3WifiModeFactory *py_copy;
    py_copy = PyObject_New(PyNs3WifiModeFactory, &PyNs3WifiModeFactory_Type);
    py_copy->obj = new ns3::WifiModeFactory(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiModeFactory_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiModeFactory_methods[] = {
    {(char *) "CreateWifiMode", (PyCFunction) _wrap_PyNs3WifiModeFactory_CreateWifiMode, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiModeFactory__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiModeFactory__tp_dealloc(PyNs3WifiModeFactory *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiModeFactory_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiModeFactory_wrapper_registry.end()) {
        PyNs3WifiModeFactory_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiModeFactory *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiModeFactory__tp_richcompare (PyNs3WifiModeFactory *PYBINDGEN_UNUSED(self), PyNs3WifiModeFactory *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiModeFactory_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiModeFactory_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiModeFactory",            /* tp_name */
    sizeof(PyNs3WifiModeFactory),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiModeFactory__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiModeFactory__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiModeFactory_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiModeFactory__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiPhyListener_wrapper_registry;

void
PyNs3WifiPhyListener__PythonHelper::NotifyMaybeCcaBusyStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyMaybeCcaBusyStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyMaybeCcaBusyStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyRxEndError()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndError"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndError", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyRxEndOk()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxEndOk"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxEndOk", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyRxStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyRxStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyRxStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifySwitchingStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifySwitchingStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifySwitchingStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiPhyListener__PythonHelper::NotifyTxStart(ns3::Time duration)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiPhyListener *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyTxStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = (ns3::WifiPhyListener*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(duration);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyTxStart", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiPhyListener* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiPhyListener__tp_init__0(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiPhyListener_Type)
    {
        self->obj = new PyNs3WifiPhyListener__PythonHelper();
        ((PyNs3WifiPhyListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiPhyListener' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3WifiPhyListener__tp_init__1(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiPhyListener *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhyListener_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiPhyListener_Type)
    {
        self->obj = new PyNs3WifiPhyListener__PythonHelper(*((PyNs3WifiPhyListener *) arg0)->obj);
        ((PyNs3WifiPhyListener__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'WifiPhyListener' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3WifiPhyListener__tp_init(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiPhyListener__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiPhyListener__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyRxEndOk(PyNs3WifiPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndOk();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyMaybeCcaBusyStart(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyMaybeCcaBusyStart(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyRxEndError(PyNs3WifiPhyListener *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyRxEndError();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyTxStart(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyTxStart(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifySwitchingStart(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifySwitchingStart(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhyListener_NotifyRxStart(PyNs3WifiPhyListener *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifyRxStart(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3WifiPhyListener_methods[] = {
    {(char *) "NotifyRxEndOk", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyRxEndOk, METH_NOARGS, NULL },
    {(char *) "NotifyMaybeCcaBusyStart", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyMaybeCcaBusyStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyRxEndError", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyRxEndError, METH_NOARGS, NULL },
    {(char *) "NotifyTxStart", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyTxStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifySwitchingStart", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifySwitchingStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyRxStart", (PyCFunction) _wrap_PyNs3WifiPhyListener_NotifyRxStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiPhyListener__tp_clear(PyNs3WifiPhyListener *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiPhyListener *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiPhyListener__tp_traverse(PyNs3WifiPhyListener *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3WifiPhyListener__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiPhyListener__tp_dealloc(PyNs3WifiPhyListener *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiPhyListener_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiPhyListener_wrapper_registry.end()) {
        PyNs3WifiPhyListener_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiPhyListener__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiPhyListener__tp_richcompare (PyNs3WifiPhyListener *PYBINDGEN_UNUSED(self), PyNs3WifiPhyListener *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiPhyListener_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiPhyListener_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiPhyListener",            /* tp_name */
    sizeof(PyNs3WifiPhyListener),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiPhyListener__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiPhyListener__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiPhyListener__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiPhyListener__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiPhyListener_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiPhyListener, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiPhyListener__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiRemoteStation_wrapper_registry;
static PyObject* _wrap_PyNs3WifiRemoteStation__get_m_slrc(PyNs3WifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_slrc));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStation__set_m_slrc(PyNs3WifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_slrc)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStation__get_m_ssrc(PyNs3WifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_ssrc));
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStation__set_m_ssrc(PyNs3WifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_ssrc)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStation__get_m_tid(PyNs3WifiRemoteStation *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", (int)self->obj->m_tid);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStation__set_m_tid(PyNs3WifiRemoteStation *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    int tmp;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    if (tmp > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_tid = tmp;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiRemoteStation__getsets[] = {
    {
        (char*) "m_ssrc", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStation__get_m_ssrc, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStation__set_m_ssrc, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_slrc", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStation__get_m_slrc, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStation__set_m_slrc, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_tid", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStation__get_m_tid, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStation__set_m_tid, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiRemoteStation__tp_init__0(PyNs3WifiRemoteStation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStation();
    return 0;
}

static int
_wrap_PyNs3WifiRemoteStation__tp_init__1(PyNs3WifiRemoteStation *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRemoteStation *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStation_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStation(*((PyNs3WifiRemoteStation *) arg0)->obj);
    return 0;
}

int _wrap_PyNs3WifiRemoteStation__tp_init(PyNs3WifiRemoteStation *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRemoteStation__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRemoteStation__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3WifiRemoteStation__copy__(PyNs3WifiRemoteStation *self)
{

    PyNs3WifiRemoteStation *py_copy;
    py_copy = PyObject_New(PyNs3WifiRemoteStation, &PyNs3WifiRemoteStation_Type);
    py_copy->obj = new ns3::WifiRemoteStation(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiRemoteStation_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRemoteStation_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRemoteStation__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiRemoteStation__tp_dealloc(PyNs3WifiRemoteStation *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRemoteStation_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRemoteStation_wrapper_registry.end()) {
        PyNs3WifiRemoteStation_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiRemoteStation *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRemoteStation__tp_richcompare (PyNs3WifiRemoteStation *PYBINDGEN_UNUSED(self), PyNs3WifiRemoteStation *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRemoteStation_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRemoteStation_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiRemoteStation",            /* tp_name */
    sizeof(PyNs3WifiRemoteStation),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRemoteStation__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRemoteStation__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRemoteStation_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiRemoteStation__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRemoteStation__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiRemoteStationInfo_wrapper_registry;


static int
_wrap_PyNs3WifiRemoteStationInfo__tp_init__0(PyNs3WifiRemoteStationInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRemoteStationInfo *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationInfo_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStationInfo(*((PyNs3WifiRemoteStationInfo *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3WifiRemoteStationInfo__tp_init__1(PyNs3WifiRemoteStationInfo *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStationInfo();
    return 0;
}

int _wrap_PyNs3WifiRemoteStationInfo__tp_init(PyNs3WifiRemoteStationInfo *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRemoteStationInfo__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRemoteStationInfo__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiRemoteStationInfo_NotifyTxFailed(PyNs3WifiRemoteStationInfo *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyTxFailed();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationInfo_GetFrameErrorRate(PyNs3WifiRemoteStationInfo *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetFrameErrorRate();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationInfo_NotifyTxSuccess(PyNs3WifiRemoteStationInfo *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int retryCounter;
    const char *keywords[] = {"retryCounter", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &retryCounter)) {
        return NULL;
    }
    self->obj->NotifyTxSuccess(retryCounter);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiRemoteStationInfo__copy__(PyNs3WifiRemoteStationInfo *self)
{

    PyNs3WifiRemoteStationInfo *py_copy;
    py_copy = PyObject_New(PyNs3WifiRemoteStationInfo, &PyNs3WifiRemoteStationInfo_Type);
    py_copy->obj = new ns3::WifiRemoteStationInfo(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiRemoteStationInfo_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRemoteStationInfo_methods[] = {
    {(char *) "NotifyTxFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationInfo_NotifyTxFailed, METH_NOARGS, NULL },
    {(char *) "GetFrameErrorRate", (PyCFunction) _wrap_PyNs3WifiRemoteStationInfo_GetFrameErrorRate, METH_NOARGS, NULL },
    {(char *) "NotifyTxSuccess", (PyCFunction) _wrap_PyNs3WifiRemoteStationInfo_NotifyTxSuccess, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRemoteStationInfo__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiRemoteStationInfo__tp_dealloc(PyNs3WifiRemoteStationInfo *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRemoteStationInfo_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRemoteStationInfo_wrapper_registry.end()) {
        PyNs3WifiRemoteStationInfo_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiRemoteStationInfo *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRemoteStationInfo__tp_richcompare (PyNs3WifiRemoteStationInfo *PYBINDGEN_UNUSED(self), PyNs3WifiRemoteStationInfo *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRemoteStationInfo_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRemoteStationInfo_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiRemoteStationInfo",            /* tp_name */
    sizeof(PyNs3WifiRemoteStationInfo),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRemoteStationInfo__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRemoteStationInfo__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRemoteStationInfo_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRemoteStationInfo__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiRemoteStationState_wrapper_registry;
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_address(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(self->obj->m_address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_address(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_address = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_info(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationInfo *py_WifiRemoteStationInfo;
    
    py_WifiRemoteStationInfo = PyObject_New(PyNs3WifiRemoteStationInfo, &PyNs3WifiRemoteStationInfo_Type);
    py_WifiRemoteStationInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiRemoteStationInfo->obj = new ns3::WifiRemoteStationInfo(self->obj->m_info);
    PyNs3WifiRemoteStationInfo_wrapper_registry[(void *) py_WifiRemoteStationInfo->obj] = (PyObject *) py_WifiRemoteStationInfo;
    py_retval = Py_BuildValue((char *) "N", py_WifiRemoteStationInfo);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_info(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationInfo *tmp_WifiRemoteStationInfo;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiRemoteStationInfo_Type, &tmp_WifiRemoteStationInfo)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_info = *tmp_WifiRemoteStationInfo->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiRemoteStationState__get_m_operationalRateSet(PyNs3WifiRemoteStationState *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    Pyns3__WifiModeList *py_ns3__WifiModeList;
    
    py_ns3__WifiModeList = PyObject_New(Pyns3__WifiModeList, &Pyns3__WifiModeList_Type);
    py_ns3__WifiModeList->obj = new ns3::WifiModeList(self->obj->m_operationalRateSet);
    py_retval = Py_BuildValue((char *) "N", py_ns3__WifiModeList);
    return py_retval;
}
static int _wrap_PyNs3WifiRemoteStationState__set_m_operationalRateSet(PyNs3WifiRemoteStationState *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O&", _wrap_convert_py2c__ns3__WifiModeList, &self->obj->m_operationalRateSet)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiRemoteStationState__getsets[] = {
    {
        (char*) "m_address", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_address, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_address, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_info", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_info, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_info, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_operationalRateSet", /* attribute name */
        (getter) _wrap_PyNs3WifiRemoteStationState__get_m_operationalRateSet, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiRemoteStationState__set_m_operationalRateSet, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiRemoteStationState__tp_init__0(PyNs3WifiRemoteStationState *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStationState();
    return 0;
}

static int
_wrap_PyNs3WifiRemoteStationState__tp_init__1(PyNs3WifiRemoteStationState *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiRemoteStationState *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationState_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiRemoteStationState(*((PyNs3WifiRemoteStationState *) arg0)->obj);
    return 0;
}

int _wrap_PyNs3WifiRemoteStationState__tp_init(PyNs3WifiRemoteStationState *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRemoteStationState__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRemoteStationState__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3WifiRemoteStationState__copy__(PyNs3WifiRemoteStationState *self)
{

    PyNs3WifiRemoteStationState *py_copy;
    py_copy = PyObject_New(PyNs3WifiRemoteStationState, &PyNs3WifiRemoteStationState_Type);
    py_copy->obj = new ns3::WifiRemoteStationState(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiRemoteStationState_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiRemoteStationState_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiRemoteStationState__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiRemoteStationState__tp_dealloc(PyNs3WifiRemoteStationState *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiRemoteStationState_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiRemoteStationState_wrapper_registry.end()) {
        PyNs3WifiRemoteStationState_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiRemoteStationState *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRemoteStationState__tp_richcompare (PyNs3WifiRemoteStationState *PYBINDGEN_UNUSED(self), PyNs3WifiRemoteStationState *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRemoteStationState_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRemoteStationState_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiRemoteStationState",            /* tp_name */
    sizeof(PyNs3WifiRemoteStationState),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRemoteStationState__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRemoteStationState__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRemoteStationState_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiRemoteStationState__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRemoteStationState__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MgtAddBaRequestHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtAddBaRequestHeader__PythonHelper *helper = dynamic_cast< PyNs3MgtAddBaRequestHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3MgtAddBaRequestHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAddBaRequestHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = (ns3::MgtAddBaRequestHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MgtAddBaRequestHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAddBaRequestHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtAddBaRequestHeader* >((const ns3::MgtAddBaRequestHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3MgtAddBaRequestHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAddBaRequestHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtAddBaRequestHeader* >((const ns3::MgtAddBaRequestHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaRequestHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MgtAddBaRequestHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAddBaRequestHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MgtAddBaRequestHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtAddBaRequestHeader* >((const ns3::MgtAddBaRequestHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAddBaRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MgtAddBaRequestHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MgtAddBaRequestHeader__tp_init__0(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtAddBaRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtAddBaRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtAddBaRequestHeader_Type)
    {
        self->obj = new PyNs3MgtAddBaRequestHeader__PythonHelper(*((PyNs3MgtAddBaRequestHeader *) arg0)->obj);
        ((PyNs3MgtAddBaRequestHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtAddBaRequestHeader(*((PyNs3MgtAddBaRequestHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MgtAddBaRequestHeader__tp_init__1(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtAddBaRequestHeader_Type)
    {
        self->obj = new PyNs3MgtAddBaRequestHeader__PythonHelper();
        ((PyNs3MgtAddBaRequestHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtAddBaRequestHeader();
    }
    return 0;
}

int _wrap_PyNs3MgtAddBaRequestHeader__tp_init(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtAddBaRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtAddBaRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetTid(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetStartingSequence(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequence();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_Deserialize(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3MgtAddBaRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtAddBaRequestHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetTimeout(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTimeout();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetStartingSequence(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequence(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtAddBaRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_Serialize(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3MgtAddBaRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtAddBaRequestHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetImmediateBlockAck(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetImmediateBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetTid(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTid(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetBufferSize(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBufferSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_Print(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3MgtAddBaRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::MgtAddBaRequestHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_IsAmsduSupported(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAmsduSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetDelayedBlockAck(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDelayedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetInstanceTypeId(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtAddBaRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaRequestHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::MgtAddBaRequestHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_GetSerializedSize(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3MgtAddBaRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaRequestHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::MgtAddBaRequestHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetTimeout(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int timeout;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (timeout > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTimeout(timeout);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetBufferSize(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &size)) {
        return NULL;
    }
    if (size > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBufferSize(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_SetAmsduSupport(PyNs3MgtAddBaRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool supported;
    PyObject *py_supported;
    const char *keywords[] = {"supported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_supported)) {
        return NULL;
    }
    supported = (bool) PyObject_IsTrue(py_supported);
    self->obj->SetAmsduSupport(supported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaRequestHeader_IsImmediateBlockAck(PyNs3MgtAddBaRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsImmediateBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtAddBaRequestHeader__copy__(PyNs3MgtAddBaRequestHeader *self)
{

    PyNs3MgtAddBaRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtAddBaRequestHeader, &PyNs3MgtAddBaRequestHeader_Type);
    py_copy->obj = new ns3::MgtAddBaRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtAddBaRequestHeader_methods[] = {
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetTid, METH_NOARGS, NULL },
    {(char *) "GetStartingSequence", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetStartingSequence, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTimeout", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetTimeout, METH_NOARGS, NULL },
    {(char *) "SetStartingSequence", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetStartingSequence, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetImmediateBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetImmediateBlockAck, METH_NOARGS, NULL },
    {(char *) "SetTid", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetTid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBufferSize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetBufferSize, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsAmsduSupported", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_IsAmsduSupported, METH_NOARGS, NULL },
    {(char *) "SetDelayedBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetDelayedBlockAck, METH_NOARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetTimeout", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBufferSize", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetBufferSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAmsduSupport", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_SetAmsduSupport, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsImmediateBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader_IsImmediateBlockAck, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MgtAddBaRequestHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtAddBaRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtAddBaRequestHeader__tp_clear(PyNs3MgtAddBaRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtAddBaRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtAddBaRequestHeader__tp_traverse(PyNs3MgtAddBaRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MgtAddBaRequestHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MgtAddBaRequestHeader__tp_dealloc(PyNs3MgtAddBaRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtAddBaRequestHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtAddBaRequestHeader__tp_richcompare (PyNs3MgtAddBaRequestHeader *PYBINDGEN_UNUSED(self), PyNs3MgtAddBaRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtAddBaRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtAddBaRequestHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MgtAddBaRequestHeader",            /* tp_name */
    sizeof(PyNs3MgtAddBaRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtAddBaRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MgtAddBaRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtAddBaRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtAddBaRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtAddBaRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtAddBaRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtAddBaRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MgtAddBaResponseHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtAddBaResponseHeader__PythonHelper *helper = dynamic_cast< PyNs3MgtAddBaResponseHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3MgtAddBaResponseHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAddBaResponseHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = (ns3::MgtAddBaResponseHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MgtAddBaResponseHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAddBaResponseHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtAddBaResponseHeader* >((const ns3::MgtAddBaResponseHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3MgtAddBaResponseHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAddBaResponseHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtAddBaResponseHeader* >((const ns3::MgtAddBaResponseHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAddBaResponseHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MgtAddBaResponseHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAddBaResponseHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MgtAddBaResponseHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtAddBaResponseHeader* >((const ns3::MgtAddBaResponseHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAddBaResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MgtAddBaResponseHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MgtAddBaResponseHeader__tp_init__0(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtAddBaResponseHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtAddBaResponseHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtAddBaResponseHeader_Type)
    {
        self->obj = new PyNs3MgtAddBaResponseHeader__PythonHelper(*((PyNs3MgtAddBaResponseHeader *) arg0)->obj);
        ((PyNs3MgtAddBaResponseHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtAddBaResponseHeader(*((PyNs3MgtAddBaResponseHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MgtAddBaResponseHeader__tp_init__1(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtAddBaResponseHeader_Type)
    {
        self->obj = new PyNs3MgtAddBaResponseHeader__PythonHelper();
        ((PyNs3MgtAddBaResponseHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtAddBaResponseHeader();
    }
    return 0;
}

int _wrap_PyNs3MgtAddBaResponseHeader__tp_init(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtAddBaResponseHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtAddBaResponseHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetTid(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetStatusCode(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3StatusCode *py_StatusCode;
    
    ns3::StatusCode retval = self->obj->GetStatusCode();
    py_StatusCode = PyObject_New(PyNs3StatusCode, &PyNs3StatusCode_Type);
    py_StatusCode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_StatusCode->obj = new ns3::StatusCode(retval);
    PyNs3StatusCode_wrapper_registry[(void *) py_StatusCode->obj] = (PyObject *) py_StatusCode;
    py_retval = Py_BuildValue((char *) "N", py_StatusCode);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_Deserialize(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3MgtAddBaResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtAddBaResponseHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetTimeout(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetTimeout();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtAddBaResponseHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_Serialize(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3MgtAddBaResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtAddBaResponseHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetImmediateBlockAck(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetImmediateBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetTid(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTid(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetBufferSize(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetBufferSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_Print(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3MgtAddBaResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::MgtAddBaResponseHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_IsAmsduSupported(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAmsduSupported();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetDelayedBlockAck(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDelayedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetInstanceTypeId(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtAddBaResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaResponseHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::MgtAddBaResponseHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_GetSerializedSize(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3MgtAddBaResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAddBaResponseHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::MgtAddBaResponseHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetStatusCode(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3StatusCode *code;
    const char *keywords[] = {"code", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3StatusCode_Type, &code)) {
        return NULL;
    }
    self->obj->SetStatusCode(*((PyNs3StatusCode *) code)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetTimeout(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int timeout;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (timeout > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTimeout(timeout);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetBufferSize(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &size)) {
        return NULL;
    }
    if (size > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBufferSize(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_SetAmsduSupport(PyNs3MgtAddBaResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool supported;
    PyObject *py_supported;
    const char *keywords[] = {"supported", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_supported)) {
        return NULL;
    }
    supported = (bool) PyObject_IsTrue(py_supported);
    self->obj->SetAmsduSupport(supported);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAddBaResponseHeader_IsImmediateBlockAck(PyNs3MgtAddBaResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsImmediateBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtAddBaResponseHeader__copy__(PyNs3MgtAddBaResponseHeader *self)
{

    PyNs3MgtAddBaResponseHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtAddBaResponseHeader, &PyNs3MgtAddBaResponseHeader_Type);
    py_copy->obj = new ns3::MgtAddBaResponseHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtAddBaResponseHeader_methods[] = {
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetTid, METH_NOARGS, NULL },
    {(char *) "GetStatusCode", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetStatusCode, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTimeout", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetTimeout, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetImmediateBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetImmediateBlockAck, METH_NOARGS, NULL },
    {(char *) "SetTid", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetTid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBufferSize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetBufferSize, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsAmsduSupported", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_IsAmsduSupported, METH_NOARGS, NULL },
    {(char *) "SetDelayedBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetDelayedBlockAck, METH_NOARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetStatusCode", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetStatusCode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTimeout", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBufferSize", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetBufferSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAmsduSupport", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_SetAmsduSupport, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsImmediateBlockAck", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader_IsImmediateBlockAck, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MgtAddBaResponseHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtAddBaResponseHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtAddBaResponseHeader__tp_clear(PyNs3MgtAddBaResponseHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtAddBaResponseHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtAddBaResponseHeader__tp_traverse(PyNs3MgtAddBaResponseHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MgtAddBaResponseHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MgtAddBaResponseHeader__tp_dealloc(PyNs3MgtAddBaResponseHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtAddBaResponseHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtAddBaResponseHeader__tp_richcompare (PyNs3MgtAddBaResponseHeader *PYBINDGEN_UNUSED(self), PyNs3MgtAddBaResponseHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtAddBaResponseHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtAddBaResponseHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MgtAddBaResponseHeader",            /* tp_name */
    sizeof(PyNs3MgtAddBaResponseHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtAddBaResponseHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MgtAddBaResponseHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtAddBaResponseHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtAddBaResponseHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtAddBaResponseHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtAddBaResponseHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtAddBaResponseHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MgtAssocRequestHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtAssocRequestHeader__PythonHelper *helper = dynamic_cast< PyNs3MgtAssocRequestHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3MgtAssocRequestHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAssocRequestHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = (ns3::MgtAssocRequestHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MgtAssocRequestHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAssocRequestHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtAssocRequestHeader* >((const ns3::MgtAssocRequestHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3MgtAssocRequestHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAssocRequestHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtAssocRequestHeader* >((const ns3::MgtAssocRequestHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocRequestHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MgtAssocRequestHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAssocRequestHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MgtAssocRequestHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtAssocRequestHeader* >((const ns3::MgtAssocRequestHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAssocRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MgtAssocRequestHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MgtAssocRequestHeader__tp_init__0(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtAssocRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtAssocRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtAssocRequestHeader_Type)
    {
        self->obj = new PyNs3MgtAssocRequestHeader__PythonHelper(*((PyNs3MgtAssocRequestHeader *) arg0)->obj);
        ((PyNs3MgtAssocRequestHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtAssocRequestHeader(*((PyNs3MgtAssocRequestHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MgtAssocRequestHeader__tp_init__1(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtAssocRequestHeader_Type)
    {
        self->obj = new PyNs3MgtAssocRequestHeader__PythonHelper();
        ((PyNs3MgtAssocRequestHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtAssocRequestHeader();
    }
    return 0;
}

int _wrap_PyNs3MgtAssocRequestHeader__tp_init(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtAssocRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtAssocRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetSupportedRates(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetSupportedRates(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetSsid(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_Deserialize(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3MgtAssocRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtAssocRequestHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_SetListenInterval(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int interval;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &interval)) {
        return NULL;
    }
    if (interval > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetListenInterval(interval);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetSsid(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_Serialize(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3MgtAssocRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtAssocRequestHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_Print(PyNs3MgtAssocRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3MgtAssocRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::MgtAssocRequestHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetListenInterval(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetListenInterval();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetInstanceTypeId(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtAssocRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocRequestHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::MgtAssocRequestHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetSerializedSize(PyNs3MgtAssocRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3MgtAssocRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocRequestHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::MgtAssocRequestHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtAssocRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtAssocRequestHeader__copy__(PyNs3MgtAssocRequestHeader *self)
{

    PyNs3MgtAssocRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtAssocRequestHeader, &PyNs3MgtAssocRequestHeader_Type);
    py_copy->obj = new ns3::MgtAssocRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtAssocRequestHeader_methods[] = {
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetSupportedRates, METH_NOARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetListenInterval", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_SetListenInterval, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetSsid, METH_NOARGS, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetListenInterval", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetListenInterval, METH_NOARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MgtAssocRequestHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtAssocRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtAssocRequestHeader__tp_clear(PyNs3MgtAssocRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtAssocRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtAssocRequestHeader__tp_traverse(PyNs3MgtAssocRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MgtAssocRequestHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MgtAssocRequestHeader__tp_dealloc(PyNs3MgtAssocRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtAssocRequestHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtAssocRequestHeader__tp_richcompare (PyNs3MgtAssocRequestHeader *PYBINDGEN_UNUSED(self), PyNs3MgtAssocRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtAssocRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtAssocRequestHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MgtAssocRequestHeader",            /* tp_name */
    sizeof(PyNs3MgtAssocRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtAssocRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MgtAssocRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtAssocRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtAssocRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtAssocRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtAssocRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtAssocRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MgtAssocResponseHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtAssocResponseHeader__PythonHelper *helper = dynamic_cast< PyNs3MgtAssocResponseHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3MgtAssocResponseHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAssocResponseHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = (ns3::MgtAssocResponseHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MgtAssocResponseHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAssocResponseHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtAssocResponseHeader* >((const ns3::MgtAssocResponseHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3MgtAssocResponseHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAssocResponseHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtAssocResponseHeader* >((const ns3::MgtAssocResponseHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtAssocResponseHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MgtAssocResponseHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtAssocResponseHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MgtAssocResponseHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtAssocResponseHeader* >((const ns3::MgtAssocResponseHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtAssocResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MgtAssocResponseHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MgtAssocResponseHeader__tp_init__0(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtAssocResponseHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtAssocResponseHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtAssocResponseHeader_Type)
    {
        self->obj = new PyNs3MgtAssocResponseHeader__PythonHelper(*((PyNs3MgtAssocResponseHeader *) arg0)->obj);
        ((PyNs3MgtAssocResponseHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtAssocResponseHeader(*((PyNs3MgtAssocResponseHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MgtAssocResponseHeader__tp_init__1(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtAssocResponseHeader_Type)
    {
        self->obj = new PyNs3MgtAssocResponseHeader__PythonHelper();
        ((PyNs3MgtAssocResponseHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtAssocResponseHeader();
    }
    return 0;
}

int _wrap_PyNs3MgtAssocResponseHeader__tp_init(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtAssocResponseHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtAssocResponseHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetSupportedRates(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetStatusCode(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3StatusCode *py_StatusCode;
    
    ns3::StatusCode retval = self->obj->GetStatusCode();
    py_StatusCode = PyObject_New(PyNs3StatusCode, &PyNs3StatusCode_Type);
    py_StatusCode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_StatusCode->obj = new ns3::StatusCode(retval);
    PyNs3StatusCode_wrapper_registry[(void *) py_StatusCode->obj] = (PyObject *) py_StatusCode;
    py_retval = Py_BuildValue((char *) "N", py_StatusCode);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetSupportedRates(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_Deserialize(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3MgtAssocResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtAssocResponseHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtAssocResponseHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_Serialize(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3MgtAssocResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtAssocResponseHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_Print(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3MgtAssocResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::MgtAssocResponseHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_SetStatusCode(PyNs3MgtAssocResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3StatusCode *code;
    const char *keywords[] = {"code", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3StatusCode_Type, &code)) {
        return NULL;
    }
    self->obj->SetStatusCode(*((PyNs3StatusCode *) code)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetInstanceTypeId(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtAssocResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocResponseHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::MgtAssocResponseHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtAssocResponseHeader_GetSerializedSize(PyNs3MgtAssocResponseHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3MgtAssocResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtAssocResponseHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::MgtAssocResponseHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtAssocResponseHeader__copy__(PyNs3MgtAssocResponseHeader *self)
{

    PyNs3MgtAssocResponseHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtAssocResponseHeader, &PyNs3MgtAssocResponseHeader_Type);
    py_copy->obj = new ns3::MgtAssocResponseHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtAssocResponseHeader_methods[] = {
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetSupportedRates, METH_NOARGS, NULL },
    {(char *) "GetStatusCode", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetStatusCode, METH_NOARGS, NULL },
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetStatusCode", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_SetStatusCode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MgtAssocResponseHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtAssocResponseHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtAssocResponseHeader__tp_clear(PyNs3MgtAssocResponseHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtAssocResponseHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtAssocResponseHeader__tp_traverse(PyNs3MgtAssocResponseHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MgtAssocResponseHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MgtAssocResponseHeader__tp_dealloc(PyNs3MgtAssocResponseHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtAssocResponseHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtAssocResponseHeader__tp_richcompare (PyNs3MgtAssocResponseHeader *PYBINDGEN_UNUSED(self), PyNs3MgtAssocResponseHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtAssocResponseHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtAssocResponseHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MgtAssocResponseHeader",            /* tp_name */
    sizeof(PyNs3MgtAssocResponseHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtAssocResponseHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MgtAssocResponseHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtAssocResponseHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtAssocResponseHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtAssocResponseHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtAssocResponseHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtAssocResponseHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MgtDelBaHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtDelBaHeader__PythonHelper *helper = dynamic_cast< PyNs3MgtDelBaHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3MgtDelBaHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtDelBaHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = (ns3::MgtDelBaHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MgtDelBaHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtDelBaHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = const_cast< ns3::MgtDelBaHeader* >((const ns3::MgtDelBaHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3MgtDelBaHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtDelBaHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = const_cast< ns3::MgtDelBaHeader* >((const ns3::MgtDelBaHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtDelBaHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MgtDelBaHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtDelBaHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MgtDelBaHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = const_cast< ns3::MgtDelBaHeader* >((const ns3::MgtDelBaHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtDelBaHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MgtDelBaHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MgtDelBaHeader__tp_init__0(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtDelBaHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtDelBaHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtDelBaHeader_Type)
    {
        self->obj = new PyNs3MgtDelBaHeader__PythonHelper(*((PyNs3MgtDelBaHeader *) arg0)->obj);
        ((PyNs3MgtDelBaHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtDelBaHeader(*((PyNs3MgtDelBaHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MgtDelBaHeader__tp_init__1(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtDelBaHeader_Type)
    {
        self->obj = new PyNs3MgtDelBaHeader__PythonHelper();
        ((PyNs3MgtDelBaHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtDelBaHeader();
    }
    return 0;
}

int _wrap_PyNs3MgtDelBaHeader__tp_init(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtDelBaHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtDelBaHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_GetTid(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_Deserialize(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3MgtDelBaHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtDelBaHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtDelBaHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtDelBaHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_Serialize(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3MgtDelBaHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtDelBaHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtDelBaHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_SetByRecipient(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetByRecipient();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_Print(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3MgtDelBaHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtDelBaHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::MgtDelBaHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_IsByOriginator(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsByOriginator();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_GetInstanceTypeId(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtDelBaHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtDelBaHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::MgtDelBaHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_GetSerializedSize(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3MgtDelBaHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtDelBaHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::MgtDelBaHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_SetByOriginator(PyNs3MgtDelBaHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetByOriginator();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtDelBaHeader_SetTid(PyNs3MgtDelBaHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTid(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtDelBaHeader__copy__(PyNs3MgtDelBaHeader *self)
{

    PyNs3MgtDelBaHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtDelBaHeader, &PyNs3MgtDelBaHeader_Type);
    py_copy->obj = new ns3::MgtDelBaHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtDelBaHeader_methods[] = {
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_GetTid, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetByRecipient", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_SetByRecipient, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsByOriginator", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_IsByOriginator, METH_NOARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetByOriginator", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_SetByOriginator, METH_NOARGS, NULL },
    {(char *) "SetTid", (PyCFunction) _wrap_PyNs3MgtDelBaHeader_SetTid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MgtDelBaHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtDelBaHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtDelBaHeader__tp_clear(PyNs3MgtDelBaHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtDelBaHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtDelBaHeader__tp_traverse(PyNs3MgtDelBaHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MgtDelBaHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MgtDelBaHeader__tp_dealloc(PyNs3MgtDelBaHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtDelBaHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtDelBaHeader__tp_richcompare (PyNs3MgtDelBaHeader *PYBINDGEN_UNUSED(self), PyNs3MgtDelBaHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtDelBaHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtDelBaHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MgtDelBaHeader",            /* tp_name */
    sizeof(PyNs3MgtDelBaHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtDelBaHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MgtDelBaHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtDelBaHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtDelBaHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtDelBaHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtDelBaHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtDelBaHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MgtProbeRequestHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtProbeRequestHeader__PythonHelper *helper = dynamic_cast< PyNs3MgtProbeRequestHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3MgtProbeRequestHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtProbeRequestHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = (ns3::MgtProbeRequestHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MgtProbeRequestHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtProbeRequestHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtProbeRequestHeader* >((const ns3::MgtProbeRequestHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3MgtProbeRequestHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtProbeRequestHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtProbeRequestHeader* >((const ns3::MgtProbeRequestHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeRequestHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MgtProbeRequestHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtProbeRequestHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MgtProbeRequestHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = const_cast< ns3::MgtProbeRequestHeader* >((const ns3::MgtProbeRequestHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtProbeRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MgtProbeRequestHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MgtProbeRequestHeader__tp_init__0(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtProbeRequestHeader_Type)
    {
        self->obj = new PyNs3MgtProbeRequestHeader__PythonHelper();
        ((PyNs3MgtProbeRequestHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtProbeRequestHeader();
    }
    return 0;
}

static int
_wrap_PyNs3MgtProbeRequestHeader__tp_init__1(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtProbeRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtProbeRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtProbeRequestHeader_Type)
    {
        self->obj = new PyNs3MgtProbeRequestHeader__PythonHelper(*((PyNs3MgtProbeRequestHeader *) arg0)->obj);
        ((PyNs3MgtProbeRequestHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtProbeRequestHeader(*((PyNs3MgtProbeRequestHeader *) arg0)->obj);
    }
    return 0;
}

int _wrap_PyNs3MgtProbeRequestHeader__tp_init(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtProbeRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtProbeRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_SetSupportedRates(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetSupportedRates(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_SetSsid(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_Deserialize(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3MgtProbeRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtProbeRequestHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtProbeRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_Serialize(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3MgtProbeRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtProbeRequestHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_Print(PyNs3MgtProbeRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3MgtProbeRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::MgtProbeRequestHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetInstanceTypeId(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtProbeRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeRequestHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::MgtProbeRequestHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetSerializedSize(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3MgtProbeRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeRequestHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::MgtProbeRequestHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeRequestHeader_GetSsid(PyNs3MgtProbeRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtProbeRequestHeader__copy__(PyNs3MgtProbeRequestHeader *self)
{

    PyNs3MgtProbeRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtProbeRequestHeader, &PyNs3MgtProbeRequestHeader_Type);
    py_copy->obj = new ns3::MgtProbeRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtProbeRequestHeader_methods[] = {
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetSupportedRates, METH_NOARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader_GetSsid, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MgtProbeRequestHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtProbeRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtProbeRequestHeader__tp_clear(PyNs3MgtProbeRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtProbeRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtProbeRequestHeader__tp_traverse(PyNs3MgtProbeRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MgtProbeRequestHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MgtProbeRequestHeader__tp_dealloc(PyNs3MgtProbeRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtProbeRequestHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtProbeRequestHeader__tp_richcompare (PyNs3MgtProbeRequestHeader *PYBINDGEN_UNUSED(self), PyNs3MgtProbeRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtProbeRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtProbeRequestHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MgtProbeRequestHeader",            /* tp_name */
    sizeof(PyNs3MgtProbeRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtProbeRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MgtProbeRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtProbeRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtProbeRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtProbeRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtProbeRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtProbeRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MgtProbeResponseHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtProbeResponseHeader__PythonHelper *helper = dynamic_cast< PyNs3MgtProbeResponseHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3MgtProbeResponseHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtProbeResponseHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = (ns3::MgtProbeResponseHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MgtProbeResponseHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtProbeResponseHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtProbeResponseHeader* >((const ns3::MgtProbeResponseHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3MgtProbeResponseHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtProbeResponseHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtProbeResponseHeader* >((const ns3::MgtProbeResponseHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::MgtProbeResponseHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3MgtProbeResponseHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MgtProbeResponseHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::MgtProbeResponseHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = const_cast< ns3::MgtProbeResponseHeader* >((const ns3::MgtProbeResponseHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MgtProbeResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MgtProbeResponseHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MgtProbeResponseHeader__tp_init__0(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtProbeResponseHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtProbeResponseHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtProbeResponseHeader_Type)
    {
        self->obj = new PyNs3MgtProbeResponseHeader__PythonHelper(*((PyNs3MgtProbeResponseHeader *) arg0)->obj);
        ((PyNs3MgtProbeResponseHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtProbeResponseHeader(*((PyNs3MgtProbeResponseHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MgtProbeResponseHeader__tp_init__1(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MgtProbeResponseHeader_Type)
    {
        self->obj = new PyNs3MgtProbeResponseHeader__PythonHelper();
        ((PyNs3MgtProbeResponseHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MgtProbeResponseHeader();
    }
    return 0;
}

int _wrap_PyNs3MgtProbeResponseHeader__tp_init(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtProbeResponseHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtProbeResponseHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetSupportedRates(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SupportedRates *rates;
    const char *keywords[] = {"rates", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &rates)) {
        return NULL;
    }
    self->obj->SetSupportedRates(*((PyNs3SupportedRates *) rates)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetSupportedRates(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3SupportedRates *py_SupportedRates;
    
    ns3::SupportedRates retval = self->obj->GetSupportedRates();
    py_SupportedRates = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    py_SupportedRates->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SupportedRates->obj = new ns3::SupportedRates(retval);
    PyNs3Empty_wrapper_registry[(void *) py_SupportedRates->obj] = (PyObject *) py_SupportedRates;
    py_retval = Py_BuildValue((char *) "N", py_SupportedRates);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetSsid(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_Deserialize(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3MgtProbeResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtProbeResponseHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_Print(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3MgtProbeResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::MgtProbeResponseHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetSsid(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_Serialize(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3MgtProbeResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::MgtProbeResponseHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetTimestamp(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetTimestamp();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetBeaconIntervalUs(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->GetBeaconIntervalUs();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetInstanceTypeId(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3MgtProbeResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeResponseHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::MgtProbeResponseHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetSerializedSize(PyNs3MgtProbeResponseHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3MgtProbeResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3MgtProbeResponseHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::MgtProbeResponseHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_SetBeaconIntervalUs(PyNs3MgtProbeResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t us;
    const char *keywords[] = {"us", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &us)) {
        return NULL;
    }
    self->obj->SetBeaconIntervalUs(us);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MgtProbeResponseHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MgtProbeResponseHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3MgtProbeResponseHeader__copy__(PyNs3MgtProbeResponseHeader *self)
{

    PyNs3MgtProbeResponseHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtProbeResponseHeader, &PyNs3MgtProbeResponseHeader_Type);
    py_copy->obj = new ns3::MgtProbeResponseHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtProbeResponseHeader_methods[] = {
    {(char *) "SetSupportedRates", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetSupportedRates, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSupportedRates", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetSupportedRates, METH_NOARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetSsid, METH_NOARGS, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTimestamp", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetTimestamp, METH_NOARGS, NULL },
    {(char *) "GetBeaconIntervalUs", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetBeaconIntervalUs, METH_NOARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetBeaconIntervalUs", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_SetBeaconIntervalUs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MgtProbeResponseHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtProbeResponseHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtProbeResponseHeader__tp_clear(PyNs3MgtProbeResponseHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtProbeResponseHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtProbeResponseHeader__tp_traverse(PyNs3MgtProbeResponseHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MgtProbeResponseHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MgtProbeResponseHeader__tp_dealloc(PyNs3MgtProbeResponseHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtProbeResponseHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtProbeResponseHeader__tp_richcompare (PyNs3MgtProbeResponseHeader *PYBINDGEN_UNUSED(self), PyNs3MgtProbeResponseHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtProbeResponseHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtProbeResponseHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MgtProbeResponseHeader",            /* tp_name */
    sizeof(PyNs3MgtProbeResponseHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtProbeResponseHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MgtProbeResponseHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtProbeResponseHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtProbeResponseHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtProbeResponseHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtProbeResponseHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtProbeResponseHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3QosTag__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3QosTag *self)
{
    PyObject *py_retval;
    PyNs3QosTag__PythonHelper *helper = dynamic_cast< PyNs3QosTag__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3QosTag__PythonHelper::Deserialize(ns3::TagBuffer i)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTag *self_obj_before;
    PyObject *py_retval;
    PyNs3TagBuffer *py_TagBuffer;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QosTag::Deserialize(i);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = (ns3::QosTag*) this;
    py_TagBuffer = PyObject_New(PyNs3TagBuffer, &PyNs3TagBuffer_Type);
    py_TagBuffer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TagBuffer->obj = new ns3::TagBuffer(i);
    PyNs3TagBuffer_wrapper_registry[(void *) py_TagBuffer->obj] = (PyObject *) py_TagBuffer;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_TagBuffer);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3QosTag__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTag *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTag::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = const_cast< ns3::QosTag* >((const ns3::QosTag*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTag::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTag::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3QosTag__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTag *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTag::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = const_cast< ns3::QosTag* >((const ns3::QosTag*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTag::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QosTag::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3QosTag__PythonHelper::Serialize(ns3::TagBuffer i) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QosTag *self_obj_before;
    PyObject *py_retval;
    PyNs3TagBuffer *py_TagBuffer;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QosTag::Serialize(i);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = const_cast< ns3::QosTag* >((const ns3::QosTag*) this);
    py_TagBuffer = PyObject_New(PyNs3TagBuffer, &PyNs3TagBuffer_Type);
    py_TagBuffer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TagBuffer->obj = new ns3::TagBuffer(i);
    PyNs3TagBuffer_wrapper_registry[(void *) py_TagBuffer->obj] = (PyObject *) py_TagBuffer;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_TagBuffer);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QosTag* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QosTag__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3QosTag__tp_init__0(PyNs3QosTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3QosTag *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3QosTag_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3QosTag_Type)
    {
        self->obj = new PyNs3QosTag__PythonHelper(*((PyNs3QosTag *) arg0)->obj);
        ((PyNs3QosTag__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::QosTag(*((PyNs3QosTag *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3QosTag__tp_init__1(PyNs3QosTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3QosTag_Type)
    {
        self->obj = new PyNs3QosTag__PythonHelper();
        ((PyNs3QosTag__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::QosTag();
    }
    return 0;
}

static int
_wrap_PyNs3QosTag__tp_init__2(PyNs3QosTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3QosTag_Type)
    {
        self->obj = new PyNs3QosTag__PythonHelper(tid);
        ((PyNs3QosTag__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::QosTag(tid);
    }
    return 0;
}

int _wrap_PyNs3QosTag__tp_init(PyNs3QosTag *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3QosTag__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3QosTag__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3QosTag__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3QosTag_GetTid(PyNs3QosTag *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTag_Deserialize(PyNs3QosTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    PyNs3QosTag__PythonHelper *helper_class = dynamic_cast<PyNs3QosTag__PythonHelper*> (self->obj);
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3TagBuffer *) i)->obj)) : (self->obj->ns3::QosTag::Deserialize(*((PyNs3TagBuffer *) i)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTag_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::QosTag::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTag_Serialize(PyNs3QosTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3TagBuffer *i;
    PyNs3QosTag__PythonHelper *helper_class = dynamic_cast<PyNs3QosTag__PythonHelper*> (self->obj);
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TagBuffer_Type, &i)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3TagBuffer *) i)->obj)) : (self->obj->ns3::QosTag::Serialize(*((PyNs3TagBuffer *) i)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTag_Print(PyNs3QosTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3QosTag__PythonHelper *helper_class = dynamic_cast<PyNs3QosTag__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::QosTag::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTag_SetUserPriority(PyNs3QosTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::UserPriority up;
    const char *keywords[] = {"up", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &up)) {
        return NULL;
    }
    self->obj->SetUserPriority(up);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTag_GetInstanceTypeId(PyNs3QosTag *self)
{
    PyObject *py_retval;
    PyNs3QosTag__PythonHelper *helper_class = dynamic_cast<PyNs3QosTag__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::QosTag::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTag_GetSerializedSize(PyNs3QosTag *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3QosTag__PythonHelper *helper_class = dynamic_cast<PyNs3QosTag__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::QosTag::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QosTag_SetTid(PyNs3QosTag *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTid(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3QosTag__copy__(PyNs3QosTag *self)
{

    PyNs3QosTag *py_copy;
    py_copy = PyObject_GC_New(PyNs3QosTag, &PyNs3QosTag_Type);
    py_copy->obj = new ns3::QosTag(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3QosTag_methods[] = {
    {(char *) "GetTid", (PyCFunction) _wrap_PyNs3QosTag_GetTid, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3QosTag_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3QosTag_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3QosTag_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3QosTag_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetUserPriority", (PyCFunction) _wrap_PyNs3QosTag_SetUserPriority, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3QosTag_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3QosTag_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetTid", (PyCFunction) _wrap_PyNs3QosTag_SetTid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3QosTag__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3QosTag__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3QosTag__tp_clear(PyNs3QosTag *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::QosTag *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3QosTag__tp_traverse(PyNs3QosTag *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3QosTag__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3QosTag__tp_dealloc(PyNs3QosTag *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3QosTag__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3QosTag__tp_richcompare (PyNs3QosTag *PYBINDGEN_UNUSED(self), PyNs3QosTag *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3QosTag_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3QosTag_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.QosTag",            /* tp_name */
    sizeof(PyNs3QosTag),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3QosTag__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3QosTag__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3QosTag__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3QosTag__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3QosTag_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3QosTag, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3QosTag__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_init__0(PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >();
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_init__1(PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >(*((PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *) o)->obj);
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_init(PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____copy__(PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__, &PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type);
    py_copy->obj = new ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init__0(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >();
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init__1(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >(*((PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *) o)->obj);
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____copy__(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__, &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type);
    py_copy->obj = new ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiActionHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    PyNs3WifiActionHeader__PythonHelper *helper = dynamic_cast< PyNs3WifiActionHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3WifiActionHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiActionHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = (ns3::WifiActionHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3WifiActionHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiActionHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = const_cast< ns3::WifiActionHeader* >((const ns3::WifiActionHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3WifiActionHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiActionHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = const_cast< ns3::WifiActionHeader* >((const ns3::WifiActionHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiActionHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3WifiActionHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiActionHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiActionHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = const_cast< ns3::WifiActionHeader* >((const ns3::WifiActionHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiActionHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiActionHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiActionHeader__tp_init__0(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiActionHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiActionHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiActionHeader_Type)
    {
        self->obj = new PyNs3WifiActionHeader__PythonHelper(*((PyNs3WifiActionHeader *) arg0)->obj);
        ((PyNs3WifiActionHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiActionHeader(*((PyNs3WifiActionHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3WifiActionHeader__tp_init__1(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiActionHeader_Type)
    {
        self->obj = new PyNs3WifiActionHeader__PythonHelper();
        ((PyNs3WifiActionHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiActionHeader();
    }
    return 0;
}

int _wrap_PyNs3WifiActionHeader__tp_init(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiActionHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiActionHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetAction(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    PyNs3WifiActionHeaderActionValue *py_ActionValue;
    
    ns3::WifiActionHeader::ActionValue retval = self->obj->GetAction();
    py_ActionValue = PyObject_New(PyNs3WifiActionHeaderActionValue, &PyNs3WifiActionHeaderActionValue_Type);
    py_ActionValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ActionValue->obj = new ns3::WifiActionHeader::ActionValue(retval);
    PyNs3WifiActionHeaderActionValue_wrapper_registry[(void *) py_ActionValue->obj] = (PyObject *) py_ActionValue;
    py_retval = Py_BuildValue((char *) "N", py_ActionValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_Deserialize(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3WifiActionHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiActionHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::WifiActionHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetCategory(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    ns3::WifiActionHeader::CategoryValue retval;
    
    retval = self->obj->GetCategory();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiActionHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_Serialize(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3WifiActionHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiActionHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::WifiActionHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_Print(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3WifiActionHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiActionHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::WifiActionHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetInstanceTypeId(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    PyNs3WifiActionHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiActionHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::WifiActionHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_GetSerializedSize(PyNs3WifiActionHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WifiActionHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiActionHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::WifiActionHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiActionHeader_SetAction(PyNs3WifiActionHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiActionHeader::CategoryValue type;
    PyNs3WifiActionHeaderActionValue *action;
    const char *keywords[] = {"type", "action", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "iO!", (char **) keywords, &type, &PyNs3WifiActionHeaderActionValue_Type, &action)) {
        return NULL;
    }
    self->obj->SetAction(type, *((PyNs3WifiActionHeaderActionValue *) action)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiActionHeader__copy__(PyNs3WifiActionHeader *self)
{

    PyNs3WifiActionHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiActionHeader, &PyNs3WifiActionHeader_Type);
    py_copy->obj = new ns3::WifiActionHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiActionHeader_methods[] = {
    {(char *) "GetAction", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetAction, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiActionHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCategory", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetCategory, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiActionHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3WifiActionHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiActionHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetAction", (PyCFunction) _wrap_PyNs3WifiActionHeader_SetAction, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiActionHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiActionHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiActionHeader__tp_clear(PyNs3WifiActionHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiActionHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiActionHeader__tp_traverse(PyNs3WifiActionHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3WifiActionHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiActionHeader__tp_dealloc(PyNs3WifiActionHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiActionHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiActionHeader__tp_richcompare (PyNs3WifiActionHeader *PYBINDGEN_UNUSED(self), PyNs3WifiActionHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiActionHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiActionHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiActionHeader",            /* tp_name */
    sizeof(PyNs3WifiActionHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiActionHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiActionHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiActionHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiActionHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiActionHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiActionHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiActionHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3WifiActionHeaderActionValue_wrapper_registry;
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_blockAck(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->blockAck);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_blockAck(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->blockAck)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_interwork(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->interwork);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_interwork(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->interwork)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_linkMetrtic(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->linkMetrtic);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_linkMetrtic(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->linkMetrtic)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_pathSelection(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->pathSelection);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_pathSelection(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->pathSelection)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_peerLink(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->peerLink);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_peerLink(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->peerLink)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3WifiActionHeaderActionValue__get_resourceCoordination(PyNs3WifiActionHeaderActionValue *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", self->obj->resourceCoordination);
    return py_retval;
}
static int _wrap_PyNs3WifiActionHeaderActionValue__set_resourceCoordination(PyNs3WifiActionHeaderActionValue *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->resourceCoordination)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3WifiActionHeaderActionValue__getsets[] = {
    {
        (char*) "peerLink", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_peerLink, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_peerLink, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "interwork", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_interwork, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_interwork, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "resourceCoordination", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_resourceCoordination, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_resourceCoordination, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "blockAck", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_blockAck, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_blockAck, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "linkMetrtic", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_linkMetrtic, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_linkMetrtic, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "pathSelection", /* attribute name */
        (getter) _wrap_PyNs3WifiActionHeaderActionValue__get_pathSelection, /* C function to get the attribute */
        (setter) _wrap_PyNs3WifiActionHeaderActionValue__set_pathSelection, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3WifiActionHeaderActionValue__tp_init__0(PyNs3WifiActionHeaderActionValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiActionHeader::ActionValue();
    return 0;
}

static int
_wrap_PyNs3WifiActionHeaderActionValue__tp_init__1(PyNs3WifiActionHeaderActionValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiActionHeaderActionValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiActionHeaderActionValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiActionHeader::ActionValue(*((PyNs3WifiActionHeaderActionValue *) arg0)->obj);
    return 0;
}

int _wrap_PyNs3WifiActionHeaderActionValue__tp_init(PyNs3WifiActionHeaderActionValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiActionHeaderActionValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiActionHeaderActionValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3WifiActionHeaderActionValue__copy__(PyNs3WifiActionHeaderActionValue *self)
{

    PyNs3WifiActionHeaderActionValue *py_copy;
    py_copy = PyObject_New(PyNs3WifiActionHeaderActionValue, &PyNs3WifiActionHeaderActionValue_Type);
    py_copy->obj = new ns3::WifiActionHeader::ActionValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3WifiActionHeaderActionValue_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiActionHeaderActionValue_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiActionHeaderActionValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiActionHeaderActionValue__tp_dealloc(PyNs3WifiActionHeaderActionValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3WifiActionHeaderActionValue_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3WifiActionHeaderActionValue_wrapper_registry.end()) {
        PyNs3WifiActionHeaderActionValue_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::WifiActionHeader::ActionValue *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiActionHeaderActionValue__tp_richcompare (PyNs3WifiActionHeaderActionValue *PYBINDGEN_UNUSED(self), PyNs3WifiActionHeaderActionValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiActionHeaderActionValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiActionHeaderActionValue_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiActionHeader.ActionValue",            /* tp_name */
    sizeof(PyNs3WifiActionHeaderActionValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiActionHeaderActionValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiActionHeaderActionValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiActionHeaderActionValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3WifiActionHeaderActionValue__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiActionHeaderActionValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiInformationElement__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiInformationElement' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3WifiInformationElement_Deserialize(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Deserialize(*((PyNs3BufferIterator *) i)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_Serialize(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->Serialize(*((PyNs3BufferIterator *) i)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_DeserializeInformationField(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_Print(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    self->obj->Print(*((PyStdOstream *) os)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_GetInformationFieldSize(PyNs3WifiInformationElement *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_SerializeInformationField(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_GetSerializedSize(PyNs3WifiInformationElement *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSerializedSize();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_DeserializeIfPresent(PyNs3WifiInformationElement *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *i;
    const char *keywords[] = {"i", NULL};
    PyNs3BufferIterator *py_Iterator;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &i)) {
        return NULL;
    }
    ns3::Buffer::Iterator retval = self->obj->DeserializeIfPresent(*((PyNs3BufferIterator *) i)->obj);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(retval);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = Py_BuildValue((char *) "N", py_Iterator);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElement_ElementId(PyNs3WifiInformationElement *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}

static PyMethodDef PyNs3WifiInformationElement_methods[] = {
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiInformationElement_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiInformationElement_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3WifiInformationElement_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3WifiInformationElement_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3WifiInformationElement_GetInformationFieldSize, METH_NOARGS, NULL },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3WifiInformationElement_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiInformationElement_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "DeserializeIfPresent", (PyCFunction) _wrap_PyNs3WifiInformationElement_DeserializeIfPresent, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3WifiInformationElement_ElementId, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiInformationElement__tp_dealloc(PyNs3WifiInformationElement *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::WifiInformationElement *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiInformationElement__tp_richcompare (PyNs3WifiInformationElement *PYBINDGEN_UNUSED(self), PyNs3WifiInformationElement *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiInformationElement_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiInformationElement_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiInformationElement",            /* tp_name */
    sizeof(PyNs3WifiInformationElement),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiInformationElement__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiInformationElement__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiInformationElement_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiInformationElement__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiInformationElementVector__PythonHelper::_wrap_GetSize(PyNs3WifiInformationElementVector *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WifiInformationElementVector__PythonHelper *helper = dynamic_cast< PyNs3WifiInformationElementVector__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method GetSize of class WifiInformationElementVector is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->GetSize__parent_caller();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}

PyObject *
PyNs3WifiInformationElementVector__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiInformationElementVector *self)
{
    PyObject *py_retval;
    PyNs3WifiInformationElementVector__PythonHelper *helper = dynamic_cast< PyNs3WifiInformationElementVector__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3WifiInformationElementVector__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiInformationElementVector *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = (ns3::WifiInformationElementVector*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3WifiInformationElementVector__PythonHelper::DeserializeSingleIe(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiInformationElementVector *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DeserializeSingleIe"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::DeserializeSingleIe(start);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = (ns3::WifiInformationElementVector*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DeserializeSingleIe", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::DeserializeSingleIe(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::DeserializeSingleIe(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3WifiInformationElementVector__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiInformationElementVector *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = const_cast< ns3::WifiInformationElementVector* >((const ns3::WifiInformationElementVector*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3WifiInformationElementVector__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiInformationElementVector *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = const_cast< ns3::WifiInformationElementVector* >((const ns3::WifiInformationElementVector*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiInformationElementVector::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3WifiInformationElementVector__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiInformationElementVector *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiInformationElementVector::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = const_cast< ns3::WifiInformationElementVector* >((const ns3::WifiInformationElementVector*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiInformationElementVector* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiInformationElementVector__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiInformationElementVector__tp_init__0(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiInformationElementVector *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiInformationElementVector_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiInformationElementVector_Type)
    {
        self->obj = new PyNs3WifiInformationElementVector__PythonHelper(*((PyNs3WifiInformationElementVector *) arg0)->obj);
        ((PyNs3WifiInformationElementVector__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiInformationElementVector(*((PyNs3WifiInformationElementVector *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3WifiInformationElementVector__tp_init__1(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiInformationElementVector_Type)
    {
        self->obj = new PyNs3WifiInformationElementVector__PythonHelper();
        ((PyNs3WifiInformationElementVector__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiInformationElementVector();
    }
    return 0;
}

int _wrap_PyNs3WifiInformationElementVector__tp_init(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiInformationElementVector__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiInformationElementVector__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_AddInformationElement(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiInformationElement *element;
    ns3::WifiInformationElement *element_ptr;
    const char *keywords[] = {"element", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiInformationElement_Type, &element)) {
        return NULL;
    }
    element_ptr = (element ? element->obj : NULL);
    retval = self->obj->AddInformationElement(ns3::Ptr< ns3::WifiInformationElement  > (element_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_Deserialize(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3WifiInformationElementVector__PythonHelper *helper_class = dynamic_cast<PyNs3WifiInformationElementVector__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::WifiInformationElementVector::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiInformationElementVector::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_Serialize(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3WifiInformationElementVector__PythonHelper *helper_class = dynamic_cast<PyNs3WifiInformationElementVector__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::WifiInformationElementVector::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_FindFirst(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiInformationElement > retval;
    int id;
    const char *keywords[] = {"id", NULL};
    PyNs3WifiInformationElement *py_WifiInformationElement;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->FindFirst(id);
    if (!(const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_WifiInformationElement = NULL;
    } else {
        py_WifiInformationElement = (PyNs3WifiInformationElement *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiInformationElement);
    }
    
    if (py_WifiInformationElement == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval)))), &PyNs3WifiInformationElement_Type);
        py_WifiInformationElement = PyObject_New(PyNs3WifiInformationElement, wrapper_type);
        py_WifiInformationElement->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval))->Ref();
        py_WifiInformationElement->obj = const_cast<ns3::WifiInformationElement *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_WifiInformationElement->obj] = (PyObject *) py_WifiInformationElement;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiInformationElement);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_Print(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3WifiInformationElementVector__PythonHelper *helper_class = dynamic_cast<PyNs3WifiInformationElementVector__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::WifiInformationElementVector::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_DeserializeSingleIe(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3WifiInformationElementVector__PythonHelper *helper_class = dynamic_cast<PyNs3WifiInformationElementVector__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->DeserializeSingleIe(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::WifiInformationElementVector::DeserializeSingleIe(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_GetInstanceTypeId(PyNs3WifiInformationElementVector *self)
{
    PyObject *py_retval;
    PyNs3WifiInformationElementVector__PythonHelper *helper_class = dynamic_cast<PyNs3WifiInformationElementVector__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::WifiInformationElementVector::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_GetSerializedSize(PyNs3WifiInformationElementVector *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WifiInformationElementVector__PythonHelper *helper_class = dynamic_cast<PyNs3WifiInformationElementVector__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::WifiInformationElementVector::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiInformationElementVector_SetMaxSize(PyNs3WifiInformationElementVector *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &size)) {
        return NULL;
    }
    if (size > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetMaxSize(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiInformationElementVector__copy__(PyNs3WifiInformationElementVector *self)
{

    PyNs3WifiInformationElementVector *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiInformationElementVector, &PyNs3WifiInformationElementVector_Type);
    py_copy->obj = new ns3::WifiInformationElementVector(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiInformationElementVector_methods[] = {
    {(char *) "AddInformationElement", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_AddInformationElement, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "FindFirst", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_FindFirst, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeserializeSingleIe", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_DeserializeSingleIe, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetMaxSize", (PyCFunction) _wrap_PyNs3WifiInformationElementVector_SetMaxSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSize", (PyCFunction) PyNs3WifiInformationElementVector__PythonHelper::_wrap_GetSize, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiInformationElementVector__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiInformationElementVector__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiInformationElementVector__tp_clear(PyNs3WifiInformationElementVector *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiInformationElementVector *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiInformationElementVector__tp_traverse(PyNs3WifiInformationElementVector *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3WifiInformationElementVector__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiInformationElementVector__tp_dealloc(PyNs3WifiInformationElementVector *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiInformationElementVector__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiInformationElementVector__tp_richcompare (PyNs3WifiInformationElementVector *PYBINDGEN_UNUSED(self), PyNs3WifiInformationElementVector *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiInformationElementVector_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiInformationElementVector_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiInformationElementVector",            /* tp_name */
    sizeof(PyNs3WifiInformationElementVector),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiInformationElementVector__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiInformationElementVector__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiInformationElementVector__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiInformationElementVector__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiInformationElementVector_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiInformationElementVector, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiInformationElementVector__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiMac__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiMac' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3WifiMac_SetEifsNoDifs(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *eifsNoDifs;
    ns3::Time eifsNoDifs2;
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &eifsNoDifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Time_Type)) {
        eifsNoDifs2 = *((PyNs3Time *) eifsNoDifs)->obj;
    } else if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Scalar_Type)) {
        eifsNoDifs2 = *((PyNs3Scalar *) eifsNoDifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", eifsNoDifs->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetEifsNoDifs(eifsNoDifs2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetForwardUpCallback(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl8> upCallback_cb_impl;
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl8> (upCallback);
    self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetWifiPhy(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetBssid(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetBssid();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SupportsSendFrom(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->SupportsSendFrom();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetPifs(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *pifs;
    ns3::Time pifs2;
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &pifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Time_Type)) {
        pifs2 = *((PyNs3Time *) pifs)->obj;
    } else if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Scalar_Type)) {
        pifs2 = *((PyNs3Scalar *) pifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", pifs->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetPifs(pifs2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetEifsNoDifs(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetEifsNoDifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetSlot(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetSlot(slotTime2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetBasicBlockAckTimeout(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBasicBlockAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetPifs(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyRxDrop(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRxDrop(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyTxDrop(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTxDrop(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiMac_Enqueue__0(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiMac_Enqueue__1(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WifiMac_Enqueue(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiMac_SetCompressedBlockAckTimeout(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetCompressedBlockAckTimeout(blockAckTimeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetMaxPropagationDelay(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMaxPropagationDelay();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetBasicBlockAckTimeout(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetBasicBlockAckTimeout(blockAckTimeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetCtsTimeout(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ctsTimeout;
    ns3::Time ctsTimeout2;
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ctsTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Time_Type)) {
        ctsTimeout2 = *((PyNs3Time *) ctsTimeout)->obj;
    } else if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ctsTimeout2 = *((PyNs3Scalar *) ctsTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ctsTimeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetCtsTimeout(ctsTimeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_ConfigureStandard(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    self->obj->ConfigureStandard(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetCtsTimeout(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCtsTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetWifiRemoteStationManager(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *stationManager;
    ns3::WifiRemoteStationManager *stationManager_ptr;
    const char *keywords[] = {"stationManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &stationManager)) {
        return NULL;
    }
    stationManager_ptr = (stationManager ? stationManager->obj : NULL);
    self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetAddress(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetMsduLifetime(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMsduLifetime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyRx(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRx(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetLinkDownCallback(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl1> linkDown_cb_impl;
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl1> (linkDown);
    self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetSifs(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetSifs(sifs2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyTx(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTx(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetAddress(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetMaxPropagationDelay(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *delay;
    ns3::Time delay2;
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &delay)) {
        return NULL;
    }
    if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Time_Type)) {
        delay2 = *((PyNs3Time *) delay)->obj;
    } else if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Scalar_Type)) {
        delay2 = *((PyNs3Scalar *) delay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", delay->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetMaxPropagationDelay(delay2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetCompressedBlockAckTimeout(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCompressedBlockAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetSsid(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetAckTimeout(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ackTimeout;
    ns3::Time ackTimeout2;
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ackTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Time_Type)) {
        ackTimeout2 = *((PyNs3Time *) ackTimeout)->obj;
    } else if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ackTimeout2 = *((PyNs3Scalar *) ackTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ackTimeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetAckTimeout(ackTimeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetSsid(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->GetSsid();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetSlot(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSlot();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetAckTimeout(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_GetSifs(PyNs3WifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_SetLinkUpCallback(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl1> linkUp_cb_impl;
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl1> (linkUp);
    self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMac_NotifyPromiscRx(PyNs3WifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyPromiscRx(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3WifiMac_methods[] = {
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3WifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3WifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiMac_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetWifiPhy", (PyCFunction) _wrap_PyNs3WifiMac_SetWifiPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3WifiMac_GetBssid, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3WifiMac_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3WifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3WifiMac_GetEifsNoDifs, METH_NOARGS, NULL },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3WifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_GetBasicBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3WifiMac_GetPifs, METH_NOARGS, NULL },
    {(char *) "NotifyRxDrop", (PyCFunction) _wrap_PyNs3WifiMac_NotifyRxDrop, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyTxDrop", (PyCFunction) _wrap_PyNs3WifiMac_NotifyTxDrop, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3WifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_SetCompressedBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMaxPropagationDelay", (PyCFunction) _wrap_PyNs3WifiMac_GetMaxPropagationDelay, METH_NOARGS, NULL },
    {(char *) "SetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_SetBasicBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3WifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ConfigureStandard", (PyCFunction) _wrap_PyNs3WifiMac_ConfigureStandard, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3WifiMac_GetCtsTimeout, METH_NOARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3WifiMac_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3WifiMac_GetAddress, METH_NOARGS, NULL },
    {(char *) "GetMsduLifetime", (PyCFunction) _wrap_PyNs3WifiMac_GetMsduLifetime, METH_NOARGS, NULL },
    {(char *) "NotifyRx", (PyCFunction) _wrap_PyNs3WifiMac_NotifyRx, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3WifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3WifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyTx", (PyCFunction) _wrap_PyNs3WifiMac_NotifyTx, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3WifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMaxPropagationDelay", (PyCFunction) _wrap_PyNs3WifiMac_SetMaxPropagationDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_GetCompressedBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3WifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3WifiMac_GetSsid, METH_NOARGS, NULL },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3WifiMac_GetSlot, METH_NOARGS, NULL },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3WifiMac_GetAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3WifiMac_GetSifs, METH_NOARGS, NULL },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3WifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyPromiscRx", (PyCFunction) _wrap_PyNs3WifiMac_NotifyPromiscRx, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiMac__tp_clear(PyNs3WifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiMac__tp_traverse(PyNs3WifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiMac__tp_dealloc(PyNs3WifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiMac__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiMac__tp_richcompare (PyNs3WifiMac *PYBINDGEN_UNUSED(self), PyNs3WifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMac_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiMac",            /* tp_name */
    sizeof(PyNs3WifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiMacHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader__PythonHelper *helper = dynamic_cast< PyNs3WifiMacHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3WifiMacHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = (ns3::WifiMacHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3WifiMacHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = const_cast< ns3::WifiMacHeader* >((const ns3::WifiMacHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3WifiMacHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = const_cast< ns3::WifiMacHeader* >((const ns3::WifiMacHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMacHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3WifiMacHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMacHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiMacHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = const_cast< ns3::WifiMacHeader* >((const ns3::WifiMacHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMacHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiMacHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiMacHeader__tp_init__0(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMacHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMacHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiMacHeader_Type)
    {
        self->obj = new PyNs3WifiMacHeader__PythonHelper(*((PyNs3WifiMacHeader *) arg0)->obj);
        ((PyNs3WifiMacHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiMacHeader(*((PyNs3WifiMacHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3WifiMacHeader__tp_init__1(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiMacHeader_Type)
    {
        self->obj = new PyNs3WifiMacHeader__PythonHelper();
        ((PyNs3WifiMacHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiMacHeader();
    }
    return 0;
}

int _wrap_PyNs3WifiMacHeader__tp_init(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiMacHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiMacHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsData(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsData();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDsNotTo(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDsNotTo();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiMacHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsMgt(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMgt();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosNormalAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosNormalAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsReassocResp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsReassocResp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetSequenceNumber(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSequenceNumber();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsRetry(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsRetry();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetQosTxopLimit(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetQosTxopLimit();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsBlockAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosAckPolicy(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiMacHeader::QosAckPolicy arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    self->obj->SetQosAckPolicy(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetMoreFragments(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetMoreFragments();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_Deserialize(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3WifiMacHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::WifiMacHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosNoAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosNoAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetQosAckPolicy(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    ns3::WifiMacHeader::QosAckPolicy retval;
    
    retval = self->obj->GetQosAckPolicy();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetNoMoreFragments(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetNoMoreFragments();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsDeauthentication(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsDeauthentication();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAssocResp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAssocResp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAction(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetAction();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAssocReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAssocReq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_Print(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3WifiMacHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::WifiMacHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAddr2(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr2(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAddr1(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr1(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDuration(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetDuration(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAddr4(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr4(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetFragmentNumber(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetFragmentNumber();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsFromDs(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsFromDs();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAuthentication(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAuthentication();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetBlockAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsToDs(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsToDs();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetTypeData(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetTypeData();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsMultihopAction(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMultihopAction();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetRawDuration(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int duration;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &duration)) {
        return NULL;
    }
    if (duration > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetRawDuration(duration);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosData(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosData();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosAmsdu(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosAmsdu();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsDisassociation(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsDisassociation();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetInstanceTypeId(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3WifiMacHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::WifiMacHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_Serialize(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3WifiMacHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::WifiMacHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosEosp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosEosp();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDsFrom(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDsFrom();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetMultihopAction(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetMultihopAction();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsProbeResp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsProbeResp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsBlockAckReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBlockAckReq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsCfpoll(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCfpoll();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetId(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int id;
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetId(id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsProbeReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsProbeReq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsRts(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsRts();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsMoreFragments(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMoreFragments();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetNoRetry(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetNoRetry();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetSize(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetTypeString(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    char const *retval;
    
    retval = self->obj->GetTypeString();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetSequenceControl(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetSequenceControl();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetQosTid(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetQosTid();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsReassocReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsReassocReq();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetSerializedSize(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WifiMacHeader__PythonHelper *helper_class = dynamic_cast<PyNs3WifiMacHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::WifiMacHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetRawDuration(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetRawDuration();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetType(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    ns3::WifiMacType retval;
    
    retval = self->obj->GetType();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosNoAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosNoAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosTxopLimit(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int txop;
    const char *keywords[] = {"txop", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &txop)) {
        return NULL;
    }
    if (txop > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetQosTxopLimit(txop);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosNoEosp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosNoEosp();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetType(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiMacType type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetAddr4(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr4();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetAddr3(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr3();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetAddr2(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr2();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetAddr1(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddr1();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAddr3(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->SetAddr3(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosAmsdu(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosAmsdu();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosTid(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetQosTid(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetSequenceNumber(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetSequenceNumber(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetProbeReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetProbeReq();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAssocResp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetAssocResp();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetRetry(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetRetry();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDsTo(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDsTo();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetFragmentNumber(PyNs3WifiMacHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int frag;
    const char *keywords[] = {"frag", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &frag)) {
        return NULL;
    }
    if (frag > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFragmentNumber(frag);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetProbeResp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetProbeResp();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetBlockAckReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetBlockAckReq();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosNoAmsdu(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosNoAmsdu();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_GetDuration(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosBlockAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosBlockAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsQosEosp(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsQosEosp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetBeacon(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetBeacon();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsAction(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsAction();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsCtl(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCtl();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetAssocReq(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetAssocReq();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsBeacon(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBeacon();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_IsCts(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCts();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetQosBlockAck(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetQosBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiMacHeader_SetDsNotFrom(PyNs3WifiMacHeader *self)
{
    PyObject *py_retval;
    
    self->obj->SetDsNotFrom();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiMacHeader__copy__(PyNs3WifiMacHeader *self)
{

    PyNs3WifiMacHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
    py_copy->obj = new ns3::WifiMacHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiMacHeader_methods[] = {
    {(char *) "IsData", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsData, METH_NOARGS, NULL },
    {(char *) "SetDsNotTo", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDsNotTo, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "IsMgt", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsMgt, METH_NOARGS, NULL },
    {(char *) "SetQosNormalAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosNormalAck, METH_NOARGS, NULL },
    {(char *) "IsReassocResp", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsReassocResp, METH_NOARGS, NULL },
    {(char *) "GetSequenceNumber", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetSequenceNumber, METH_NOARGS, NULL },
    {(char *) "IsRetry", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsRetry, METH_NOARGS, NULL },
    {(char *) "GetQosTxopLimit", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetQosTxopLimit, METH_NOARGS, NULL },
    {(char *) "IsBlockAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsBlockAck, METH_NOARGS, NULL },
    {(char *) "SetQosAckPolicy", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosAckPolicy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMoreFragments", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetMoreFragments, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3WifiMacHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetQosNoAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosNoAck, METH_NOARGS, NULL },
    {(char *) "GetQosAckPolicy", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetQosAckPolicy, METH_NOARGS, NULL },
    {(char *) "SetNoMoreFragments", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetNoMoreFragments, METH_NOARGS, NULL },
    {(char *) "IsDeauthentication", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsDeauthentication, METH_NOARGS, NULL },
    {(char *) "IsAssocResp", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAssocResp, METH_NOARGS, NULL },
    {(char *) "SetAction", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAction, METH_NOARGS, NULL },
    {(char *) "IsAssocReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAssocReq, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3WifiMacHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddr2", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAddr2, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddr1", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAddr1, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDuration", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDuration, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddr4", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAddr4, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFragmentNumber", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetFragmentNumber, METH_NOARGS, NULL },
    {(char *) "IsFromDs", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsFromDs, METH_NOARGS, NULL },
    {(char *) "IsAuthentication", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAuthentication, METH_NOARGS, NULL },
    {(char *) "IsAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAck, METH_NOARGS, NULL },
    {(char *) "SetBlockAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetBlockAck, METH_NOARGS, NULL },
    {(char *) "IsToDs", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsToDs, METH_NOARGS, NULL },
    {(char *) "SetTypeData", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetTypeData, METH_NOARGS, NULL },
    {(char *) "IsMultihopAction", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsMultihopAction, METH_NOARGS, NULL },
    {(char *) "SetRawDuration", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetRawDuration, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsQosData", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosData, METH_NOARGS, NULL },
    {(char *) "IsQosAmsdu", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosAmsdu, METH_NOARGS, NULL },
    {(char *) "IsDisassociation", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsDisassociation, METH_NOARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3WifiMacHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetQosEosp", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosEosp, METH_NOARGS, NULL },
    {(char *) "SetDsFrom", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDsFrom, METH_NOARGS, NULL },
    {(char *) "SetMultihopAction", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetMultihopAction, METH_NOARGS, NULL },
    {(char *) "IsProbeResp", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsProbeResp, METH_NOARGS, NULL },
    {(char *) "IsBlockAckReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsBlockAckReq, METH_NOARGS, NULL },
    {(char *) "IsCfpoll", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsCfpoll, METH_NOARGS, NULL },
    {(char *) "SetId", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetId, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsProbeReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsProbeReq, METH_NOARGS, NULL },
    {(char *) "IsRts", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsRts, METH_NOARGS, NULL },
    {(char *) "IsMoreFragments", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsMoreFragments, METH_NOARGS, NULL },
    {(char *) "SetNoRetry", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetNoRetry, METH_NOARGS, NULL },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetSize, METH_NOARGS, NULL },
    {(char *) "GetTypeString", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetTypeString, METH_NOARGS, NULL },
    {(char *) "GetSequenceControl", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetSequenceControl, METH_NOARGS, NULL },
    {(char *) "GetQosTid", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetQosTid, METH_NOARGS, NULL },
    {(char *) "IsReassocReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsReassocReq, METH_NOARGS, NULL },
    {(char *) "IsQosAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosAck, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "GetRawDuration", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetRawDuration, METH_NOARGS, NULL },
    {(char *) "GetType", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetType, METH_NOARGS, NULL },
    {(char *) "IsQosNoAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosNoAck, METH_NOARGS, NULL },
    {(char *) "SetQosTxopLimit", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosTxopLimit, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetQosNoEosp", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosNoEosp, METH_NOARGS, NULL },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetType, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAddr4", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetAddr4, METH_NOARGS, NULL },
    {(char *) "GetAddr3", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetAddr3, METH_NOARGS, NULL },
    {(char *) "GetAddr2", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetAddr2, METH_NOARGS, NULL },
    {(char *) "GetAddr1", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetAddr1, METH_NOARGS, NULL },
    {(char *) "SetAddr3", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAddr3, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetQosAmsdu", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosAmsdu, METH_NOARGS, NULL },
    {(char *) "SetQosTid", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosTid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSequenceNumber", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetSequenceNumber, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetProbeReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetProbeReq, METH_NOARGS, NULL },
    {(char *) "SetAssocResp", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAssocResp, METH_NOARGS, NULL },
    {(char *) "SetRetry", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetRetry, METH_NOARGS, NULL },
    {(char *) "SetDsTo", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDsTo, METH_NOARGS, NULL },
    {(char *) "SetFragmentNumber", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetFragmentNumber, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetProbeResp", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetProbeResp, METH_NOARGS, NULL },
    {(char *) "SetBlockAckReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetBlockAckReq, METH_NOARGS, NULL },
    {(char *) "SetQosNoAmsdu", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosNoAmsdu, METH_NOARGS, NULL },
    {(char *) "GetDuration", (PyCFunction) _wrap_PyNs3WifiMacHeader_GetDuration, METH_NOARGS, NULL },
    {(char *) "IsQosBlockAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosBlockAck, METH_NOARGS, NULL },
    {(char *) "IsQosEosp", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsQosEosp, METH_NOARGS, NULL },
    {(char *) "SetBeacon", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetBeacon, METH_NOARGS, NULL },
    {(char *) "IsAction", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsAction, METH_NOARGS, NULL },
    {(char *) "IsCtl", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsCtl, METH_NOARGS, NULL },
    {(char *) "SetAssocReq", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetAssocReq, METH_NOARGS, NULL },
    {(char *) "IsBeacon", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsBeacon, METH_NOARGS, NULL },
    {(char *) "IsCts", (PyCFunction) _wrap_PyNs3WifiMacHeader_IsCts, METH_NOARGS, NULL },
    {(char *) "SetQosBlockAck", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetQosBlockAck, METH_NOARGS, NULL },
    {(char *) "SetDsNotFrom", (PyCFunction) _wrap_PyNs3WifiMacHeader_SetDsNotFrom, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiMacHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiMacHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiMacHeader__tp_clear(PyNs3WifiMacHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::WifiMacHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3WifiMacHeader__tp_traverse(PyNs3WifiMacHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3WifiMacHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiMacHeader__tp_dealloc(PyNs3WifiMacHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiMacHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiMacHeader__tp_richcompare (PyNs3WifiMacHeader *PYBINDGEN_UNUSED(self), PyNs3WifiMacHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiMacHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiMacHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiMacHeader",            /* tp_name */
    sizeof(PyNs3WifiMacHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiMacHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiMacHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiMacHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiMacHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiMacHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiMacHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiMacHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiPhy__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiPhy' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyRxEnd(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRxEnd(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate6Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate6Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate6MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate6MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDsssRate2Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetDsssRate2Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiPhy::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate3MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate3MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyRxBegin(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRxBegin(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyTxBegin(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTxBegin(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate9MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate9MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDsssRate1Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetDsssRate1Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDsssRate11Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetDsssRate11Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate24MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate24MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate4_5MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate4_5MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate27MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate27MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyPromiscSniffRx(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int channelFreqMhz;
    int channelNumber;
    unsigned int rate;
    bool isShortPreamble;
    PyObject *py_isShortPreamble;
    double signalDbm;
    double noiseDbm;
    const char *keywords[] = {"packet", "channelFreqMhz", "channelNumber", "rate", "isShortPreamble", "signalDbm", "noiseDbm", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiIOdd", (char **) keywords, &PyNs3Packet_Type, &packet, &channelFreqMhz, &channelNumber, &rate, &py_isShortPreamble, &signalDbm, &noiseDbm)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (channelFreqMhz > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (channelNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isShortPreamble = (bool) PyObject_IsTrue(py_isShortPreamble);
    self->obj->NotifyPromiscSniffRx(ns3::Ptr< ns3::Packet  > (packet_ptr), channelFreqMhz, channelNumber, rate, isShortPreamble, signalDbm, noiseDbm);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate6MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate6MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate3MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate3MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate12Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate12Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetTxPowerEnd(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerEnd();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateIdle(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateIdle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateSwitching(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateSwitching();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyTxDrop(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTxDrop(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDsssRate5_5Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetDsssRate5_5Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetTxPowerStart(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerStart();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetNModes(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNModes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate54Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate54Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateBusy(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_ConfigureStandard(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    self->obj->ConfigureStandard(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate12MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate12MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetLastRxStartTime(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLastRxStartTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetDelayUntilIdle(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDelayUntilIdle();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateRx(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate2_25MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate2_25MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateTx(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate9Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate9Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyPromiscSniffTx(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int channelFreqMhz;
    int channelNumber;
    unsigned int rate;
    bool isShortPreamble;
    PyObject *py_isShortPreamble;
    const char *keywords[] = {"packet", "channelFreqMhz", "channelNumber", "rate", "isShortPreamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iiIO", (char **) keywords, &PyNs3Packet_Type, &packet, &channelFreqMhz, &channelNumber, &rate, &py_isShortPreamble)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (channelFreqMhz > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (channelNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    isShortPreamble = (bool) PyObject_IsTrue(py_isShortPreamble);
    self->obj->NotifyPromiscSniffTx(ns3::Ptr< ns3::Packet  > (packet_ptr), channelFreqMhz, channelNumber, rate, isShortPreamble);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SendPacket(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMode *mode;
    ns3::WifiPreamble preamble;
    int txPowerLevel;
    const char *keywords[] = {"packet", "mode", "preamble", "txPowerLevel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!ii", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMode_Type, &mode, &preamble, &txPowerLevel)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (txPowerLevel > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SendPacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMode *) mode)->obj, preamble, txPowerLevel);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate24Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate24Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetChannelNumber(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetChannelNumber();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate4_5MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate4_5MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_CalculateSnr(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *txMode;
    double ber;
    const char *keywords[] = {"txMode", "ber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3WifiMode_Type, &txMode, &ber)) {
        return NULL;
    }
    retval = self->obj->CalculateSnr(*((PyNs3WifiMode *) txMode)->obj, ber);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate36Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate36Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetMode(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int mode;
    const char *keywords[] = {"mode", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &mode)) {
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetMode(mode);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetStateDuration(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetStateDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate12MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate12MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyTxEnd(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyTxEnd(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate48Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate48Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_SetChannelNumber(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int id;
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetChannelNumber(id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetChannel(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiChannel > retval;
    PyNs3WifiChannel *py_WifiChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiChannel = NULL;
    } else {
        py_WifiChannel = (PyNs3WifiChannel *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiChannel);
    }
    
    if (py_WifiChannel == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval)))), &PyNs3WifiChannel_Type);
        py_WifiChannel = PyObject_GC_New(PyNs3WifiChannel, wrapper_type);
        py_WifiChannel->inst_dict = NULL;
        py_WifiChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval))->Ref();
        py_WifiChannel->obj = const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiChannel->obj] = (PyObject *) py_WifiChannel;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetNTxPower(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNTxPower();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate9MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate9MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate18Mbps(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate18Mbps();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate13_5MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate13_5MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_IsStateCcaBusy(PyNs3WifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateCcaBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate1_5MbpsBW5MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate1_5MbpsBW5MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_CalculateTxDuration(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    PyNs3WifiMode *payloadMode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"size", "payloadMode", "preamble", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!i", (char **) keywords, &size, &PyNs3WifiMode_Type, &payloadMode, &preamble)) {
        return NULL;
    }
    ns3::Time retval = self->obj->CalculateTxDuration(size, *((PyNs3WifiMode *) payloadMode)->obj, preamble);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_NotifyRxDrop(PyNs3WifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->NotifyRxDrop(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiPhy_GetOfdmRate18MbpsBW10MHz(void)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = ns3::WifiPhy::GetOfdmRate18MbpsBW10MHz();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}

static PyMethodDef PyNs3WifiPhy_methods[] = {
    {(char *) "NotifyRxEnd", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyRxEnd, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOfdmRate6Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate6Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate6MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate6MbpsBW10MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetDsssRate2Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetDsssRate2Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiPhy_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate3MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate3MbpsBW5MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyRxBegin", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyRxBegin, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyTxBegin", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyTxBegin, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOfdmRate9MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate9MbpsBW5MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetDsssRate1Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetDsssRate1Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetDsssRate11Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetDsssRate11Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate24MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate24MbpsBW10MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate4_5MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate4_5MbpsBW5MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate27MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate27MbpsBW10MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyPromiscSniffRx", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyPromiscSniffRx, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOfdmRate6MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate6MbpsBW5MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate3MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate3MbpsBW10MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate12Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate12Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetTxPowerEnd", (PyCFunction) _wrap_PyNs3WifiPhy_GetTxPowerEnd, METH_NOARGS, NULL },
    {(char *) "IsStateIdle", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateIdle, METH_NOARGS, NULL },
    {(char *) "IsStateSwitching", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateSwitching, METH_NOARGS, NULL },
    {(char *) "NotifyTxDrop", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyTxDrop, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDsssRate5_5Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetDsssRate5_5Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetTxPowerStart", (PyCFunction) _wrap_PyNs3WifiPhy_GetTxPowerStart, METH_NOARGS, NULL },
    {(char *) "GetNModes", (PyCFunction) _wrap_PyNs3WifiPhy_GetNModes, METH_NOARGS, NULL },
    {(char *) "GetOfdmRate54Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate54Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "IsStateBusy", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateBusy, METH_NOARGS, NULL },
    {(char *) "ConfigureStandard", (PyCFunction) _wrap_PyNs3WifiPhy_ConfigureStandard, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOfdmRate12MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate12MbpsBW5MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetLastRxStartTime", (PyCFunction) _wrap_PyNs3WifiPhy_GetLastRxStartTime, METH_NOARGS, NULL },
    {(char *) "GetDelayUntilIdle", (PyCFunction) _wrap_PyNs3WifiPhy_GetDelayUntilIdle, METH_NOARGS, NULL },
    {(char *) "IsStateRx", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateRx, METH_NOARGS, NULL },
    {(char *) "GetOfdmRate2_25MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate2_25MbpsBW5MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "IsStateTx", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateTx, METH_NOARGS, NULL },
    {(char *) "GetOfdmRate9Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate9Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyPromiscSniffTx", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyPromiscSniffTx, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SendPacket", (PyCFunction) _wrap_PyNs3WifiPhy_SendPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOfdmRate24Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate24Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetChannelNumber", (PyCFunction) _wrap_PyNs3WifiPhy_GetChannelNumber, METH_NOARGS, NULL },
    {(char *) "GetOfdmRate4_5MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate4_5MbpsBW10MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CalculateSnr", (PyCFunction) _wrap_PyNs3WifiPhy_CalculateSnr, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOfdmRate36Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate36Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetMode", (PyCFunction) _wrap_PyNs3WifiPhy_GetMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetStateDuration", (PyCFunction) _wrap_PyNs3WifiPhy_GetStateDuration, METH_NOARGS, NULL },
    {(char *) "GetOfdmRate12MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate12MbpsBW10MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyTxEnd", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyTxEnd, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOfdmRate48Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate48Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetChannelNumber", (PyCFunction) _wrap_PyNs3WifiPhy_SetChannelNumber, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3WifiPhy_GetChannel, METH_NOARGS, NULL },
    {(char *) "GetNTxPower", (PyCFunction) _wrap_PyNs3WifiPhy_GetNTxPower, METH_NOARGS, NULL },
    {(char *) "GetOfdmRate9MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate9MbpsBW10MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate18Mbps", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate18Mbps, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetOfdmRate13_5MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate13_5MbpsBW5MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "IsStateCcaBusy", (PyCFunction) _wrap_PyNs3WifiPhy_IsStateCcaBusy, METH_NOARGS, NULL },
    {(char *) "GetOfdmRate1_5MbpsBW5MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate1_5MbpsBW5MHz, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CalculateTxDuration", (PyCFunction) _wrap_PyNs3WifiPhy_CalculateTxDuration, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyRxDrop", (PyCFunction) _wrap_PyNs3WifiPhy_NotifyRxDrop, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOfdmRate18MbpsBW10MHz", (PyCFunction) _wrap_PyNs3WifiPhy_GetOfdmRate18MbpsBW10MHz, METH_NOARGS|METH_STATIC, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiPhy__tp_clear(PyNs3WifiPhy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiPhy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiPhy__tp_traverse(PyNs3WifiPhy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiPhy__tp_dealloc(PyNs3WifiPhy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiPhy__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiPhy__tp_richcompare (PyNs3WifiPhy *PYBINDGEN_UNUSED(self), PyNs3WifiPhy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiPhy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiPhy_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiPhy",            /* tp_name */
    sizeof(PyNs3WifiPhy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiPhy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiPhy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiPhy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiPhy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiPhy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiPhy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiPhy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiRemoteStationManager__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiRemoteStationManager' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetMaxSsrc(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxSsrc;
    const char *keywords[] = {"maxSsrc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxSsrc)) {
        return NULL;
    }
    self->obj->SetMaxSsrc(maxSsrc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RecordDisassociated(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RecordDisassociated(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetRtsCtsThreshold(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &threshold)) {
        return NULL;
    }
    self->obj->SetRtsCtsThreshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetInfo(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    PyNs3WifiRemoteStationInfo *py_WifiRemoteStationInfo;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    ns3::WifiRemoteStationInfo retval = self->obj->GetInfo(*((PyNs3Mac48Address *) address)->obj);
    py_WifiRemoteStationInfo = PyObject_New(PyNs3WifiRemoteStationInfo, &PyNs3WifiRemoteStationInfo_Type);
    py_WifiRemoteStationInfo->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiRemoteStationInfo->obj = new ns3::WifiRemoteStationInfo(retval);
    PyNs3WifiRemoteStationInfo_wrapper_registry[(void *) py_WifiRemoteStationInfo->obj] = (PyObject *) py_WifiRemoteStationInfo;
    py_retval = Py_BuildValue((char *) "N", py_WifiRemoteStationInfo);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportDataOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    double ackSnr;
    PyNs3WifiMode *ackMode;
    double dataSnr;
    const char *keywords[] = {"address", "header", "ackSnr", "ackMode", "dataSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!d", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &ackSnr, &PyNs3WifiMode_Type, &ackMode, &dataSnr)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportDataOk(*((PyNs3Mac48Address *) address)->obj, header_ptr, ackSnr, *((PyNs3WifiMode *) ackMode)->obj, dataSnr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiRemoteStationManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportRxOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    double rxSnr;
    PyNs3WifiMode *txMode;
    const char *keywords[] = {"address", "header", "rxSnr", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &rxSnr, &PyNs3WifiMode_Type, &txMode)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportRxOk(*((PyNs3Mac48Address *) address)->obj, header_ptr, rxSnr, *((PyNs3WifiMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RecordWaitAssocTxOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RecordWaitAssocTxOk(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_IsBrandNew(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->IsBrandNew(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetRtsMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    ns3::WifiMode retval = self->obj->GetRtsMode(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_PrepareForQueue(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    unsigned int fullPacketSize;
    const char *keywords[] = {"address", "header", "packet", "fullPacketSize", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &fullPacketSize)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->PrepareForQueue(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), fullPacketSize);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RecordGotAssocTxFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RecordGotAssocTxFailed(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddSupportedMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMode *mode;
    const char *keywords[] = {"address", "mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMode_Type, &mode)) {
        return NULL;
    }
    self->obj->AddSupportedMode(*((PyNs3Mac48Address *) address)->obj, *((PyNs3WifiMode *) mode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportDataFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    const char *keywords[] = {"address", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportDataFailed(*((PyNs3Mac48Address *) address)->obj, header_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetRtsCtsThreshold(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetRtsCtsThreshold();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetupPhy(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetupPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetFragmentationThreshold(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &threshold)) {
        return NULL;
    }
    self->obj->SetFragmentationThreshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportRtsOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    double ctsSnr;
    PyNs3WifiMode *ctsMode;
    double rtsSnr;
    const char *keywords[] = {"address", "header", "ctsSnr", "ctsMode", "rtsSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!d", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &ctsSnr, &PyNs3WifiMode_Type, &ctsMode, &rtsSnr)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportRtsOk(*((PyNs3Mac48Address *) address)->obj, header_ptr, ctsSnr, *((PyNs3WifiMode *) ctsMode)->obj, rtsSnr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3WifiRemoteStationManager_Reset__0(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->Reset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiRemoteStationManager_Reset__1(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->Reset(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3WifiRemoteStationManager_Reset(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiRemoteStationManager_Reset__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiRemoteStationManager_Reset__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportRtsFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    const char *keywords[] = {"address", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportRtsFailed(*((PyNs3Mac48Address *) address)->obj, header_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_RecordGotAssocTxOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    self->obj->RecordGotAssocTxOk(*((PyNs3Mac48Address *) address)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_IsWaitAssocTxOk(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->IsWaitAssocTxOk(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetMaxSlrc(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxSlrc();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNBasicModes(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNBasicModes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetNonUnicastMode(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->GetNonUnicastMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportFinalRtsFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    const char *keywords[] = {"address", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportFinalRtsFailed(*((PyNs3Mac48Address *) address)->obj, header_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_IsLastFragment(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    unsigned int fragmentNumber;
    const char *keywords[] = {"address", "header", "packet", "fragmentNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &fragmentNumber)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->IsLastFragment(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), fragmentNumber);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetMaxSsrc(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxSsrc();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_AddBasicMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMode *mode;
    const char *keywords[] = {"mode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &mode)) {
        return NULL;
    }
    self->obj->AddBasicMode(*((PyNs3WifiMode *) mode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_IsAssociated(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    retval = self->obj->IsAssociated(*((PyNs3Mac48Address *) address)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetAckMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMode *dataMode;
    const char *keywords[] = {"address", "dataMode", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMode_Type, &dataMode)) {
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetAckMode(*((PyNs3Mac48Address *) address)->obj, *((PyNs3WifiMode *) dataMode)->obj);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_SetMaxSlrc(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxSlrc;
    const char *keywords[] = {"maxSlrc", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxSlrc)) {
        return NULL;
    }
    self->obj->SetMaxSlrc(maxSlrc);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetCtsMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMode *rtsMode;
    const char *keywords[] = {"address", "rtsMode", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMode_Type, &rtsMode)) {
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetCtsMode(*((PyNs3Mac48Address *) address)->obj, *((PyNs3WifiMode *) rtsMode)->obj);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_NeedRts(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->NeedRts(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetBasicMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int i;
    const char *keywords[] = {"i", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetBasicMode(i);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_NeedDataRetransmission(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->NeedDataRetransmission(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_NeedFragmentation(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->NeedFragmentation(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_NeedRtsRetransmission(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"address", "header", "packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->NeedRtsRetransmission(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetFragmentOffset(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    unsigned int fragmentNumber;
    const char *keywords[] = {"address", "header", "packet", "fragmentNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &fragmentNumber)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->GetFragmentOffset(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), fragmentNumber);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetFragmentationThreshold(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFragmentationThreshold();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetFragmentSize(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    unsigned int fragmentNumber;
    const char *keywords[] = {"address", "header", "packet", "fragmentNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &fragmentNumber)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    retval = self->obj->GetFragmentSize(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), fragmentNumber);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetDefaultMode(PyNs3WifiRemoteStationManager *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->GetDefaultMode();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_GetDataMode(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    unsigned int fullPacketSize;
    const char *keywords[] = {"address", "header", "packet", "fullPacketSize", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!I", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header, &PyNs3Packet_Type, &packet, &fullPacketSize)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    ns3::WifiMode retval = self->obj->GetDataMode(*((PyNs3Mac48Address *) address)->obj, header_ptr, ns3::Ptr< ns3::Packet  > (packet_ptr), fullPacketSize);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiRemoteStationManager_ReportFinalDataFailed(PyNs3WifiRemoteStationManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3WifiMacHeader *header;
    ns3::WifiMacHeader *header_ptr;
    const char *keywords[] = {"address", "header", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Mac48Address_Type, &address, &PyNs3WifiMacHeader_Type, &header)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    self->obj->ReportFinalDataFailed(*((PyNs3Mac48Address *) address)->obj, header_ptr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3WifiRemoteStationManager_methods[] = {
    {(char *) "SetMaxSsrc", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetMaxSsrc, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "RecordDisassociated", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RecordDisassociated, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRtsCtsThreshold", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetRtsCtsThreshold, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInfo", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetInfo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReportDataOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportDataOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "ReportRxOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportRxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "RecordWaitAssocTxOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RecordWaitAssocTxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsBrandNew", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_IsBrandNew, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRtsMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetRtsMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "PrepareForQueue", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_PrepareForQueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "RecordGotAssocTxFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RecordGotAssocTxFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AddSupportedMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddSupportedMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReportDataFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportDataFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRtsCtsThreshold", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetRtsCtsThreshold, METH_NOARGS, NULL },
    {(char *) "SetupPhy", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetupPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetFragmentationThreshold", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetFragmentationThreshold, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReportRtsOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportRtsOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Reset", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_Reset, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReportRtsFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportRtsFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "RecordGotAssocTxOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_RecordGotAssocTxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsWaitAssocTxOk", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_IsWaitAssocTxOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMaxSlrc", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetMaxSlrc, METH_NOARGS, NULL },
    {(char *) "GetNBasicModes", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNBasicModes, METH_NOARGS, NULL },
    {(char *) "GetNonUnicastMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetNonUnicastMode, METH_NOARGS, NULL },
    {(char *) "ReportFinalRtsFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportFinalRtsFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsLastFragment", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_IsLastFragment, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMaxSsrc", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetMaxSsrc, METH_NOARGS, NULL },
    {(char *) "AddBasicMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_AddBasicMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsAssociated", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_IsAssociated, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAckMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetAckMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMaxSlrc", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_SetMaxSlrc, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetCtsMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NeedRts", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_NeedRts, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBasicMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetBasicMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NeedDataRetransmission", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_NeedDataRetransmission, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NeedFragmentation", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_NeedFragmentation, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NeedRtsRetransmission", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_NeedRtsRetransmission, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFragmentOffset", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetFragmentOffset, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFragmentationThreshold", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetFragmentationThreshold, METH_NOARGS, NULL },
    {(char *) "GetFragmentSize", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetFragmentSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDefaultMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetDefaultMode, METH_NOARGS, NULL },
    {(char *) "GetDataMode", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_GetDataMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReportFinalDataFailed", (PyCFunction) _wrap_PyNs3WifiRemoteStationManager_ReportFinalDataFailed, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiRemoteStationManager__tp_clear(PyNs3WifiRemoteStationManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiRemoteStationManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiRemoteStationManager__tp_traverse(PyNs3WifiRemoteStationManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiRemoteStationManager__tp_dealloc(PyNs3WifiRemoteStationManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiRemoteStationManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiRemoteStationManager__tp_richcompare (PyNs3WifiRemoteStationManager *PYBINDGEN_UNUSED(self), PyNs3WifiRemoteStationManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiRemoteStationManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiRemoteStationManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiRemoteStationManager",            /* tp_name */
    sizeof(PyNs3WifiRemoteStationManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiRemoteStationManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiRemoteStationManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiRemoteStationManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiRemoteStationManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiRemoteStationManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiRemoteStationManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiRemoteStationManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3YansWifiPhy__tp_init(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::YansWifiPhy();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetEdThreshold(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &threshold)) {
        return NULL;
    }
    self->obj->SetEdThreshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetTxPowerEnd(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double end;
    const char *keywords[] = {"end", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &end)) {
        return NULL;
    }
    self->obj->SetTxPowerEnd(end);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetMobility(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Object *mobility;
    ns3::Object *mobility_ptr;
    const char *keywords[] = {"mobility", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Object_Type, &mobility)) {
        return NULL;
    }
    mobility_ptr = (mobility ? mobility->obj : NULL);
    self->obj->SetMobility(ns3::Ptr< ns3::Object  > (mobility_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetNTxPower(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int n;
    const char *keywords[] = {"n", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &n)) {
        return NULL;
    }
    self->obj->SetNTxPower(n);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetTxGain(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxGain();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::YansWifiPhy::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetRxNoiseFigure(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxNoiseFigure();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_IsStateIdle(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateIdle();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetRxGain(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetRxGain(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetMobility(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Object > retval;
    PyNs3Object *py_Object;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMobility();
    if (!(const_cast<ns3::Object *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Object *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Object__PythonHelper))
    {
        py_Object = reinterpret_cast< PyNs3Object* >(reinterpret_cast< PyNs3Object__PythonHelper* >(const_cast<ns3::Object *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Object->obj = const_cast<ns3::Object *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Object);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Object *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Object = NULL;
        } else {
            py_Object = (PyNs3Object *) wrapper_lookup_iter->second;
            Py_INCREF(py_Object);
        }
    
        if (py_Object == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Object *> (ns3::PeekPointer (retval)))), &PyNs3Object_Type);
            py_Object = PyObject_GC_New(PyNs3Object, wrapper_type);
            py_Object->inst_dict = NULL;
            py_Object->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Object *> (ns3::PeekPointer (retval))->Ref();
            py_Object->obj = const_cast<ns3::Object *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Object->obj] = (PyObject *) py_Object;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Object);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_IsStateTx(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateTx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetErrorRateModel(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel *rate;
    ns3::ErrorRateModel *rate_ptr;
    const char *keywords[] = {"rate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ErrorRateModel_Type, &rate)) {
        return NULL;
    }
    rate_ptr = (rate ? rate->obj : NULL);
    self->obj->SetErrorRateModel(ns3::Ptr< ns3::ErrorRateModel  > (rate_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetLastRxStartTime(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetLastRxStartTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_StartReceivePacket(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxPowerDbm;
    PyNs3WifiMode *mode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"packet", "rxPowerDbm", "mode", "preamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!i", (char **) keywords, &PyNs3Packet_Type, &packet, &rxPowerDbm, &PyNs3WifiMode_Type, &mode, &preamble)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->StartReceivePacket(ns3::Ptr< ns3::Packet  > (packet_ptr), rxPowerDbm, *((PyNs3WifiMode *) mode)->obj, preamble);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_IsStateSwitching(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateSwitching();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetChannel(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel *channel;
    ns3::YansWifiChannel *channel_ptr;
    const char *keywords[] = {"channel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiChannel_Type, &channel)) {
        return NULL;
    }
    channel_ptr = (channel ? channel->obj : NULL);
    self->obj->SetChannel(ns3::Ptr< ns3::YansWifiChannel  > (channel_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetChannelFrequencyMhz(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetChannelFrequencyMhz();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetTxPowerStart(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerStart();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetNModes(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNModes();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_CalculateTxDuration(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    PyNs3WifiMode *payloadMode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"size", "payloadMode", "preamble", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "IO!i", (char **) keywords, &size, &PyNs3WifiMode_Type, &payloadMode, &preamble)) {
        return NULL;
    }
    ns3::Time retval = self->obj->CalculateTxDuration(size, *((PyNs3WifiMode *) payloadMode)->obj, preamble);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetTxGain(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double gain;
    const char *keywords[] = {"gain", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &gain)) {
        return NULL;
    }
    self->obj->SetTxGain(gain);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetRxGain(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetRxGain();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_ConfigureStandard(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::WifiPhyStandard standard;
    const char *keywords[] = {"standard", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &standard)) {
        return NULL;
    }
    self->obj->ConfigureStandard(standard);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetTxPowerEnd(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetTxPowerEnd();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetDelayUntilIdle(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetDelayUntilIdle();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_IsStateRx(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateRx();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetCcaMode1Threshold(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCcaMode1Threshold();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetErrorRateModel(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ErrorRateModel > retval;
    PyNs3ErrorRateModel *py_ErrorRateModel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetErrorRateModel();
    if (!(const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3ErrorRateModel__PythonHelper))
    {
        py_ErrorRateModel = reinterpret_cast< PyNs3ErrorRateModel* >(reinterpret_cast< PyNs3ErrorRateModel__PythonHelper* >(const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_ErrorRateModel->obj = const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_ErrorRateModel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ErrorRateModel = NULL;
        } else {
            py_ErrorRateModel = (PyNs3ErrorRateModel *) wrapper_lookup_iter->second;
            Py_INCREF(py_ErrorRateModel);
        }
    
        if (py_ErrorRateModel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval)))), &PyNs3ErrorRateModel_Type);
            py_ErrorRateModel = PyObject_GC_New(PyNs3ErrorRateModel, wrapper_type);
            py_ErrorRateModel->inst_dict = NULL;
            py_ErrorRateModel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval))->Ref();
            py_ErrorRateModel->obj = const_cast<ns3::ErrorRateModel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ErrorRateModel->obj] = (PyObject *) py_ErrorRateModel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_ErrorRateModel);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetDevice(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Object *device;
    ns3::Object *device_ptr;
    const char *keywords[] = {"device", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Object_Type, &device)) {
        return NULL;
    }
    device_ptr = (device ? device->obj : NULL);
    self->obj->SetDevice(ns3::Ptr< ns3::Object  > (device_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SendPacket(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMode *mode;
    ns3::WifiPreamble preamble;
    int txPowerLevel;
    const char *keywords[] = {"packet", "mode", "preamble", "txPowerLevel", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!ii", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMode_Type, &mode, &preamble, &txPowerLevel)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (txPowerLevel > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SendPacket(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMode *) mode)->obj, preamble, txPowerLevel);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetChannelNumber(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetChannelNumber();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetDevice(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Object > retval;
    PyNs3Object *py_Object;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetDevice();
    if (!(const_cast<ns3::Object *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Object *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Object__PythonHelper))
    {
        py_Object = reinterpret_cast< PyNs3Object* >(reinterpret_cast< PyNs3Object__PythonHelper* >(const_cast<ns3::Object *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Object->obj = const_cast<ns3::Object *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Object);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Object *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Object = NULL;
        } else {
            py_Object = (PyNs3Object *) wrapper_lookup_iter->second;
            Py_INCREF(py_Object);
        }
    
        if (py_Object == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Object *> (ns3::PeekPointer (retval)))), &PyNs3Object_Type);
            py_Object = PyObject_GC_New(PyNs3Object, wrapper_type);
            py_Object->inst_dict = NULL;
            py_Object->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Object *> (ns3::PeekPointer (retval))->Ref();
            py_Object->obj = const_cast<ns3::Object *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Object->obj] = (PyObject *) py_Object;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Object);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetEdThreshold(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetEdThreshold();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_CalculateSnr(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *txMode;
    double ber;
    const char *keywords[] = {"txMode", "ber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3WifiMode_Type, &txMode, &ber)) {
        return NULL;
    }
    retval = self->obj->CalculateSnr(*((PyNs3WifiMode *) txMode)->obj, ber);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetMode(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int mode;
    const char *keywords[] = {"mode", NULL};
    PyNs3WifiMode *py_WifiMode;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &mode)) {
        return NULL;
    }
    ns3::WifiMode retval = self->obj->GetMode(mode);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_IsStateBusy(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetCcaMode1Threshold(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &threshold)) {
        return NULL;
    }
    self->obj->SetCcaMode1Threshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetRxNoiseFigure(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double noiseFigureDb;
    const char *keywords[] = {"noiseFigureDb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &noiseFigureDb)) {
        return NULL;
    }
    self->obj->SetRxNoiseFigure(noiseFigureDb);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetChannelNumber(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int id;
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &id)) {
        return NULL;
    }
    if (id > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetChannelNumber(id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetChannel(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiChannel > retval;
    PyNs3WifiChannel *py_WifiChannel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetChannel();
    if (!(const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiChannel = NULL;
    } else {
        py_WifiChannel = (PyNs3WifiChannel *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiChannel);
    }
    
    if (py_WifiChannel == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval)))), &PyNs3WifiChannel_Type);
        py_WifiChannel = PyObject_GC_New(PyNs3WifiChannel, wrapper_type);
        py_WifiChannel->inst_dict = NULL;
        py_WifiChannel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval))->Ref();
        py_WifiChannel->obj = const_cast<ns3::WifiChannel *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiChannel->obj] = (PyObject *) py_WifiChannel;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiChannel);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetNTxPower(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNTxPower();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_IsStateCcaBusy(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsStateCcaBusy();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_GetStateDuration(PyNs3YansWifiPhy *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetStateDuration();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiPhy_SetTxPowerStart(PyNs3YansWifiPhy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &start)) {
        return NULL;
    }
    self->obj->SetTxPowerStart(start);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3YansWifiPhy_methods[] = {
    {(char *) "SetEdThreshold", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetEdThreshold, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxPowerEnd", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetTxPowerEnd, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMobility", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetMobility, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetNTxPower", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetNTxPower, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTxGain", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetTxGain, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetRxNoiseFigure", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetRxNoiseFigure, METH_NOARGS, NULL },
    {(char *) "IsStateIdle", (PyCFunction) _wrap_PyNs3YansWifiPhy_IsStateIdle, METH_NOARGS, NULL },
    {(char *) "SetRxGain", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetRxGain, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMobility", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetMobility, METH_NOARGS, NULL },
    {(char *) "IsStateTx", (PyCFunction) _wrap_PyNs3YansWifiPhy_IsStateTx, METH_NOARGS, NULL },
    {(char *) "SetErrorRateModel", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetErrorRateModel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetLastRxStartTime", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetLastRxStartTime, METH_NOARGS, NULL },
    {(char *) "StartReceivePacket", (PyCFunction) _wrap_PyNs3YansWifiPhy_StartReceivePacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateSwitching", (PyCFunction) _wrap_PyNs3YansWifiPhy_IsStateSwitching, METH_NOARGS, NULL },
    {(char *) "SetChannel", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetChannel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetChannelFrequencyMhz", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetChannelFrequencyMhz, METH_NOARGS, NULL },
    {(char *) "GetTxPowerStart", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetTxPowerStart, METH_NOARGS, NULL },
    {(char *) "GetNModes", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetNModes, METH_NOARGS, NULL },
    {(char *) "CalculateTxDuration", (PyCFunction) _wrap_PyNs3YansWifiPhy_CalculateTxDuration, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxGain", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetTxGain, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRxGain", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetRxGain, METH_NOARGS, NULL },
    {(char *) "ConfigureStandard", (PyCFunction) _wrap_PyNs3YansWifiPhy_ConfigureStandard, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTxPowerEnd", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetTxPowerEnd, METH_NOARGS, NULL },
    {(char *) "GetDelayUntilIdle", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetDelayUntilIdle, METH_NOARGS, NULL },
    {(char *) "IsStateRx", (PyCFunction) _wrap_PyNs3YansWifiPhy_IsStateRx, METH_NOARGS, NULL },
    {(char *) "GetCcaMode1Threshold", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetCcaMode1Threshold, METH_NOARGS, NULL },
    {(char *) "GetErrorRateModel", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetErrorRateModel, METH_NOARGS, NULL },
    {(char *) "SetDevice", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetDevice, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SendPacket", (PyCFunction) _wrap_PyNs3YansWifiPhy_SendPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetChannelNumber", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetChannelNumber, METH_NOARGS, NULL },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetDevice, METH_NOARGS, NULL },
    {(char *) "GetEdThreshold", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetEdThreshold, METH_NOARGS, NULL },
    {(char *) "CalculateSnr", (PyCFunction) _wrap_PyNs3YansWifiPhy_CalculateSnr, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMode", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetMode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsStateBusy", (PyCFunction) _wrap_PyNs3YansWifiPhy_IsStateBusy, METH_NOARGS, NULL },
    {(char *) "SetCcaMode1Threshold", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetCcaMode1Threshold, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRxNoiseFigure", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetRxNoiseFigure, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetChannelNumber", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetChannelNumber, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetChannel, METH_NOARGS, NULL },
    {(char *) "GetNTxPower", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetNTxPower, METH_NOARGS, NULL },
    {(char *) "IsStateCcaBusy", (PyCFunction) _wrap_PyNs3YansWifiPhy_IsStateCcaBusy, METH_NOARGS, NULL },
    {(char *) "GetStateDuration", (PyCFunction) _wrap_PyNs3YansWifiPhy_GetStateDuration, METH_NOARGS, NULL },
    {(char *) "SetTxPowerStart", (PyCFunction) _wrap_PyNs3YansWifiPhy_SetTxPowerStart, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3YansWifiPhy__tp_clear(PyNs3YansWifiPhy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::YansWifiPhy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3YansWifiPhy__tp_traverse(PyNs3YansWifiPhy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3YansWifiPhy__tp_dealloc(PyNs3YansWifiPhy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3YansWifiPhy__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3YansWifiPhy__tp_richcompare (PyNs3YansWifiPhy *PYBINDGEN_UNUSED(self), PyNs3YansWifiPhy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3YansWifiPhy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3YansWifiPhy_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.YansWifiPhy",            /* tp_name */
    sizeof(PyNs3YansWifiPhy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3YansWifiPhy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3YansWifiPhy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3YansWifiPhy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3YansWifiPhy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3YansWifiPhy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3YansWifiPhy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3YansWifiPhy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AarfWifiManager__tp_init__0(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AarfWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AarfWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AarfWifiManager(*((PyNs3AarfWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3AarfWifiManager__tp_init__1(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AarfWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3AarfWifiManager__tp_init(PyNs3AarfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AarfWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AarfWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AarfWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AarfWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3AarfWifiManager__copy__(PyNs3AarfWifiManager *self)
{

    PyNs3AarfWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3AarfWifiManager, &PyNs3AarfWifiManager_Type);
    py_copy->obj = new ns3::AarfWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AarfWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AarfWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AarfWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AarfWifiManager__tp_clear(PyNs3AarfWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AarfWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AarfWifiManager__tp_traverse(PyNs3AarfWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AarfWifiManager__tp_dealloc(PyNs3AarfWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AarfWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AarfWifiManager__tp_richcompare (PyNs3AarfWifiManager *PYBINDGEN_UNUSED(self), PyNs3AarfWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AarfWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AarfWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.AarfWifiManager",            /* tp_name */
    sizeof(PyNs3AarfWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AarfWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3AarfWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AarfWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AarfWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AarfWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AarfWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AarfWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AarfcdWifiManager__tp_init__0(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AarfcdWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AarfcdWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AarfcdWifiManager(*((PyNs3AarfcdWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3AarfcdWifiManager__tp_init__1(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AarfcdWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3AarfcdWifiManager__tp_init(PyNs3AarfcdWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AarfcdWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AarfcdWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AarfcdWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AarfcdWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3AarfcdWifiManager__copy__(PyNs3AarfcdWifiManager *self)
{

    PyNs3AarfcdWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3AarfcdWifiManager, &PyNs3AarfcdWifiManager_Type);
    py_copy->obj = new ns3::AarfcdWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AarfcdWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AarfcdWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AarfcdWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AarfcdWifiManager__tp_clear(PyNs3AarfcdWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AarfcdWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AarfcdWifiManager__tp_traverse(PyNs3AarfcdWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AarfcdWifiManager__tp_dealloc(PyNs3AarfcdWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AarfcdWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AarfcdWifiManager__tp_richcompare (PyNs3AarfcdWifiManager *PYBINDGEN_UNUSED(self), PyNs3AarfcdWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AarfcdWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AarfcdWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.AarfcdWifiManager",            /* tp_name */
    sizeof(PyNs3AarfcdWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AarfcdWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3AarfcdWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AarfcdWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AarfcdWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AarfcdWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AarfcdWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AarfcdWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3AdhocWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3AdhocWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetSlot(slotTime);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetSifs(sifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetEifsNoDifs(eifsNoDifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetAckTimeout(ackTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetCtsTimeout(ctsTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetPifs(pifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetWifiPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiPhy = NULL;
    } else {
        py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiPhy);
    }
    
    if (py_WifiPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
        py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
        py_WifiPhy->inst_dict = NULL;
        py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetWifiRemoteStationManager(stationManager);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::Enqueue(packet, to, from);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::Enqueue(packet, to);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3AdhocWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}




ns3::Mac48Address
PyNs3AdhocWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ssid
PyNs3AdhocWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetAddress(address);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AdhocWifiMac::SetSsid(ssid);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Mac48Address
PyNs3AdhocWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = const_cast< ns3::AdhocWifiMac* >((const ns3::AdhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AdhocWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AdhocWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = (ns3::AdhocWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AdhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = const_cast< ns3::WifiMac* >((const ns3::WifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3AdhocWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = const_cast< ns3::WifiMac* >((const ns3::WifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3AdhocWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3AdhocWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AdhocWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3AdhocWifiMac__tp_init(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (self->ob_type != &PyNs3AdhocWifiMac_Type)
    {
        self->obj = new PyNs3AdhocWifiMac__PythonHelper();
        self->obj->Ref ();
        ((PyNs3AdhocWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::AdhocWifiMac();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetForwardUpCallback(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl8> upCallback_cb_impl;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl8> (upCallback);
    (helper_class == NULL)? (self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl))) : (self->obj->ns3::AdhocWifiMac::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AdhocWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetWifiPhy(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr))) : (self->obj->ns3::AdhocWifiMac::SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetBssid(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetBssid()) : (self->obj->ns3::AdhocWifiMac::GetBssid());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SupportsSendFrom(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::AdhocWifiMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetPifs(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *pifs;
    ns3::Time pifs2;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &pifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Time_Type)) {
        pifs2 = *((PyNs3Time *) pifs)->obj;
    } else if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Scalar_Type)) {
        pifs2 = *((PyNs3Scalar *) pifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", pifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetPifs(pifs2)) : (self->obj->ns3::AdhocWifiMac::SetPifs(pifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetEifsNoDifs(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetEifsNoDifs()) : (self->obj->ns3::AdhocWifiMac::GetEifsNoDifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetPifs(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetPifs()) : (self->obj->ns3::AdhocWifiMac::GetPifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetSlot(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSlot(slotTime2)) : (self->obj->ns3::AdhocWifiMac::SetSlot(slotTime2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetSsid(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj)) : (self->obj->ns3::AdhocWifiMac::SetSsid(*((PyNs3Ssid *) ssid)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetSlot(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSlot()) : (self->obj->ns3::AdhocWifiMac::GetSlot());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}



PyObject *
_wrap_PyNs3AdhocWifiMac_Enqueue__0(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::AdhocWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3AdhocWifiMac_Enqueue__1(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::AdhocWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3AdhocWifiMac_Enqueue(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AdhocWifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AdhocWifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetCtsTimeout(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ctsTimeout;
    ns3::Time ctsTimeout2;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ctsTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Time_Type)) {
        ctsTimeout2 = *((PyNs3Time *) ctsTimeout)->obj;
    } else if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ctsTimeout2 = *((PyNs3Scalar *) ctsTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ctsTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCtsTimeout(ctsTimeout2)) : (self->obj->ns3::AdhocWifiMac::SetCtsTimeout(ctsTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetCtsTimeout(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCtsTimeout()) : (self->obj->ns3::AdhocWifiMac::GetCtsTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetAddress(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::AdhocWifiMac::GetAddress());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetLinkDownCallback(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl1> linkDown_cb_impl;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl1> (linkDown);
    (helper_class == NULL)? (self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl))) : (self->obj->ns3::AdhocWifiMac::SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetSifs(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSifs(sifs2)) : (self->obj->ns3::AdhocWifiMac::SetSifs(sifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetAddress(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::AdhocWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetWifiRemoteStationManager(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *stationManager;
    ns3::WifiRemoteStationManager *stationManager_ptr;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"stationManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &stationManager)) {
        return NULL;
    }
    stationManager_ptr = (stationManager ? stationManager->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr))) : (self->obj->ns3::AdhocWifiMac::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetAckTimeout(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ackTimeout;
    ns3::Time ackTimeout2;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ackTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Time_Type)) {
        ackTimeout2 = *((PyNs3Time *) ackTimeout)->obj;
    } else if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ackTimeout2 = *((PyNs3Scalar *) ackTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ackTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAckTimeout(ackTimeout2)) : (self->obj->ns3::AdhocWifiMac::SetAckTimeout(ackTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetSsid(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = (helper_class == NULL)? (self->obj->GetSsid()) : (self->obj->ns3::AdhocWifiMac::GetSsid());
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetEifsNoDifs(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *eifsNoDifs;
    ns3::Time eifsNoDifs2;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &eifsNoDifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Time_Type)) {
        eifsNoDifs2 = *((PyNs3Time *) eifsNoDifs)->obj;
    } else if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Scalar_Type)) {
        eifsNoDifs2 = *((PyNs3Scalar *) eifsNoDifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", eifsNoDifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetEifsNoDifs(eifsNoDifs2)) : (self->obj->ns3::AdhocWifiMac::SetEifsNoDifs(eifsNoDifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetAckTimeout(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetAckTimeout()) : (self->obj->ns3::AdhocWifiMac::GetAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_GetSifs(PyNs3AdhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSifs()) : (self->obj->ns3::AdhocWifiMac::GetSifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3AdhocWifiMac_SetLinkUpCallback(PyNs3AdhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl1> linkUp_cb_impl;
    PyNs3AdhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3AdhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl1> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::AdhocWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3AdhocWifiMac_methods[] = {
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetWifiPhy", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetWifiPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetBssid, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetEifsNoDifs, METH_NOARGS, NULL },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetPifs, METH_NOARGS, NULL },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetSlot, METH_NOARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3AdhocWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetCtsTimeout, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetSsid, METH_NOARGS, NULL },
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3AdhocWifiMac_GetSifs, METH_NOARGS, NULL },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3AdhocWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3AdhocWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AdhocWifiMac__tp_clear(PyNs3AdhocWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AdhocWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AdhocWifiMac__tp_traverse(PyNs3AdhocWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3AdhocWifiMac__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3AdhocWifiMac__tp_dealloc(PyNs3AdhocWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AdhocWifiMac__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AdhocWifiMac__tp_richcompare (PyNs3AdhocWifiMac *PYBINDGEN_UNUSED(self), PyNs3AdhocWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AdhocWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AdhocWifiMac_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.AdhocWifiMac",            /* tp_name */
    sizeof(PyNs3AdhocWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AdhocWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3AdhocWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AdhocWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AdhocWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AdhocWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AdhocWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AdhocWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3AmrrWifiManager__tp_init__0(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AmrrWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AmrrWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmrrWifiManager(*((PyNs3AmrrWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3AmrrWifiManager__tp_init__1(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::AmrrWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3AmrrWifiManager__tp_init(PyNs3AmrrWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AmrrWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AmrrWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AmrrWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AmrrWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3AmrrWifiManager__copy__(PyNs3AmrrWifiManager *self)
{

    PyNs3AmrrWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3AmrrWifiManager, &PyNs3AmrrWifiManager_Type);
    py_copy->obj = new ns3::AmrrWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AmrrWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AmrrWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AmrrWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AmrrWifiManager__tp_clear(PyNs3AmrrWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::AmrrWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3AmrrWifiManager__tp_traverse(PyNs3AmrrWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3AmrrWifiManager__tp_dealloc(PyNs3AmrrWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AmrrWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AmrrWifiManager__tp_richcompare (PyNs3AmrrWifiManager *PYBINDGEN_UNUSED(self), PyNs3AmrrWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AmrrWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AmrrWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.AmrrWifiManager",            /* tp_name */
    sizeof(PyNs3AmrrWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AmrrWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3AmrrWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AmrrWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AmrrWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AmrrWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AmrrWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AmrrWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3AmsduSubframeHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    PyNs3AmsduSubframeHeader__PythonHelper *helper = dynamic_cast< PyNs3AmsduSubframeHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3AmsduSubframeHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AmsduSubframeHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = (ns3::AmsduSubframeHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3AmsduSubframeHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AmsduSubframeHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = const_cast< ns3::AmsduSubframeHeader* >((const ns3::AmsduSubframeHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3AmsduSubframeHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AmsduSubframeHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = const_cast< ns3::AmsduSubframeHeader* >((const ns3::AmsduSubframeHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::AmsduSubframeHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3AmsduSubframeHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::AmsduSubframeHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::AmsduSubframeHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = const_cast< ns3::AmsduSubframeHeader* >((const ns3::AmsduSubframeHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3AmsduSubframeHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3AmsduSubframeHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3AmsduSubframeHeader__tp_init__0(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3AmsduSubframeHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AmsduSubframeHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3AmsduSubframeHeader_Type)
    {
        self->obj = new PyNs3AmsduSubframeHeader__PythonHelper(*((PyNs3AmsduSubframeHeader *) arg0)->obj);
        ((PyNs3AmsduSubframeHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::AmsduSubframeHeader(*((PyNs3AmsduSubframeHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3AmsduSubframeHeader__tp_init__1(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3AmsduSubframeHeader_Type)
    {
        self->obj = new PyNs3AmsduSubframeHeader__PythonHelper();
        ((PyNs3AmsduSubframeHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::AmsduSubframeHeader();
    }
    return 0;
}

int _wrap_PyNs3AmsduSubframeHeader__tp_init(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3AmsduSubframeHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3AmsduSubframeHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_Serialize(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3AmsduSubframeHeader__PythonHelper *helper_class = dynamic_cast<PyNs3AmsduSubframeHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::AmsduSubframeHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_Deserialize(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3AmsduSubframeHeader__PythonHelper *helper_class = dynamic_cast<PyNs3AmsduSubframeHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::AmsduSubframeHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetLength(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetLength();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::AmsduSubframeHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetDestinationAddr(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetDestinationAddr();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_Print(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3AmsduSubframeHeader__PythonHelper *helper_class = dynamic_cast<PyNs3AmsduSubframeHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::AmsduSubframeHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_SetDestinationAddr(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    self->obj->SetDestinationAddr(*((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetInstanceTypeId(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    PyNs3AmsduSubframeHeader__PythonHelper *helper_class = dynamic_cast<PyNs3AmsduSubframeHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::AmsduSubframeHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetSerializedSize(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3AmsduSubframeHeader__PythonHelper *helper_class = dynamic_cast<PyNs3AmsduSubframeHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::AmsduSubframeHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_SetSourceAddr(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *to;
    const char *keywords[] = {"to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &to)) {
        return NULL;
    }
    self->obj->SetSourceAddr(*((PyNs3Mac48Address *) to)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_SetLength(PyNs3AmsduSubframeHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &arg0)) {
        return NULL;
    }
    if (arg0 > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetLength(arg0);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AmsduSubframeHeader_GetSourceAddr(PyNs3AmsduSubframeHeader *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetSourceAddr();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


static PyObject*
_wrap_PyNs3AmsduSubframeHeader__copy__(PyNs3AmsduSubframeHeader *self)
{

    PyNs3AmsduSubframeHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3AmsduSubframeHeader, &PyNs3AmsduSubframeHeader_Type);
    py_copy->obj = new ns3::AmsduSubframeHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3AmsduSubframeHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetLength", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetLength, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetDestinationAddr", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetDestinationAddr, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDestinationAddr", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_SetDestinationAddr, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetSourceAddr", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_SetSourceAddr, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetLength", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_SetLength, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSourceAddr", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader_GetSourceAddr, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3AmsduSubframeHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3AmsduSubframeHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3AmsduSubframeHeader__tp_clear(PyNs3AmsduSubframeHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::AmsduSubframeHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3AmsduSubframeHeader__tp_traverse(PyNs3AmsduSubframeHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3AmsduSubframeHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3AmsduSubframeHeader__tp_dealloc(PyNs3AmsduSubframeHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3AmsduSubframeHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AmsduSubframeHeader__tp_richcompare (PyNs3AmsduSubframeHeader *PYBINDGEN_UNUSED(self), PyNs3AmsduSubframeHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AmsduSubframeHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AmsduSubframeHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.AmsduSubframeHeader",            /* tp_name */
    sizeof(PyNs3AmsduSubframeHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AmsduSubframeHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3AmsduSubframeHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3AmsduSubframeHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AmsduSubframeHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AmsduSubframeHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3AmsduSubframeHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AmsduSubframeHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ArfWifiManager__tp_init__0(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ArfWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ArfWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ArfWifiManager(*((PyNs3ArfWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3ArfWifiManager__tp_init__1(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ArfWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3ArfWifiManager__tp_init(PyNs3ArfWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ArfWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ArfWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ArfWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ArfWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3ArfWifiManager__copy__(PyNs3ArfWifiManager *self)
{

    PyNs3ArfWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3ArfWifiManager, &PyNs3ArfWifiManager_Type);
    py_copy->obj = new ns3::ArfWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ArfWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ArfWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ArfWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ArfWifiManager__tp_clear(PyNs3ArfWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ArfWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ArfWifiManager__tp_traverse(PyNs3ArfWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3ArfWifiManager__tp_dealloc(PyNs3ArfWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ArfWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ArfWifiManager__tp_richcompare (PyNs3ArfWifiManager *PYBINDGEN_UNUSED(self), PyNs3ArfWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ArfWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ArfWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.ArfWifiManager",            /* tp_name */
    sizeof(PyNs3ArfWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ArfWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3ArfWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ArfWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ArfWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ArfWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ArfWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ArfWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3CaraWifiManager__tp_init__0(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CaraWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CaraWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CaraWifiManager(*((PyNs3CaraWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3CaraWifiManager__tp_init__1(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::CaraWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3CaraWifiManager__tp_init(PyNs3CaraWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CaraWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CaraWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CaraWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::CaraWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3CaraWifiManager__copy__(PyNs3CaraWifiManager *self)
{

    PyNs3CaraWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3CaraWifiManager, &PyNs3CaraWifiManager_Type);
    py_copy->obj = new ns3::CaraWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CaraWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3CaraWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CaraWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CaraWifiManager__tp_clear(PyNs3CaraWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::CaraWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3CaraWifiManager__tp_traverse(PyNs3CaraWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3CaraWifiManager__tp_dealloc(PyNs3CaraWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3CaraWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CaraWifiManager__tp_richcompare (PyNs3CaraWifiManager *PYBINDGEN_UNUSED(self), PyNs3CaraWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CaraWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CaraWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.CaraWifiManager",            /* tp_name */
    sizeof(PyNs3CaraWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CaraWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3CaraWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CaraWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CaraWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CaraWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CaraWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CaraWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3ConstantRateWifiManager__tp_init__0(PyNs3ConstantRateWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ConstantRateWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ConstantRateWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ConstantRateWifiManager(*((PyNs3ConstantRateWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3ConstantRateWifiManager__tp_init__1(PyNs3ConstantRateWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ConstantRateWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3ConstantRateWifiManager__tp_init(PyNs3ConstantRateWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ConstantRateWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ConstantRateWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ConstantRateWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ConstantRateWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3ConstantRateWifiManager__copy__(PyNs3ConstantRateWifiManager *self)
{

    PyNs3ConstantRateWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3ConstantRateWifiManager, &PyNs3ConstantRateWifiManager_Type);
    py_copy->obj = new ns3::ConstantRateWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3ConstantRateWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ConstantRateWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3ConstantRateWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ConstantRateWifiManager__tp_clear(PyNs3ConstantRateWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ConstantRateWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ConstantRateWifiManager__tp_traverse(PyNs3ConstantRateWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3ConstantRateWifiManager__tp_dealloc(PyNs3ConstantRateWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ConstantRateWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ConstantRateWifiManager__tp_richcompare (PyNs3ConstantRateWifiManager *PYBINDGEN_UNUSED(self), PyNs3ConstantRateWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ConstantRateWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ConstantRateWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.ConstantRateWifiManager",            /* tp_name */
    sizeof(PyNs3ConstantRateWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ConstantRateWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3ConstantRateWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ConstantRateWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ConstantRateWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ConstantRateWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ConstantRateWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ConstantRateWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3CtrlBAckRequestHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3CtrlBAckRequestHeader__PythonHelper *helper = dynamic_cast< PyNs3CtrlBAckRequestHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3CtrlBAckRequestHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CtrlBAckRequestHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = (ns3::CtrlBAckRequestHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3CtrlBAckRequestHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CtrlBAckRequestHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = const_cast< ns3::CtrlBAckRequestHeader* >((const ns3::CtrlBAckRequestHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3CtrlBAckRequestHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CtrlBAckRequestHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = const_cast< ns3::CtrlBAckRequestHeader* >((const ns3::CtrlBAckRequestHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckRequestHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3CtrlBAckRequestHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CtrlBAckRequestHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::CtrlBAckRequestHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = const_cast< ns3::CtrlBAckRequestHeader* >((const ns3::CtrlBAckRequestHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CtrlBAckRequestHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3CtrlBAckRequestHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3CtrlBAckRequestHeader__tp_init__0(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CtrlBAckRequestHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CtrlBAckRequestHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3CtrlBAckRequestHeader_Type)
    {
        self->obj = new PyNs3CtrlBAckRequestHeader__PythonHelper(*((PyNs3CtrlBAckRequestHeader *) arg0)->obj);
        ((PyNs3CtrlBAckRequestHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::CtrlBAckRequestHeader(*((PyNs3CtrlBAckRequestHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3CtrlBAckRequestHeader__tp_init__1(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3CtrlBAckRequestHeader_Type)
    {
        self->obj = new PyNs3CtrlBAckRequestHeader__PythonHelper();
        ((PyNs3CtrlBAckRequestHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::CtrlBAckRequestHeader();
    }
    return 0;
}

int _wrap_PyNs3CtrlBAckRequestHeader__tp_init(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CtrlBAckRequestHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CtrlBAckRequestHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_Serialize(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3CtrlBAckRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::CtrlBAckRequestHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetStartingSequence(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequence();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_MustSendHtImmediateAck(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustSendHtImmediateAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_Deserialize(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3CtrlBAckRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::CtrlBAckRequestHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_IsMultiTid(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMultiTid();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::CtrlBAckRequestHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_IsCompressed(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCompressed();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_IsBasic(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBasic();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetStartingSequenceControl(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequenceControl();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_Print(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3CtrlBAckRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckRequestHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::CtrlBAckRequestHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_SetHtImmediateAck(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool immediateAck;
    PyObject *py_immediateAck;
    const char *keywords[] = {"immediateAck", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_immediateAck)) {
        return NULL;
    }
    immediateAck = (bool) PyObject_IsTrue(py_immediateAck);
    self->obj->SetHtImmediateAck(immediateAck);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetInstanceTypeId(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    PyNs3CtrlBAckRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckRequestHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::CtrlBAckRequestHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetSerializedSize(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3CtrlBAckRequestHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckRequestHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::CtrlBAckRequestHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_SetStartingSequence(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequence(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_SetTidInfo(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTidInfo(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_GetTidInfo(PyNs3CtrlBAckRequestHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTidInfo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckRequestHeader_SetType(PyNs3CtrlBAckRequestHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::BlockAckType type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CtrlBAckRequestHeader__copy__(PyNs3CtrlBAckRequestHeader *self)
{

    PyNs3CtrlBAckRequestHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3CtrlBAckRequestHeader, &PyNs3CtrlBAckRequestHeader_Type);
    py_copy->obj = new ns3::CtrlBAckRequestHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CtrlBAckRequestHeader_methods[] = {
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetStartingSequence", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetStartingSequence, METH_NOARGS, NULL },
    {(char *) "MustSendHtImmediateAck", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_MustSendHtImmediateAck, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsMultiTid", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_IsMultiTid, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "IsCompressed", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_IsCompressed, METH_NOARGS, NULL },
    {(char *) "IsBasic", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_IsBasic, METH_NOARGS, NULL },
    {(char *) "GetStartingSequenceControl", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetStartingSequenceControl, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetHtImmediateAck", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_SetHtImmediateAck, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "SetStartingSequence", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_SetStartingSequence, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTidInfo", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_SetTidInfo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTidInfo", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_GetTidInfo, METH_NOARGS, NULL },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader_SetType, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3CtrlBAckRequestHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CtrlBAckRequestHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CtrlBAckRequestHeader__tp_clear(PyNs3CtrlBAckRequestHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::CtrlBAckRequestHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3CtrlBAckRequestHeader__tp_traverse(PyNs3CtrlBAckRequestHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3CtrlBAckRequestHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3CtrlBAckRequestHeader__tp_dealloc(PyNs3CtrlBAckRequestHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3CtrlBAckRequestHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CtrlBAckRequestHeader__tp_richcompare (PyNs3CtrlBAckRequestHeader *PYBINDGEN_UNUSED(self), PyNs3CtrlBAckRequestHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CtrlBAckRequestHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CtrlBAckRequestHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.CtrlBAckRequestHeader",            /* tp_name */
    sizeof(PyNs3CtrlBAckRequestHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CtrlBAckRequestHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3CtrlBAckRequestHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CtrlBAckRequestHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CtrlBAckRequestHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CtrlBAckRequestHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CtrlBAckRequestHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CtrlBAckRequestHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3CtrlBAckResponseHeader__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader__PythonHelper *helper = dynamic_cast< PyNs3CtrlBAckResponseHeader__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3CtrlBAckResponseHeader__PythonHelper::Deserialize(ns3::Buffer::Iterator start)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CtrlBAckResponseHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Deserialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::Deserialize(start);
    }
    self_obj_before = reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = (ns3::CtrlBAckResponseHeader*) this;
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Deserialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::Deserialize(start);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::Deserialize(start);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3CtrlBAckResponseHeader__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CtrlBAckResponseHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = const_cast< ns3::CtrlBAckResponseHeader* >((const ns3::CtrlBAckResponseHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3CtrlBAckResponseHeader__PythonHelper::GetSerializedSize() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CtrlBAckResponseHeader *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSerializedSize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::GetSerializedSize();
    }
    self_obj_before = reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = const_cast< ns3::CtrlBAckResponseHeader* >((const ns3::CtrlBAckResponseHeader*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSerializedSize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::GetSerializedSize();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::CtrlBAckResponseHeader::GetSerializedSize();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}


void
PyNs3CtrlBAckResponseHeader__PythonHelper::Serialize(ns3::Buffer::Iterator start) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CtrlBAckResponseHeader *self_obj_before;
    PyObject *py_retval;
    PyNs3BufferIterator *py_Iterator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Serialize"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::CtrlBAckResponseHeader::Serialize(start);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = const_cast< ns3::CtrlBAckResponseHeader* >((const ns3::CtrlBAckResponseHeader*) this);
    py_Iterator = PyObject_New(PyNs3BufferIterator, &PyNs3BufferIterator_Type);
    py_Iterator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Iterator->obj = new ns3::Buffer::Iterator(start);
    PyNs3BufferIterator_wrapper_registry[(void *) py_Iterator->obj] = (PyObject *) py_Iterator;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Serialize", (char *) "N", py_Iterator);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CtrlBAckResponseHeader* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3CtrlBAckResponseHeader__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3CtrlBAckResponseHeader__tp_init__0(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CtrlBAckResponseHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CtrlBAckResponseHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3CtrlBAckResponseHeader_Type)
    {
        self->obj = new PyNs3CtrlBAckResponseHeader__PythonHelper(*((PyNs3CtrlBAckResponseHeader *) arg0)->obj);
        ((PyNs3CtrlBAckResponseHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::CtrlBAckResponseHeader(*((PyNs3CtrlBAckResponseHeader *) arg0)->obj);
    }
    return 0;
}

static int
_wrap_PyNs3CtrlBAckResponseHeader__tp_init__1(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3CtrlBAckResponseHeader_Type)
    {
        self->obj = new PyNs3CtrlBAckResponseHeader__PythonHelper();
        ((PyNs3CtrlBAckResponseHeader__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
    } else {
        // visibility: 'public'
        self->obj = new ns3::CtrlBAckResponseHeader();
    }
    return 0;
}

int _wrap_PyNs3CtrlBAckResponseHeader__tp_init(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CtrlBAckResponseHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CtrlBAckResponseHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetHtImmediateAck(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool immeadiateAck;
    PyObject *py_immeadiateAck;
    const char *keywords[] = {"immeadiateAck", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_immeadiateAck)) {
        return NULL;
    }
    immeadiateAck = (bool) PyObject_IsTrue(py_immeadiateAck);
    self->obj->SetHtImmediateAck(immeadiateAck);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsMultiTid(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsMultiTid();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::CtrlBAckResponseHeader::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsCompressed(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsCompressed();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_Print(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyStdOstream *os;
    PyNs3CtrlBAckResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"os", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyStdOstream_Type, &os)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Print(*((PyStdOstream *) os)->obj)) : (self->obj->ns3::CtrlBAckResponseHeader::Print(*((PyStdOstream *) os)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetReceivedFragment(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    int frag;
    const char *keywords[] = {"seq", "frag", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &seq, &frag)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (frag > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetReceivedFragment(seq, frag);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetStartingSequenceControl(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seqControl;
    const char *keywords[] = {"seqControl", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seqControl)) {
        return NULL;
    }
    if (seqControl > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequenceControl(seqControl);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_MustSendHtImmediateAck(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->MustSendHtImmediateAck();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetReceivedPacket(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetReceivedPacket(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsPacketReceived(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsPacketReceived(seq);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsBasic(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBasic();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetType(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::BlockAckType type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetType(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetStartingSequence(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequence();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_Deserialize(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3BufferIterator *start;
    PyNs3CtrlBAckResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Deserialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::CtrlBAckResponseHeader::Deserialize(*((PyNs3BufferIterator *) start)->obj));
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetStartingSequence(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int seq;
    const char *keywords[] = {"seq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &seq)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetStartingSequence(seq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_IsFragmentReceived(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int seq;
    int frag;
    const char *keywords[] = {"seq", "frag", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "ii", (char **) keywords, &seq, &frag)) {
        return NULL;
    }
    if (seq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    if (frag > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->IsFragmentReceived(seq, frag);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetInstanceTypeId(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckResponseHeader__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::CtrlBAckResponseHeader::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetSerializedSize(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3CtrlBAckResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckResponseHeader__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetSerializedSize()) : (self->obj->ns3::CtrlBAckResponseHeader::GetSerializedSize());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetTidInfo(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetTidInfo();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_Serialize(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    PyNs3CtrlBAckResponseHeader__PythonHelper *helper_class = dynamic_cast<PyNs3CtrlBAckResponseHeader__PythonHelper*> (self->obj);
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->Serialize(*((PyNs3BufferIterator *) start)->obj)) : (self->obj->ns3::CtrlBAckResponseHeader::Serialize(*((PyNs3BufferIterator *) start)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_GetStartingSequenceControl(PyNs3CtrlBAckResponseHeader *self)
{
    PyObject *py_retval;
    uint16_t retval;
    
    retval = self->obj->GetStartingSequenceControl();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3CtrlBAckResponseHeader_SetTidInfo(PyNs3CtrlBAckResponseHeader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int tid;
    const char *keywords[] = {"tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetTidInfo(tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CtrlBAckResponseHeader__copy__(PyNs3CtrlBAckResponseHeader *self)
{

    PyNs3CtrlBAckResponseHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3CtrlBAckResponseHeader, &PyNs3CtrlBAckResponseHeader_Type);
    py_copy->obj = new ns3::CtrlBAckResponseHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CtrlBAckResponseHeader_methods[] = {
    {(char *) "SetHtImmediateAck", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetHtImmediateAck, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsMultiTid", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsMultiTid, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "IsCompressed", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsCompressed, METH_NOARGS, NULL },
    {(char *) "Print", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_Print, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetReceivedFragment", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetReceivedFragment, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetStartingSequenceControl", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetStartingSequenceControl, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MustSendHtImmediateAck", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_MustSendHtImmediateAck, METH_NOARGS, NULL },
    {(char *) "SetReceivedPacket", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetReceivedPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsPacketReceived", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsPacketReceived, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsBasic", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsBasic, METH_NOARGS, NULL },
    {(char *) "SetType", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetType, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetStartingSequence", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetStartingSequence, METH_NOARGS, NULL },
    {(char *) "Deserialize", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_Deserialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetStartingSequence", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetStartingSequence, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsFragmentReceived", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_IsFragmentReceived, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "GetSerializedSize", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetSerializedSize, METH_NOARGS, NULL },
    {(char *) "GetTidInfo", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetTidInfo, METH_NOARGS, NULL },
    {(char *) "Serialize", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_Serialize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetStartingSequenceControl", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_GetStartingSequenceControl, METH_NOARGS, NULL },
    {(char *) "SetTidInfo", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader_SetTidInfo, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3CtrlBAckResponseHeader__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CtrlBAckResponseHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CtrlBAckResponseHeader__tp_clear(PyNs3CtrlBAckResponseHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::CtrlBAckResponseHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3CtrlBAckResponseHeader__tp_traverse(PyNs3CtrlBAckResponseHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3CtrlBAckResponseHeader__PythonHelper) )
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3CtrlBAckResponseHeader__tp_dealloc(PyNs3CtrlBAckResponseHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3CtrlBAckResponseHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CtrlBAckResponseHeader__tp_richcompare (PyNs3CtrlBAckResponseHeader *PYBINDGEN_UNUSED(self), PyNs3CtrlBAckResponseHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CtrlBAckResponseHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CtrlBAckResponseHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.CtrlBAckResponseHeader",            /* tp_name */
    sizeof(PyNs3CtrlBAckResponseHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CtrlBAckResponseHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3CtrlBAckResponseHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CtrlBAckResponseHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CtrlBAckResponseHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CtrlBAckResponseHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CtrlBAckResponseHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CtrlBAckResponseHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3Dcf__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3Dcf *self)
{
    PyObject *py_retval;
    PyNs3Dcf__PythonHelper *helper = dynamic_cast< PyNs3Dcf__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dcf__PythonHelper::_wrap_NotifyNewAggregate(PyNs3Dcf *self)
{
    PyObject *py_retval;
    PyNs3Dcf__PythonHelper *helper = dynamic_cast< PyNs3Dcf__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dcf__PythonHelper::_wrap_DoStart(PyNs3Dcf *self)
{
    PyObject *py_retval;
    PyNs3Dcf__PythonHelper *helper = dynamic_cast< PyNs3Dcf__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3Dcf__PythonHelper::_wrap_DoDispose(PyNs3Dcf *self)
{
    PyObject *py_retval;
    PyNs3Dcf__PythonHelper *helper = dynamic_cast< PyNs3Dcf__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3Dcf__PythonHelper::GetAifsn() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Dcf *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAifsn"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = const_cast< ns3::Dcf* >((const ns3::Dcf*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAifsn", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3Dcf__PythonHelper::GetMaxCw() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Dcf *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMaxCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = const_cast< ns3::Dcf* >((const ns3::Dcf*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMaxCw", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3Dcf__PythonHelper::GetMinCw() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Dcf *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMinCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = const_cast< ns3::Dcf* >((const ns3::Dcf*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMinCw", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Dcf__PythonHelper::SetAifsn(uint32_t aifsn)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Dcf *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAifsn"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = (ns3::Dcf*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAifsn", (char *) "N", PyLong_FromUnsignedLong(aifsn));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dcf__PythonHelper::SetMaxCw(uint32_t maxCw)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Dcf *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMaxCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = (ns3::Dcf*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMaxCw", (char *) "N", PyLong_FromUnsignedLong(maxCw));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dcf__PythonHelper::SetMinCw(uint32_t minCw)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Dcf *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMinCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = (ns3::Dcf*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMinCw", (char *) "N", PyLong_FromUnsignedLong(minCw));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Dcf* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3Dcf__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3Dcf__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dcf__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dcf__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3Dcf__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3Dcf__tp_init__0(PyNs3Dcf *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3Dcf_Type)
    {
        self->obj = new PyNs3Dcf__PythonHelper();
        self->obj->Ref ();
        ((PyNs3Dcf__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'Dcf' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3Dcf__tp_init__1(PyNs3Dcf *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Dcf *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Dcf_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3Dcf_Type)
    {
        self->obj = new PyNs3Dcf__PythonHelper(*((PyNs3Dcf *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3Dcf__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'Dcf' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3Dcf__tp_init(PyNs3Dcf *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3Dcf__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Dcf__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Dcf_GetAifsn(PyNs3Dcf *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetAifsn();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcf_GetMinCw(PyNs3Dcf *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMinCw();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcf_SetMaxCw(PyNs3Dcf *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxCw;
    const char *keywords[] = {"maxCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxCw)) {
        return NULL;
    }
    self->obj->SetMaxCw(maxCw);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcf_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::Dcf::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcf_SetMinCw(PyNs3Dcf *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int minCw;
    const char *keywords[] = {"minCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &minCw)) {
        return NULL;
    }
    self->obj->SetMinCw(minCw);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcf_GetMaxCw(PyNs3Dcf *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxCw();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Dcf_SetAifsn(PyNs3Dcf *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int aifsn;
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &aifsn)) {
        return NULL;
    }
    self->obj->SetAifsn(aifsn);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3Dcf_methods[] = {
    {(char *) "GetAifsn", (PyCFunction) _wrap_PyNs3Dcf_GetAifsn, METH_NOARGS, NULL },
    {(char *) "GetMinCw", (PyCFunction) _wrap_PyNs3Dcf_GetMinCw, METH_NOARGS, NULL },
    {(char *) "SetMaxCw", (PyCFunction) _wrap_PyNs3Dcf_SetMaxCw, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3Dcf_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetMinCw", (PyCFunction) _wrap_PyNs3Dcf_SetMinCw, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMaxCw", (PyCFunction) _wrap_PyNs3Dcf_GetMaxCw, METH_NOARGS, NULL },
    {(char *) "SetAifsn", (PyCFunction) _wrap_PyNs3Dcf_SetAifsn, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3Dcf__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3Dcf__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3Dcf__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3Dcf__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3Dcf__tp_clear(PyNs3Dcf *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::Dcf *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3Dcf__tp_traverse(PyNs3Dcf *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3Dcf__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3Dcf__tp_dealloc(PyNs3Dcf *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3Dcf__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3Dcf__tp_richcompare (PyNs3Dcf *PYBINDGEN_UNUSED(self), PyNs3Dcf *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Dcf_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Dcf_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Dcf",            /* tp_name */
    sizeof(PyNs3Dcf),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Dcf__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3Dcf__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3Dcf__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Dcf__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Dcf_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3Dcf, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Dcf__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3EdcaTxopN__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    PyNs3EdcaTxopN__PythonHelper *helper = dynamic_cast< PyNs3EdcaTxopN__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3EdcaTxopN__PythonHelper::_wrap_NotifyNewAggregate(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    PyNs3EdcaTxopN__PythonHelper *helper = dynamic_cast< PyNs3EdcaTxopN__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3EdcaTxopN__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EdcaTxopN *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::EdcaTxopN::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = (ns3::EdcaTxopN*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EdcaTxopN__PythonHelper::SetMinCw(uint32_t minCw)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EdcaTxopN *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMinCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::EdcaTxopN::SetMinCw(minCw);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = (ns3::EdcaTxopN*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMinCw", (char *) "N", PyLong_FromUnsignedLong(minCw));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EdcaTxopN__PythonHelper::SetMaxCw(uint32_t maxCw)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EdcaTxopN *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMaxCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::EdcaTxopN::SetMaxCw(maxCw);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = (ns3::EdcaTxopN*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMaxCw", (char *) "N", PyLong_FromUnsignedLong(maxCw));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EdcaTxopN__PythonHelper::SetAifsn(uint32_t aifsn)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EdcaTxopN *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAifsn"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::EdcaTxopN::SetAifsn(aifsn);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = (ns3::EdcaTxopN*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAifsn", (char *) "N", PyLong_FromUnsignedLong(aifsn));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

uint32_t
PyNs3EdcaTxopN__PythonHelper::GetMinCw() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EdcaTxopN *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMinCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetMinCw();
    }
    self_obj_before = reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = const_cast< ns3::EdcaTxopN* >((const ns3::EdcaTxopN*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMinCw", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetMinCw();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetMinCw();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3EdcaTxopN__PythonHelper::GetMaxCw() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EdcaTxopN *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMaxCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetMaxCw();
    }
    self_obj_before = reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = const_cast< ns3::EdcaTxopN* >((const ns3::EdcaTxopN*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMaxCw", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetMaxCw();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetMaxCw();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3EdcaTxopN__PythonHelper::GetAifsn() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EdcaTxopN *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAifsn"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetAifsn();
    }
    self_obj_before = reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = const_cast< ns3::EdcaTxopN* >((const ns3::EdcaTxopN*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAifsn", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetAifsn();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::EdcaTxopN::GetAifsn();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3EdcaTxopN__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::EdcaTxopN *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj;
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = (ns3::EdcaTxopN*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3EdcaTxopN* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3EdcaTxopN__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3EdcaTxopN__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3EdcaTxopN__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3EdcaTxopN__tp_init(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (self->ob_type != &PyNs3EdcaTxopN_Type)
    {
        self->obj = new PyNs3EdcaTxopN__PythonHelper();
        self->obj->Ref ();
        ((PyNs3EdcaTxopN__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::EdcaTxopN();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NotifyChannelSwitching(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyChannelSwitching();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetAifsn(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3EdcaTxopN__PythonHelper *helper_class = dynamic_cast<PyNs3EdcaTxopN__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetAifsn()) : (self->obj->ns3::EdcaTxopN::GetAifsn());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetMaxQueueDelay(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *delay;
    ns3::Time delay2;
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &delay)) {
        return NULL;
    }
    if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Time_Type)) {
        delay2 = *((PyNs3Time *) delay)->obj;
    } else if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Scalar_Type)) {
        delay2 = *((PyNs3Scalar *) delay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", delay->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetMaxQueueDelay(delay2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetMsduAggregator(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MsduAggregator *aggr;
    ns3::MsduAggregator *aggr_ptr;
    const char *keywords[] = {"aggr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MsduAggregator_Type, &aggr)) {
        return NULL;
    }
    aggr_ptr = (aggr ? aggr->obj : NULL);
    self->obj->SetMsduAggregator(ns3::Ptr< ns3::MsduAggregator  > (aggr_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NeedDataRetransmission(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->NeedDataRetransmission();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GotDelBaFrame(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtDelBaHeader *delBaHdr;
    ns3::MgtDelBaHeader *delBaHdr_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"delBaHdr", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtDelBaHeader_Type, &delBaHdr, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    delBaHdr_ptr = (delBaHdr ? delBaHdr->obj : NULL);
    self->obj->GotDelBaFrame(delBaHdr_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::EdcaTxopN::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NotifyInternalCollision(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyInternalCollision();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GotCts(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double snr;
    PyNs3WifiMode *txMode;
    const char *keywords[] = {"snr", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dO!", (char **) keywords, &snr, &PyNs3WifiMode_Type, &txMode)) {
        return NULL;
    }
    self->obj->GotCts(snr, *((PyNs3WifiMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_MissedBlockAck(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->MissedBlockAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_Low(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MacLow > retval;
    PyNs3MacLow *py_MacLow;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Low();
    if (!(const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)))) == typeid(PyNs3MacLow__PythonHelper))
    {
        py_MacLow = reinterpret_cast< PyNs3MacLow* >(reinterpret_cast< PyNs3MacLow__PythonHelper* >(const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)))->m_pyself);
        py_MacLow->obj = const_cast<ns3::MacLow *> (ns3::PeekPointer (retval));
        Py_INCREF(py_MacLow);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MacLow = NULL;
        } else {
            py_MacLow = (PyNs3MacLow *) wrapper_lookup_iter->second;
            Py_INCREF(py_MacLow);
        }
    
        if (py_MacLow == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MacLow *> (ns3::PeekPointer (retval)))), &PyNs3MacLow_Type);
            py_MacLow = PyObject_GC_New(PyNs3MacLow, wrapper_type);
            py_MacLow->inst_dict = NULL;
            py_MacLow->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MacLow *> (ns3::PeekPointer (retval))->Ref();
            py_MacLow->obj = const_cast<ns3::MacLow *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MacLow->obj] = (PyObject *) py_MacLow;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_MacLow);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetBlockAckThreshold(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetBlockAckThreshold();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_StartAccessIfNeeded(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->StartAccessIfNeeded();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetFragmentSize(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFragmentSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SendDelbaFrame(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *addr;
    int tid;
    bool byOriginator;
    PyObject *py_byOriginator;
    const char *keywords[] = {"addr", "tid", "byOriginator", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!iO", (char **) keywords, &PyNs3Mac48Address_Type, &addr, &tid, &py_byOriginator)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    byOriginator = (bool) PyObject_IsTrue(py_byOriginator);
    self->obj->SendDelbaFrame(*((PyNs3Mac48Address *) addr)->obj, tid, byOriginator);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GotAck(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double snr;
    PyNs3WifiMode *txMode;
    const char *keywords[] = {"snr", "txMode", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dO!", (char **) keywords, &snr, &PyNs3WifiMode_Type, &txMode)) {
        return NULL;
    }
    self->obj->GotAck(snr, *((PyNs3WifiMode *) txMode)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetLow(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MacLow *low;
    ns3::MacLow *low_ptr;
    const char *keywords[] = {"low", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLow_Type, &low)) {
        return NULL;
    }
    low_ptr = (low ? low->obj : NULL);
    self->obj->SetLow(ns3::Ptr< ns3::MacLow  > (low_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetTypeOfStation(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    ns3::TypeOfStation retval;
    
    retval = self->obj->GetTypeOfStation();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetMinCw(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int minCw;
    PyNs3EdcaTxopN__PythonHelper *helper_class = dynamic_cast<PyNs3EdcaTxopN__PythonHelper*> (self->obj);
    const char *keywords[] = {"minCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &minCw)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetMinCw(minCw)) : (self->obj->ns3::EdcaTxopN::SetMinCw(minCw));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetBlockAckInactivityTimeout(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int timeout;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (timeout > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBlockAckInactivityTimeout(timeout);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_DoDispose(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    PyNs3EdcaTxopN__PythonHelper *helper_class = dynamic_cast<PyNs3EdcaTxopN__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->DoDispose()) : (self->obj->ns3::EdcaTxopN::DoDispose());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetBlockAckThreshold(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int threshold;
    const char *keywords[] = {"threshold", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &threshold)) {
        return NULL;
    }
    if (threshold > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetBlockAckThreshold(threshold);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GotAddBaResponse(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaResponseHeader *respHdr;
    ns3::MgtAddBaResponseHeader *respHdr_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"respHdr", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3MgtAddBaResponseHeader_Type, &respHdr, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    respHdr_ptr = (respHdr ? respHdr->obj : NULL);
    self->obj->GotAddBaResponse(respHdr_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_MissedCts(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->MissedCts();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetTxFailedCallback(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl15> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl15> (callback);
    self->obj->SetTxFailedCallback(ns3::Callback<void, ns3::WifiMacHeader const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetMinCw(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3EdcaTxopN__PythonHelper *helper_class = dynamic_cast<PyNs3EdcaTxopN__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMinCw()) : (self->obj->ns3::EdcaTxopN::GetMinCw());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetMsduAggregator(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::MsduAggregator > retval;
    PyNs3MsduAggregator *py_MsduAggregator;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMsduAggregator();
    if (!(const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval)))) == typeid(PyNs3MsduAggregator__PythonHelper))
    {
        py_MsduAggregator = reinterpret_cast< PyNs3MsduAggregator* >(reinterpret_cast< PyNs3MsduAggregator__PythonHelper* >(const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval)))->m_pyself);
        py_MsduAggregator->obj = const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval));
        Py_INCREF(py_MsduAggregator);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MsduAggregator = NULL;
        } else {
            py_MsduAggregator = (PyNs3MsduAggregator *) wrapper_lookup_iter->second;
            Py_INCREF(py_MsduAggregator);
        }
    
        if (py_MsduAggregator == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval)))), &PyNs3MsduAggregator_Type);
            py_MsduAggregator = PyObject_GC_New(PyNs3MsduAggregator, wrapper_type);
            py_MsduAggregator->inst_dict = NULL;
            py_MsduAggregator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval))->Ref();
            py_MsduAggregator->obj = const_cast<ns3::MsduAggregator *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MsduAggregator->obj] = (PyObject *) py_MsduAggregator;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_MsduAggregator);
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_RestartAccessIfNeeded(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->RestartAccessIfNeeded();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetAifsn(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int aifsn;
    PyNs3EdcaTxopN__PythonHelper *helper_class = dynamic_cast<PyNs3EdcaTxopN__PythonHelper*> (self->obj);
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &aifsn)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAifsn(aifsn)) : (self->obj->ns3::EdcaTxopN::SetAifsn(aifsn));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetTxOkCallback(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl15> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl15> (callback);
    self->obj->SetTxOkCallback(ns3::Callback<void, ns3::WifiMacHeader const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetAccessCategory(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::AcIndex ac;
    const char *keywords[] = {"ac", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &ac)) {
        return NULL;
    }
    self->obj->SetAccessCategory(ac);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_Queue(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Queue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_MissedAck(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->MissedAck();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetMaxCw(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3EdcaTxopN__PythonHelper *helper_class = dynamic_cast<PyNs3EdcaTxopN__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMaxCw()) : (self->obj->ns3::EdcaTxopN::GetMaxCw());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_IsLastFragment(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsLastFragment();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_CompleteConfig(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->CompleteConfig();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetWifiRemoteStationManager(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *remoteManager;
    ns3::WifiRemoteStationManager *remoteManager_ptr;
    const char *keywords[] = {"remoteManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &remoteManager)) {
        return NULL;
    }
    remoteManager_ptr = (remoteManager ? remoteManager->obj : NULL);
    self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (remoteManager_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NextFragment(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->NextFragment();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_StartNext(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->StartNext();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetNextFragmentSize(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNextFragmentSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NeedRts(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->NeedRts();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetMaxCw(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxCw;
    PyNs3EdcaTxopN__PythonHelper *helper_class = dynamic_cast<PyNs3EdcaTxopN__PythonHelper*> (self->obj);
    const char *keywords[] = {"maxCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxCw)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetMaxCw(maxCw)) : (self->obj->ns3::EdcaTxopN::SetMaxCw(maxCw));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NotifyAccessGranted(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyAccessGranted();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NeedFragmentation(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->NeedFragmentation();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NeedRtsRetransmission(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->NeedRtsRetransmission();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GetFragmentOffset(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFragmentOffset();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NotifyCollision(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->NotifyCollision();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_PushFront(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->PushFront(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_NeedsAccess(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->NeedsAccess();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetMaxQueueSize(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &size)) {
        return NULL;
    }
    self->obj->SetMaxQueueSize(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_Cancel(PyNs3EdcaTxopN *self)
{
    PyObject *py_retval;
    
    self->obj->Cancel();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_GotBlockAck(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CtrlBAckResponseHeader *blockAck;
    ns3::CtrlBAckResponseHeader *blockAck_ptr;
    PyNs3Mac48Address *recipient;
    const char *keywords[] = {"blockAck", "recipient", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3CtrlBAckResponseHeader_Type, &blockAck, &PyNs3Mac48Address_Type, &recipient)) {
        return NULL;
    }
    blockAck_ptr = (blockAck ? blockAck->obj : NULL);
    self->obj->GotBlockAck(blockAck_ptr, *((PyNs3Mac48Address *) recipient)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3EdcaTxopN_SetTypeOfStation(PyNs3EdcaTxopN *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::TypeOfStation type;
    const char *keywords[] = {"type", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &type)) {
        return NULL;
    }
    self->obj->SetTypeOfStation(type);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3EdcaTxopN_methods[] = {
    {(char *) "NotifyChannelSwitching", (PyCFunction) _wrap_PyNs3EdcaTxopN_NotifyChannelSwitching, METH_NOARGS, NULL },
    {(char *) "GetAifsn", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetAifsn, METH_NOARGS, NULL },
    {(char *) "SetMaxQueueDelay", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetMaxQueueDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMsduAggregator", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetMsduAggregator, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NeedDataRetransmission", (PyCFunction) _wrap_PyNs3EdcaTxopN_NeedDataRetransmission, METH_NOARGS, NULL },
    {(char *) "GotDelBaFrame", (PyCFunction) _wrap_PyNs3EdcaTxopN_GotDelBaFrame, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyInternalCollision", (PyCFunction) _wrap_PyNs3EdcaTxopN_NotifyInternalCollision, METH_NOARGS, NULL },
    {(char *) "GotCts", (PyCFunction) _wrap_PyNs3EdcaTxopN_GotCts, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MissedBlockAck", (PyCFunction) _wrap_PyNs3EdcaTxopN_MissedBlockAck, METH_NOARGS, NULL },
    {(char *) "Low", (PyCFunction) _wrap_PyNs3EdcaTxopN_Low, METH_NOARGS, NULL },
    {(char *) "GetBlockAckThreshold", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetBlockAckThreshold, METH_NOARGS, NULL },
    {(char *) "StartAccessIfNeeded", (PyCFunction) _wrap_PyNs3EdcaTxopN_StartAccessIfNeeded, METH_NOARGS, NULL },
    {(char *) "GetFragmentSize", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetFragmentSize, METH_NOARGS, NULL },
    {(char *) "SendDelbaFrame", (PyCFunction) _wrap_PyNs3EdcaTxopN_SendDelbaFrame, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GotAck", (PyCFunction) _wrap_PyNs3EdcaTxopN_GotAck, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetLow", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetLow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeOfStation", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetTypeOfStation, METH_NOARGS, NULL },
    {(char *) "SetMinCw", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetMinCw, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBlockAckInactivityTimeout", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetBlockAckInactivityTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) _wrap_PyNs3EdcaTxopN_DoDispose, METH_NOARGS, NULL },
    {(char *) "SetBlockAckThreshold", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetBlockAckThreshold, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GotAddBaResponse", (PyCFunction) _wrap_PyNs3EdcaTxopN_GotAddBaResponse, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MissedCts", (PyCFunction) _wrap_PyNs3EdcaTxopN_MissedCts, METH_NOARGS, NULL },
    {(char *) "SetTxFailedCallback", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetTxFailedCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMinCw", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetMinCw, METH_NOARGS, NULL },
    {(char *) "GetMsduAggregator", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetMsduAggregator, METH_NOARGS, NULL },
    {(char *) "RestartAccessIfNeeded", (PyCFunction) _wrap_PyNs3EdcaTxopN_RestartAccessIfNeeded, METH_NOARGS, NULL },
    {(char *) "SetAifsn", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetAifsn, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxOkCallback", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetTxOkCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAccessCategory", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetAccessCategory, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Queue", (PyCFunction) _wrap_PyNs3EdcaTxopN_Queue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "MissedAck", (PyCFunction) _wrap_PyNs3EdcaTxopN_MissedAck, METH_NOARGS, NULL },
    {(char *) "GetMaxCw", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetMaxCw, METH_NOARGS, NULL },
    {(char *) "IsLastFragment", (PyCFunction) _wrap_PyNs3EdcaTxopN_IsLastFragment, METH_NOARGS, NULL },
    {(char *) "CompleteConfig", (PyCFunction) _wrap_PyNs3EdcaTxopN_CompleteConfig, METH_NOARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NextFragment", (PyCFunction) _wrap_PyNs3EdcaTxopN_NextFragment, METH_NOARGS, NULL },
    {(char *) "StartNext", (PyCFunction) _wrap_PyNs3EdcaTxopN_StartNext, METH_NOARGS, NULL },
    {(char *) "GetNextFragmentSize", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetNextFragmentSize, METH_NOARGS, NULL },
    {(char *) "NeedRts", (PyCFunction) _wrap_PyNs3EdcaTxopN_NeedRts, METH_NOARGS, NULL },
    {(char *) "SetMaxCw", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetMaxCw, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyAccessGranted", (PyCFunction) _wrap_PyNs3EdcaTxopN_NotifyAccessGranted, METH_NOARGS, NULL },
    {(char *) "NeedFragmentation", (PyCFunction) _wrap_PyNs3EdcaTxopN_NeedFragmentation, METH_NOARGS, NULL },
    {(char *) "NeedRtsRetransmission", (PyCFunction) _wrap_PyNs3EdcaTxopN_NeedRtsRetransmission, METH_NOARGS, NULL },
    {(char *) "GetFragmentOffset", (PyCFunction) _wrap_PyNs3EdcaTxopN_GetFragmentOffset, METH_NOARGS, NULL },
    {(char *) "NotifyCollision", (PyCFunction) _wrap_PyNs3EdcaTxopN_NotifyCollision, METH_NOARGS, NULL },
    {(char *) "PushFront", (PyCFunction) _wrap_PyNs3EdcaTxopN_PushFront, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NeedsAccess", (PyCFunction) _wrap_PyNs3EdcaTxopN_NeedsAccess, METH_NOARGS, NULL },
    {(char *) "SetMaxQueueSize", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetMaxQueueSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Cancel", (PyCFunction) _wrap_PyNs3EdcaTxopN_Cancel, METH_NOARGS, NULL },
    {(char *) "GotBlockAck", (PyCFunction) _wrap_PyNs3EdcaTxopN_GotBlockAck, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTypeOfStation", (PyCFunction) _wrap_PyNs3EdcaTxopN_SetTypeOfStation, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3EdcaTxopN__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3EdcaTxopN__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3EdcaTxopN__tp_clear(PyNs3EdcaTxopN *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::EdcaTxopN *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3EdcaTxopN__tp_traverse(PyNs3EdcaTxopN *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3EdcaTxopN__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3EdcaTxopN__tp_dealloc(PyNs3EdcaTxopN *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3EdcaTxopN__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3EdcaTxopN__tp_richcompare (PyNs3EdcaTxopN *PYBINDGEN_UNUSED(self), PyNs3EdcaTxopN *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3EdcaTxopN_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3EdcaTxopN_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.EdcaTxopN",            /* tp_name */
    sizeof(PyNs3EdcaTxopN),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3EdcaTxopN__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3EdcaTxopN__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3EdcaTxopN__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3EdcaTxopN__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3EdcaTxopN_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3EdcaTxopN, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3EdcaTxopN__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3ErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3ErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3ErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3ErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3ErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ErrorRateModel__PythonHelper::_wrap_DoStart(PyNs3ErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3ErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3ErrorRateModel__PythonHelper::_wrap_DoDispose(PyNs3ErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3ErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3ErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3ErrorRateModel__PythonHelper::GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ErrorRateModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *py_WifiMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChunkSuccessRate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj = const_cast< ns3::ErrorRateModel* >((const ns3::ErrorRateModel*) this);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(mode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChunkSuccessRate", (char *) "NdN", py_WifiMode, snr, PyLong_FromUnsignedLong(nbits));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ErrorRateModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3ErrorRateModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3ErrorRateModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ErrorRateModel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ErrorRateModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3ErrorRateModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3ErrorRateModel__tp_init__0(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3ErrorRateModel_Type)
    {
        self->obj = new PyNs3ErrorRateModel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3ErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'ErrorRateModel' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3ErrorRateModel__tp_init__1(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3ErrorRateModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3ErrorRateModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3ErrorRateModel_Type)
    {
        self->obj = new PyNs3ErrorRateModel__PythonHelper(*((PyNs3ErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3ErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'ErrorRateModel' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3ErrorRateModel__tp_init(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3ErrorRateModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3ErrorRateModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3ErrorRateModel_GetChunkSuccessRate(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *mode;
    double snr;
    unsigned int nbits;
    const char *keywords[] = {"mode", "snr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dI", (char **) keywords, &PyNs3WifiMode_Type, &mode, &snr, &nbits)) {
        return NULL;
    }
    retval = self->obj->GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, snr, nbits);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErrorRateModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ErrorRateModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3ErrorRateModel_CalculateSnr(PyNs3ErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *txMode;
    double ber;
    const char *keywords[] = {"txMode", "ber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3WifiMode_Type, &txMode, &ber)) {
        return NULL;
    }
    retval = self->obj->CalculateSnr(*((PyNs3WifiMode *) txMode)->obj, ber);
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}

static PyMethodDef PyNs3ErrorRateModel_methods[] = {
    {(char *) "GetChunkSuccessRate", (PyCFunction) _wrap_PyNs3ErrorRateModel_GetChunkSuccessRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3ErrorRateModel_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CalculateSnr", (PyCFunction) _wrap_PyNs3ErrorRateModel_CalculateSnr, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3ErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3ErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3ErrorRateModel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3ErrorRateModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3ErrorRateModel__tp_clear(PyNs3ErrorRateModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ErrorRateModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3ErrorRateModel__tp_traverse(PyNs3ErrorRateModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3ErrorRateModel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3ErrorRateModel__tp_dealloc(PyNs3ErrorRateModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3ErrorRateModel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3ErrorRateModel__tp_richcompare (PyNs3ErrorRateModel *PYBINDGEN_UNUSED(self), PyNs3ErrorRateModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3ErrorRateModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3ErrorRateModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.ErrorRateModel",            /* tp_name */
    sizeof(PyNs3ErrorRateModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3ErrorRateModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3ErrorRateModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3ErrorRateModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3ErrorRateModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3ErrorRateModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3ErrorRateModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3ErrorRateModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3IdealWifiManager__tp_init__0(PyNs3IdealWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3IdealWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3IdealWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IdealWifiManager(*((PyNs3IdealWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3IdealWifiManager__tp_init__1(PyNs3IdealWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::IdealWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3IdealWifiManager__tp_init(PyNs3IdealWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3IdealWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3IdealWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3IdealWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::IdealWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3IdealWifiManager_SetupPhy(PyNs3IdealWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetupPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3IdealWifiManager__copy__(PyNs3IdealWifiManager *self)
{

    PyNs3IdealWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3IdealWifiManager, &PyNs3IdealWifiManager_Type);
    py_copy->obj = new ns3::IdealWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3IdealWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3IdealWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetupPhy", (PyCFunction) _wrap_PyNs3IdealWifiManager_SetupPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3IdealWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3IdealWifiManager__tp_clear(PyNs3IdealWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::IdealWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3IdealWifiManager__tp_traverse(PyNs3IdealWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3IdealWifiManager__tp_dealloc(PyNs3IdealWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3IdealWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3IdealWifiManager__tp_richcompare (PyNs3IdealWifiManager *PYBINDGEN_UNUSED(self), PyNs3IdealWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3IdealWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3IdealWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.IdealWifiManager",            /* tp_name */
    sizeof(PyNs3IdealWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3IdealWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3IdealWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3IdealWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3IdealWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3IdealWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3IdealWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3IdealWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MacLow__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3MacLow__PythonHelper *helper = dynamic_cast< PyNs3MacLow__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MacLow__PythonHelper::_wrap_NotifyNewAggregate(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3MacLow__PythonHelper *helper = dynamic_cast< PyNs3MacLow__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MacLow__PythonHelper::_wrap_DoStart(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3MacLow__PythonHelper *helper = dynamic_cast< PyNs3MacLow__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3MacLow__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MacLow *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = (ns3::MacLow*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MacLow* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3MacLow__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MacLow__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLow__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MacLow__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MacLow__tp_init__0(PyNs3MacLow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MacLow *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLow_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MacLow_Type)
    {
        self->obj = new PyNs3MacLow__PythonHelper(*((PyNs3MacLow *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3MacLow__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MacLow(*((PyNs3MacLow *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3MacLow__tp_init__1(PyNs3MacLow *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MacLow_Type)
    {
        self->obj = new PyNs3MacLow__PythonHelper();
        self->obj->Ref ();
        ((PyNs3MacLow__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::MacLow();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3MacLow__tp_init(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MacLow__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MacLow__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MacLow_SetBasicBlockAckTimeout(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetBasicBlockAckTimeout(blockAckTimeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetBssid(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *ad;
    const char *keywords[] = {"ad", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &ad)) {
        return NULL;
    }
    self->obj->SetBssid(*((PyNs3Mac48Address *) ad)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_NotifySwitchingStartNow(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *duration;
    ns3::Time duration2;
    const char *keywords[] = {"duration", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &duration)) {
        return NULL;
    }
    if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Time_Type)) {
        duration2 = *((PyNs3Time *) duration)->obj;
    } else if (PyObject_IsInstance(duration, (PyObject*) &PyNs3Scalar_Type)) {
        duration2 = *((PyNs3Scalar *) duration)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", duration->ob_type->tp_name);
        return NULL;
    }
    self->obj->NotifySwitchingStartNow(duration2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetBssid(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetBssid();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_CalculateTransmissionTime(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    ns3::WifiMacHeader *hdr_ptr;
    PyNs3MacLowTransmissionParameters *parameters;
    const char *keywords[] = {"packet", "hdr", "parameters", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr, &PyNs3MacLowTransmissionParameters_Type, &parameters)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    hdr_ptr = (hdr ? hdr->obj : NULL);
    ns3::Time retval = self->obj->CalculateTransmissionTime(ns3::Ptr< ns3::Packet  > (packet_ptr), hdr_ptr, *((PyNs3MacLowTransmissionParameters *) parameters)->obj);
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetPifs(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *pifs;
    ns3::Time pifs2;
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &pifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Time_Type)) {
        pifs2 = *((PyNs3Time *) pifs)->obj;
    } else if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Scalar_Type)) {
        pifs2 = *((PyNs3Scalar *) pifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", pifs->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetPifs(pifs2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_ReceiveOk(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxSnr;
    PyNs3WifiMode *txMode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"packet", "rxSnr", "txMode", "preamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dO!i", (char **) keywords, &PyNs3Packet_Type, &packet, &rxSnr, &PyNs3WifiMode_Type, &txMode, &preamble)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->ReceiveOk(ns3::Ptr< ns3::Packet  > (packet_ptr), rxSnr, *((PyNs3WifiMode *) txMode)->obj, preamble);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_DestroyBlockAckAgreement(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *originator;
    int tid;
    const char *keywords[] = {"originator", "tid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3Mac48Address_Type, &originator, &tid)) {
        return NULL;
    }
    if (tid > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->DestroyBlockAckAgreement(*((PyNs3Mac48Address *) originator)->obj, tid);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetSlotTime(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetSlotTime(slotTime2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetBasicBlockAckTimeout(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBasicBlockAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetPifs(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetPifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_CreateBlockAckAgreement(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MgtAddBaResponseHeader *respHdr;
    ns3::MgtAddBaResponseHeader *respHdr_ptr;
    PyNs3Mac48Address *originator;
    int startingSeq;
    const char *keywords[] = {"respHdr", "originator", "startingSeq", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!i", (char **) keywords, &PyNs3MgtAddBaResponseHeader_Type, &respHdr, &PyNs3Mac48Address_Type, &originator, &startingSeq)) {
        return NULL;
    }
    respHdr_ptr = (respHdr ? respHdr->obj : NULL);
    if (startingSeq > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->CreateBlockAckAgreement(respHdr_ptr, *((PyNs3Mac48Address *) originator)->obj, startingSeq);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetCompressedBlockAckTimeout(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetCompressedBlockAckTimeout(blockAckTimeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetSlotTime(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSlotTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetCtsTimeout(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ctsTimeout;
    ns3::Time ctsTimeout2;
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ctsTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Time_Type)) {
        ctsTimeout2 = *((PyNs3Time *) ctsTimeout)->obj;
    } else if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ctsTimeout2 = *((PyNs3Scalar *) ctsTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ctsTimeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetCtsTimeout(ctsTimeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetCtsTimeout(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCtsTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetAddress(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = self->obj->GetAddress();
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetSifs(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetSifs(sifs2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetPhy(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetAddress(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *ad;
    const char *keywords[] = {"ad", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &ad)) {
        return NULL;
    }
    self->obj->SetAddress(*((PyNs3Mac48Address *) ad)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetWifiRemoteStationManager(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *manager;
    ns3::WifiRemoteStationManager *manager_ptr;
    const char *keywords[] = {"manager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &manager)) {
        return NULL;
    }
    manager_ptr = (manager ? manager->obj : NULL);
    self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (manager_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetCompressedBlockAckTimeout(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCompressedBlockAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetAckTimeout(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ackTimeout;
    ns3::Time ackTimeout2;
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ackTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Time_Type)) {
        ackTimeout2 = *((PyNs3Time *) ackTimeout)->obj;
    } else if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ackTimeout2 = *((PyNs3Scalar *) ackTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ackTimeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetAckTimeout(ackTimeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_SetRxCallback(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl12> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl12> (callback);
    self->obj->SetRxCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::WifiMacHeader const*, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetAckTimeout(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetAckTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_GetSifs(PyNs3MacLow *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetSifs();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3MacLow_ReceiveError(PyNs3MacLow *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double rxSnr;
    const char *keywords[] = {"packet", "rxSnr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!d", (char **) keywords, &PyNs3Packet_Type, &packet, &rxSnr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->ReceiveError(ns3::Ptr< ns3::Packet  > (packet_ptr), rxSnr);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MacLow__copy__(PyNs3MacLow *self)
{

    PyNs3MacLow *py_copy;
    py_copy = PyObject_GC_New(PyNs3MacLow, &PyNs3MacLow_Type);
    py_copy->obj = new ns3::MacLow(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MacLow_methods[] = {
    {(char *) "SetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_SetBasicBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBssid", (PyCFunction) _wrap_PyNs3MacLow_SetBssid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifySwitchingStartNow", (PyCFunction) _wrap_PyNs3MacLow_NotifySwitchingStartNow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3MacLow_GetBssid, METH_NOARGS, NULL },
    {(char *) "CalculateTransmissionTime", (PyCFunction) _wrap_PyNs3MacLow_CalculateTransmissionTime, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3MacLow_SetPifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReceiveOk", (PyCFunction) _wrap_PyNs3MacLow_ReceiveOk, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DestroyBlockAckAgreement", (PyCFunction) _wrap_PyNs3MacLow_DestroyBlockAckAgreement, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSlotTime", (PyCFunction) _wrap_PyNs3MacLow_SetSlotTime, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_GetBasicBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3MacLow_GetPifs, METH_NOARGS, NULL },
    {(char *) "CreateBlockAckAgreement", (PyCFunction) _wrap_PyNs3MacLow_CreateBlockAckAgreement, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_SetCompressedBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSlotTime", (PyCFunction) _wrap_PyNs3MacLow_GetSlotTime, METH_NOARGS, NULL },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3MacLow_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3MacLow_GetCtsTimeout, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3MacLow_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3MacLow_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetPhy", (PyCFunction) _wrap_PyNs3MacLow_SetPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3MacLow_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3MacLow_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_GetCompressedBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRxCallback", (PyCFunction) _wrap_PyNs3MacLow_SetRxCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3MacLow_GetAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3MacLow_GetSifs, METH_NOARGS, NULL },
    {(char *) "ReceiveError", (PyCFunction) _wrap_PyNs3MacLow_ReceiveError, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MacLow__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3MacLow__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3MacLow__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MacLow__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MacLow__tp_clear(PyNs3MacLow *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MacLow *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MacLow__tp_traverse(PyNs3MacLow *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MacLow__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MacLow__tp_dealloc(PyNs3MacLow *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MacLow__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MacLow__tp_richcompare (PyNs3MacLow *PYBINDGEN_UNUSED(self), PyNs3MacLow *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MacLow_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MacLow_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MacLow",            /* tp_name */
    sizeof(PyNs3MacLow),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MacLow__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MacLow__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MacLow__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MacLow__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MacLow_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MacLow, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MacLow__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MgtBeaconHeader__tp_init__0(PyNs3MgtBeaconHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtBeaconHeader();
    return 0;
}

static int
_wrap_PyNs3MgtBeaconHeader__tp_init__1(PyNs3MgtBeaconHeader *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MgtBeaconHeader *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MgtBeaconHeader_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MgtBeaconHeader(*((PyNs3MgtBeaconHeader *) arg0)->obj);
    return 0;
}

int _wrap_PyNs3MgtBeaconHeader__tp_init(PyNs3MgtBeaconHeader *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MgtBeaconHeader__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MgtBeaconHeader__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3MgtBeaconHeader__copy__(PyNs3MgtBeaconHeader *self)
{

    PyNs3MgtBeaconHeader *py_copy;
    py_copy = PyObject_GC_New(PyNs3MgtBeaconHeader, &PyNs3MgtBeaconHeader_Type);
    py_copy->obj = new ns3::MgtBeaconHeader(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MgtBeaconHeader_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MgtBeaconHeader__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MgtBeaconHeader__tp_clear(PyNs3MgtBeaconHeader *self)
{
    Py_CLEAR(self->inst_dict);
        ns3::MgtBeaconHeader *tmp = self->obj;
    self->obj = NULL;
    if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
        delete tmp;
    }
}


static int
PyNs3MgtBeaconHeader__tp_traverse(PyNs3MgtBeaconHeader *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MgtBeaconHeader__tp_dealloc(PyNs3MgtBeaconHeader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MgtBeaconHeader__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MgtBeaconHeader__tp_richcompare (PyNs3MgtBeaconHeader *PYBINDGEN_UNUSED(self), PyNs3MgtBeaconHeader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MgtBeaconHeader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MgtBeaconHeader_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MgtBeaconHeader",            /* tp_name */
    sizeof(PyNs3MgtBeaconHeader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MgtBeaconHeader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MgtBeaconHeader__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MgtBeaconHeader__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MgtBeaconHeader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MgtBeaconHeader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MgtBeaconHeader, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MgtBeaconHeader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3MinstrelWifiManager__tp_init__0(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MinstrelWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MinstrelWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MinstrelWifiManager(*((PyNs3MinstrelWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3MinstrelWifiManager__tp_init__1(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::MinstrelWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3MinstrelWifiManager__tp_init(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MinstrelWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MinstrelWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MinstrelWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MinstrelWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3MinstrelWifiManager_SetupPhy(PyNs3MinstrelWifiManager *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetupPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3MinstrelWifiManager__copy__(PyNs3MinstrelWifiManager *self)
{

    PyNs3MinstrelWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3MinstrelWifiManager, &PyNs3MinstrelWifiManager_Type);
    py_copy->obj = new ns3::MinstrelWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3MinstrelWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MinstrelWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetupPhy", (PyCFunction) _wrap_PyNs3MinstrelWifiManager_SetupPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3MinstrelWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MinstrelWifiManager__tp_clear(PyNs3MinstrelWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MinstrelWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MinstrelWifiManager__tp_traverse(PyNs3MinstrelWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3MinstrelWifiManager__tp_dealloc(PyNs3MinstrelWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MinstrelWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MinstrelWifiManager__tp_richcompare (PyNs3MinstrelWifiManager *PYBINDGEN_UNUSED(self), PyNs3MinstrelWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MinstrelWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MinstrelWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MinstrelWifiManager",            /* tp_name */
    sizeof(PyNs3MinstrelWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MinstrelWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MinstrelWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MinstrelWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MinstrelWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MinstrelWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MinstrelWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MinstrelWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3MsduAggregator__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3MsduAggregator *self)
{
    PyObject *py_retval;
    PyNs3MsduAggregator__PythonHelper *helper = dynamic_cast< PyNs3MsduAggregator__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MsduAggregator__PythonHelper::_wrap_NotifyNewAggregate(PyNs3MsduAggregator *self)
{
    PyObject *py_retval;
    PyNs3MsduAggregator__PythonHelper *helper = dynamic_cast< PyNs3MsduAggregator__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MsduAggregator__PythonHelper::_wrap_DoStart(PyNs3MsduAggregator *self)
{
    PyObject *py_retval;
    PyNs3MsduAggregator__PythonHelper *helper = dynamic_cast< PyNs3MsduAggregator__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3MsduAggregator__PythonHelper::_wrap_DoDispose(PyNs3MsduAggregator *self)
{
    PyObject *py_retval;
    PyNs3MsduAggregator__PythonHelper *helper = dynamic_cast< PyNs3MsduAggregator__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

bool
PyNs3MsduAggregator__PythonHelper::Aggregate(ns3::Ptr< ns3::Packet const > packet, ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::Mac48Address src, ns3::Mac48Address dest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::MsduAggregator *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Packet *py_Packet2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Aggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3MsduAggregator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3MsduAggregator* >(m_pyself)->obj = (ns3::MsduAggregator*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Packet2 = NULL;
    } else {
        py_Packet2 = (PyNs3Packet *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Packet2);
    }
    
    if (py_Packet2 == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))), &PyNs3Packet_Type);
        py_Packet2 = PyObject_New(PyNs3Packet, wrapper_type2);
        py_Packet2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket))->Ref();
        py_Packet2->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (aggregatedPacket));
        PyNs3Empty_wrapper_registry[(void *) py_Packet2->obj] = (PyObject *) py_Packet2;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(src);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(dest);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Aggregate", (char *) "NNNN", py_Packet, py_Packet2, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3MsduAggregator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3MsduAggregator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3MsduAggregator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3MsduAggregator__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3MsduAggregator__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MsduAggregator__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MsduAggregator__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3MsduAggregator__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3MsduAggregator__tp_init__0(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MsduAggregator_Type)
    {
        self->obj = new PyNs3MsduAggregator__PythonHelper();
        self->obj->Ref ();
        ((PyNs3MsduAggregator__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'MsduAggregator' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3MsduAggregator__tp_init__1(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3MsduAggregator *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MsduAggregator_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3MsduAggregator_Type)
    {
        self->obj = new PyNs3MsduAggregator__PythonHelper(*((PyNs3MsduAggregator *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3MsduAggregator__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'MsduAggregator' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3MsduAggregator__tp_init(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3MsduAggregator__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3MsduAggregator__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3MsduAggregator_Aggregate(PyNs3MsduAggregator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Packet *aggregatedPacket;
    ns3::Packet *aggregatedPacket_ptr;
    PyNs3Mac48Address *src;
    PyNs3Mac48Address *dest;
    const char *keywords[] = {"packet", "aggregatedPacket", "src", "dest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Packet_Type, &aggregatedPacket, &PyNs3Mac48Address_Type, &src, &PyNs3Mac48Address_Type, &dest)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    aggregatedPacket_ptr = (aggregatedPacket ? aggregatedPacket->obj : NULL);
    retval = self->obj->Aggregate(ns3::Ptr< ns3::Packet  > (packet_ptr), ns3::Ptr< ns3::Packet  > (aggregatedPacket_ptr), *((PyNs3Mac48Address *) src)->obj, *((PyNs3Mac48Address *) dest)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3MsduAggregator_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::MsduAggregator::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}

static PyMethodDef PyNs3MsduAggregator_methods[] = {
    {(char *) "Aggregate", (PyCFunction) _wrap_PyNs3MsduAggregator_Aggregate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3MsduAggregator_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3MsduAggregator__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3MsduAggregator__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3MsduAggregator__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3MsduAggregator__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3MsduAggregator__tp_clear(PyNs3MsduAggregator *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::MsduAggregator *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3MsduAggregator__tp_traverse(PyNs3MsduAggregator *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3MsduAggregator__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3MsduAggregator__tp_dealloc(PyNs3MsduAggregator *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3MsduAggregator__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3MsduAggregator__tp_richcompare (PyNs3MsduAggregator *PYBINDGEN_UNUSED(self), PyNs3MsduAggregator *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3MsduAggregator_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3MsduAggregator_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.MsduAggregator",            /* tp_name */
    sizeof(PyNs3MsduAggregator),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3MsduAggregator__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3MsduAggregator__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3MsduAggregator__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3MsduAggregator__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3MsduAggregator_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3MsduAggregator, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3MsduAggregator__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NistErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NistErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3NistErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3NistErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NistErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NistErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3NistErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3NistErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NistErrorRateModel__PythonHelper::_wrap_DoStart(PyNs3NistErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3NistErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3NistErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NistErrorRateModel__PythonHelper::_wrap_DoDispose(PyNs3NistErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3NistErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3NistErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3NistErrorRateModel__PythonHelper::GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NistErrorRateModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *py_WifiMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChunkSuccessRate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NistErrorRateModel::GetChunkSuccessRate(mode, snr, nbits);
    }
    self_obj_before = reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj = const_cast< ns3::NistErrorRateModel* >((const ns3::NistErrorRateModel*) this);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(mode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChunkSuccessRate", (char *) "NdN", py_WifiMode, snr, PyLong_FromUnsignedLong(nbits));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NistErrorRateModel::GetChunkSuccessRate(mode, snr, nbits);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NistErrorRateModel::GetChunkSuccessRate(mode, snr, nbits);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NistErrorRateModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NistErrorRateModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NistErrorRateModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NistErrorRateModel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NistErrorRateModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NistErrorRateModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3NistErrorRateModel__tp_init__0(PyNs3NistErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NistErrorRateModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NistErrorRateModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3NistErrorRateModel_Type)
    {
        self->obj = new PyNs3NistErrorRateModel__PythonHelper(*((PyNs3NistErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3NistErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::NistErrorRateModel(*((PyNs3NistErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3NistErrorRateModel__tp_init__1(PyNs3NistErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3NistErrorRateModel_Type)
    {
        self->obj = new PyNs3NistErrorRateModel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3NistErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::NistErrorRateModel();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3NistErrorRateModel__tp_init(PyNs3NistErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NistErrorRateModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NistErrorRateModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NistErrorRateModel_GetChunkSuccessRate(PyNs3NistErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *mode;
    double snr;
    unsigned int nbits;
    PyNs3NistErrorRateModel__PythonHelper *helper_class = dynamic_cast<PyNs3NistErrorRateModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"mode", "snr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dI", (char **) keywords, &PyNs3WifiMode_Type, &mode, &snr, &nbits)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, snr, nbits)) : (self->obj->ns3::NistErrorRateModel::GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, snr, nbits));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NistErrorRateModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::NistErrorRateModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3NistErrorRateModel__copy__(PyNs3NistErrorRateModel *self)
{

    PyNs3NistErrorRateModel *py_copy;
    py_copy = PyObject_GC_New(PyNs3NistErrorRateModel, &PyNs3NistErrorRateModel_Type);
    py_copy->obj = new ns3::NistErrorRateModel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NistErrorRateModel_methods[] = {
    {(char *) "GetChunkSuccessRate", (PyCFunction) _wrap_PyNs3NistErrorRateModel_GetChunkSuccessRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NistErrorRateModel_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NistErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NistErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3NistErrorRateModel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NistErrorRateModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NistErrorRateModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NistErrorRateModel__tp_clear(PyNs3NistErrorRateModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::NistErrorRateModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NistErrorRateModel__tp_traverse(PyNs3NistErrorRateModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3NistErrorRateModel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NistErrorRateModel__tp_dealloc(PyNs3NistErrorRateModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NistErrorRateModel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NistErrorRateModel__tp_richcompare (PyNs3NistErrorRateModel *PYBINDGEN_UNUSED(self), PyNs3NistErrorRateModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NistErrorRateModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NistErrorRateModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.NistErrorRateModel",            /* tp_name */
    sizeof(PyNs3NistErrorRateModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NistErrorRateModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NistErrorRateModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NistErrorRateModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NistErrorRateModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NistErrorRateModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NistErrorRateModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NistErrorRateModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NqapWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper = dynamic_cast< PyNs3NqapWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NqapWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper = dynamic_cast< PyNs3NqapWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3NqapWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetSlot(slotTime);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetSifs(sifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetEifsNoDifs(eifsNoDifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetAckTimeout(ackTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetCtsTimeout(ctsTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetPifs(pifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3NqapWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqapWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqapWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqapWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqapWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqapWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqapWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetWifiPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiPhy = NULL;
    } else {
        py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiPhy);
    }
    
    if (py_WifiPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
        py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
        py_WifiPhy->inst_dict = NULL;
        py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetWifiRemoteStationManager(stationManager);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::Enqueue(packet, to, from);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::Enqueue(packet, to);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NqapWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}




ns3::Mac48Address
PyNs3NqapWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ssid
PyNs3NqapWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqapWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetAddress(address);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqapWifiMac::SetSsid(ssid);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Mac48Address
PyNs3NqapWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = const_cast< ns3::NqapWifiMac* >((const ns3::NqapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqapWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqapWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqapWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = (ns3::NqapWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3NqapWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = const_cast< ns3::WifiMac* >((const ns3::WifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqapWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3NqapWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = const_cast< ns3::WifiMac* >((const ns3::WifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NqapWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqapWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqapWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3NqapWifiMac__tp_init(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (self->ob_type != &PyNs3NqapWifiMac_Type)
    {
        self->obj = new PyNs3NqapWifiMac__PythonHelper();
        self->obj->Ref ();
        ((PyNs3NqapWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::NqapWifiMac();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetForwardUpCallback(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl8> upCallback_cb_impl;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl8> (upCallback);
    (helper_class == NULL)? (self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl))) : (self->obj->ns3::NqapWifiMac::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_StartBeaconing(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    
    self->obj->StartBeaconing();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::NqapWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetWifiPhy(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr))) : (self->obj->ns3::NqapWifiMac::SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetBssid(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetBssid()) : (self->obj->ns3::NqapWifiMac::GetBssid());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SupportsSendFrom(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::NqapWifiMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetPifs(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *pifs;
    ns3::Time pifs2;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &pifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Time_Type)) {
        pifs2 = *((PyNs3Time *) pifs)->obj;
    } else if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Scalar_Type)) {
        pifs2 = *((PyNs3Scalar *) pifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", pifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetPifs(pifs2)) : (self->obj->ns3::NqapWifiMac::SetPifs(pifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetEifsNoDifs(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetEifsNoDifs()) : (self->obj->ns3::NqapWifiMac::GetEifsNoDifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetPifs(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetPifs()) : (self->obj->ns3::NqapWifiMac::GetPifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetSlot(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSlot(slotTime2)) : (self->obj->ns3::NqapWifiMac::SetSlot(slotTime2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetSsid(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj)) : (self->obj->ns3::NqapWifiMac::SetSsid(*((PyNs3Ssid *) ssid)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetSlot(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSlot()) : (self->obj->ns3::NqapWifiMac::GetSlot());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetBeaconInterval(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *interval;
    ns3::Time interval2;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &interval)) {
        return NULL;
    }
    if (PyObject_IsInstance(interval, (PyObject*) &PyNs3Time_Type)) {
        interval2 = *((PyNs3Time *) interval)->obj;
    } else if (PyObject_IsInstance(interval, (PyObject*) &PyNs3Scalar_Type)) {
        interval2 = *((PyNs3Scalar *) interval)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", interval->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetBeaconInterval(interval2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NqapWifiMac_Enqueue__0(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::NqapWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NqapWifiMac_Enqueue__1(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::NqapWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NqapWifiMac_Enqueue(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NqapWifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NqapWifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetCtsTimeout(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ctsTimeout;
    ns3::Time ctsTimeout2;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ctsTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Time_Type)) {
        ctsTimeout2 = *((PyNs3Time *) ctsTimeout)->obj;
    } else if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ctsTimeout2 = *((PyNs3Scalar *) ctsTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ctsTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCtsTimeout(ctsTimeout2)) : (self->obj->ns3::NqapWifiMac::SetCtsTimeout(ctsTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetCtsTimeout(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCtsTimeout()) : (self->obj->ns3::NqapWifiMac::GetCtsTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetAddress(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::NqapWifiMac::GetAddress());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetLinkDownCallback(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl1> linkDown_cb_impl;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl1> (linkDown);
    (helper_class == NULL)? (self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl))) : (self->obj->ns3::NqapWifiMac::SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetSifs(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSifs(sifs2)) : (self->obj->ns3::NqapWifiMac::SetSifs(sifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetAddress(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::NqapWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetWifiRemoteStationManager(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *stationManager;
    ns3::WifiRemoteStationManager *stationManager_ptr;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"stationManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &stationManager)) {
        return NULL;
    }
    stationManager_ptr = (stationManager ? stationManager->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr))) : (self->obj->ns3::NqapWifiMac::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetAckTimeout(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ackTimeout;
    ns3::Time ackTimeout2;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ackTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Time_Type)) {
        ackTimeout2 = *((PyNs3Time *) ackTimeout)->obj;
    } else if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ackTimeout2 = *((PyNs3Scalar *) ackTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ackTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAckTimeout(ackTimeout2)) : (self->obj->ns3::NqapWifiMac::SetAckTimeout(ackTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetSsid(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = (helper_class == NULL)? (self->obj->GetSsid()) : (self->obj->ns3::NqapWifiMac::GetSsid());
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetEifsNoDifs(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *eifsNoDifs;
    ns3::Time eifsNoDifs2;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &eifsNoDifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Time_Type)) {
        eifsNoDifs2 = *((PyNs3Time *) eifsNoDifs)->obj;
    } else if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Scalar_Type)) {
        eifsNoDifs2 = *((PyNs3Scalar *) eifsNoDifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", eifsNoDifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetEifsNoDifs(eifsNoDifs2)) : (self->obj->ns3::NqapWifiMac::SetEifsNoDifs(eifsNoDifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetBeaconInterval(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBeaconInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetAckTimeout(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetAckTimeout()) : (self->obj->ns3::NqapWifiMac::GetAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_GetSifs(PyNs3NqapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSifs()) : (self->obj->ns3::NqapWifiMac::GetSifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqapWifiMac_SetLinkUpCallback(PyNs3NqapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl1> linkUp_cb_impl;
    PyNs3NqapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl1> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::NqapWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3NqapWifiMac_methods[] = {
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "StartBeaconing", (PyCFunction) _wrap_PyNs3NqapWifiMac_StartBeaconing, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetWifiPhy", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetWifiPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetBssid, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3NqapWifiMac_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetEifsNoDifs, METH_NOARGS, NULL },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetPifs, METH_NOARGS, NULL },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetSlot, METH_NOARGS, NULL },
    {(char *) "SetBeaconInterval", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetBeaconInterval, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3NqapWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetCtsTimeout, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetSsid, METH_NOARGS, NULL },
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBeaconInterval", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetBeaconInterval, METH_NOARGS, NULL },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3NqapWifiMac_GetSifs, METH_NOARGS, NULL },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3NqapWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NqapWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NqapWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NqapWifiMac__tp_clear(PyNs3NqapWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::NqapWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NqapWifiMac__tp_traverse(PyNs3NqapWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3NqapWifiMac__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NqapWifiMac__tp_dealloc(PyNs3NqapWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NqapWifiMac__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NqapWifiMac__tp_richcompare (PyNs3NqapWifiMac *PYBINDGEN_UNUSED(self), PyNs3NqapWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NqapWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NqapWifiMac_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.NqapWifiMac",            /* tp_name */
    sizeof(PyNs3NqapWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NqapWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NqapWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NqapWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NqapWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NqapWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NqapWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NqapWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NqstaWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3NqstaWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NqstaWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3NqstaWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetSlot(slotTime);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetSifs(sifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetEifsNoDifs(eifsNoDifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetAckTimeout(ackTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetCtsTimeout(ctsTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetPifs(pifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3NqstaWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqstaWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqstaWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqstaWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqstaWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3NqstaWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetWifiPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiPhy = NULL;
    } else {
        py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiPhy);
    }
    
    if (py_WifiPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
        py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
        py_WifiPhy->inst_dict = NULL;
        py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetWifiRemoteStationManager(stationManager);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::Enqueue(packet, to, from);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::Enqueue(packet, to);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NqstaWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}




ns3::Mac48Address
PyNs3NqstaWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ssid
PyNs3NqstaWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetAddress(address);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::NqstaWifiMac::SetSsid(ssid);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Mac48Address
PyNs3NqstaWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = const_cast< ns3::NqstaWifiMac* >((const ns3::NqstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::NqstaWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqstaWifiMac__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::NqstaWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = (ns3::NqstaWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NqstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3NqstaWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = const_cast< ns3::WifiMac* >((const ns3::WifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = (ns3::WifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3NqstaWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = const_cast< ns3::WifiMac* >((const ns3::WifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NqstaWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NqstaWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NqstaWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3NqstaWifiMac__tp_init(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (self->ob_type != &PyNs3NqstaWifiMac_Type)
    {
        self->obj = new PyNs3NqstaWifiMac__PythonHelper();
        self->obj->Ref ();
        ((PyNs3NqstaWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::NqstaWifiMac();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetForwardUpCallback(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl8> upCallback_cb_impl;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl8> (upCallback);
    (helper_class == NULL)? (self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl))) : (self->obj->ns3::NqstaWifiMac::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::NqstaWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetWifiPhy(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr))) : (self->obj->ns3::NqstaWifiMac::SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetBssid(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetBssid()) : (self->obj->ns3::NqstaWifiMac::GetBssid());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SupportsSendFrom(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::NqstaWifiMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetPifs(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *pifs;
    ns3::Time pifs2;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &pifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Time_Type)) {
        pifs2 = *((PyNs3Time *) pifs)->obj;
    } else if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Scalar_Type)) {
        pifs2 = *((PyNs3Scalar *) pifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", pifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetPifs(pifs2)) : (self->obj->ns3::NqstaWifiMac::SetPifs(pifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetEifsNoDifs(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetEifsNoDifs()) : (self->obj->ns3::NqstaWifiMac::GetEifsNoDifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetPifs(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetPifs()) : (self->obj->ns3::NqstaWifiMac::GetPifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetSlot(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSlot(slotTime2)) : (self->obj->ns3::NqstaWifiMac::SetSlot(slotTime2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_StartActiveAssociation(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    
    self->obj->StartActiveAssociation();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetSsid(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj)) : (self->obj->ns3::NqstaWifiMac::SetSsid(*((PyNs3Ssid *) ssid)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetSlot(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSlot()) : (self->obj->ns3::NqstaWifiMac::GetSlot());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetAssocRequestTimeout(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *timeout;
    ns3::Time timeout2;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(timeout, (PyObject*) &PyNs3Time_Type)) {
        timeout2 = *((PyNs3Time *) timeout)->obj;
    } else if (PyObject_IsInstance(timeout, (PyObject*) &PyNs3Scalar_Type)) {
        timeout2 = *((PyNs3Scalar *) timeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", timeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetAssocRequestTimeout(timeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NqstaWifiMac_Enqueue__0(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::NqstaWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NqstaWifiMac_Enqueue__1(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::NqstaWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NqstaWifiMac_Enqueue(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NqstaWifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NqstaWifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetProbeRequestTimeout(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *timeout;
    ns3::Time timeout2;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(timeout, (PyObject*) &PyNs3Time_Type)) {
        timeout2 = *((PyNs3Time *) timeout)->obj;
    } else if (PyObject_IsInstance(timeout, (PyObject*) &PyNs3Scalar_Type)) {
        timeout2 = *((PyNs3Scalar *) timeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", timeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetProbeRequestTimeout(timeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetCtsTimeout(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ctsTimeout;
    ns3::Time ctsTimeout2;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ctsTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Time_Type)) {
        ctsTimeout2 = *((PyNs3Time *) ctsTimeout)->obj;
    } else if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ctsTimeout2 = *((PyNs3Scalar *) ctsTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ctsTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCtsTimeout(ctsTimeout2)) : (self->obj->ns3::NqstaWifiMac::SetCtsTimeout(ctsTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetCtsTimeout(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCtsTimeout()) : (self->obj->ns3::NqstaWifiMac::GetCtsTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetAddress(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::NqstaWifiMac::GetAddress());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetLinkDownCallback(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl1> linkDown_cb_impl;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl1> (linkDown);
    (helper_class == NULL)? (self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl))) : (self->obj->ns3::NqstaWifiMac::SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetSifs(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSifs(sifs2)) : (self->obj->ns3::NqstaWifiMac::SetSifs(sifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetAddress(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::NqstaWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetWifiRemoteStationManager(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *stationManager;
    ns3::WifiRemoteStationManager *stationManager_ptr;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"stationManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &stationManager)) {
        return NULL;
    }
    stationManager_ptr = (stationManager ? stationManager->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr))) : (self->obj->ns3::NqstaWifiMac::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetAckTimeout(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ackTimeout;
    ns3::Time ackTimeout2;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ackTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Time_Type)) {
        ackTimeout2 = *((PyNs3Time *) ackTimeout)->obj;
    } else if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ackTimeout2 = *((PyNs3Scalar *) ackTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ackTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAckTimeout(ackTimeout2)) : (self->obj->ns3::NqstaWifiMac::SetAckTimeout(ackTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetSsid(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = (helper_class == NULL)? (self->obj->GetSsid()) : (self->obj->ns3::NqstaWifiMac::GetSsid());
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetEifsNoDifs(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *eifsNoDifs;
    ns3::Time eifsNoDifs2;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &eifsNoDifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Time_Type)) {
        eifsNoDifs2 = *((PyNs3Time *) eifsNoDifs)->obj;
    } else if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Scalar_Type)) {
        eifsNoDifs2 = *((PyNs3Scalar *) eifsNoDifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", eifsNoDifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetEifsNoDifs(eifsNoDifs2)) : (self->obj->ns3::NqstaWifiMac::SetEifsNoDifs(eifsNoDifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetAckTimeout(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetAckTimeout()) : (self->obj->ns3::NqstaWifiMac::GetAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetMaxMissedBeacons(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int missed;
    const char *keywords[] = {"missed", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &missed)) {
        return NULL;
    }
    self->obj->SetMaxMissedBeacons(missed);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_GetSifs(PyNs3NqstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSifs()) : (self->obj->ns3::NqstaWifiMac::GetSifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NqstaWifiMac_SetLinkUpCallback(PyNs3NqstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl1> linkUp_cb_impl;
    PyNs3NqstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3NqstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl1> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::NqstaWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3NqstaWifiMac_methods[] = {
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetWifiPhy", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetWifiPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetBssid, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetEifsNoDifs, METH_NOARGS, NULL },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetPifs, METH_NOARGS, NULL },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "StartActiveAssociation", (PyCFunction) _wrap_PyNs3NqstaWifiMac_StartActiveAssociation, METH_NOARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetSlot, METH_NOARGS, NULL },
    {(char *) "SetAssocRequestTimeout", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetAssocRequestTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3NqstaWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetProbeRequestTimeout", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetProbeRequestTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetCtsTimeout, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetSsid, METH_NOARGS, NULL },
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetAckTimeout, METH_NOARGS, NULL },
    {(char *) "SetMaxMissedBeacons", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetMaxMissedBeacons, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3NqstaWifiMac_GetSifs, METH_NOARGS, NULL },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3NqstaWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NqstaWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NqstaWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NqstaWifiMac__tp_clear(PyNs3NqstaWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::NqstaWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NqstaWifiMac__tp_traverse(PyNs3NqstaWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3NqstaWifiMac__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NqstaWifiMac__tp_dealloc(PyNs3NqstaWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NqstaWifiMac__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NqstaWifiMac__tp_richcompare (PyNs3NqstaWifiMac *PYBINDGEN_UNUSED(self), PyNs3NqstaWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NqstaWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NqstaWifiMac_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.NqstaWifiMac",            /* tp_name */
    sizeof(PyNs3NqstaWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NqstaWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NqstaWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NqstaWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NqstaWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NqstaWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NqstaWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NqstaWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3OnoeWifiManager__tp_init__0(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3OnoeWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3OnoeWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OnoeWifiManager(*((PyNs3OnoeWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3OnoeWifiManager__tp_init__1(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::OnoeWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3OnoeWifiManager__tp_init(PyNs3OnoeWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3OnoeWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3OnoeWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3OnoeWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::OnoeWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3OnoeWifiManager__copy__(PyNs3OnoeWifiManager *self)
{

    PyNs3OnoeWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3OnoeWifiManager, &PyNs3OnoeWifiManager_Type);
    py_copy->obj = new ns3::OnoeWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3OnoeWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3OnoeWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3OnoeWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3OnoeWifiManager__tp_clear(PyNs3OnoeWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::OnoeWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3OnoeWifiManager__tp_traverse(PyNs3OnoeWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3OnoeWifiManager__tp_dealloc(PyNs3OnoeWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3OnoeWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3OnoeWifiManager__tp_richcompare (PyNs3OnoeWifiManager *PYBINDGEN_UNUSED(self), PyNs3OnoeWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3OnoeWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3OnoeWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.OnoeWifiManager",            /* tp_name */
    sizeof(PyNs3OnoeWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3OnoeWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3OnoeWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3OnoeWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3OnoeWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3OnoeWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3OnoeWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3OnoeWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3QadhocWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3QadhocWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3QadhocWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper = dynamic_cast< PyNs3QadhocWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetSlot(slotTime);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetSifs(sifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetEifsNoDifs(eifsNoDifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetAckTimeout(ackTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetCtsTimeout(ctsTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetPifs(pifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3QadhocWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QadhocWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QadhocWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QadhocWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QadhocWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QadhocWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetWifiPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiPhy = NULL;
    } else {
        py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiPhy);
    }
    
    if (py_WifiPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
        py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
        py_WifiPhy->inst_dict = NULL;
        py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetWifiRemoteStationManager(stationManager);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::Enqueue(packet, to, from);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::Enqueue(packet, to);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3QadhocWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}




ns3::Mac48Address
PyNs3QadhocWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ssid
PyNs3QadhocWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetAddress(address);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetSsid(ssid);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Mac48Address
PyNs3QadhocWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QadhocWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3QadhocWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QadhocWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = const_cast< ns3::QadhocWifiMac* >((const ns3::QadhocWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QadhocWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QadhocWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QadhocWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = (ns3::QadhocWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QadhocWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3QadhocWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QadhocWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QadhocWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3QadhocWifiMac__tp_init(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (self->ob_type != &PyNs3QadhocWifiMac_Type)
    {
        self->obj = new PyNs3QadhocWifiMac__PythonHelper();
        self->obj->Ref ();
        ((PyNs3QadhocWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::QadhocWifiMac();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetForwardUpCallback(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl8> upCallback_cb_impl;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl8> (upCallback);
    (helper_class == NULL)? (self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl))) : (self->obj->ns3::QadhocWifiMac::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::QadhocWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetWifiPhy(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr))) : (self->obj->ns3::QadhocWifiMac::SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetBssid(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetBssid()) : (self->obj->ns3::QadhocWifiMac::GetBssid());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SupportsSendFrom(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::QadhocWifiMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetPifs(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *pifs;
    ns3::Time pifs2;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &pifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Time_Type)) {
        pifs2 = *((PyNs3Time *) pifs)->obj;
    } else if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Scalar_Type)) {
        pifs2 = *((PyNs3Scalar *) pifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", pifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetPifs(pifs2)) : (self->obj->ns3::QadhocWifiMac::SetPifs(pifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetEifsNoDifs(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetEifsNoDifs()) : (self->obj->ns3::QadhocWifiMac::GetEifsNoDifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetPifs(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetPifs()) : (self->obj->ns3::QadhocWifiMac::GetPifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetSlot(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSlot(slotTime2)) : (self->obj->ns3::QadhocWifiMac::SetSlot(slotTime2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetSsid(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj)) : (self->obj->ns3::QadhocWifiMac::SetSsid(*((PyNs3Ssid *) ssid)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetSlot(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSlot()) : (self->obj->ns3::QadhocWifiMac::GetSlot());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}



PyObject *
_wrap_PyNs3QadhocWifiMac_Enqueue__0(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::QadhocWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3QadhocWifiMac_Enqueue__1(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::QadhocWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3QadhocWifiMac_Enqueue(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3QadhocWifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3QadhocWifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetCompressedBlockAckTimeout(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCompressedBlockAckTimeout(blockAckTimeout2)) : (self->obj->ns3::QadhocWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetBasicBlockAckTimeout(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetBasicBlockAckTimeout(blockAckTimeout2)) : (self->obj->ns3::QadhocWifiMac::SetBasicBlockAckTimeout(blockAckTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetCtsTimeout(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ctsTimeout;
    ns3::Time ctsTimeout2;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ctsTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Time_Type)) {
        ctsTimeout2 = *((PyNs3Time *) ctsTimeout)->obj;
    } else if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ctsTimeout2 = *((PyNs3Scalar *) ctsTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ctsTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCtsTimeout(ctsTimeout2)) : (self->obj->ns3::QadhocWifiMac::SetCtsTimeout(ctsTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetCtsTimeout(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCtsTimeout()) : (self->obj->ns3::QadhocWifiMac::GetCtsTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetAddress(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::QadhocWifiMac::GetAddress());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetLinkDownCallback(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl1> linkDown_cb_impl;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl1> (linkDown);
    (helper_class == NULL)? (self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl))) : (self->obj->ns3::QadhocWifiMac::SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetSifs(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSifs(sifs2)) : (self->obj->ns3::QadhocWifiMac::SetSifs(sifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetAddress(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::QadhocWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetWifiRemoteStationManager(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *stationManager;
    ns3::WifiRemoteStationManager *stationManager_ptr;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"stationManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &stationManager)) {
        return NULL;
    }
    stationManager_ptr = (stationManager ? stationManager->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr))) : (self->obj->ns3::QadhocWifiMac::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetCompressedBlockAckTimeout(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCompressedBlockAckTimeout()) : (self->obj->ns3::QadhocWifiMac::GetCompressedBlockAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetBasicBlockAckTimeout(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetBasicBlockAckTimeout()) : (self->obj->ns3::QadhocWifiMac::GetBasicBlockAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetAckTimeout(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ackTimeout;
    ns3::Time ackTimeout2;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ackTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Time_Type)) {
        ackTimeout2 = *((PyNs3Time *) ackTimeout)->obj;
    } else if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ackTimeout2 = *((PyNs3Scalar *) ackTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ackTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAckTimeout(ackTimeout2)) : (self->obj->ns3::QadhocWifiMac::SetAckTimeout(ackTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetSsid(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = (helper_class == NULL)? (self->obj->GetSsid()) : (self->obj->ns3::QadhocWifiMac::GetSsid());
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetEifsNoDifs(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *eifsNoDifs;
    ns3::Time eifsNoDifs2;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &eifsNoDifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Time_Type)) {
        eifsNoDifs2 = *((PyNs3Time *) eifsNoDifs)->obj;
    } else if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Scalar_Type)) {
        eifsNoDifs2 = *((PyNs3Scalar *) eifsNoDifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", eifsNoDifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetEifsNoDifs(eifsNoDifs2)) : (self->obj->ns3::QadhocWifiMac::SetEifsNoDifs(eifsNoDifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetAckTimeout(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetAckTimeout()) : (self->obj->ns3::QadhocWifiMac::GetAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_GetSifs(PyNs3QadhocWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSifs()) : (self->obj->ns3::QadhocWifiMac::GetSifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QadhocWifiMac_SetLinkUpCallback(PyNs3QadhocWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl1> linkUp_cb_impl;
    PyNs3QadhocWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QadhocWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl1> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::QadhocWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3QadhocWifiMac_methods[] = {
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetWifiPhy", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetWifiPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetBssid, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetEifsNoDifs, METH_NOARGS, NULL },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetPifs, METH_NOARGS, NULL },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetSlot, METH_NOARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3QadhocWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetCompressedBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetBasicBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetCtsTimeout, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetCompressedBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetBasicBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetSsid, METH_NOARGS, NULL },
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3QadhocWifiMac_GetSifs, METH_NOARGS, NULL },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3QadhocWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3QadhocWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3QadhocWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3QadhocWifiMac__tp_clear(PyNs3QadhocWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::QadhocWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3QadhocWifiMac__tp_traverse(PyNs3QadhocWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3QadhocWifiMac__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3QadhocWifiMac__tp_dealloc(PyNs3QadhocWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3QadhocWifiMac__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3QadhocWifiMac__tp_richcompare (PyNs3QadhocWifiMac *PYBINDGEN_UNUSED(self), PyNs3QadhocWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3QadhocWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3QadhocWifiMac_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.QadhocWifiMac",            /* tp_name */
    sizeof(PyNs3QadhocWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3QadhocWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3QadhocWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3QadhocWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3QadhocWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3QadhocWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3QadhocWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3QadhocWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3QapWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper = dynamic_cast< PyNs3QapWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3QapWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper = dynamic_cast< PyNs3QapWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3QapWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetSlot(slotTime);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetSifs(sifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetEifsNoDifs(eifsNoDifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetAckTimeout(ackTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetCtsTimeout(ctsTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetPifs(pifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3QapWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QapWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QapWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QapWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QapWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QapWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QapWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetWifiPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiPhy = NULL;
    } else {
        py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiPhy);
    }
    
    if (py_WifiPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
        py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
        py_WifiPhy->inst_dict = NULL;
        py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetWifiRemoteStationManager(stationManager);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::Enqueue(packet, to, from);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::Enqueue(packet, to);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3QapWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}




ns3::Mac48Address
PyNs3QapWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ssid
PyNs3QapWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QapWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetAddress(address);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetSsid(ssid);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Mac48Address
PyNs3QapWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QapWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QapWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3QapWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QapWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = const_cast< ns3::QapWifiMac* >((const ns3::QapWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QapWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QapWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QapWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = (ns3::QapWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QapWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3QapWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QapWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QapWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3QapWifiMac__tp_init(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (self->ob_type != &PyNs3QapWifiMac_Type)
    {
        self->obj = new PyNs3QapWifiMac__PythonHelper();
        self->obj->Ref ();
        ((PyNs3QapWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::QapWifiMac();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetForwardUpCallback(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl8> upCallback_cb_impl;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl8> (upCallback);
    (helper_class == NULL)? (self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl))) : (self->obj->ns3::QapWifiMac::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_StartBeaconing(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    
    self->obj->StartBeaconing();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::QapWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetWifiPhy(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr))) : (self->obj->ns3::QapWifiMac::SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetBssid(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetBssid()) : (self->obj->ns3::QapWifiMac::GetBssid());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SupportsSendFrom(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::QapWifiMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetPifs(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *pifs;
    ns3::Time pifs2;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &pifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Time_Type)) {
        pifs2 = *((PyNs3Time *) pifs)->obj;
    } else if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Scalar_Type)) {
        pifs2 = *((PyNs3Scalar *) pifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", pifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetPifs(pifs2)) : (self->obj->ns3::QapWifiMac::SetPifs(pifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetEifsNoDifs(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetEifsNoDifs()) : (self->obj->ns3::QapWifiMac::GetEifsNoDifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetPifs(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetPifs()) : (self->obj->ns3::QapWifiMac::GetPifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetSlot(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSlot(slotTime2)) : (self->obj->ns3::QapWifiMac::SetSlot(slotTime2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetSsid(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj)) : (self->obj->ns3::QapWifiMac::SetSsid(*((PyNs3Ssid *) ssid)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetSlot(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSlot()) : (self->obj->ns3::QapWifiMac::GetSlot());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetBeaconInterval(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *interval;
    ns3::Time interval2;
    const char *keywords[] = {"interval", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &interval)) {
        return NULL;
    }
    if (PyObject_IsInstance(interval, (PyObject*) &PyNs3Time_Type)) {
        interval2 = *((PyNs3Time *) interval)->obj;
    } else if (PyObject_IsInstance(interval, (PyObject*) &PyNs3Scalar_Type)) {
        interval2 = *((PyNs3Scalar *) interval)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", interval->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetBeaconInterval(interval2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3QapWifiMac_Enqueue__0(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::QapWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3QapWifiMac_Enqueue__1(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::QapWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3QapWifiMac_Enqueue(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3QapWifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3QapWifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetCompressedBlockAckTimeout(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCompressedBlockAckTimeout(blockAckTimeout2)) : (self->obj->ns3::QapWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetBasicBlockAckTimeout(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetBasicBlockAckTimeout(blockAckTimeout2)) : (self->obj->ns3::QapWifiMac::SetBasicBlockAckTimeout(blockAckTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetCtsTimeout(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ctsTimeout;
    ns3::Time ctsTimeout2;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ctsTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Time_Type)) {
        ctsTimeout2 = *((PyNs3Time *) ctsTimeout)->obj;
    } else if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ctsTimeout2 = *((PyNs3Scalar *) ctsTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ctsTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCtsTimeout(ctsTimeout2)) : (self->obj->ns3::QapWifiMac::SetCtsTimeout(ctsTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetCtsTimeout(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCtsTimeout()) : (self->obj->ns3::QapWifiMac::GetCtsTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetAddress(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::QapWifiMac::GetAddress());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetLinkDownCallback(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl1> linkDown_cb_impl;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl1> (linkDown);
    (helper_class == NULL)? (self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl))) : (self->obj->ns3::QapWifiMac::SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetSifs(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSifs(sifs2)) : (self->obj->ns3::QapWifiMac::SetSifs(sifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetAddress(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::QapWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetWifiRemoteStationManager(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *stationManager;
    ns3::WifiRemoteStationManager *stationManager_ptr;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"stationManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &stationManager)) {
        return NULL;
    }
    stationManager_ptr = (stationManager ? stationManager->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr))) : (self->obj->ns3::QapWifiMac::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetCompressedBlockAckTimeout(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCompressedBlockAckTimeout()) : (self->obj->ns3::QapWifiMac::GetCompressedBlockAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetBasicBlockAckTimeout(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetBasicBlockAckTimeout()) : (self->obj->ns3::QapWifiMac::GetBasicBlockAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetAckTimeout(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ackTimeout;
    ns3::Time ackTimeout2;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ackTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Time_Type)) {
        ackTimeout2 = *((PyNs3Time *) ackTimeout)->obj;
    } else if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ackTimeout2 = *((PyNs3Scalar *) ackTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ackTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAckTimeout(ackTimeout2)) : (self->obj->ns3::QapWifiMac::SetAckTimeout(ackTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetSsid(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = (helper_class == NULL)? (self->obj->GetSsid()) : (self->obj->ns3::QapWifiMac::GetSsid());
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetEifsNoDifs(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *eifsNoDifs;
    ns3::Time eifsNoDifs2;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &eifsNoDifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Time_Type)) {
        eifsNoDifs2 = *((PyNs3Time *) eifsNoDifs)->obj;
    } else if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Scalar_Type)) {
        eifsNoDifs2 = *((PyNs3Scalar *) eifsNoDifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", eifsNoDifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetEifsNoDifs(eifsNoDifs2)) : (self->obj->ns3::QapWifiMac::SetEifsNoDifs(eifsNoDifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetBeaconInterval(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetBeaconInterval();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetAckTimeout(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetAckTimeout()) : (self->obj->ns3::QapWifiMac::GetAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_GetSifs(PyNs3QapWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSifs()) : (self->obj->ns3::QapWifiMac::GetSifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QapWifiMac_SetLinkUpCallback(PyNs3QapWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl1> linkUp_cb_impl;
    PyNs3QapWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QapWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl1> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::QapWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3QapWifiMac_methods[] = {
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3QapWifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "StartBeaconing", (PyCFunction) _wrap_PyNs3QapWifiMac_StartBeaconing, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3QapWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetWifiPhy", (PyCFunction) _wrap_PyNs3QapWifiMac_SetWifiPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3QapWifiMac_GetBssid, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3QapWifiMac_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3QapWifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3QapWifiMac_GetEifsNoDifs, METH_NOARGS, NULL },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3QapWifiMac_GetPifs, METH_NOARGS, NULL },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3QapWifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3QapWifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3QapWifiMac_GetSlot, METH_NOARGS, NULL },
    {(char *) "SetBeaconInterval", (PyCFunction) _wrap_PyNs3QapWifiMac_SetBeaconInterval, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3QapWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3QapWifiMac_SetCompressedBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3QapWifiMac_SetBasicBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3QapWifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3QapWifiMac_GetCtsTimeout, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3QapWifiMac_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3QapWifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3QapWifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3QapWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3QapWifiMac_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3QapWifiMac_GetCompressedBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3QapWifiMac_GetBasicBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3QapWifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3QapWifiMac_GetSsid, METH_NOARGS, NULL },
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3QapWifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBeaconInterval", (PyCFunction) _wrap_PyNs3QapWifiMac_GetBeaconInterval, METH_NOARGS, NULL },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3QapWifiMac_GetAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3QapWifiMac_GetSifs, METH_NOARGS, NULL },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3QapWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3QapWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3QapWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3QapWifiMac__tp_clear(PyNs3QapWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::QapWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3QapWifiMac__tp_traverse(PyNs3QapWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3QapWifiMac__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3QapWifiMac__tp_dealloc(PyNs3QapWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3QapWifiMac__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3QapWifiMac__tp_richcompare (PyNs3QapWifiMac *PYBINDGEN_UNUSED(self), PyNs3QapWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3QapWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3QapWifiMac_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.QapWifiMac",            /* tp_name */
    sizeof(PyNs3QapWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3QapWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3QapWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3QapWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3QapWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3QapWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3QapWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3QapWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3QstaWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3QstaWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3QstaWifiMac__PythonHelper::_wrap_NotifyNewAggregate(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper = dynamic_cast< PyNs3QstaWifiMac__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3QstaWifiMac__PythonHelper::SetSlot(ns3::Time slotTime)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetSlot(slotTime);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(slotTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSlot", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::SetSifs(ns3::Time sifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetSifs(sifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(sifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::SetEifsNoDifs(ns3::Time eifsNoDifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetEifsNoDifs(eifsNoDifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(eifsNoDifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetEifsNoDifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::SetAckTimeout(ns3::Time ackTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetAckTimeout(ackTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ackTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::SetCtsTimeout(ns3::Time ctsTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetCtsTimeout(ctsTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(ctsTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCtsTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::SetPifs(ns3::Time pifs)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetPifs(pifs);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(pifs);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetPifs", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3QstaWifiMac__PythonHelper::GetSlot() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSlot"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSlot();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSlot", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSlot();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSlot();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QstaWifiMac__PythonHelper::GetSifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QstaWifiMac__PythonHelper::GetEifsNoDifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetEifsNoDifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetEifsNoDifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetEifsNoDifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetEifsNoDifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetEifsNoDifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QstaWifiMac__PythonHelper::GetAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QstaWifiMac__PythonHelper::GetCtsTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCtsTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetCtsTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCtsTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetCtsTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetCtsTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QstaWifiMac__PythonHelper::GetPifs() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetPifs"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetPifs();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetPifs", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetPifs();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetPifs();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QstaWifiMac__PythonHelper::SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiPhy"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetWifiPhy(phy);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiPhy = NULL;
    } else {
        py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiPhy);
    }
    
    if (py_WifiPhy == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))), &PyNs3WifiPhy_Type);
        py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
        py_WifiPhy->inst_dict = NULL;
        py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy))->Ref();
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (phy));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiPhy", (char *) "N", py_WifiPhy);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetWifiRemoteStationManager"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetWifiRemoteStationManager(stationManager);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (stationManager));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetWifiRemoteStationManager", (char *) "N", py_WifiRemoteStationManager);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    PyNs3Mac48Address *py_Mac48Address2;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::Enqueue(packet, to, from);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address2->obj = new ns3::Mac48Address(from);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NNN", py_Packet, py_Mac48Address, py_Mac48Address2);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Enqueue"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::Enqueue(packet, to);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(to);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Enqueue", (char *) "NN", py_Packet, py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3QstaWifiMac__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}




ns3::Mac48Address
PyNs3QstaWifiMac__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetAddress();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ssid
PyNs3QstaWifiMac__PythonHelper::GetSsid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *tmp_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSsid();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetSsid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSsid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Ssid_Type, &tmp_Ssid)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetSsid();
    }
    ns3::Ssid retval = *tmp_Ssid->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QstaWifiMac__PythonHelper::SetAddress(ns3::Mac48Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *py_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetAddress(address);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(address);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Mac48Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::SetSsid(ns3::Ssid ssid)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetSsid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetSsid(ssid);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(ssid);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetSsid", (char *) "N", py_Ssid);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Mac48Address
PyNs3QstaWifiMac__PythonHelper::GetBssid() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Mac48Address *tmp_Mac48Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBssid"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetBssid();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBssid", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetBssid();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Mac48Address_Type, &tmp_Mac48Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetBssid();
    }
    ns3::Mac48Address retval = *tmp_Mac48Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QstaWifiMac__PythonHelper::SetBasicBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetBasicBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetBasicBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::QstaWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(blockAckTimeout);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetCompressedBlockAckTimeout", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3QstaWifiMac__PythonHelper::GetBasicBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBasicBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetBasicBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBasicBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetBasicBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetBasicBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Time
PyNs3QstaWifiMac__PythonHelper::GetCompressedBlockAckTimeout() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCompressedBlockAckTimeout"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetCompressedBlockAckTimeout();
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = const_cast< ns3::QstaWifiMac* >((const ns3::QstaWifiMac*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCompressedBlockAckTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetCompressedBlockAckTimeout();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::QstaWifiMac::GetCompressedBlockAckTimeout();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QstaWifiMac__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::FinishConfigureStandard(ns3::WifiPhyStandard standard)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::QstaWifiMac *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FinishConfigureStandard"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj;
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = (ns3::QstaWifiMac*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FinishConfigureStandard", (char *) "i", standard);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3QstaWifiMac* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3QstaWifiMac__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3QstaWifiMac__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3QstaWifiMac__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3QstaWifiMac__tp_init(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (self->ob_type != &PyNs3QstaWifiMac_Type)
    {
        self->obj = new PyNs3QstaWifiMac__PythonHelper();
        self->obj->Ref ();
        ((PyNs3QstaWifiMac__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::QstaWifiMac();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetForwardUpCallback(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *upCallback;
    ns3::Ptr<PythonCallbackImpl8> upCallback_cb_impl;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"upCallback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &upCallback)) {
        return NULL;
    }
    if (!PyCallable_Check(upCallback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'upCallback' must be callbale");
        return NULL;
    }
    upCallback_cb_impl = ns3::Create<PythonCallbackImpl8> (upCallback);
    (helper_class == NULL)? (self->obj->SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl))) : (self->obj->ns3::QstaWifiMac::SetForwardUpCallback(ns3::Callback<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (upCallback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::QstaWifiMac::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetWifiPhy(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr))) : (self->obj->ns3::QstaWifiMac::SetWifiPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetBssid(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetBssid()) : (self->obj->ns3::QstaWifiMac::GetBssid());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SupportsSendFrom(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::QstaWifiMac::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetPifs(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *pifs;
    ns3::Time pifs2;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"pifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &pifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Time_Type)) {
        pifs2 = *((PyNs3Time *) pifs)->obj;
    } else if (PyObject_IsInstance(pifs, (PyObject*) &PyNs3Scalar_Type)) {
        pifs2 = *((PyNs3Scalar *) pifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", pifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetPifs(pifs2)) : (self->obj->ns3::QstaWifiMac::SetPifs(pifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetEifsNoDifs(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetEifsNoDifs()) : (self->obj->ns3::QstaWifiMac::GetEifsNoDifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetPifs(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetPifs()) : (self->obj->ns3::QstaWifiMac::GetPifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetSlot(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *slotTime;
    ns3::Time slotTime2;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"slotTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &slotTime)) {
        return NULL;
    }
    if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Time_Type)) {
        slotTime2 = *((PyNs3Time *) slotTime)->obj;
    } else if (PyObject_IsInstance(slotTime, (PyObject*) &PyNs3Scalar_Type)) {
        slotTime2 = *((PyNs3Scalar *) slotTime)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", slotTime->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSlot(slotTime2)) : (self->obj->ns3::QstaWifiMac::SetSlot(slotTime2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_StartActiveAssociation(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    
    self->obj->StartActiveAssociation();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetSsid(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *ssid;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ssid", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &ssid)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSsid(*((PyNs3Ssid *) ssid)->obj)) : (self->obj->ns3::QstaWifiMac::SetSsid(*((PyNs3Ssid *) ssid)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetSlot(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSlot()) : (self->obj->ns3::QstaWifiMac::GetSlot());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetAssocRequestTimeout(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *timeout;
    ns3::Time timeout2;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(timeout, (PyObject*) &PyNs3Time_Type)) {
        timeout2 = *((PyNs3Time *) timeout)->obj;
    } else if (PyObject_IsInstance(timeout, (PyObject*) &PyNs3Scalar_Type)) {
        timeout2 = *((PyNs3Scalar *) timeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", timeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetAssocRequestTimeout(timeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3QstaWifiMac_Enqueue__0(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3Mac48Address *from;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", "from", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to, &PyNs3Mac48Address_Type, &from)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj)) : (self->obj->ns3::QstaWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj, *((PyNs3Mac48Address *) from)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3QstaWifiMac_Enqueue__1(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3Mac48Address *to;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "to", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3Mac48Address_Type, &to)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    (helper_class == NULL)? (self->obj->Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj)) : (self->obj->ns3::QstaWifiMac::Enqueue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3Mac48Address *) to)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3QstaWifiMac_Enqueue(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3QstaWifiMac_Enqueue__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3QstaWifiMac_Enqueue__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetCompressedBlockAckTimeout(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCompressedBlockAckTimeout(blockAckTimeout2)) : (self->obj->ns3::QstaWifiMac::SetCompressedBlockAckTimeout(blockAckTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetProbeRequestTimeout(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *timeout;
    ns3::Time timeout2;
    const char *keywords[] = {"timeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &timeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(timeout, (PyObject*) &PyNs3Time_Type)) {
        timeout2 = *((PyNs3Time *) timeout)->obj;
    } else if (PyObject_IsInstance(timeout, (PyObject*) &PyNs3Scalar_Type)) {
        timeout2 = *((PyNs3Scalar *) timeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", timeout->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetProbeRequestTimeout(timeout2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetBasicBlockAckTimeout(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *blockAckTimeout;
    ns3::Time blockAckTimeout2;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"blockAckTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &blockAckTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Time_Type)) {
        blockAckTimeout2 = *((PyNs3Time *) blockAckTimeout)->obj;
    } else if (PyObject_IsInstance(blockAckTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        blockAckTimeout2 = *((PyNs3Scalar *) blockAckTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", blockAckTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetBasicBlockAckTimeout(blockAckTimeout2)) : (self->obj->ns3::QstaWifiMac::SetBasicBlockAckTimeout(blockAckTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetCtsTimeout(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ctsTimeout;
    ns3::Time ctsTimeout2;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ctsTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ctsTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Time_Type)) {
        ctsTimeout2 = *((PyNs3Time *) ctsTimeout)->obj;
    } else if (PyObject_IsInstance(ctsTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ctsTimeout2 = *((PyNs3Scalar *) ctsTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ctsTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetCtsTimeout(ctsTimeout2)) : (self->obj->ns3::QstaWifiMac::SetCtsTimeout(ctsTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetCtsTimeout(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCtsTimeout()) : (self->obj->ns3::QstaWifiMac::GetCtsTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetAddress(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Mac48Address *py_Mac48Address;
    
    ns3::Mac48Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::QstaWifiMac::GetAddress());
    py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
    py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Mac48Address->obj = new ns3::Mac48Address(retval);
    PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
    py_retval = Py_BuildValue((char *) "N", py_Mac48Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetLinkDownCallback(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkDown;
    ns3::Ptr<PythonCallbackImpl1> linkDown_cb_impl;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkDown", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkDown)) {
        return NULL;
    }
    if (!PyCallable_Check(linkDown)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkDown' must be callbale");
        return NULL;
    }
    linkDown_cb_impl = ns3::Create<PythonCallbackImpl1> (linkDown);
    (helper_class == NULL)? (self->obj->SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl))) : (self->obj->ns3::QstaWifiMac::SetLinkDownCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkDown_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetSifs(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *sifs;
    ns3::Time sifs2;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"sifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &sifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Time_Type)) {
        sifs2 = *((PyNs3Time *) sifs)->obj;
    } else if (PyObject_IsInstance(sifs, (PyObject*) &PyNs3Scalar_Type)) {
        sifs2 = *((PyNs3Scalar *) sifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", sifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetSifs(sifs2)) : (self->obj->ns3::QstaWifiMac::SetSifs(sifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetAddress(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Mac48Address *address;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Mac48Address_Type, &address)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(*((PyNs3Mac48Address *) address)->obj)) : (self->obj->ns3::QstaWifiMac::SetAddress(*((PyNs3Mac48Address *) address)->obj));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetWifiRemoteStationManager(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *stationManager;
    ns3::WifiRemoteStationManager *stationManager_ptr;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"stationManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &stationManager)) {
        return NULL;
    }
    stationManager_ptr = (stationManager ? stationManager->obj : NULL);
    (helper_class == NULL)? (self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr))) : (self->obj->ns3::QstaWifiMac::SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (stationManager_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetCompressedBlockAckTimeout(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetCompressedBlockAckTimeout()) : (self->obj->ns3::QstaWifiMac::GetCompressedBlockAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetBasicBlockAckTimeout(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetBasicBlockAckTimeout()) : (self->obj->ns3::QstaWifiMac::GetBasicBlockAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetAckTimeout(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *ackTimeout;
    ns3::Time ackTimeout2;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"ackTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &ackTimeout)) {
        return NULL;
    }
    if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Time_Type)) {
        ackTimeout2 = *((PyNs3Time *) ackTimeout)->obj;
    } else if (PyObject_IsInstance(ackTimeout, (PyObject*) &PyNs3Scalar_Type)) {
        ackTimeout2 = *((PyNs3Scalar *) ackTimeout)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", ackTimeout->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAckTimeout(ackTimeout2)) : (self->obj->ns3::QstaWifiMac::SetAckTimeout(ackTimeout2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetSsid(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = (helper_class == NULL)? (self->obj->GetSsid()) : (self->obj->ns3::QstaWifiMac::GetSsid());
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetEifsNoDifs(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *eifsNoDifs;
    ns3::Time eifsNoDifs2;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"eifsNoDifs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &eifsNoDifs)) {
        return NULL;
    }
    if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Time_Type)) {
        eifsNoDifs2 = *((PyNs3Time *) eifsNoDifs)->obj;
    } else if (PyObject_IsInstance(eifsNoDifs, (PyObject*) &PyNs3Scalar_Type)) {
        eifsNoDifs2 = *((PyNs3Scalar *) eifsNoDifs)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", eifsNoDifs->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetEifsNoDifs(eifsNoDifs2)) : (self->obj->ns3::QstaWifiMac::SetEifsNoDifs(eifsNoDifs2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetAckTimeout(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetAckTimeout()) : (self->obj->ns3::QstaWifiMac::GetAckTimeout());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetMaxMissedBeacons(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int missed;
    const char *keywords[] = {"missed", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &missed)) {
        return NULL;
    }
    self->obj->SetMaxMissedBeacons(missed);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_GetSifs(PyNs3QstaWifiMac *self)
{
    PyObject *py_retval;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    PyNs3Time *py_Time;
    
    ns3::Time retval = (helper_class == NULL)? (self->obj->GetSifs()) : (self->obj->ns3::QstaWifiMac::GetSifs());
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3QstaWifiMac_SetLinkUpCallback(PyNs3QstaWifiMac *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *linkUp;
    ns3::Ptr<PythonCallbackImpl1> linkUp_cb_impl;
    PyNs3QstaWifiMac__PythonHelper *helper_class = dynamic_cast<PyNs3QstaWifiMac__PythonHelper*> (self->obj);
    const char *keywords[] = {"linkUp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &linkUp)) {
        return NULL;
    }
    if (!PyCallable_Check(linkUp)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'linkUp' must be callbale");
        return NULL;
    }
    linkUp_cb_impl = ns3::Create<PythonCallbackImpl1> (linkUp);
    (helper_class == NULL)? (self->obj->SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl))) : (self->obj->ns3::QstaWifiMac::SetLinkUpCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (linkUp_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3QstaWifiMac_methods[] = {
    {(char *) "SetForwardUpCallback", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetForwardUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetWifiPhy", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetWifiPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBssid", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetBssid, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3QstaWifiMac_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "SetPifs", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetPifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetEifsNoDifs", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetEifsNoDifs, METH_NOARGS, NULL },
    {(char *) "GetPifs", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetPifs, METH_NOARGS, NULL },
    {(char *) "SetSlot", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetSlot, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "StartActiveAssociation", (PyCFunction) _wrap_PyNs3QstaWifiMac_StartActiveAssociation, METH_NOARGS, NULL },
    {(char *) "SetSsid", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetSsid, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSlot", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetSlot, METH_NOARGS, NULL },
    {(char *) "SetAssocRequestTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetAssocRequestTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Enqueue", (PyCFunction) _wrap_PyNs3QstaWifiMac_Enqueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetCompressedBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetProbeRequestTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetProbeRequestTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetBasicBlockAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCtsTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetCtsTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCtsTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetCtsTimeout, METH_NOARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetAddress, METH_NOARGS, NULL },
    {(char *) "SetLinkDownCallback", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetLinkDownCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetSifs", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetSifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetCompressedBlockAckTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetCompressedBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "GetBasicBlockAckTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetBasicBlockAckTimeout, METH_NOARGS, NULL },
    {(char *) "SetAckTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetAckTimeout, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSsid", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetSsid, METH_NOARGS, NULL },
    {(char *) "SetEifsNoDifs", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetEifsNoDifs, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAckTimeout", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetAckTimeout, METH_NOARGS, NULL },
    {(char *) "SetMaxMissedBeacons", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetMaxMissedBeacons, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSifs", (PyCFunction) _wrap_PyNs3QstaWifiMac_GetSifs, METH_NOARGS, NULL },
    {(char *) "SetLinkUpCallback", (PyCFunction) _wrap_PyNs3QstaWifiMac_SetLinkUpCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3QstaWifiMac__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3QstaWifiMac__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3QstaWifiMac__tp_clear(PyNs3QstaWifiMac *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::QstaWifiMac *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3QstaWifiMac__tp_traverse(PyNs3QstaWifiMac *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3QstaWifiMac__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3QstaWifiMac__tp_dealloc(PyNs3QstaWifiMac *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3QstaWifiMac__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3QstaWifiMac__tp_richcompare (PyNs3QstaWifiMac *PYBINDGEN_UNUSED(self), PyNs3QstaWifiMac *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3QstaWifiMac_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3QstaWifiMac_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.QstaWifiMac",            /* tp_name */
    sizeof(PyNs3QstaWifiMac),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3QstaWifiMac__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3QstaWifiMac__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3QstaWifiMac__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3QstaWifiMac__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3QstaWifiMac_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3QstaWifiMac, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3QstaWifiMac__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3RraaWifiManager__tp_init__0(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3RraaWifiManager *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3RraaWifiManager_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RraaWifiManager(*((PyNs3RraaWifiManager *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

static int
_wrap_PyNs3RraaWifiManager__tp_init__1(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::RraaWifiManager();
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    return 0;
}

int _wrap_PyNs3RraaWifiManager__tp_init(PyNs3RraaWifiManager *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3RraaWifiManager__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3RraaWifiManager__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3RraaWifiManager_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::RraaWifiManager::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3RraaWifiManager__copy__(PyNs3RraaWifiManager *self)
{

    PyNs3RraaWifiManager *py_copy;
    py_copy = PyObject_GC_New(PyNs3RraaWifiManager, &PyNs3RraaWifiManager_Type);
    py_copy->obj = new ns3::RraaWifiManager(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3RraaWifiManager_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3RraaWifiManager_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3RraaWifiManager__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3RraaWifiManager__tp_clear(PyNs3RraaWifiManager *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::RraaWifiManager *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3RraaWifiManager__tp_traverse(PyNs3RraaWifiManager *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3RraaWifiManager__tp_dealloc(PyNs3RraaWifiManager *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3RraaWifiManager__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RraaWifiManager__tp_richcompare (PyNs3RraaWifiManager *PYBINDGEN_UNUSED(self), PyNs3RraaWifiManager *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RraaWifiManager_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RraaWifiManager_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.RraaWifiManager",            /* tp_name */
    sizeof(PyNs3RraaWifiManager),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RraaWifiManager__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3RraaWifiManager__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3RraaWifiManager__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RraaWifiManager__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RraaWifiManager_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3RraaWifiManager, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RraaWifiManager__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3Ssid__tp_init__0(PyNs3Ssid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ssid *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ssid(*((PyNs3Ssid *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3Ssid__tp_init__1(PyNs3Ssid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ssid();
    return 0;
}

static int
_wrap_PyNs3Ssid__tp_init__2(PyNs3Ssid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *s;
    Py_ssize_t s_len;
    const char *keywords[] = {"s", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &s, &s_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ssid(std::string(s, s_len));
    return 0;
}

static int
_wrap_PyNs3Ssid__tp_init__3(PyNs3Ssid *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    char const *ssid;
    int length;
    const char *keywords[] = {"ssid", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "si", (char **) keywords, &ssid, &length)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::Ssid(ssid, length);
    return 0;
}

int _wrap_PyNs3Ssid__tp_init(PyNs3Ssid *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[4] = {0,};
    retval = _wrap_PyNs3Ssid__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3Ssid__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3Ssid__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3Ssid__tp_init__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    error_list = PyList_New(4);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3Ssid_IsBroadcast(PyNs3Ssid *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBroadcast();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_DeserializeInformationField(PyNs3Ssid *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_GetInformationFieldSize(PyNs3Ssid *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_PeekString(PyNs3Ssid *self)
{
    PyObject *py_retval;
    char *retval;
    
    retval = self->obj->PeekString();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_SerializeInformationField(PyNs3Ssid *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_IsEqual(PyNs3Ssid *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Ssid *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &o)) {
        return NULL;
    }
    retval = self->obj->IsEqual(*((PyNs3Ssid *) o)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3Ssid_ElementId(PyNs3Ssid *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3Ssid__copy__(PyNs3Ssid *self)
{

    PyNs3Ssid *py_copy;
    py_copy = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_copy->obj = new ns3::Ssid(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3Ssid_methods[] = {
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3Ssid_IsBroadcast, METH_NOARGS, NULL },
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3Ssid_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3Ssid_GetInformationFieldSize, METH_NOARGS, NULL },
    {(char *) "PeekString", (PyCFunction) _wrap_PyNs3Ssid_PeekString, METH_NOARGS, NULL },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3Ssid_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsEqual", (PyCFunction) _wrap_PyNs3Ssid_IsEqual, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3Ssid_ElementId, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3Ssid__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3Ssid__tp_dealloc(PyNs3Ssid *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::Ssid *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3Ssid__tp_str(PyNs3Ssid *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3Ssid__tp_richcompare (PyNs3Ssid *PYBINDGEN_UNUSED(self), PyNs3Ssid *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3Ssid_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3Ssid_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Ssid",            /* tp_name */
    sizeof(PyNs3Ssid),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3Ssid__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3Ssid__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3Ssid__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3Ssid_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3Ssid__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3SsidChecker__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'SsidChecker' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}

static PyMethodDef PyNs3SsidChecker_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SsidChecker__tp_dealloc(PyNs3SsidChecker *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SsidChecker *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SsidChecker__tp_richcompare (PyNs3SsidChecker *PYBINDGEN_UNUSED(self), PyNs3SsidChecker *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SsidChecker_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SsidChecker_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.SsidChecker",            /* tp_name */
    sizeof(PyNs3SsidChecker),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SsidChecker__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SsidChecker__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SsidChecker_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SsidChecker__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3SsidValue__tp_init__0(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SsidValue();
    return 0;
}

static int
_wrap_PyNs3SsidValue__tp_init__1(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SsidValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SsidValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SsidValue(*((PyNs3SsidValue *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3SsidValue__tp_init__2(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Ssid *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SsidValue(*((PyNs3Ssid *) value)->obj);
    return 0;
}

int _wrap_PyNs3SsidValue__tp_init(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3SsidValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SsidValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3SsidValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SsidValue_Set(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ssid *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ssid_Type, &value)) {
        return NULL;
    }
    self->obj->Set(*((PyNs3Ssid *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SsidValue_Get(PyNs3SsidValue *self)
{
    PyObject *py_retval;
    PyNs3Ssid *py_Ssid;
    
    ns3::Ssid retval = self->obj->Get();
    py_Ssid = PyObject_New(PyNs3Ssid, &PyNs3Ssid_Type);
    py_Ssid->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ssid->obj = new ns3::Ssid(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Ssid->obj] = (PyObject *) py_Ssid;
    py_retval = Py_BuildValue((char *) "N", py_Ssid);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsidValue_Copy(PyNs3SsidValue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeValue > retval;
    PyNs3AttributeValue *py_AttributeValue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeValue = NULL;
    } else {
        py_AttributeValue = (PyNs3AttributeValue *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeValue);
    }
    
    if (py_AttributeValue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))), &PyNs3AttributeValue_Type);
        py_AttributeValue = PyObject_New(PyNs3AttributeValue, wrapper_type);
        py_AttributeValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeValue->obj = const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeValue->obj] = (PyObject *) py_AttributeValue;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3SsidValue_SerializeToString(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->SerializeToString(ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3SsidValue_DeserializeFromString(PyNs3SsidValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *value;
    Py_ssize_t value_len;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"value", "checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &value, &value_len, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->DeserializeFromString(std::string(value, value_len), ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3SsidValue__copy__(PyNs3SsidValue *self)
{

    PyNs3SsidValue *py_copy;
    py_copy = PyObject_New(PyNs3SsidValue, &PyNs3SsidValue_Type);
    py_copy->obj = new ns3::SsidValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SsidValue_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3SsidValue_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3SsidValue_Get, METH_NOARGS, NULL },
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3SsidValue_Copy, METH_NOARGS, NULL },
    {(char *) "SerializeToString", (PyCFunction) _wrap_PyNs3SsidValue_SerializeToString, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeserializeFromString", (PyCFunction) _wrap_PyNs3SsidValue_DeserializeFromString, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SsidValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SsidValue__tp_dealloc(PyNs3SsidValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SsidValue *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SsidValue__tp_richcompare (PyNs3SsidValue *PYBINDGEN_UNUSED(self), PyNs3SsidValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SsidValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SsidValue_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.SsidValue",            /* tp_name */
    sizeof(PyNs3SsidValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SsidValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SsidValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SsidValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SsidValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3SupportedRates__tp_init__0(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SupportedRates *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SupportedRates_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SupportedRates(*((PyNs3SupportedRates *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3SupportedRates__tp_init__1(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SupportedRates();
    return 0;
}

int _wrap_PyNs3SupportedRates__tp_init(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SupportedRates__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SupportedRates__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SupportedRates_DeserializeInformationField(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint8_t retval;
    PyNs3BufferIterator *start;
    int length;
    const char *keywords[] = {"start", "length", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3BufferIterator_Type, &start, &length)) {
        return NULL;
    }
    if (length > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->DeserializeInformationField(*((PyNs3BufferIterator *) start)->obj, length);
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_GetRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint32_t retval;
    int i;
    const char *keywords[] = {"i", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &i)) {
        return NULL;
    }
    if (i > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->GetRate(i);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_IsBasicRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bs)) {
        return NULL;
    }
    retval = self->obj->IsBasicRate(bs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_SetBasicRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bs)) {
        return NULL;
    }
    self->obj->SetBasicRate(bs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_GetInformationFieldSize(PyNs3SupportedRates *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetInformationFieldSize();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_ElementId(PyNs3SupportedRates *self)
{
    PyObject *py_retval;
    ns3::WifiInformationElementId retval;
    
    retval = self->obj->ElementId();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_AddSupportedRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bs)) {
        return NULL;
    }
    self->obj->AddSupportedRate(bs);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_IsSupportedRate(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int bs;
    const char *keywords[] = {"bs", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &bs)) {
        return NULL;
    }
    retval = self->obj->IsSupportedRate(bs);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_GetNRates(PyNs3SupportedRates *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNRates();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3SupportedRates_SerializeInformationField(PyNs3SupportedRates *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3BufferIterator *start;
    const char *keywords[] = {"start", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3BufferIterator_Type, &start)) {
        return NULL;
    }
    self->obj->SerializeInformationField(*((PyNs3BufferIterator *) start)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SupportedRates__copy__(PyNs3SupportedRates *self)
{

    PyNs3SupportedRates *py_copy;
    py_copy = PyObject_New(PyNs3SupportedRates, &PyNs3SupportedRates_Type);
    py_copy->obj = new ns3::SupportedRates(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SupportedRates_methods[] = {
    {(char *) "DeserializeInformationField", (PyCFunction) _wrap_PyNs3SupportedRates_DeserializeInformationField, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetRate", (PyCFunction) _wrap_PyNs3SupportedRates_GetRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsBasicRate", (PyCFunction) _wrap_PyNs3SupportedRates_IsBasicRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetBasicRate", (PyCFunction) _wrap_PyNs3SupportedRates_SetBasicRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInformationFieldSize", (PyCFunction) _wrap_PyNs3SupportedRates_GetInformationFieldSize, METH_NOARGS, NULL },
    {(char *) "ElementId", (PyCFunction) _wrap_PyNs3SupportedRates_ElementId, METH_NOARGS, NULL },
    {(char *) "AddSupportedRate", (PyCFunction) _wrap_PyNs3SupportedRates_AddSupportedRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsSupportedRate", (PyCFunction) _wrap_PyNs3SupportedRates_IsSupportedRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNRates", (PyCFunction) _wrap_PyNs3SupportedRates_GetNRates, METH_NOARGS, NULL },
    {(char *) "SerializeInformationField", (PyCFunction) _wrap_PyNs3SupportedRates_SerializeInformationField, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SupportedRates__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SupportedRates__tp_dealloc(PyNs3SupportedRates *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SupportedRates *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3SupportedRates__tp_str(PyNs3SupportedRates *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyString_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3SupportedRates__tp_richcompare (PyNs3SupportedRates *PYBINDGEN_UNUSED(self), PyNs3SupportedRates *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SupportedRates_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SupportedRates_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.SupportedRates",            /* tp_name */
    sizeof(PyNs3SupportedRates),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SupportedRates__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3SupportedRates__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SupportedRates__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SupportedRates_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SupportedRates__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiChannel__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiChannel' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3WifiChannel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiChannel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}

static PyMethodDef PyNs3WifiChannel_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiChannel_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiChannel__tp_clear(PyNs3WifiChannel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiChannel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiChannel__tp_traverse(PyNs3WifiChannel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3WifiChannel__tp_dealloc(PyNs3WifiChannel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiChannel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiChannel__tp_richcompare (PyNs3WifiChannel *PYBINDGEN_UNUSED(self), PyNs3WifiChannel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiChannel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiChannel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiChannel",            /* tp_name */
    sizeof(PyNs3WifiChannel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiChannel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiChannel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiChannel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiChannel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiChannel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiChannel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiChannel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3WifiModeChecker__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'WifiModeChecker' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}

static PyMethodDef PyNs3WifiModeChecker_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiModeChecker__tp_dealloc(PyNs3WifiModeChecker *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::WifiModeChecker *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiModeChecker__tp_richcompare (PyNs3WifiModeChecker *PYBINDGEN_UNUSED(self), PyNs3WifiModeChecker *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiModeChecker_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiModeChecker_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiModeChecker",            /* tp_name */
    sizeof(PyNs3WifiModeChecker),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiModeChecker__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiModeChecker__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiModeChecker_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiModeChecker__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3WifiModeValue__tp_init__0(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiModeValue();
    return 0;
}

static int
_wrap_PyNs3WifiModeValue__tp_init__1(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiModeValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiModeValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiModeValue(*((PyNs3WifiModeValue *) arg0)->obj);
    return 0;
}

static int
_wrap_PyNs3WifiModeValue__tp_init__2(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiMode *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::WifiModeValue(*((PyNs3WifiMode *) value)->obj);
    return 0;
}

int _wrap_PyNs3WifiModeValue__tp_init(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3WifiModeValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiModeValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3WifiModeValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3WifiModeValue_Set(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMode *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMode_Type, &value)) {
        return NULL;
    }
    self->obj->Set(*((PyNs3WifiMode *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeValue_Get(PyNs3WifiModeValue *self)
{
    PyObject *py_retval;
    PyNs3WifiMode *py_WifiMode;
    
    ns3::WifiMode retval = self->obj->Get();
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(retval);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeValue_Copy(PyNs3WifiModeValue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeValue > retval;
    PyNs3AttributeValue *py_AttributeValue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeValue = NULL;
    } else {
        py_AttributeValue = (PyNs3AttributeValue *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeValue);
    }
    
    if (py_AttributeValue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))), &PyNs3AttributeValue_Type);
        py_AttributeValue = PyObject_New(PyNs3AttributeValue, wrapper_type);
        py_AttributeValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeValue->obj = const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeValue->obj] = (PyObject *) py_AttributeValue;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeValue_SerializeToString(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->SerializeToString(ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiModeValue_DeserializeFromString(PyNs3WifiModeValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *value;
    Py_ssize_t value_len;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"value", "checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &value, &value_len, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->DeserializeFromString(std::string(value, value_len), ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiModeValue__copy__(PyNs3WifiModeValue *self)
{

    PyNs3WifiModeValue *py_copy;
    py_copy = PyObject_New(PyNs3WifiModeValue, &PyNs3WifiModeValue_Type);
    py_copy->obj = new ns3::WifiModeValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiModeValue_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3WifiModeValue_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3WifiModeValue_Get, METH_NOARGS, NULL },
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3WifiModeValue_Copy, METH_NOARGS, NULL },
    {(char *) "SerializeToString", (PyCFunction) _wrap_PyNs3WifiModeValue_SerializeToString, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeserializeFromString", (PyCFunction) _wrap_PyNs3WifiModeValue_DeserializeFromString, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiModeValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3WifiModeValue__tp_dealloc(PyNs3WifiModeValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::WifiModeValue *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiModeValue__tp_richcompare (PyNs3WifiModeValue *PYBINDGEN_UNUSED(self), PyNs3WifiModeValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiModeValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiModeValue_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiModeValue",            /* tp_name */
    sizeof(PyNs3WifiModeValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiModeValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiModeValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiModeValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiModeValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3WifiNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WifiNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3WifiNetDevice__PythonHelper::_wrap_NotifyNewAggregate(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper = dynamic_cast< PyNs3WifiNetDevice__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


ns3::Address
PyNs3WifiNetDevice__PythonHelper::GetAddress() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetAddress();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAddress", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetAddress();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetAddress();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WifiNetDevice__PythonHelper::GetBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetBroadcast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetBroadcast();
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Channel >
PyNs3WifiNetDevice__PythonHelper::GetChannel() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3Channel *tmp_Channel;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChannel"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetChannel();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChannel", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetChannel();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Channel_Type, &tmp_Channel)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetChannel();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Channel  > (tmp_Channel->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3WifiNetDevice__PythonHelper::GetIfIndex() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetIfIndex"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetIfIndex();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetIfIndex", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetIfIndex();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetIfIndex();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3WifiNetDevice__PythonHelper::GetMtu() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMtu"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMtu();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMtu", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMtu();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMtu();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMtu();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WifiNetDevice__PythonHelper::GetMulticast(ns3::Ipv4Address multicastGroup) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv4Address *py_Ipv4Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(multicastGroup);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
    py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv4Address->obj = new ns3::Ipv4Address(multicastGroup);
    PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv4Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(multicastGroup);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(multicastGroup);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Address
PyNs3WifiNetDevice__PythonHelper::GetMulticast(ns3::Ipv6Address addr) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Ipv6Address *py_Ipv6Address;
    PyNs3Address *tmp_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMulticast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(addr);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_Ipv6Address = PyObject_New(PyNs3Ipv6Address, &PyNs3Ipv6Address_Type);
    py_Ipv6Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Ipv6Address->obj = new ns3::Ipv6Address(addr);
    PyNs3Ipv6Address_wrapper_registry[(void *) py_Ipv6Address->obj] = (PyObject *) py_Ipv6Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMulticast", (char *) "N", py_Ipv6Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(addr);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Address_Type, &tmp_Address)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetMulticast(addr);
    }
    ns3::Address retval = *tmp_Address->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::Node >
PyNs3WifiNetDevice__PythonHelper::GetNode() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *tmp_Node;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNode"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetNode();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNode", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetNode();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Node_Type, &tmp_Node)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::GetNode();
    }
    // dangerous!
    retval = ns3::Ptr< ns3::Node  > (tmp_Node->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsBridge() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBridge"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBridge();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBridge", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBridge();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBridge();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsBroadcast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBroadcast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBroadcast();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBroadcast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBroadcast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsBroadcast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsLinkUp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsLinkUp"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsLinkUp();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsLinkUp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsLinkUp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsLinkUp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsMulticast() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsMulticast"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsMulticast();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsMulticast", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsMulticast();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsMulticast();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::IsPointToPoint() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsPointToPoint"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsPointToPoint();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsPointToPoint", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsPointToPoint();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::IsPointToPoint();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::NeedsArp() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NeedsArp"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::NeedsArp();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NeedsArp", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::NeedsArp();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::NeedsArp();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::Send(packet, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "NNi", py_Packet, py_Address, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::Send(packet, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::Send(packet, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3WifiNetDevice__PythonHelper::SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3Address *py_Address;
    PyNs3Address *py_Address2;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(source);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address2->obj = new ns3::Address(dest);
    PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendFrom", (char *) "NNNi", py_Packet, py_Address, py_Address2, (int) protocolNumber);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SendFrom(packet, source, dest, protocolNumber);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiNetDevice__PythonHelper::SetAddress(ns3::Address address)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Address *py_Address;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAddress"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiNetDevice::SetAddress(address);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(address);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAddress", (char *) "N", py_Address);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiNetDevice__PythonHelper::SetIfIndex(uint32_t const index)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetIfIndex"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiNetDevice::SetIfIndex(index);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetIfIndex", (char *) "N", PyLong_FromUnsignedLong(index));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3WifiNetDevice__PythonHelper::SetMtu(uint16_t const mtu)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMtu"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SetMtu(mtu);
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMtu", (char *) "i", (int) mtu);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SetMtu(mtu);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SetMtu(mtu);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiNetDevice__PythonHelper::SetNode(ns3::Ptr< ns3::Node > node)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetNode"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::WifiNetDevice::SetNode(node);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    if (typeid(*(const_cast<ns3::Node *> (ns3::PeekPointer (node)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = (PyNs3Node*) (((PyNs3Node__PythonHelper*) const_cast<ns3::Node *> (ns3::PeekPointer (node)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (node)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Node *> (ns3::PeekPointer (node))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (node))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (node));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetNode", (char *) "N", py_Node);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}



bool
PyNs3WifiNetDevice__PythonHelper::SupportsSendFrom() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SupportsSendFrom"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SupportsSendFrom();
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = const_cast< ns3::WifiNetDevice* >((const ns3::WifiNetDevice*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SupportsSendFrom", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SupportsSendFrom();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::WifiNetDevice::SupportsSendFrom();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiNetDevice__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiNetDevice__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::WifiNetDevice *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj;
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = (ns3::WifiNetDevice*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3WifiNetDevice* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3WifiNetDevice__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3WifiNetDevice__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3WifiNetDevice__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3WifiNetDevice__tp_init__0(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3WifiNetDevice *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiNetDevice_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiNetDevice_Type)
    {
        self->obj = new PyNs3WifiNetDevice__PythonHelper(*((PyNs3WifiNetDevice *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3WifiNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiNetDevice(*((PyNs3WifiNetDevice *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3WifiNetDevice__tp_init__1(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3WifiNetDevice_Type)
    {
        self->obj = new PyNs3WifiNetDevice__PythonHelper();
        self->obj->Ref ();
        ((PyNs3WifiNetDevice__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::WifiNetDevice();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3WifiNetDevice__tp_init(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiNetDevice__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiNetDevice__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyNs3WifiNetDevice_GetMulticast__0(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *multicastGroup;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"multicastGroup", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &multicastGroup)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj)) : (self->obj->ns3::WifiNetDevice::GetMulticast(*((PyNs3Ipv4Address *) multicastGroup)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject *
_wrap_PyNs3WifiNetDevice_GetMulticast__1(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Ipv6Address *addr;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"addr", NULL};
    PyNs3Address *py_Address;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv6Address_Type, &addr)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetMulticast(*((PyNs3Ipv6Address *) addr)->obj)) : (self->obj->ns3::WifiNetDevice::GetMulticast(*((PyNs3Ipv6Address *) addr)->obj));
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}

PyObject * _wrap_PyNs3WifiNetDevice_GetMulticast(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3WifiNetDevice_GetMulticast__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3WifiNetDevice_GetMulticast__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsPointToPoint(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsPointToPoint()) : (self->obj->ns3::WifiNetDevice::IsPointToPoint());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::WifiNetDevice::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetPhy(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiPhy *phy;
    ns3::WifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->SetPhy(ns3::Ptr< ns3::WifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_Send(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!Oi", (char **) keywords, &PyNs3Packet_Type, &packet, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber)) : (self->obj->ns3::WifiNetDevice::Send(ns3::Ptr< ns3::Packet  > (packet_ptr), dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetIfIndex(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetIfIndex()) : (self->obj->ns3::WifiNetDevice::GetIfIndex());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_NeedsArp(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->NeedsArp()) : (self->obj->ns3::WifiNetDevice::NeedsArp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetPromiscReceiveCallback(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl29> cb_cb_impl;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl29> (cb);
    (helper_class == NULL)? (self->obj->SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::WifiNetDevice::SetPromiscReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetNode(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetNode()) : (self->obj->ns3::WifiNetDevice::GetNode());
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Node__PythonHelper))
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetRemoteStationManager(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiRemoteStationManager > retval;
    PyNs3WifiRemoteStationManager *py_WifiRemoteStationManager;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetRemoteStationManager();
    if (!(const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiRemoteStationManager = NULL;
    } else {
        py_WifiRemoteStationManager = (PyNs3WifiRemoteStationManager *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiRemoteStationManager);
    }
    
    if (py_WifiRemoteStationManager == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval)))), &PyNs3WifiRemoteStationManager_Type);
        py_WifiRemoteStationManager = PyObject_GC_New(PyNs3WifiRemoteStationManager, wrapper_type);
        py_WifiRemoteStationManager->inst_dict = NULL;
        py_WifiRemoteStationManager->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval))->Ref();
        py_WifiRemoteStationManager->obj = const_cast<ns3::WifiRemoteStationManager *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiRemoteStationManager->obj] = (PyObject *) py_WifiRemoteStationManager;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiRemoteStationManager);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetMac(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiMac > retval;
    PyNs3WifiMac *py_WifiMac;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetMac();
    if (!(const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiMac = NULL;
    } else {
        py_WifiMac = (PyNs3WifiMac *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiMac);
    }
    
    if (py_WifiMac == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval)))), &PyNs3WifiMac_Type);
        py_WifiMac = PyObject_GC_New(PyNs3WifiMac, wrapper_type);
        py_WifiMac->inst_dict = NULL;
        py_WifiMac->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval))->Ref();
        py_WifiMac->obj = const_cast<ns3::WifiMac *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMac->obj] = (PyObject *) py_WifiMac;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiMac);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SendFrom(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyObject *source;
    ns3::Address source2;
    PyObject *dest;
    ns3::Address dest2;
    int protocolNumber;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"packet", "source", "dest", "protocolNumber", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OOi", (char **) keywords, &PyNs3Packet_Type, &packet, &source, &dest, &protocolNumber)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (PyObject_IsInstance(source, (PyObject*) &PyNs3Address_Type)) {
        source2 = *((PyNs3Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        source2 = *((PyNs3Inet6SocketAddress *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        source2 = *((PyNs3InetSocketAddress *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv4Address_Type)) {
        source2 = *((PyNs3Ipv4Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Ipv6Address_Type)) {
        source2 = *((PyNs3Ipv6Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Mac48Address_Type)) {
        source2 = *((PyNs3Mac48Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3Mac64Address_Type)) {
        source2 = *((PyNs3Mac64Address *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        source2 = *((PyNs3PacketSocketAddress *) source)->obj;
    } else if (PyObject_IsInstance(source, (PyObject*) &PyNs3UanAddress_Type)) {
        source2 = *((PyNs3UanAddress *) source)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", source->ob_type->tp_name);
        return NULL;
    }
    if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Address_Type)) {
        dest2 = *((PyNs3Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        dest2 = *((PyNs3Inet6SocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        dest2 = *((PyNs3InetSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv4Address_Type)) {
        dest2 = *((PyNs3Ipv4Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Ipv6Address_Type)) {
        dest2 = *((PyNs3Ipv6Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac48Address_Type)) {
        dest2 = *((PyNs3Mac48Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3Mac64Address_Type)) {
        dest2 = *((PyNs3Mac64Address *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        dest2 = *((PyNs3PacketSocketAddress *) dest)->obj;
    } else if (PyObject_IsInstance(dest, (PyObject*) &PyNs3UanAddress_Type)) {
        dest2 = *((PyNs3UanAddress *) dest)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", dest->ob_type->tp_name);
        return NULL;
    }
    if (protocolNumber > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber)) : (self->obj->ns3::WifiNetDevice::SendFrom(ns3::Ptr< ns3::Packet  > (packet_ptr), source2, dest2, protocolNumber));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsBroadcast(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBroadcast()) : (self->obj->ns3::WifiNetDevice::IsBroadcast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetMtu(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMtu()) : (self->obj->ns3::WifiNetDevice::GetMtu());
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsBridge(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsBridge()) : (self->obj->ns3::WifiNetDevice::IsBridge());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetNode(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    (helper_class == NULL)? (self->obj->SetNode(ns3::Ptr< ns3::Node  > (node_ptr))) : (self->obj->ns3::WifiNetDevice::SetNode(ns3::Ptr< ns3::Node  > (node_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetAddress(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetAddress()) : (self->obj->ns3::WifiNetDevice::GetAddress());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsLinkUp(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsLinkUp()) : (self->obj->ns3::WifiNetDevice::IsLinkUp());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetIfIndex(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int index;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"index", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &index)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetIfIndex(index)) : (self->obj->ns3::WifiNetDevice::SetIfIndex(index));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetMac(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiMac *mac;
    ns3::WifiMac *mac_ptr;
    const char *keywords[] = {"mac", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiMac_Type, &mac)) {
        return NULL;
    }
    mac_ptr = (mac ? mac->obj : NULL);
    self->obj->SetMac(ns3::Ptr< ns3::WifiMac  > (mac_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetAddress(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *address;
    ns3::Address address2;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"address", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &address)) {
        return NULL;
    }
    if (PyObject_IsInstance(address, (PyObject*) &PyNs3Address_Type)) {
        address2 = *((PyNs3Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Inet6SocketAddress_Type)) {
        address2 = *((PyNs3Inet6SocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3InetSocketAddress_Type)) {
        address2 = *((PyNs3InetSocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv4Address_Type)) {
        address2 = *((PyNs3Ipv4Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Ipv6Address_Type)) {
        address2 = *((PyNs3Ipv6Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac48Address_Type)) {
        address2 = *((PyNs3Mac48Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3Mac64Address_Type)) {
        address2 = *((PyNs3Mac64Address *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3PacketSocketAddress_Type)) {
        address2 = *((PyNs3PacketSocketAddress *) address)->obj;
    } else if (PyObject_IsInstance(address, (PyObject*) &PyNs3UanAddress_Type)) {
        address2 = *((PyNs3UanAddress *) address)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Address, Inet6SocketAddress, InetSocketAddress, Ipv4Address, Ipv6Address, Mac48Address, Mac64Address, PacketSocketAddress, UanAddress), not %s", address->ob_type->tp_name);
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAddress(address2)) : (self->obj->ns3::WifiNetDevice::SetAddress(address2));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetRemoteStationManager(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *manager;
    ns3::WifiRemoteStationManager *manager_ptr;
    const char *keywords[] = {"manager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &manager)) {
        return NULL;
    }
    manager_ptr = (manager ? manager->obj : NULL);
    self->obj->SetRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (manager_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetBroadcast(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    PyNs3Address *py_Address;
    
    ns3::Address retval = (helper_class == NULL)? (self->obj->GetBroadcast()) : (self->obj->ns3::WifiNetDevice::GetBroadcast());
    py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
    py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Address->obj = new ns3::Address(retval);
    PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
    py_retval = Py_BuildValue((char *) "N", py_Address);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_AddLinkChangeCallback(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl1> callback_cb_impl;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl1> (callback);
    (helper_class == NULL)? (self->obj->AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl))) : (self->obj->ns3::WifiNetDevice::AddLinkChangeCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetReceiveCallback(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *cb;
    ns3::Ptr<PythonCallbackImpl30> cb_cb_impl;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &cb)) {
        return NULL;
    }
    if (!PyCallable_Check(cb)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'cb' must be callbale");
        return NULL;
    }
    cb_cb_impl = ns3::Create<PythonCallbackImpl30> (cb);
    (helper_class == NULL)? (self->obj->SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl))) : (self->obj->ns3::WifiNetDevice::SetReceiveCallback(ns3::Callback<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (cb_cb_impl)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_IsMulticast(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsMulticast()) : (self->obj->ns3::WifiNetDevice::IsMulticast());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SetMtu(PyNs3WifiNetDevice *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    int mtu;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    const char *keywords[] = {"mtu", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &mtu)) {
        return NULL;
    }
    if (mtu > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->SetMtu(mtu)) : (self->obj->ns3::WifiNetDevice::SetMtu(mtu));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetPhy(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::WifiPhy > retval;
    PyNs3WifiPhy *py_WifiPhy;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPhy();
    if (!(const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_WifiPhy = NULL;
    } else {
        py_WifiPhy = (PyNs3WifiPhy *) wrapper_lookup_iter->second;
        Py_INCREF(py_WifiPhy);
    }
    
    if (py_WifiPhy == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval)))), &PyNs3WifiPhy_Type);
        py_WifiPhy = PyObject_GC_New(PyNs3WifiPhy, wrapper_type);
        py_WifiPhy->inst_dict = NULL;
        py_WifiPhy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval))->Ref();
        py_WifiPhy->obj = const_cast<ns3::WifiPhy *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiPhy->obj] = (PyObject *) py_WifiPhy;
    }
    py_retval = Py_BuildValue((char *) "N", py_WifiPhy);
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_SupportsSendFrom(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->SupportsSendFrom()) : (self->obj->ns3::WifiNetDevice::SupportsSendFrom());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3WifiNetDevice_GetChannel(PyNs3WifiNetDevice *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Channel > retval;
    PyNs3WifiNetDevice__PythonHelper *helper_class = dynamic_cast<PyNs3WifiNetDevice__PythonHelper*> (self->obj);
    PyNs3Channel *py_Channel;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = (helper_class == NULL)? (self->obj->GetChannel()) : (self->obj->ns3::WifiNetDevice::GetChannel());
    if (!(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))) == typeid(PyNs3Channel__PythonHelper))
    {
        py_Channel = reinterpret_cast< PyNs3Channel* >(reinterpret_cast< PyNs3Channel__PythonHelper* >(const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Channel);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Channel *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Channel = NULL;
        } else {
            py_Channel = (PyNs3Channel *) wrapper_lookup_iter->second;
            Py_INCREF(py_Channel);
        }
    
        if (py_Channel == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Channel *> (ns3::PeekPointer (retval)))), &PyNs3Channel_Type);
            py_Channel = PyObject_GC_New(PyNs3Channel, wrapper_type);
            py_Channel->inst_dict = NULL;
            py_Channel->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Channel *> (ns3::PeekPointer (retval))->Ref();
            py_Channel->obj = const_cast<ns3::Channel *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Channel->obj] = (PyObject *) py_Channel;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Channel);
    return py_retval;
}


static PyObject*
_wrap_PyNs3WifiNetDevice__copy__(PyNs3WifiNetDevice *self)
{

    PyNs3WifiNetDevice *py_copy;
    py_copy = PyObject_GC_New(PyNs3WifiNetDevice, &PyNs3WifiNetDevice_Type);
    py_copy->obj = new ns3::WifiNetDevice(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3WifiNetDevice_methods[] = {
    {(char *) "GetMulticast", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetMulticast, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsPointToPoint", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsPointToPoint, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetPhy", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetPhy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3WifiNetDevice_Send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetIfIndex", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetIfIndex, METH_NOARGS, NULL },
    {(char *) "NeedsArp", (PyCFunction) _wrap_PyNs3WifiNetDevice_NeedsArp, METH_NOARGS, NULL },
    {(char *) "SetPromiscReceiveCallback", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetPromiscReceiveCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetNode, METH_NOARGS, NULL },
    {(char *) "GetRemoteStationManager", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetRemoteStationManager, METH_NOARGS, NULL },
    {(char *) "GetMac", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetMac, METH_NOARGS, NULL },
    {(char *) "SendFrom", (PyCFunction) _wrap_PyNs3WifiNetDevice_SendFrom, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsBroadcast", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsBroadcast, METH_NOARGS, NULL },
    {(char *) "GetMtu", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetMtu, METH_NOARGS, NULL },
    {(char *) "IsBridge", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsBridge, METH_NOARGS, NULL },
    {(char *) "SetNode", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetNode, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAddress", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetAddress, METH_NOARGS, NULL },
    {(char *) "IsLinkUp", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsLinkUp, METH_NOARGS, NULL },
    {(char *) "SetIfIndex", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetIfIndex, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMac", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetMac, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAddress", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetAddress, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRemoteStationManager", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetBroadcast", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetBroadcast, METH_NOARGS, NULL },
    {(char *) "AddLinkChangeCallback", (PyCFunction) _wrap_PyNs3WifiNetDevice_AddLinkChangeCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetReceiveCallback", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetReceiveCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsMulticast", (PyCFunction) _wrap_PyNs3WifiNetDevice_IsMulticast, METH_NOARGS, NULL },
    {(char *) "SetMtu", (PyCFunction) _wrap_PyNs3WifiNetDevice_SetMtu, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPhy", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetPhy, METH_NOARGS, NULL },
    {(char *) "SupportsSendFrom", (PyCFunction) _wrap_PyNs3WifiNetDevice_SupportsSendFrom, METH_NOARGS, NULL },
    {(char *) "GetChannel", (PyCFunction) _wrap_PyNs3WifiNetDevice_GetChannel, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3WifiNetDevice__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3WifiNetDevice__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3WifiNetDevice__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3WifiNetDevice__tp_clear(PyNs3WifiNetDevice *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::WifiNetDevice *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3WifiNetDevice__tp_traverse(PyNs3WifiNetDevice *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3WifiNetDevice__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3WifiNetDevice__tp_dealloc(PyNs3WifiNetDevice *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3WifiNetDevice__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3WifiNetDevice__tp_richcompare (PyNs3WifiNetDevice *PYBINDGEN_UNUSED(self), PyNs3WifiNetDevice *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3WifiNetDevice_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3WifiNetDevice_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.WifiNetDevice",            /* tp_name */
    sizeof(PyNs3WifiNetDevice),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3WifiNetDevice__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3WifiNetDevice__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3WifiNetDevice__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3WifiNetDevice__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3WifiNetDevice_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3WifiNetDevice, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3WifiNetDevice__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3YansErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3YansErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3YansErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3YansErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3YansErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3YansErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3YansErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansErrorRateModel__PythonHelper::_wrap_DoStart(PyNs3YansErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3YansErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3YansErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansErrorRateModel__PythonHelper::_wrap_DoDispose(PyNs3YansErrorRateModel *self)
{
    PyObject *py_retval;
    PyNs3YansErrorRateModel__PythonHelper *helper = dynamic_cast< PyNs3YansErrorRateModel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

double
PyNs3YansErrorRateModel__PythonHelper::GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansErrorRateModel *self_obj_before;
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *py_WifiMode;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetChunkSuccessRate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansErrorRateModel::GetChunkSuccessRate(mode, snr, nbits);
    }
    self_obj_before = reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj = const_cast< ns3::YansErrorRateModel* >((const ns3::YansErrorRateModel*) this);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode(mode);
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetChunkSuccessRate", (char *) "NdN", py_WifiMode, snr, PyLong_FromUnsignedLong(nbits));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansErrorRateModel::GetChunkSuccessRate(mode, snr, nbits);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansErrorRateModel::GetChunkSuccessRate(mode, snr, nbits);
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansErrorRateModel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3YansErrorRateModel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3YansErrorRateModel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansErrorRateModel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansErrorRateModel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansErrorRateModel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3YansErrorRateModel__tp_init__0(PyNs3YansErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3YansErrorRateModel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansErrorRateModel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3YansErrorRateModel_Type)
    {
        self->obj = new PyNs3YansErrorRateModel__PythonHelper(*((PyNs3YansErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3YansErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansErrorRateModel(*((PyNs3YansErrorRateModel *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3YansErrorRateModel__tp_init__1(PyNs3YansErrorRateModel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3YansErrorRateModel_Type)
    {
        self->obj = new PyNs3YansErrorRateModel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3YansErrorRateModel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansErrorRateModel();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3YansErrorRateModel__tp_init(PyNs3YansErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3YansErrorRateModel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3YansErrorRateModel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3YansErrorRateModel_GetChunkSuccessRate(PyNs3YansErrorRateModel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double retval;
    PyNs3WifiMode *mode;
    double snr;
    unsigned int nbits;
    PyNs3YansErrorRateModel__PythonHelper *helper_class = dynamic_cast<PyNs3YansErrorRateModel__PythonHelper*> (self->obj);
    const char *keywords[] = {"mode", "snr", "nbits", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!dI", (char **) keywords, &PyNs3WifiMode_Type, &mode, &snr, &nbits)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, snr, nbits)) : (self->obj->ns3::YansErrorRateModel::GetChunkSuccessRate(*((PyNs3WifiMode *) mode)->obj, snr, nbits));
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansErrorRateModel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::YansErrorRateModel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


static PyObject*
_wrap_PyNs3YansErrorRateModel__copy__(PyNs3YansErrorRateModel *self)
{

    PyNs3YansErrorRateModel *py_copy;
    py_copy = PyObject_GC_New(PyNs3YansErrorRateModel, &PyNs3YansErrorRateModel_Type);
    py_copy->obj = new ns3::YansErrorRateModel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3YansErrorRateModel_methods[] = {
    {(char *) "GetChunkSuccessRate", (PyCFunction) _wrap_PyNs3YansErrorRateModel_GetChunkSuccessRate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3YansErrorRateModel_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3YansErrorRateModel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3YansErrorRateModel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3YansErrorRateModel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3YansErrorRateModel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3YansErrorRateModel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3YansErrorRateModel__tp_clear(PyNs3YansErrorRateModel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::YansErrorRateModel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3YansErrorRateModel__tp_traverse(PyNs3YansErrorRateModel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3YansErrorRateModel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3YansErrorRateModel__tp_dealloc(PyNs3YansErrorRateModel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3YansErrorRateModel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3YansErrorRateModel__tp_richcompare (PyNs3YansErrorRateModel *PYBINDGEN_UNUSED(self), PyNs3YansErrorRateModel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3YansErrorRateModel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3YansErrorRateModel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.YansErrorRateModel",            /* tp_name */
    sizeof(PyNs3YansErrorRateModel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3YansErrorRateModel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3YansErrorRateModel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3YansErrorRateModel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3YansErrorRateModel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3YansErrorRateModel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3YansErrorRateModel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3YansErrorRateModel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3YansWifiChannel__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel__PythonHelper *helper = dynamic_cast< PyNs3YansWifiChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiChannel__PythonHelper::_wrap_NotifyNewAggregate(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel__PythonHelper *helper = dynamic_cast< PyNs3YansWifiChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiChannel__PythonHelper::_wrap_DoStart(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel__PythonHelper *helper = dynamic_cast< PyNs3YansWifiChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoStart of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoStart__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3YansWifiChannel__PythonHelper::_wrap_DoDispose(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    PyNs3YansWifiChannel__PythonHelper *helper = dynamic_cast< PyNs3YansWifiChannel__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Ptr< ns3::NetDevice >
PyNs3YansWifiChannel__PythonHelper::GetDevice(uint32_t i) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansWifiChannel *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *tmp_NetDevice;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetDevice"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetDevice(i);
    }
    self_obj_before = reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = const_cast< ns3::YansWifiChannel* >((const ns3::YansWifiChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetDevice", (char *) "N", PyLong_FromUnsignedLong(i));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetDevice(i);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NetDevice_Type, &tmp_NetDevice)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetDevice(i);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::NetDevice  > (tmp_NetDevice->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3YansWifiChannel__PythonHelper::GetNDevices() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::YansWifiChannel *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNDevices"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetNDevices();
    }
    self_obj_before = reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj;
    reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = const_cast< ns3::YansWifiChannel* >((const ns3::YansWifiChannel*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNDevices", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetNDevices();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::YansWifiChannel::GetNDevices();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3YansWifiChannel* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3YansWifiChannel__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3YansWifiChannel__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoDispose();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiChannel__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::DoStart();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiChannel__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3YansWifiChannel__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3YansWifiChannel__tp_init__0(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3YansWifiChannel *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiChannel_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3YansWifiChannel_Type)
    {
        self->obj = new PyNs3YansWifiChannel__PythonHelper(*((PyNs3YansWifiChannel *) arg0)->obj);
        self->obj->Ref ();
        ((PyNs3YansWifiChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansWifiChannel(*((PyNs3YansWifiChannel *) arg0)->obj);
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3YansWifiChannel__tp_init__1(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (self->ob_type != &PyNs3YansWifiChannel_Type)
    {
        self->obj = new PyNs3YansWifiChannel__PythonHelper();
        self->obj->Ref ();
        ((PyNs3YansWifiChannel__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::YansWifiChannel();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3YansWifiChannel__tp_init(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3YansWifiChannel__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3YansWifiChannel__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3YansWifiChannel_SetPropagationLossModel(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PropagationLossModel *loss;
    ns3::PropagationLossModel *loss_ptr;
    const char *keywords[] = {"loss", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PropagationLossModel_Type, &loss)) {
        return NULL;
    }
    loss_ptr = (loss ? loss->obj : NULL);
    self->obj->SetPropagationLossModel(ns3::Ptr< ns3::PropagationLossModel  > (loss_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::YansWifiChannel::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_Send(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3YansWifiPhy *sender;
    ns3::YansWifiPhy *sender_ptr;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    double txPowerDbm;
    PyNs3WifiMode *wifiMode;
    ns3::WifiPreamble preamble;
    const char *keywords[] = {"sender", "packet", "txPowerDbm", "wifiMode", "preamble", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!dO!i", (char **) keywords, &PyNs3YansWifiPhy_Type, &sender, &PyNs3Packet_Type, &packet, &txPowerDbm, &PyNs3WifiMode_Type, &wifiMode, &preamble)) {
        return NULL;
    }
    sender_ptr = (sender ? sender->obj : NULL);
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Send(ns3::Ptr< ns3::YansWifiPhy  > (sender_ptr), ns3::Ptr< ns3::Packet  > (packet_ptr), txPowerDbm, *((PyNs3WifiMode *) wifiMode)->obj, preamble);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_GetNDevices(PyNs3YansWifiChannel *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3YansWifiChannel__PythonHelper *helper_class = dynamic_cast<PyNs3YansWifiChannel__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetNDevices()) : (self->obj->ns3::YansWifiChannel::GetNDevices());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_Add(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3YansWifiPhy *phy;
    ns3::YansWifiPhy *phy_ptr;
    const char *keywords[] = {"phy", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3YansWifiPhy_Type, &phy)) {
        return NULL;
    }
    phy_ptr = (phy ? phy->obj : NULL);
    self->obj->Add(ns3::Ptr< ns3::YansWifiPhy  > (phy_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_SetPropagationDelayModel(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3PropagationDelayModel *delay;
    ns3::PropagationDelayModel *delay_ptr;
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3PropagationDelayModel_Type, &delay)) {
        return NULL;
    }
    delay_ptr = (delay ? delay->obj : NULL);
    self->obj->SetPropagationDelayModel(ns3::Ptr< ns3::PropagationDelayModel  > (delay_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3YansWifiChannel_GetDevice(PyNs3YansWifiChannel *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    unsigned int i;
    PyNs3YansWifiChannel__PythonHelper *helper_class = dynamic_cast<PyNs3YansWifiChannel__PythonHelper*> (self->obj);
    const char *keywords[] = {"i", NULL};
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &i)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetDevice(i)) : (self->obj->ns3::YansWifiChannel::GetDevice(i));
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_NetDevice = NULL;
    } else {
        py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
        Py_INCREF(py_NetDevice);
    }
    
    if (py_NetDevice == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
        py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
        py_NetDevice->inst_dict = NULL;
        py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


static PyObject*
_wrap_PyNs3YansWifiChannel__copy__(PyNs3YansWifiChannel *self)
{

    PyNs3YansWifiChannel *py_copy;
    py_copy = PyObject_GC_New(PyNs3YansWifiChannel, &PyNs3YansWifiChannel_Type);
    py_copy->obj = new ns3::YansWifiChannel(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3YansWifiChannel_methods[] = {
    {(char *) "SetPropagationLossModel", (PyCFunction) _wrap_PyNs3YansWifiChannel_SetPropagationLossModel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3YansWifiChannel_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Send", (PyCFunction) _wrap_PyNs3YansWifiChannel_Send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNDevices", (PyCFunction) _wrap_PyNs3YansWifiChannel_GetNDevices, METH_NOARGS, NULL },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3YansWifiChannel_Add, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetPropagationDelayModel", (PyCFunction) _wrap_PyNs3YansWifiChannel_SetPropagationDelayModel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDevice", (PyCFunction) _wrap_PyNs3YansWifiChannel_GetDevice, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3YansWifiChannel__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3YansWifiChannel__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoStart", (PyCFunction) PyNs3YansWifiChannel__PythonHelper::_wrap_DoStart, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3YansWifiChannel__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3YansWifiChannel__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3YansWifiChannel__tp_clear(PyNs3YansWifiChannel *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::YansWifiChannel *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3YansWifiChannel__tp_traverse(PyNs3YansWifiChannel *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3YansWifiChannel__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3YansWifiChannel__tp_dealloc(PyNs3YansWifiChannel *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3YansWifiChannel__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3YansWifiChannel__tp_richcompare (PyNs3YansWifiChannel *PYBINDGEN_UNUSED(self), PyNs3YansWifiChannel *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3YansWifiChannel_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3YansWifiChannel_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.YansWifiChannel",            /* tp_name */
    sizeof(PyNs3YansWifiChannel),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3YansWifiChannel__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3YansWifiChannel__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3YansWifiChannel__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3YansWifiChannel__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3YansWifiChannel_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3YansWifiChannel, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3YansWifiChannel__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3DcaTxop__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3DcaTxop *self)
{
    PyObject *py_retval;
    PyNs3DcaTxop__PythonHelper *helper = dynamic_cast< PyNs3DcaTxop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3DcaTxop__PythonHelper::_wrap_NotifyNewAggregate(PyNs3DcaTxop *self)
{
    PyObject *py_retval;
    PyNs3DcaTxop__PythonHelper *helper = dynamic_cast< PyNs3DcaTxop__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3DcaTxop__PythonHelper::SetMinCw(uint32_t minCw)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcaTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMinCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::DcaTxop::SetMinCw(minCw);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = (ns3::DcaTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMinCw", (char *) "N", PyLong_FromUnsignedLong(minCw));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DcaTxop__PythonHelper::SetMaxCw(uint32_t maxCw)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcaTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMaxCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::DcaTxop::SetMaxCw(maxCw);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = (ns3::DcaTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMaxCw", (char *) "N", PyLong_FromUnsignedLong(maxCw));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DcaTxop__PythonHelper::SetAifsn(uint32_t aifsn)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcaTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetAifsn"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::DcaTxop::SetAifsn(aifsn);
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = (ns3::DcaTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetAifsn", (char *) "N", PyLong_FromUnsignedLong(aifsn));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

uint32_t
PyNs3DcaTxop__PythonHelper::GetMinCw() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcaTxop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMinCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetMinCw();
    }
    self_obj_before = reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = const_cast< ns3::DcaTxop* >((const ns3::DcaTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMinCw", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetMinCw();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetMinCw();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3DcaTxop__PythonHelper::GetMaxCw() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcaTxop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMaxCw"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetMaxCw();
    }
    self_obj_before = reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = const_cast< ns3::DcaTxop* >((const ns3::DcaTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMaxCw", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetMaxCw();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetMaxCw();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint32_t
PyNs3DcaTxop__PythonHelper::GetAifsn() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcaTxop *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetAifsn"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetAifsn();
    }
    self_obj_before = reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = const_cast< ns3::DcaTxop* >((const ns3::DcaTxop*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetAifsn", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetAifsn();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::DcaTxop::GetAifsn();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DcaTxop__PythonHelper::DoStart()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcaTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoStart"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = (ns3::DcaTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoStart", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DcaTxop__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::DcaTxop *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj;
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = (ns3::DcaTxop*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3DcaTxop* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3DcaTxop__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3DcaTxop__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3DcaTxop__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || py_method->ob_type == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3DcaTxop__tp_init(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (self->ob_type != &PyNs3DcaTxop_Type)
    {
        self->obj = new PyNs3DcaTxop__PythonHelper();
        self->obj->Ref ();
        ((PyNs3DcaTxop__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::DcaTxop();
        self->obj->Ref ();
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3DcaTxop_Queue(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3WifiMacHeader *hdr;
    const char *keywords[] = {"packet", "hdr", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Packet_Type, &packet, &PyNs3WifiMacHeader_Type, &hdr)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->Queue(ns3::Ptr< ns3::Packet  > (packet_ptr), *((PyNs3WifiMacHeader *) hdr)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_GetAifsn(PyNs3DcaTxop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3DcaTxop__PythonHelper *helper_class = dynamic_cast<PyNs3DcaTxop__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetAifsn()) : (self->obj->ns3::DcaTxop::GetAifsn());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetMaxQueueDelay(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *delay;
    ns3::Time delay2;
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &delay)) {
        return NULL;
    }
    if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Time_Type)) {
        delay2 = *((PyNs3Time *) delay)->obj;
    } else if (PyObject_IsInstance(delay, (PyObject*) &PyNs3Scalar_Type)) {
        delay2 = *((PyNs3Scalar *) delay)->obj;
    } else {
    
        PyErr_Format(PyExc_TypeError, "parameter must an instance of one of the types (Time, Scalar), not %s", delay->ob_type->tp_name);
        return NULL;
    }
    self->obj->SetMaxQueueDelay(delay2);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetTxFailedCallback(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl15> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl15> (callback);
    self->obj->SetTxFailedCallback(ns3::Callback<void, ns3::WifiMacHeader const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_GetMinCw(PyNs3DcaTxop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3DcaTxop__PythonHelper *helper_class = dynamic_cast<PyNs3DcaTxop__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMinCw()) : (self->obj->ns3::DcaTxop::GetMinCw());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetMaxCw(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int maxCw;
    PyNs3DcaTxop__PythonHelper *helper_class = dynamic_cast<PyNs3DcaTxop__PythonHelper*> (self->obj);
    const char *keywords[] = {"maxCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &maxCw)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetMaxCw(maxCw)) : (self->obj->ns3::DcaTxop::SetMaxCw(maxCw));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::DcaTxop::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetAifsn(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int aifsn;
    PyNs3DcaTxop__PythonHelper *helper_class = dynamic_cast<PyNs3DcaTxop__PythonHelper*> (self->obj);
    const char *keywords[] = {"aifsn", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &aifsn)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetAifsn(aifsn)) : (self->obj->ns3::DcaTxop::SetAifsn(aifsn));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetTxOkCallback(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *callback;
    ns3::Ptr<PythonCallbackImpl15> callback_cb_impl;
    const char *keywords[] = {"callback", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &callback)) {
        return NULL;
    }
    if (!PyCallable_Check(callback)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'callback' must be callbale");
        return NULL;
    }
    callback_cb_impl = ns3::Create<PythonCallbackImpl15> (callback);
    self->obj->SetTxOkCallback(ns3::Callback<void, ns3::WifiMacHeader const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (callback_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetLow(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3MacLow *low;
    ns3::MacLow *low_ptr;
    const char *keywords[] = {"low", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3MacLow_Type, &low)) {
        return NULL;
    }
    low_ptr = (low ? low->obj : NULL);
    self->obj->SetLow(ns3::Ptr< ns3::MacLow  > (low_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetMinCw(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int minCw;
    PyNs3DcaTxop__PythonHelper *helper_class = dynamic_cast<PyNs3DcaTxop__PythonHelper*> (self->obj);
    const char *keywords[] = {"minCw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &minCw)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetMinCw(minCw)) : (self->obj->ns3::DcaTxop::SetMinCw(minCw));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_GetMaxCw(PyNs3DcaTxop *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3DcaTxop__PythonHelper *helper_class = dynamic_cast<PyNs3DcaTxop__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMaxCw()) : (self->obj->ns3::DcaTxop::GetMaxCw());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetMaxQueueSize(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int size;
    const char *keywords[] = {"size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &size)) {
        return NULL;
    }
    self->obj->SetMaxQueueSize(size);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3DcaTxop_SetWifiRemoteStationManager(PyNs3DcaTxop *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3WifiRemoteStationManager *remoteManager;
    ns3::WifiRemoteStationManager *remoteManager_ptr;
    const char *keywords[] = {"remoteManager", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3WifiRemoteStationManager_Type, &remoteManager)) {
        return NULL;
    }
    remoteManager_ptr = (remoteManager ? remoteManager->obj : NULL);
    self->obj->SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager  > (remoteManager_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3DcaTxop_methods[] = {
    {(char *) "Queue", (PyCFunction) _wrap_PyNs3DcaTxop_Queue, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetAifsn", (PyCFunction) _wrap_PyNs3DcaTxop_GetAifsn, METH_NOARGS, NULL },
    {(char *) "SetMaxQueueDelay", (PyCFunction) _wrap_PyNs3DcaTxop_SetMaxQueueDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxFailedCallback", (PyCFunction) _wrap_PyNs3DcaTxop_SetTxFailedCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMinCw", (PyCFunction) _wrap_PyNs3DcaTxop_GetMinCw, METH_NOARGS, NULL },
    {(char *) "SetMaxCw", (PyCFunction) _wrap_PyNs3DcaTxop_SetMaxCw, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3DcaTxop_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetAifsn", (PyCFunction) _wrap_PyNs3DcaTxop_SetAifsn, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetTxOkCallback", (PyCFunction) _wrap_PyNs3DcaTxop_SetTxOkCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetLow", (PyCFunction) _wrap_PyNs3DcaTxop_SetLow, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMinCw", (PyCFunction) _wrap_PyNs3DcaTxop_SetMinCw, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMaxCw", (PyCFunction) _wrap_PyNs3DcaTxop_GetMaxCw, METH_NOARGS, NULL },
    {(char *) "SetMaxQueueSize", (PyCFunction) _wrap_PyNs3DcaTxop_SetMaxQueueSize, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWifiRemoteStationManager", (PyCFunction) _wrap_PyNs3DcaTxop_SetWifiRemoteStationManager, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3DcaTxop__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3DcaTxop__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3DcaTxop__tp_clear(PyNs3DcaTxop *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::DcaTxop *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3DcaTxop__tp_traverse(PyNs3DcaTxop *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj) == typeid(PyNs3DcaTxop__PythonHelper)  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3DcaTxop__tp_dealloc(PyNs3DcaTxop *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3DcaTxop__tp_clear(self);
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3DcaTxop__tp_richcompare (PyNs3DcaTxop *PYBINDGEN_UNUSED(self), PyNs3DcaTxop *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3DcaTxop_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3DcaTxop_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.DcaTxop",            /* tp_name */
    sizeof(PyNs3DcaTxop),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3DcaTxop__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3DcaTxop__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3DcaTxop__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3DcaTxop__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3DcaTxop_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3DcaTxop, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3DcaTxop__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pyns3__WifiModeListIter__tp_clear(Pyns3__WifiModeListIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pyns3__WifiModeListIter__tp_traverse(Pyns3__WifiModeListIter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pyns3__WifiModeList__tp_dealloc(Pyns3__WifiModeList *self)
{
    delete self->obj;
    self->obj = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static void
_wrap_Pyns3__WifiModeListIter__tp_dealloc(Pyns3__WifiModeListIter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    self->ob_type->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pyns3__WifiModeList__tp_iter(Pyns3__WifiModeList *self)
{
    Pyns3__WifiModeListIter *iter = PyObject_GC_New(Pyns3__WifiModeListIter, &Pyns3__WifiModeListIter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new ns3::WifiModeList::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pyns3__WifiModeListIter__tp_iter(Pyns3__WifiModeListIter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pyns3__WifiModeListIter__tp_iternext(Pyns3__WifiModeListIter *self)
{
    PyObject *py_retval;
    ns3::WifiModeList::iterator iter;
    PyNs3WifiMode *py_WifiMode;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_WifiMode = PyObject_New(PyNs3WifiMode, &PyNs3WifiMode_Type);
    py_WifiMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_WifiMode->obj = new ns3::WifiMode((*iter));
    PyNs3WifiMode_wrapper_registry[(void *) py_WifiMode->obj] = (PyObject *) py_WifiMode;
    py_retval = Py_BuildValue((char *) "N", py_WifiMode);
    return py_retval;
}

int _wrap_convert_py2c__ns3__WifiMode(PyObject *value, ns3::WifiMode *address)
{
    PyObject *py_retval;
    PyNs3WifiMode *tmp_WifiMode;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3WifiMode_Type, &tmp_WifiMode)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_WifiMode->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__ns3__WifiModeList(PyObject *arg, ns3::WifiModeList *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pyns3__WifiModeList_Type)) {
        *container = *((Pyns3__WifiModeList*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::WifiMode item;
            if (!_wrap_convert_py2c__ns3__WifiMode(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Ns3__WifiModeList instance, or a list of ns3::WifiMode");
        return 0;
    }
    return 1;
}


static int
_wrap_Pyns3__WifiModeList__tp_init(Pyns3__WifiModeList *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new ns3::WifiModeList;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__ns3__WifiModeList(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pyns3__WifiModeList_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Ns3__WifiModeList",            /* tp_name */
    sizeof(Pyns3__WifiModeList),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__WifiModeList__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__WifiModeList__tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pyns3__WifiModeList__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pyns3__WifiModeListIter_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    (char *) "ns3.Ns3__WifiModeListIter",            /* tp_name */
    sizeof(Pyns3__WifiModeListIter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pyns3__WifiModeListIter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pyns3__WifiModeListIter__tp_traverse,     /* tp_traverse */
    (inquiry)Pyns3__WifiModeListIter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pyns3__WifiModeListIter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pyns3__WifiModeListIter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};












































