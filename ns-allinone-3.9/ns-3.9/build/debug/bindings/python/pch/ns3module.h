/* This file was generated by PyBindGen 0.15.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;


#include "everything.h"
#include <fstream>
#include <typeinfo>
#include <ostream>
#include <sstream>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::AttributeList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeList;


extern PyTypeObject PyNs3AttributeList_Type;

extern std::map<void*, PyObject*> PyNs3AttributeList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject PyNs3CallbackBase_Type;

extern std::map<void*, PyObject*> PyNs3CallbackBase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CommandLine *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CommandLine;


extern PyTypeObject PyNs3CommandLine_Type;

extern std::map<void*, PyObject*> PyNs3CommandLine_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CriticalSection *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CriticalSection;


extern PyTypeObject PyNs3CriticalSection_Type;

extern std::map<void*, PyObject*> PyNs3CriticalSection_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalValue;


extern PyTypeObject PyNs3GlobalValue_Type;

extern std::map<void*, PyObject*> PyNs3GlobalValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 0 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__0;


extern PyTypeObject PyNs3IntToType__0_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__0_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 1 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__1;


extern PyTypeObject PyNs3IntToType__1_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__1_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 2 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__2;


extern PyTypeObject PyNs3IntToType__2_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__2_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 3 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__3;


extern PyTypeObject PyNs3IntToType__3_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__3_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 4 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__4;


extern PyTypeObject PyNs3IntToType__4_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__4_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 5 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__5;


extern PyTypeObject PyNs3IntToType__5_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__5_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IntToType< 6 > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntToType__6;


extern PyTypeObject PyNs3IntToType__6_Type;

extern std::map<void*, PyObject*> PyNs3IntToType__6_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Names *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Names;


extern PyTypeObject PyNs3Names_Type;

extern std::map<void*, PyObject*> PyNs3Names_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject PyNs3ObjectBase_Type;

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;
    PyNs3ObjectBase__PythonHelper()
        : ns3::ObjectBase(), m_pyself(NULL)
        {}

    PyNs3ObjectBase__PythonHelper(ns3::ObjectBase const & arg0)
        : ns3::ObjectBase(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_ConstructSelf(PyNs3ObjectBase *self, PyObject *args, PyObject *kwargs);
    inline void ConstructSelf__parent_caller(ns3::AttributeList const & attributes)
    { ns3::ObjectBase::ConstructSelf(attributes); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ObjectBase *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyConstructionCompleted();
};

extern std::map<void*, PyObject*> PyNs3ObjectBase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject PyNs3ObjectDeleter_Type;

extern std::map<void*, PyObject*> PyNs3ObjectDeleter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject PyNs3ObjectFactory_Type;

extern std::map<void*, PyObject*> PyNs3ObjectFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RandomVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariable;


extern PyTypeObject PyNs3RandomVariable_Type;

extern std::map<void*, PyObject*> PyNs3RandomVariable_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RngStream *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RngStream;


extern PyTypeObject PyNs3RngStream_Type;

extern std::map<void*, PyObject*> PyNs3RngStream_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SeedManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SeedManager;


extern PyTypeObject PyNs3SeedManager_Type;

extern std::map<void*, PyObject*> PyNs3SeedManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SequentialVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialVariable;


extern PyTypeObject PyNs3SequentialVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;



#include <map>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3
# include <cxxabi.h>
#endif

namespace pybindgen {

class TypeMap
{
   std::map<const char *, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {
       m_map[cpp_type_info.name()] = python_wrapper;
   }

   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {
       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
           while (_typeinfo && (python_wrapper = m_map[_typeinfo->name()]) == 0)
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SystemCondition *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemCondition;


extern PyTypeObject PyNs3SystemCondition_Type;

extern std::map<void*, PyObject*> PyNs3SystemCondition_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SystemMutex *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemMutex;


extern PyTypeObject PyNs3SystemMutex_Type;

extern std::map<void*, PyObject*> PyNs3SystemMutex_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SystemWallClockMs *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemWallClockMs;


extern PyTypeObject PyNs3SystemWallClockMs_Type;

extern std::map<void*, PyObject*> PyNs3SystemWallClockMs_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TestCase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TestCase;


extern PyTypeObject PyNs3TestCase_Type;

class PyNs3TestCase__PythonHelper : public ns3::TestCase
{
public:
    PyObject *m_pyself;
    PyNs3TestCase__PythonHelper(std::string name)
        : ns3::TestCase(name), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TestCase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoReportTestFailure(PyNs3TestCase *self, PyObject *args, PyObject *kwargs);
    inline void DoReportTestFailure__parent_caller(std::string cond, std::string actual, std::string limit, std::string message, std::string file, int32_t line)
    { ns3::TestCase::DoReportTestFailure(cond, actual, limit, message, file, line); }

    static PyObject * _wrap_DoSetup(PyNs3TestCase *self);
    inline void DoSetup__parent_caller()
    { ns3::TestCase::DoSetup(); }

    static PyObject * _wrap_DoReportCaseFailure(PyNs3TestCase *self);
    inline void DoReportCaseFailure__parent_caller()
    { ns3::TestCase::DoReportCaseFailure(); }

    static PyObject * _wrap_DoReportCaseSuccess(PyNs3TestCase *self);
    inline void DoReportCaseSuccess__parent_caller()
    { ns3::TestCase::DoReportCaseSuccess(); }

    static PyObject * _wrap_DoReportStart(PyNs3TestCase *self);
    inline void DoReportStart__parent_caller()
    { ns3::TestCase::DoReportStart(); }

    static PyObject * _wrap_DoReportEnd(PyNs3TestCase *self);
    inline void DoReportEnd__parent_caller()
    { ns3::TestCase::DoReportEnd(); }

    static PyObject * _wrap_DoTeardown(PyNs3TestCase *self);
    inline void DoTeardown__parent_caller()
    { ns3::TestCase::DoTeardown(); }

    virtual void DoReportStart();

    virtual void DoReportCaseSuccess();

    virtual void DoReportCaseFailure();

    virtual void DoReportTestFailure(std::string cond, std::string actual, std::string limit, std::string message, std::string file, int32_t line);

    virtual void DoReportEnd();

    virtual void DoSetup();

    virtual bool DoRun();

    virtual void DoTeardown();
};

extern std::map<void*, PyObject*> PyNs3TestCase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TestRunner *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TestRunner;


extern PyTypeObject PyNs3TestRunner_Type;

extern std::map<void*, PyObject*> PyNs3TestRunner_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TestSuite *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TestSuite;


extern PyTypeObject PyNs3TestSuite_Type;

class PyNs3TestSuite__PythonHelper : public ns3::TestSuite
{
public:
    PyObject *m_pyself;
    PyNs3TestSuite__PythonHelper(std::string name, ns3::TestSuite::TestType type)
        : ns3::TestSuite(name, type), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TestSuite__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoReportSuccess(PyNs3TestSuite *self);
    inline void DoReportSuccess__parent_caller()
    { ns3::TestSuite::DoReportSuccess(); }

    static PyObject * _wrap_DoRun(PyNs3TestSuite *self);
    inline bool DoRun__parent_caller()
    { return ns3::TestSuite::DoRun(); }

    static PyObject * _wrap_DoSetup(PyNs3TestSuite *self);
    inline void DoSetup__parent_caller()
    { ns3::TestSuite::DoSetup(); }

    static PyObject * _wrap_DoReportStart(PyNs3TestSuite *self);
    inline void DoReportStart__parent_caller()
    { ns3::TestSuite::DoReportStart(); }

    static PyObject * _wrap_DoReportEnd(PyNs3TestSuite *self);
    inline void DoReportEnd__parent_caller()
    { ns3::TestSuite::DoReportEnd(); }

    static PyObject * _wrap_DoReportFailure(PyNs3TestSuite *self);
    inline void DoReportFailure__parent_caller()
    { ns3::TestSuite::DoReportFailure(); }

    static PyObject * _wrap_DoTeardown(PyNs3TestSuite *self);
    inline void DoTeardown__parent_caller()
    { ns3::TestSuite::DoTeardown(); }

    virtual void DoReportStart();

    virtual void DoReportSuccess();

    virtual void DoReportFailure();

    virtual void DoReportEnd();

    virtual void DoSetup();

    virtual bool DoRun();

    virtual void DoTeardown();
};

extern std::map<void*, PyObject*> PyNs3TestSuite_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TracedValue< double > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Double;


extern PyTypeObject PyNs3TracedValue__Double_Type;

extern std::map<void*, PyObject*> PyNs3TracedValue__Double_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TriangularVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularVariable;


extern PyTypeObject PyNs3TriangularVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject PyNs3TypeId_Type;

extern std::map<void*, PyObject*> PyNs3TypeId_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInfo;


extern PyTypeObject PyNs3TypeIdAttributeInfo_Type;

extern std::map<void*, PyObject*> PyNs3TypeIdAttributeInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UniformVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformVariable;


extern PyTypeObject PyNs3UniformVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::UnsafeAttributeList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UnsafeAttributeList;


extern PyTypeObject PyNs3UnsafeAttributeList_Type;

extern std::map<void*, PyObject*> PyNs3UnsafeAttributeList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Vector2D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2D;


extern PyTypeObject PyNs3Vector2D_Type;

extern std::map<void*, PyObject*> PyNs3Vector2D_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Vector3D *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3D;


extern PyTypeObject PyNs3Vector3D_Type;

extern std::map<void*, PyObject*> PyNs3Vector3D_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WeibullVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullVariable;


extern PyTypeObject PyNs3WeibullVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::ZetaVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaVariable;


extern PyTypeObject PyNs3ZetaVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::ZipfVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfVariable;


extern PyTypeObject PyNs3ZipfVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject PyNs3Empty_Type;

extern std::map<void*, PyObject*> PyNs3Empty_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ConstantVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantVariable;


extern PyTypeObject PyNs3ConstantVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::DeterministicVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicVariable;


extern PyTypeObject PyNs3DeterministicVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalVariable;


extern PyTypeObject PyNs3EmpiricalVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::ErlangVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangVariable;


extern PyTypeObject PyNs3ErlangVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::ExponentialVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialVariable;


extern PyTypeObject PyNs3ExponentialVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::GammaVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaVariable;


extern PyTypeObject PyNs3GammaVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::IntEmpiricalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntEmpiricalVariable;


extern PyTypeObject PyNs3IntEmpiricalVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::LogNormalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalVariable;


extern PyTypeObject PyNs3LogNormalVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::NormalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalVariable;


extern PyTypeObject PyNs3NormalVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject PyNs3Object_Type;

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;
    PyNs3Object__PythonHelper()
        : ns3::Object(), m_pyself(NULL)
        {}

    PyNs3Object__PythonHelper(ns3::Object const & o)
        : ns3::Object(o), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Object *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Object *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Object *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Object *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Object__PythonHelper")
        .SetParent< ns3::Object > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Object__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject PyNs3ObjectAggregateIterator_Type;

extern std::map<void*, PyObject*> PyNs3ObjectAggregateIterator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ParetoVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoVariable;


extern PyTypeObject PyNs3ParetoVariable_Type;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::RefCountBase, ns3::empty, ns3::DefaultDeleter<ns3::RefCountBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3RefCountBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3RefCountBase__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SystemThread, ns3::empty, ns3::DefaultDeleter<ns3::SystemThread> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3SystemThread_Ns3Empty_Ns3DefaultDeleter__lt__ns3SystemThread__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SystemThread *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SystemThread;


extern PyTypeObject PyNs3SystemThread_Type;


typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject PyNs3TraceSourceAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject PyNs3AttributeAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject PyNs3AttributeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject PyNs3AttributeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject PyNs3BooleanChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject PyNs3BooleanValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject PyNs3CallbackChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject PyNs3CallbackImplBase_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject PyNs3CallbackValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject PyNs3DoubleValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject PyNs3EmptyAttributeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject PyNs3EnumChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject PyNs3EnumValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject PyNs3IntegerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject PyNs3ObjectFactoryChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject PyNs3ObjectFactoryValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectVectorAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectVectorAccessor;


extern PyTypeObject PyNs3ObjectVectorAccessor_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectVectorChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectVectorChecker;


extern PyTypeObject PyNs3ObjectVectorChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::ObjectVectorValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectVectorValue;


extern PyTypeObject PyNs3ObjectVectorValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::PointerChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerChecker;


extern PyTypeObject PyNs3PointerChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::PointerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointerValue;


extern PyTypeObject PyNs3PointerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableChecker;


extern PyTypeObject PyNs3RandomVariableChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableValue;


extern PyTypeObject PyNs3RandomVariableValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::RefCountBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RefCountBase;


extern PyTypeObject PyNs3RefCountBase_Type;


typedef struct {
    PyObject_HEAD
    ns3::StringChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringChecker;


extern PyTypeObject PyNs3StringChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::StringValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StringValue;


extern PyTypeObject PyNs3StringValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject PyNs3TypeIdChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject PyNs3TypeIdValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject PyNs3UintegerValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector2DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DChecker;


extern PyTypeObject PyNs3Vector2DChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector2DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector2DValue;


extern PyTypeObject PyNs3Vector2DValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector3DChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DChecker;


extern PyTypeObject PyNs3Vector3DChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Vector3DValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Vector3DValue;


extern PyTypeObject PyNs3Vector3DValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject PyNs3EventId_Type;

extern std::map<void*, PyObject*> PyNs3EventId_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::HighPrecision *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HighPrecision;


extern PyTypeObject PyNs3HighPrecision_Type;

extern std::map<void*, PyObject*> PyNs3HighPrecision_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject PyNs3Simulator_Type;

extern std::map<void*, PyObject*> PyNs3Simulator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject PyNs3Time_Type;

extern std::map<void*, PyObject*> PyNs3Time_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TimeBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeBase;


extern PyTypeObject PyNs3TimeBase_Type;

extern std::map<void*, PyObject*> PyNs3TimeBase_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Timer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Timer;


extern PyTypeObject PyNs3Timer_Type;

extern std::map<void*, PyObject*> PyNs3Timer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TimerImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimerImpl;


extern PyTypeObject PyNs3TimerImpl_Type;

class PyNs3TimerImpl__PythonHelper : public ns3::TimerImpl
{
public:
    PyObject *m_pyself;
    PyNs3TimerImpl__PythonHelper()
        : ns3::TimerImpl(), m_pyself(NULL)
        {}

    PyNs3TimerImpl__PythonHelper(ns3::TimerImpl const & arg0)
        : ns3::TimerImpl(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TimerImpl__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void Invoke();

    virtual ns3::EventId Schedule(ns3::Time const & delay);
};

extern std::map<void*, PyObject*> PyNs3TimerImpl_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Watchdog *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Watchdog;


extern PyTypeObject PyNs3Watchdog_Type;

extern std::map<void*, PyObject*> PyNs3Watchdog_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Scalar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Scalar;


extern PyTypeObject PyNs3Scalar_Type;

extern std::map<void*, PyObject*> PyNs3Scalar_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Scheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Scheduler;


extern PyTypeObject PyNs3Scheduler_Type;

class PyNs3Scheduler__PythonHelper : public ns3::Scheduler
{
public:
    PyObject *m_pyself;
    PyNs3Scheduler__PythonHelper()
        : ns3::Scheduler(), m_pyself(NULL)
        {}

    PyNs3Scheduler__PythonHelper(ns3::Scheduler const & arg0)
        : ns3::Scheduler(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Scheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Scheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Scheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Scheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Scheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Scheduler__PythonHelper")
        .SetParent< ns3::Scheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Scheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Scheduler::Event *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SchedulerEvent;


extern PyTypeObject PyNs3SchedulerEvent_Type;

extern std::map<void*, PyObject*> PyNs3SchedulerEvent_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Scheduler::EventKey *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SchedulerEventKey;


extern PyTypeObject PyNs3SchedulerEventKey_Type;

extern std::map<void*, PyObject*> PyNs3SchedulerEventKey_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimulatorImpl;


extern PyTypeObject PyNs3SimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::Synchronizer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Synchronizer;


extern PyTypeObject PyNs3Synchronizer_Type;

class PyNs3Synchronizer__PythonHelper : public ns3::Synchronizer
{
public:
    PyObject *m_pyself;
    PyNs3Synchronizer__PythonHelper(ns3::Synchronizer const & arg0)
        : ns3::Synchronizer(arg0), m_pyself(NULL)
        {}

    PyNs3Synchronizer__PythonHelper()
        : ns3::Synchronizer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Synchronizer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Synchronizer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Synchronizer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Synchronizer *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Synchronizer *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual uint64_t DoEventEnd();

    virtual void DoEventStart();

    virtual uint64_t DoGetCurrentRealtime();

    virtual int64_t DoGetDrift(uint64_t ns);

    virtual bool DoRealtime();

    virtual void DoSetCondition(bool arg0);

    virtual void DoSetOrigin(uint64_t ns);

    virtual void DoSignal();

    virtual bool DoSynchronize(uint64_t nsCurrent, uint64_t nsDelay);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Synchronizer__PythonHelper")
        .SetParent< ns3::Synchronizer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Synchronizer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::CalendarScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CalendarScheduler;


extern PyTypeObject PyNs3CalendarScheduler_Type;

class PyNs3CalendarScheduler__PythonHelper : public ns3::CalendarScheduler
{
public:
    PyObject *m_pyself;
    PyNs3CalendarScheduler__PythonHelper(ns3::CalendarScheduler const & arg0)
        : ns3::CalendarScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3CalendarScheduler__PythonHelper()
        : ns3::CalendarScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CalendarScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CalendarScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3CalendarScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3CalendarScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3CalendarScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3CalendarScheduler__PythonHelper")
        .SetParent< ns3::CalendarScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3CalendarScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DefaultSimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DefaultSimulatorImpl;


extern PyTypeObject PyNs3DefaultSimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject PyNs3EventImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::HeapScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HeapScheduler;


extern PyTypeObject PyNs3HeapScheduler_Type;

class PyNs3HeapScheduler__PythonHelper : public ns3::HeapScheduler
{
public:
    PyObject *m_pyself;
    PyNs3HeapScheduler__PythonHelper(ns3::HeapScheduler const & arg0)
        : ns3::HeapScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3HeapScheduler__PythonHelper()
        : ns3::HeapScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3HeapScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3HeapScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3HeapScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3HeapScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3HeapScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3HeapScheduler__PythonHelper")
        .SetParent< ns3::HeapScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3HeapScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ListScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ListScheduler;


extern PyTypeObject PyNs3ListScheduler_Type;

class PyNs3ListScheduler__PythonHelper : public ns3::ListScheduler
{
public:
    PyObject *m_pyself;
    PyNs3ListScheduler__PythonHelper(ns3::ListScheduler const & arg0)
        : ns3::ListScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3ListScheduler__PythonHelper()
        : ns3::ListScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ListScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ListScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ListScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ListScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ListScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ListScheduler__PythonHelper")
        .SetParent< ns3::ListScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ListScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MapScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MapScheduler;


extern PyTypeObject PyNs3MapScheduler_Type;

class PyNs3MapScheduler__PythonHelper : public ns3::MapScheduler
{
public:
    PyObject *m_pyself;
    PyNs3MapScheduler__PythonHelper(ns3::MapScheduler const & arg0)
        : ns3::MapScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3MapScheduler__PythonHelper()
        : ns3::MapScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MapScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MapScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MapScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MapScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3MapScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MapScheduler__PythonHelper")
        .SetParent< ns3::MapScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MapScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ns2CalendarScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ns2CalendarScheduler;


extern PyTypeObject PyNs3Ns2CalendarScheduler_Type;

class PyNs3Ns2CalendarScheduler__PythonHelper : public ns3::Ns2CalendarScheduler
{
public:
    PyObject *m_pyself;
    PyNs3Ns2CalendarScheduler__PythonHelper(ns3::Ns2CalendarScheduler const & arg0)
        : ns3::Ns2CalendarScheduler(arg0), m_pyself(NULL)
        {}

    PyNs3Ns2CalendarScheduler__PythonHelper()
        : ns3::Ns2CalendarScheduler(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ns2CalendarScheduler__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ns2CalendarScheduler *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ns2CalendarScheduler *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ns2CalendarScheduler *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ns2CalendarScheduler *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Insert(ns3::Scheduler::Event const & ev);

    virtual bool IsEmpty() const;

    virtual ns3::Scheduler::Event PeekNext() const;

    virtual void Remove(ns3::Scheduler::Event const & ev);

    virtual ns3::Scheduler::Event RemoveNext();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ns2CalendarScheduler__PythonHelper")
        .SetParent< ns3::Ns2CalendarScheduler > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ns2CalendarScheduler__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TimeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeChecker;


extern PyTypeObject PyNs3TimeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject PyNs3TimeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::BandInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BandInfo;


extern PyTypeObject PyNs3BandInfo_Type;

extern std::map<void*, PyObject*> PyNs3BandInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject PyNs3Buffer_Type;

extern std::map<void*, PyObject*> PyNs3Buffer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject PyNs3BufferIterator_Type;

extern std::map<void*, PyObject*> PyNs3BufferIterator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject PyNs3ByteTagIterator_Type;

extern std::map<void*, PyObject*> PyNs3ByteTagIterator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject PyNs3ByteTagIteratorItem_Type;

extern std::map<void*, PyObject*> PyNs3ByteTagIteratorItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject PyNs3ByteTagList_Type;

extern std::map<void*, PyObject*> PyNs3ByteTagList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject PyNs3ByteTagListIterator_Type;

extern std::map<void*, PyObject*> PyNs3ByteTagListIterator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject PyNs3ByteTagListIteratorItem_Type;

extern std::map<void*, PyObject*> PyNs3ByteTagListIteratorItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DataRate *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRate;


extern PyTypeObject PyNs3DataRate_Type;

extern std::map<void*, PyObject*> PyNs3DataRate_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject PyNs3PacketMetadata_Type;

extern std::map<void*, PyObject*> PyNs3PacketMetadata_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject PyNs3PacketMetadataItem_Type;

extern std::map<void*, PyObject*> PyNs3PacketMetadataItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject PyNs3PacketMetadataItemIterator_Type;

extern std::map<void*, PyObject*> PyNs3PacketMetadataItemIterator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject PyNs3PacketTagIterator_Type;

extern std::map<void*, PyObject*> PyNs3PacketTagIterator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject PyNs3PacketTagIteratorItem_Type;

extern std::map<void*, PyObject*> PyNs3PacketTagIteratorItem_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject PyNs3PacketTagList_Type;

extern std::map<void*, PyObject*> PyNs3PacketTagList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject PyNs3PacketTagListTagData_Type;

extern std::map<void*, PyObject*> PyNs3PacketTagListTagData_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PcapFile *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFile;


extern PyTypeObject PyNs3PcapFile_Type;
extern PyTypeObject PyNs3PcapFileMeta_Type;

extern std::map<void*, PyObject*> PyNs3PcapFile_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SequenceNumber32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequenceNumber32;


extern PyTypeObject PyNs3SequenceNumber32_Type;

extern std::map<void*, PyObject*> PyNs3SequenceNumber32_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SpectrumType *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumType;


extern PyTypeObject PyNs3SpectrumType_Type;

extern std::map<void*, PyObject*> PyNs3SpectrumType_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SpectrumTypeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumTypeFactory;


extern PyTypeObject PyNs3SpectrumTypeFactory_Type;

extern std::map<void*, PyObject*> PyNs3SpectrumTypeFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject PyNs3Tag_Type;


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject PyNs3TagBuffer_Type;

extern std::map<void*, PyObject*> PyNs3TagBuffer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject PyNs3Chunk_Type;


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject PyNs3Header_Type;


typedef struct {
    PyObject_HEAD
    ns3::PacketBurst *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketBurst;


extern PyTypeObject PyNs3PacketBurst_Type;

class PyNs3PacketBurst__PythonHelper : public ns3::PacketBurst
{
public:
    PyObject *m_pyself;
    PyNs3PacketBurst__PythonHelper(ns3::PacketBurst const & arg0)
        : ns3::PacketBurst(arg0), m_pyself(NULL)
        {}

    PyNs3PacketBurst__PythonHelper()
        : ns3::PacketBurst(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketBurst__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PacketBurst *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PacketBurst *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PacketBurst *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PacketBurst__PythonHelper")
        .SetParent< ns3::PacketBurst > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PacketBurst__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PcapFileWrapper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapFileWrapper;


extern PyTypeObject PyNs3PcapFileWrapper_Type;


typedef struct {
    PyObject_HEAD
    ns3::PropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationDelayModel;


extern PyTypeObject PyNs3PropagationDelayModel_Type;

class PyNs3PropagationDelayModel__PythonHelper : public ns3::PropagationDelayModel
{
public:
    PyObject *m_pyself;
    PyNs3PropagationDelayModel__PythonHelper()
        : ns3::PropagationDelayModel(), m_pyself(NULL)
        {}

    PyNs3PropagationDelayModel__PythonHelper(ns3::PropagationDelayModel const & arg0)
        : ns3::PropagationDelayModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PropagationDelayModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PropagationDelayModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PropagationDelayModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PropagationDelayModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Time GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PropagationDelayModel__PythonHelper")
        .SetParent< ns3::PropagationDelayModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PropagationDelayModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PropagationLossModel;


extern PyTypeObject PyNs3PropagationLossModel_Type;

class PyNs3PropagationLossModel__PythonHelper : public ns3::PropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3PropagationLossModel__PythonHelper()
        : ns3::PropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PropagationLossModel__PythonHelper")
        .SetParent< ns3::PropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationDelayModel;


extern PyTypeObject PyNs3RandomPropagationDelayModel_Type;

class PyNs3RandomPropagationDelayModel__PythonHelper : public ns3::RandomPropagationDelayModel
{
public:
    PyObject *m_pyself;
    PyNs3RandomPropagationDelayModel__PythonHelper(ns3::RandomPropagationDelayModel const & arg0)
        : ns3::RandomPropagationDelayModel(arg0), m_pyself(NULL)
        {}

    PyNs3RandomPropagationDelayModel__PythonHelper()
        : ns3::RandomPropagationDelayModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomPropagationDelayModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomPropagationDelayModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RandomPropagationDelayModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RandomPropagationDelayModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Time GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomPropagationDelayModel__PythonHelper")
        .SetParent< ns3::RandomPropagationDelayModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomPropagationDelayModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RandomPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomPropagationLossModel;


extern PyTypeObject PyNs3RandomPropagationLossModel_Type;

class PyNs3RandomPropagationLossModel__PythonHelper : public ns3::RandomPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3RandomPropagationLossModel__PythonHelper()
        : ns3::RandomPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomPropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomPropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RandomPropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RandomPropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomPropagationLossModel__PythonHelper")
        .SetParent< ns3::RandomPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RangePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RangePropagationLossModel;


extern PyTypeObject PyNs3RangePropagationLossModel_Type;

class PyNs3RangePropagationLossModel__PythonHelper : public ns3::RangePropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3RangePropagationLossModel__PythonHelper()
        : ns3::RangePropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RangePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RangePropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RangePropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RangePropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RangePropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RangePropagationLossModel__PythonHelper")
        .SetParent< ns3::RangePropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RangePropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::OutputStreamWrapper, ns3::empty, ns3::DefaultDeleter<ns3::OutputStreamWrapper> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3OutputStreamWrapper_Ns3Empty_Ns3DefaultDeleter__lt__ns3OutputStreamWrapper__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumConverter, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumConverter> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3SpectrumConverter_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumConverter__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumModel, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumModel> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3SpectrumModel_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumModel__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::SpectrumValue, ns3::empty, ns3::DefaultDeleter<ns3::SpectrumValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3SpectrumValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3SpectrumValue__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SpectrumConverter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumConverter;


extern PyTypeObject PyNs3SpectrumConverter_Type;


typedef struct {
    PyObject_HEAD
    ns3::SpectrumModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumModel;


extern PyTypeObject PyNs3SpectrumModel_Type;


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPropagationLossModel;


extern PyTypeObject PyNs3SpectrumPropagationLossModel_Type;

class PyNs3SpectrumPropagationLossModel__PythonHelper : public ns3::SpectrumPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3SpectrumPropagationLossModel__PythonHelper(ns3::SpectrumPropagationLossModel const & arg0)
        : ns3::SpectrumPropagationLossModel(arg0), m_pyself(NULL)
        {}

    PyNs3SpectrumPropagationLossModel__PythonHelper()
        : ns3::SpectrumPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SpectrumPropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SpectrumPropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SpectrumPropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SpectrumPropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::SpectrumPropagationLossModel::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::Ptr< ns3::SpectrumValue > DoCalcRxPowerSpectralDensity(ns3::Ptr< ns3::SpectrumValue const > txPsd, ns3::Ptr< ns3::MobilityModel const > a, ns3::Ptr< ns3::MobilityModel const > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SpectrumPropagationLossModel__PythonHelper")
        .SetParent< ns3::SpectrumPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SpectrumPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SpectrumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumValue;


extern PyTypeObject PyNs3SpectrumValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ThreeLogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ThreeLogDistancePropagationLossModel;


extern PyTypeObject PyNs3ThreeLogDistancePropagationLossModel_Type;

class PyNs3ThreeLogDistancePropagationLossModel__PythonHelper : public ns3::ThreeLogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3ThreeLogDistancePropagationLossModel__PythonHelper()
        : ns3::ThreeLogDistancePropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ThreeLogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ThreeLogDistancePropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ThreeLogDistancePropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ThreeLogDistancePropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ThreeLogDistancePropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ThreeLogDistancePropagationLossModel__PythonHelper")
        .SetParent< ns3::ThreeLogDistancePropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ThreeLogDistancePropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject PyNs3Trailer_Type;


typedef struct {
    PyObject_HEAD
    ns3::TwoRayGroundPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TwoRayGroundPropagationLossModel;


extern PyTypeObject PyNs3TwoRayGroundPropagationLossModel_Type;

class PyNs3TwoRayGroundPropagationLossModel__PythonHelper : public ns3::TwoRayGroundPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3TwoRayGroundPropagationLossModel__PythonHelper()
        : ns3::TwoRayGroundPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TwoRayGroundPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TwoRayGroundPropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TwoRayGroundPropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3TwoRayGroundPropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3TwoRayGroundPropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TwoRayGroundPropagationLossModel__PythonHelper")
        .SetParent< ns3::TwoRayGroundPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TwoRayGroundPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ConstantSpeedPropagationDelayModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantSpeedPropagationDelayModel;


extern PyTypeObject PyNs3ConstantSpeedPropagationDelayModel_Type;

class PyNs3ConstantSpeedPropagationDelayModel__PythonHelper : public ns3::ConstantSpeedPropagationDelayModel
{
public:
    PyObject *m_pyself;
    PyNs3ConstantSpeedPropagationDelayModel__PythonHelper(ns3::ConstantSpeedPropagationDelayModel const & arg0)
        : ns3::ConstantSpeedPropagationDelayModel(arg0), m_pyself(NULL)
        {}

    PyNs3ConstantSpeedPropagationDelayModel__PythonHelper()
        : ns3::ConstantSpeedPropagationDelayModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantSpeedPropagationDelayModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConstantSpeedPropagationDelayModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ConstantSpeedPropagationDelayModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ConstantSpeedPropagationDelayModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ConstantSpeedPropagationDelayModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Time GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ConstantSpeedPropagationDelayModel__PythonHelper")
        .SetParent< ns3::ConstantSpeedPropagationDelayModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ConstantSpeedPropagationDelayModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Cost231PropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Cost231PropagationLossModel;


extern PyTypeObject PyNs3Cost231PropagationLossModel_Type;

class PyNs3Cost231PropagationLossModel__PythonHelper : public ns3::Cost231PropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3Cost231PropagationLossModel__PythonHelper()
        : ns3::Cost231PropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Cost231PropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Cost231PropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Cost231PropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Cost231PropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Cost231PropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Cost231PropagationLossModel__PythonHelper")
        .SetParent< ns3::Cost231PropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Cost231PropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DataRateChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateChecker;


extern PyTypeObject PyNs3DataRateChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::DataRateValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataRateValue;


extern PyTypeObject PyNs3DataRateValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErrorModel;


extern PyTypeObject PyNs3ErrorModel_Type;

class PyNs3ErrorModel__PythonHelper : public ns3::ErrorModel
{
public:
    PyObject *m_pyself;
    PyNs3ErrorModel__PythonHelper(ns3::ErrorModel const & arg0)
        : ns3::ErrorModel(arg0), m_pyself(NULL)
        {}

    PyNs3ErrorModel__PythonHelper()
        : ns3::ErrorModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ErrorModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ErrorModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ErrorModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ErrorModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool DoCorrupt(ns3::Ptr< ns3::Packet > arg0);

    virtual void DoReset();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ErrorModel__PythonHelper")
        .SetParent< ns3::ErrorModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ErrorModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::FixedRssLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FixedRssLossModel;


extern PyTypeObject PyNs3FixedRssLossModel_Type;

class PyNs3FixedRssLossModel__PythonHelper : public ns3::FixedRssLossModel
{
public:
    PyObject *m_pyself;
    PyNs3FixedRssLossModel__PythonHelper()
        : ns3::FixedRssLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FixedRssLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FixedRssLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3FixedRssLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3FixedRssLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3FixedRssLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3FixedRssLossModel__PythonHelper")
        .SetParent< ns3::FixedRssLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3FixedRssLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::FriisPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FriisPropagationLossModel;


extern PyTypeObject PyNs3FriisPropagationLossModel_Type;

class PyNs3FriisPropagationLossModel__PythonHelper : public ns3::FriisPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3FriisPropagationLossModel__PythonHelper()
        : ns3::FriisPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FriisPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FriisPropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3FriisPropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3FriisPropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3FriisPropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3FriisPropagationLossModel__PythonHelper")
        .SetParent< ns3::FriisPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3FriisPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::FriisSpectrumPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FriisSpectrumPropagationLossModel;


extern PyTypeObject PyNs3FriisSpectrumPropagationLossModel_Type;

class PyNs3FriisSpectrumPropagationLossModel__PythonHelper : public ns3::FriisSpectrumPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3FriisSpectrumPropagationLossModel__PythonHelper(ns3::FriisSpectrumPropagationLossModel const & arg0)
        : ns3::FriisSpectrumPropagationLossModel(arg0), m_pyself(NULL)
        {}

    PyNs3FriisSpectrumPropagationLossModel__PythonHelper()
        : ns3::FriisSpectrumPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FriisSpectrumPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FriisSpectrumPropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3FriisSpectrumPropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3FriisSpectrumPropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3FriisSpectrumPropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::SpectrumPropagationLossModel::DoDispose(); }

    virtual ns3::Ptr< ns3::SpectrumValue > DoCalcRxPowerSpectralDensity(ns3::Ptr< ns3::SpectrumValue const > txPsd, ns3::Ptr< ns3::MobilityModel const > a, ns3::Ptr< ns3::MobilityModel const > b) const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3FriisSpectrumPropagationLossModel__PythonHelper")
        .SetParent< ns3::FriisSpectrumPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3FriisSpectrumPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::JakesPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3JakesPropagationLossModel;


extern PyTypeObject PyNs3JakesPropagationLossModel_Type;

class PyNs3JakesPropagationLossModel__PythonHelper : public ns3::JakesPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3JakesPropagationLossModel__PythonHelper()
        : ns3::JakesPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3JakesPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3JakesPropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3JakesPropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3JakesPropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3JakesPropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3JakesPropagationLossModel__PythonHelper")
        .SetParent< ns3::JakesPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3JakesPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ListErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ListErrorModel;


extern PyTypeObject PyNs3ListErrorModel_Type;

class PyNs3ListErrorModel__PythonHelper : public ns3::ListErrorModel
{
public:
    PyObject *m_pyself;
    PyNs3ListErrorModel__PythonHelper(ns3::ListErrorModel const & arg0)
        : ns3::ListErrorModel(arg0), m_pyself(NULL)
        {}

    PyNs3ListErrorModel__PythonHelper()
        : ns3::ListErrorModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ListErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ListErrorModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ListErrorModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ListErrorModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ListErrorModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool DoCorrupt(ns3::Ptr< ns3::Packet > p);

    virtual void DoReset();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ListErrorModel__PythonHelper")
        .SetParent< ns3::ListErrorModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ListErrorModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LogDistancePropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogDistancePropagationLossModel;


extern PyTypeObject PyNs3LogDistancePropagationLossModel_Type;

class PyNs3LogDistancePropagationLossModel__PythonHelper : public ns3::LogDistancePropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3LogDistancePropagationLossModel__PythonHelper()
        : ns3::LogDistancePropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LogDistancePropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LogDistancePropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LogDistancePropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3LogDistancePropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3LogDistancePropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LogDistancePropagationLossModel__PythonHelper")
        .SetParent< ns3::LogDistancePropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LogDistancePropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MatrixPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MatrixPropagationLossModel;


extern PyTypeObject PyNs3MatrixPropagationLossModel_Type;

class PyNs3MatrixPropagationLossModel__PythonHelper : public ns3::MatrixPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3MatrixPropagationLossModel__PythonHelper()
        : ns3::MatrixPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MatrixPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MatrixPropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MatrixPropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MatrixPropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3MatrixPropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MatrixPropagationLossModel__PythonHelper")
        .SetParent< ns3::MatrixPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MatrixPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NakagamiPropagationLossModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NakagamiPropagationLossModel;


extern PyTypeObject PyNs3NakagamiPropagationLossModel_Type;

class PyNs3NakagamiPropagationLossModel__PythonHelper : public ns3::NakagamiPropagationLossModel
{
public:
    PyObject *m_pyself;
    PyNs3NakagamiPropagationLossModel__PythonHelper()
        : ns3::NakagamiPropagationLossModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NakagamiPropagationLossModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NakagamiPropagationLossModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NakagamiPropagationLossModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3NakagamiPropagationLossModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3NakagamiPropagationLossModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double DoCalcRxPower(double txPowerDbm, ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NakagamiPropagationLossModel__PythonHelper")
        .SetParent< ns3::NakagamiPropagationLossModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NakagamiPropagationLossModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject PyNs3NixVector_Type;


typedef struct {
    PyObject_HEAD
    ns3::OutputStreamWrapper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OutputStreamWrapper;


extern PyTypeObject PyNs3OutputStreamWrapper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject PyNs3Packet_Type;


typedef struct {
    PyObject_HEAD
    ns3::RateErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RateErrorModel;


extern PyTypeObject PyNs3RateErrorModel_Type;

class PyNs3RateErrorModel__PythonHelper : public ns3::RateErrorModel
{
public:
    PyObject *m_pyself;
    PyNs3RateErrorModel__PythonHelper(ns3::RateErrorModel const & arg0)
        : ns3::RateErrorModel(arg0), m_pyself(NULL)
        {}

    PyNs3RateErrorModel__PythonHelper()
        : ns3::RateErrorModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RateErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RateErrorModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RateErrorModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RateErrorModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RateErrorModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool DoCorrupt(ns3::Ptr< ns3::Packet > p);

    virtual bool DoCorruptBit(ns3::Ptr< ns3::Packet > p);

    virtual bool DoCorruptByte(ns3::Ptr< ns3::Packet > p);

    virtual bool DoCorruptPkt(ns3::Ptr< ns3::Packet > p);

    virtual void DoReset();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RateErrorModel__PythonHelper")
        .SetParent< ns3::RateErrorModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RateErrorModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ReceiveListErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ReceiveListErrorModel;


extern PyTypeObject PyNs3ReceiveListErrorModel_Type;

class PyNs3ReceiveListErrorModel__PythonHelper : public ns3::ReceiveListErrorModel
{
public:
    PyObject *m_pyself;
    PyNs3ReceiveListErrorModel__PythonHelper(ns3::ReceiveListErrorModel const & arg0)
        : ns3::ReceiveListErrorModel(arg0), m_pyself(NULL)
        {}

    PyNs3ReceiveListErrorModel__PythonHelper()
        : ns3::ReceiveListErrorModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ReceiveListErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ReceiveListErrorModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ReceiveListErrorModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ReceiveListErrorModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ReceiveListErrorModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool DoCorrupt(ns3::Ptr< ns3::Packet > p);

    virtual void DoReset();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ReceiveListErrorModel__PythonHelper")
        .SetParent< ns3::ReceiveListErrorModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ReceiveListErrorModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Box *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Box;


extern PyTypeObject PyNs3Box_Type;

extern std::map<void*, PyObject*> PyNs3Box_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ConstantVelocityHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantVelocityHelper;


extern PyTypeObject PyNs3ConstantVelocityHelper_Type;

extern std::map<void*, PyObject*> PyNs3ConstantVelocityHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Rectangle *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Rectangle;


extern PyTypeObject PyNs3Rectangle_Type;

extern std::map<void*, PyObject*> PyNs3Rectangle_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Waypoint *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Waypoint;


extern PyTypeObject PyNs3Waypoint_Type;

extern std::map<void*, PyObject*> PyNs3Waypoint_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PositionAllocator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PositionAllocator;


extern PyTypeObject PyNs3PositionAllocator_Type;

class PyNs3PositionAllocator__PythonHelper : public ns3::PositionAllocator
{
public:
    PyObject *m_pyself;
    PyNs3PositionAllocator__PythonHelper(ns3::PositionAllocator const & arg0)
        : ns3::PositionAllocator(arg0), m_pyself(NULL)
        {}

    PyNs3PositionAllocator__PythonHelper()
        : ns3::PositionAllocator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PositionAllocator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PositionAllocator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PositionAllocator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PositionAllocator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PositionAllocator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector GetNext() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PositionAllocator__PythonHelper")
        .SetParent< ns3::PositionAllocator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PositionAllocator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RandomBoxPositionAllocator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomBoxPositionAllocator;


extern PyTypeObject PyNs3RandomBoxPositionAllocator_Type;

class PyNs3RandomBoxPositionAllocator__PythonHelper : public ns3::RandomBoxPositionAllocator
{
public:
    PyObject *m_pyself;
    PyNs3RandomBoxPositionAllocator__PythonHelper(ns3::RandomBoxPositionAllocator const & arg0)
        : ns3::RandomBoxPositionAllocator(arg0), m_pyself(NULL)
        {}

    PyNs3RandomBoxPositionAllocator__PythonHelper()
        : ns3::RandomBoxPositionAllocator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomBoxPositionAllocator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomBoxPositionAllocator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomBoxPositionAllocator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RandomBoxPositionAllocator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RandomBoxPositionAllocator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector GetNext() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomBoxPositionAllocator__PythonHelper")
        .SetParent< ns3::RandomBoxPositionAllocator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomBoxPositionAllocator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RandomDiscPositionAllocator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomDiscPositionAllocator;


extern PyTypeObject PyNs3RandomDiscPositionAllocator_Type;

class PyNs3RandomDiscPositionAllocator__PythonHelper : public ns3::RandomDiscPositionAllocator
{
public:
    PyObject *m_pyself;
    PyNs3RandomDiscPositionAllocator__PythonHelper(ns3::RandomDiscPositionAllocator const & arg0)
        : ns3::RandomDiscPositionAllocator(arg0), m_pyself(NULL)
        {}

    PyNs3RandomDiscPositionAllocator__PythonHelper()
        : ns3::RandomDiscPositionAllocator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomDiscPositionAllocator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomDiscPositionAllocator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomDiscPositionAllocator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RandomDiscPositionAllocator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RandomDiscPositionAllocator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector GetNext() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomDiscPositionAllocator__PythonHelper")
        .SetParent< ns3::RandomDiscPositionAllocator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomDiscPositionAllocator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RandomRectanglePositionAllocator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomRectanglePositionAllocator;


extern PyTypeObject PyNs3RandomRectanglePositionAllocator_Type;

class PyNs3RandomRectanglePositionAllocator__PythonHelper : public ns3::RandomRectanglePositionAllocator
{
public:
    PyObject *m_pyself;
    PyNs3RandomRectanglePositionAllocator__PythonHelper(ns3::RandomRectanglePositionAllocator const & arg0)
        : ns3::RandomRectanglePositionAllocator(arg0), m_pyself(NULL)
        {}

    PyNs3RandomRectanglePositionAllocator__PythonHelper()
        : ns3::RandomRectanglePositionAllocator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomRectanglePositionAllocator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomRectanglePositionAllocator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomRectanglePositionAllocator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RandomRectanglePositionAllocator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RandomRectanglePositionAllocator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector GetNext() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomRectanglePositionAllocator__PythonHelper")
        .SetParent< ns3::RandomRectanglePositionAllocator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomRectanglePositionAllocator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UniformDiscPositionAllocator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformDiscPositionAllocator;


extern PyTypeObject PyNs3UniformDiscPositionAllocator_Type;

class PyNs3UniformDiscPositionAllocator__PythonHelper : public ns3::UniformDiscPositionAllocator
{
public:
    PyObject *m_pyself;
    PyNs3UniformDiscPositionAllocator__PythonHelper(ns3::UniformDiscPositionAllocator const & arg0)
        : ns3::UniformDiscPositionAllocator(arg0), m_pyself(NULL)
        {}

    PyNs3UniformDiscPositionAllocator__PythonHelper()
        : ns3::UniformDiscPositionAllocator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UniformDiscPositionAllocator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UniformDiscPositionAllocator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UniformDiscPositionAllocator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UniformDiscPositionAllocator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UniformDiscPositionAllocator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector GetNext() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UniformDiscPositionAllocator__PythonHelper")
        .SetParent< ns3::UniformDiscPositionAllocator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UniformDiscPositionAllocator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::BoxChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BoxChecker;


extern PyTypeObject PyNs3BoxChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::BoxValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BoxValue;


extern PyTypeObject PyNs3BoxValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::GridPositionAllocator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GridPositionAllocator;


extern PyTypeObject PyNs3GridPositionAllocator_Type;

class PyNs3GridPositionAllocator__PythonHelper : public ns3::GridPositionAllocator
{
public:
    PyObject *m_pyself;
    PyNs3GridPositionAllocator__PythonHelper(ns3::GridPositionAllocator const & arg0)
        : ns3::GridPositionAllocator(arg0), m_pyself(NULL)
        {}

    PyNs3GridPositionAllocator__PythonHelper()
        : ns3::GridPositionAllocator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GridPositionAllocator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3GridPositionAllocator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3GridPositionAllocator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3GridPositionAllocator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3GridPositionAllocator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector GetNext() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3GridPositionAllocator__PythonHelper")
        .SetParent< ns3::GridPositionAllocator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3GridPositionAllocator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ListPositionAllocator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ListPositionAllocator;


extern PyTypeObject PyNs3ListPositionAllocator_Type;

class PyNs3ListPositionAllocator__PythonHelper : public ns3::ListPositionAllocator
{
public:
    PyObject *m_pyself;
    PyNs3ListPositionAllocator__PythonHelper(ns3::ListPositionAllocator const & arg0)
        : ns3::ListPositionAllocator(arg0), m_pyself(NULL)
        {}

    PyNs3ListPositionAllocator__PythonHelper()
        : ns3::ListPositionAllocator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ListPositionAllocator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ListPositionAllocator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ListPositionAllocator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ListPositionAllocator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ListPositionAllocator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector GetNext() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ListPositionAllocator__PythonHelper")
        .SetParent< ns3::ListPositionAllocator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ListPositionAllocator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityModel;


extern PyTypeObject PyNs3MobilityModel_Type;

class PyNs3MobilityModel__PythonHelper : public ns3::MobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3MobilityModel__PythonHelper(ns3::MobilityModel const & arg0)
        : ns3::MobilityModel(arg0), m_pyself(NULL)
        {}

    PyNs3MobilityModel__PythonHelper()
        : ns3::MobilityModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_NotifyCourseChange(PyNs3MobilityModel *self);
    inline void NotifyCourseChange__parent_caller()
    { ns3::MobilityModel::NotifyCourseChange(); }

    static PyObject * _wrap_DoDispose(PyNs3MobilityModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MobilityModel__PythonHelper")
        .SetParent< ns3::MobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RandomDirection2dMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomDirection2dMobilityModel;


extern PyTypeObject PyNs3RandomDirection2dMobilityModel_Type;

class PyNs3RandomDirection2dMobilityModel__PythonHelper : public ns3::RandomDirection2dMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3RandomDirection2dMobilityModel__PythonHelper()
        : ns3::RandomDirection2dMobilityModel(), m_pyself(NULL)
        {}

    PyNs3RandomDirection2dMobilityModel__PythonHelper(ns3::RandomDirection2dMobilityModel const & arg0)
        : ns3::RandomDirection2dMobilityModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomDirection2dMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomDirection2dMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomDirection2dMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomDirection2dMobilityModel__PythonHelper")
        .SetParent< ns3::RandomDirection2dMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomDirection2dMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RandomWalk2dMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomWalk2dMobilityModel;


extern PyTypeObject PyNs3RandomWalk2dMobilityModel_Type;

class PyNs3RandomWalk2dMobilityModel__PythonHelper : public ns3::RandomWalk2dMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3RandomWalk2dMobilityModel__PythonHelper()
        : ns3::RandomWalk2dMobilityModel(), m_pyself(NULL)
        {}

    PyNs3RandomWalk2dMobilityModel__PythonHelper(ns3::RandomWalk2dMobilityModel const & arg0)
        : ns3::RandomWalk2dMobilityModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomWalk2dMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomWalk2dMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomWalk2dMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomWalk2dMobilityModel__PythonHelper")
        .SetParent< ns3::RandomWalk2dMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomWalk2dMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RandomWaypointMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomWaypointMobilityModel;


extern PyTypeObject PyNs3RandomWaypointMobilityModel_Type;

class PyNs3RandomWaypointMobilityModel__PythonHelper : public ns3::RandomWaypointMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3RandomWaypointMobilityModel__PythonHelper()
        : ns3::RandomWaypointMobilityModel(), m_pyself(NULL)
        {}

    PyNs3RandomWaypointMobilityModel__PythonHelper(ns3::RandomWaypointMobilityModel const & arg0)
        : ns3::RandomWaypointMobilityModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RandomWaypointMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RandomWaypointMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RandomWaypointMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RandomWaypointMobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::RandomWaypointMobilityModel::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RandomWaypointMobilityModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void DoStart();

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RandomWaypointMobilityModel__PythonHelper")
        .SetParent< ns3::RandomWaypointMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RandomWaypointMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RectangleChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RectangleChecker;


extern PyTypeObject PyNs3RectangleChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::RectangleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RectangleValue;


extern PyTypeObject PyNs3RectangleValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::SteadyStateRandomWaypointMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SteadyStateRandomWaypointMobilityModel;


extern PyTypeObject PyNs3SteadyStateRandomWaypointMobilityModel_Type;

class PyNs3SteadyStateRandomWaypointMobilityModel__PythonHelper : public ns3::SteadyStateRandomWaypointMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3SteadyStateRandomWaypointMobilityModel__PythonHelper(ns3::SteadyStateRandomWaypointMobilityModel const & arg0)
        : ns3::SteadyStateRandomWaypointMobilityModel(arg0), m_pyself(NULL)
        {}

    PyNs3SteadyStateRandomWaypointMobilityModel__PythonHelper()
        : ns3::SteadyStateRandomWaypointMobilityModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SteadyStateRandomWaypointMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SteadyStateRandomWaypointMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SteadyStateRandomWaypointMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SteadyStateRandomWaypointMobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::SteadyStateRandomWaypointMobilityModel::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SteadyStateRandomWaypointMobilityModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void DoStart();

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SteadyStateRandomWaypointMobilityModel__PythonHelper")
        .SetParent< ns3::SteadyStateRandomWaypointMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SteadyStateRandomWaypointMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WaypointChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaypointChecker;


extern PyTypeObject PyNs3WaypointChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::WaypointMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaypointMobilityModel;


extern PyTypeObject PyNs3WaypointMobilityModel_Type;

class PyNs3WaypointMobilityModel__PythonHelper : public ns3::WaypointMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3WaypointMobilityModel__PythonHelper(ns3::WaypointMobilityModel const & arg0)
        : ns3::WaypointMobilityModel(arg0), m_pyself(NULL)
        {}

    PyNs3WaypointMobilityModel__PythonHelper()
        : ns3::WaypointMobilityModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WaypointMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WaypointMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WaypointMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3WaypointMobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WaypointMobilityModel__PythonHelper")
        .SetParent< ns3::WaypointMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WaypointMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WaypointValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaypointValue;


extern PyTypeObject PyNs3WaypointValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ConstantAccelerationMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantAccelerationMobilityModel;


extern PyTypeObject PyNs3ConstantAccelerationMobilityModel_Type;

class PyNs3ConstantAccelerationMobilityModel__PythonHelper : public ns3::ConstantAccelerationMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3ConstantAccelerationMobilityModel__PythonHelper(ns3::ConstantAccelerationMobilityModel const & arg0)
        : ns3::ConstantAccelerationMobilityModel(arg0), m_pyself(NULL)
        {}

    PyNs3ConstantAccelerationMobilityModel__PythonHelper()
        : ns3::ConstantAccelerationMobilityModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantAccelerationMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConstantAccelerationMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ConstantAccelerationMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ConstantAccelerationMobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ConstantAccelerationMobilityModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ConstantAccelerationMobilityModel__PythonHelper")
        .SetParent< ns3::ConstantAccelerationMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ConstantAccelerationMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ConstantPositionMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantPositionMobilityModel;


extern PyTypeObject PyNs3ConstantPositionMobilityModel_Type;

class PyNs3ConstantPositionMobilityModel__PythonHelper : public ns3::ConstantPositionMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3ConstantPositionMobilityModel__PythonHelper(ns3::ConstantPositionMobilityModel const & arg0)
        : ns3::ConstantPositionMobilityModel(arg0), m_pyself(NULL)
        {}

    PyNs3ConstantPositionMobilityModel__PythonHelper()
        : ns3::ConstantPositionMobilityModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantPositionMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConstantPositionMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ConstantPositionMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ConstantPositionMobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ConstantPositionMobilityModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ConstantPositionMobilityModel__PythonHelper")
        .SetParent< ns3::ConstantPositionMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ConstantPositionMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ConstantVelocityMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantVelocityMobilityModel;


extern PyTypeObject PyNs3ConstantVelocityMobilityModel_Type;

class PyNs3ConstantVelocityMobilityModel__PythonHelper : public ns3::ConstantVelocityMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3ConstantVelocityMobilityModel__PythonHelper(ns3::ConstantVelocityMobilityModel const & arg0)
        : ns3::ConstantVelocityMobilityModel(arg0), m_pyself(NULL)
        {}

    PyNs3ConstantVelocityMobilityModel__PythonHelper()
        : ns3::ConstantVelocityMobilityModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConstantVelocityMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConstantVelocityMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ConstantVelocityMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ConstantVelocityMobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ConstantVelocityMobilityModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ConstantVelocityMobilityModel__PythonHelper")
        .SetParent< ns3::ConstantVelocityMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ConstantVelocityMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::GaussMarkovMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GaussMarkovMobilityModel;


extern PyTypeObject PyNs3GaussMarkovMobilityModel_Type;

class PyNs3GaussMarkovMobilityModel__PythonHelper : public ns3::GaussMarkovMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3GaussMarkovMobilityModel__PythonHelper(ns3::GaussMarkovMobilityModel const & arg0)
        : ns3::GaussMarkovMobilityModel(arg0), m_pyself(NULL)
        {}

    PyNs3GaussMarkovMobilityModel__PythonHelper()
        : ns3::GaussMarkovMobilityModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GaussMarkovMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3GaussMarkovMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3GaussMarkovMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3GaussMarkovMobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3GaussMarkovMobilityModel__PythonHelper")
        .SetParent< ns3::GaussMarkovMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3GaussMarkovMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::HierarchicalMobilityModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HierarchicalMobilityModel;


extern PyTypeObject PyNs3HierarchicalMobilityModel_Type;

class PyNs3HierarchicalMobilityModel__PythonHelper : public ns3::HierarchicalMobilityModel
{
public:
    PyObject *m_pyself;
    PyNs3HierarchicalMobilityModel__PythonHelper(ns3::HierarchicalMobilityModel const & arg0)
        : ns3::HierarchicalMobilityModel(arg0), m_pyself(NULL)
        {}

    PyNs3HierarchicalMobilityModel__PythonHelper()
        : ns3::HierarchicalMobilityModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3HierarchicalMobilityModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3HierarchicalMobilityModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3HierarchicalMobilityModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3HierarchicalMobilityModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3HierarchicalMobilityModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Vector DoGetPosition() const;

    virtual ns3::Vector DoGetVelocity() const;

    virtual void DoSetPosition(ns3::Vector const & position);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3HierarchicalMobilityModel__PythonHelper")
        .SetParent< ns3::HierarchicalMobilityModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3HierarchicalMobilityModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LbtsMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LbtsMessage;


extern PyTypeObject PyNs3LbtsMessage_Type;

extern std::map<void*, PyObject*> PyNs3LbtsMessage_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MpiInterface *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MpiInterface;


extern PyTypeObject PyNs3MpiInterface_Type;

extern std::map<void*, PyObject*> PyNs3MpiInterface_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SentBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SentBuffer;


extern PyTypeObject PyNs3SentBuffer_Type;

extern std::map<void*, PyObject*> PyNs3SentBuffer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DistributedSimulatorImpl *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DistributedSimulatorImpl;


extern PyTypeObject PyNs3DistributedSimulatorImpl_Type;


typedef struct {
    PyObject_HEAD
    ns3::Average< double > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Average__Double;


extern PyTypeObject PyNs3Average__Double_Type;

extern std::map<void*, PyObject*> PyNs3Average__Double_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DelayJitterEstimation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DelayJitterEstimation;


extern PyTypeObject PyNs3DelayJitterEstimation_Type;

extern std::map<void*, PyObject*> PyNs3DelayJitterEstimation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EventGarbageCollector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventGarbageCollector;


extern PyTypeObject PyNs3EventGarbageCollector_Type;

extern std::map<void*, PyObject*> PyNs3EventGarbageCollector_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FileConfig *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FileConfig;


extern PyTypeObject PyNs3FileConfig_Type;

class PyNs3FileConfig__PythonHelper : public ns3::FileConfig
{
public:
    PyObject *m_pyself;
    PyNs3FileConfig__PythonHelper()
        : ns3::FileConfig(), m_pyself(NULL)
        {}

    PyNs3FileConfig__PythonHelper(ns3::FileConfig const & arg0)
        : ns3::FileConfig(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FileConfig__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void Attributes();

    virtual void Default();

    virtual void Global();

    virtual void SetFilename(std::string filename);
};

extern std::map<void*, PyObject*> PyNs3FileConfig_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Gnuplot *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot;


extern PyTypeObject PyNs3Gnuplot_Type;

extern std::map<void*, PyObject*> PyNs3Gnuplot_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GnuplotCollection *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GnuplotCollection;


extern PyTypeObject PyNs3GnuplotCollection_Type;

extern std::map<void*, PyObject*> PyNs3GnuplotCollection_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GnuplotDataset *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GnuplotDataset;


extern PyTypeObject PyNs3GnuplotDataset_Type;

extern std::map<void*, PyObject*> PyNs3GnuplotDataset_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::NoneFileConfig *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NoneFileConfig;


extern PyTypeObject PyNs3NoneFileConfig_Type;

class PyNs3NoneFileConfig__PythonHelper : public ns3::NoneFileConfig
{
public:
    PyObject *m_pyself;
    PyNs3NoneFileConfig__PythonHelper(ns3::NoneFileConfig const & arg0)
        : ns3::NoneFileConfig(arg0), m_pyself(NULL)
        {}

    PyNs3NoneFileConfig__PythonHelper()
        : ns3::NoneFileConfig(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NoneFileConfig__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void Attributes();

    virtual void Default();

    virtual void Global();

    virtual void SetFilename(std::string filename);
};


typedef struct {
    PyObject_HEAD
    ns3::ConfigStore *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConfigStore;


extern PyTypeObject PyNs3ConfigStore_Type;

class PyNs3ConfigStore__PythonHelper : public ns3::ConfigStore
{
public:
    PyObject *m_pyself;
    PyNs3ConfigStore__PythonHelper(ns3::ConfigStore const & arg0)
        : ns3::ConfigStore(arg0), m_pyself(NULL)
        {}

    PyNs3ConfigStore__PythonHelper()
        : ns3::ConfigStore(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConfigStore__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConfigStore *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::FlowIdTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlowIdTag;


extern PyTypeObject PyNs3FlowIdTag_Type;

class PyNs3FlowIdTag__PythonHelper : public ns3::FlowIdTag
{
public:
    PyObject *m_pyself;
    PyNs3FlowIdTag__PythonHelper(ns3::FlowIdTag const & arg0)
        : ns3::FlowIdTag(arg0), m_pyself(NULL)
        {}

    PyNs3FlowIdTag__PythonHelper()
        : ns3::FlowIdTag(), m_pyself(NULL)
        {}

    PyNs3FlowIdTag__PythonHelper(uint32_t flowId)
        : ns3::FlowIdTag(flowId), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FlowIdTag__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FlowIdTag *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Deserialize(ns3::TagBuffer buf);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::TagBuffer buf) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Gnuplot2dDataset *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot2dDataset;


extern PyTypeObject PyNs3Gnuplot2dDataset_Type;


typedef struct {
    PyObject_HEAD
    ns3::Gnuplot2dFunction *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot2dFunction;


extern PyTypeObject PyNs3Gnuplot2dFunction_Type;


typedef struct {
    PyObject_HEAD
    ns3::Gnuplot3dDataset *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot3dDataset;


extern PyTypeObject PyNs3Gnuplot3dDataset_Type;


typedef struct {
    PyObject_HEAD
    ns3::Gnuplot3dFunction *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Gnuplot3dFunction;


extern PyTypeObject PyNs3Gnuplot3dFunction_Type;


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject PyNs3Address_Type;

extern std::map<void*, PyObject*> PyNs3Address_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ChannelList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ChannelList;


extern PyTypeObject PyNs3ChannelList_Type;

extern std::map<void*, PyObject*> PyNs3ChannelList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Inet6SocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Inet6SocketAddress;


extern PyTypeObject PyNs3Inet6SocketAddress_Type;

extern std::map<void*, PyObject*> PyNs3Inet6SocketAddress_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::InetSocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InetSocketAddress;


extern PyTypeObject PyNs3InetSocketAddress_Type;

extern std::map<void*, PyObject*> PyNs3InetSocketAddress_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject PyNs3Ipv4Address_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4Address_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressGenerator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressGenerator;


extern PyTypeObject PyNs3Ipv4AddressGenerator_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4AddressGenerator_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceAddress;


extern PyTypeObject PyNs3Ipv4InterfaceAddress_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4InterfaceAddress_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject PyNs3Ipv4Mask_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4Mask_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject PyNs3Ipv6Address_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6Address_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6InterfaceAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6InterfaceAddress;


extern PyTypeObject PyNs3Ipv6InterfaceAddress_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6InterfaceAddress_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject PyNs3Ipv6Prefix_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6Prefix_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Mac48Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48Address;


extern PyTypeObject PyNs3Mac48Address_Type;

extern std::map<void*, PyObject*> PyNs3Mac48Address_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Mac64Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac64Address;


extern PyTypeObject PyNs3Mac64Address_Type;

extern std::map<void*, PyObject*> PyNs3Mac64Address_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::NodeList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeList;


extern PyTypeObject PyNs3NodeList_Type;

extern std::map<void*, PyObject*> PyNs3NodeList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketSocketAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketSocketAddress;


extern PyTypeObject PyNs3PacketSocketAddress_Type;

extern std::map<void*, PyObject*> PyNs3PacketSocketAddress_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PbbAddressTlvBlock *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbAddressTlvBlock;


extern PyTypeObject PyNs3PbbAddressTlvBlock_Type;

extern std::map<void*, PyObject*> PyNs3PbbAddressTlvBlock_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PbbTlvBlock *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbTlvBlock;


extern PyTypeObject PyNs3PbbTlvBlock_Type;

extern std::map<void*, PyObject*> PyNs3PbbTlvBlock_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Header;


extern PyTypeObject PyNs3Ipv4Header_Type;

class PyNs3Ipv4Header__PythonHelper : public ns3::Ipv4Header
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4Header__PythonHelper(ns3::Ipv4Header const & arg0)
        : ns3::Ipv4Header(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4Header__PythonHelper()
        : ns3::Ipv4Header(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4Header__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4Header *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv4PacketInfoTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4PacketInfoTag;


extern PyTypeObject PyNs3Ipv4PacketInfoTag_Type;

class PyNs3Ipv4PacketInfoTag__PythonHelper : public ns3::Ipv4PacketInfoTag
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4PacketInfoTag__PythonHelper(ns3::Ipv4PacketInfoTag const & arg0)
        : ns3::Ipv4PacketInfoTag(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4PacketInfoTag__PythonHelper()
        : ns3::Ipv4PacketInfoTag(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4PacketInfoTag__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4PacketInfoTag *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Deserialize(ns3::TagBuffer i);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::TagBuffer i) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Header;


extern PyTypeObject PyNs3Ipv6Header_Type;

class PyNs3Ipv6Header__PythonHelper : public ns3::Ipv6Header
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6Header__PythonHelper(ns3::Ipv6Header const & arg0)
        : ns3::Ipv6Header(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6Header__PythonHelper()
        : ns3::Ipv6Header(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6Header__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6Header *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PacketInfoTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PacketInfoTag;


extern PyTypeObject PyNs3Ipv6PacketInfoTag_Type;

class PyNs3Ipv6PacketInfoTag__PythonHelper : public ns3::Ipv6PacketInfoTag
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6PacketInfoTag__PythonHelper(ns3::Ipv6PacketInfoTag const & arg0)
        : ns3::Ipv6PacketInfoTag(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6PacketInfoTag__PythonHelper()
        : ns3::Ipv6PacketInfoTag(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6PacketInfoTag__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6PacketInfoTag *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Deserialize(ns3::TagBuffer i);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::TagBuffer i) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::LlcSnapHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LlcSnapHeader;


extern PyTypeObject PyNs3LlcSnapHeader_Type;

class PyNs3LlcSnapHeader__PythonHelper : public ns3::LlcSnapHeader
{
public:
    PyObject *m_pyself;
    PyNs3LlcSnapHeader__PythonHelper(ns3::LlcSnapHeader const & arg0)
        : ns3::LlcSnapHeader(arg0), m_pyself(NULL)
        {}

    PyNs3LlcSnapHeader__PythonHelper()
        : ns3::LlcSnapHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LlcSnapHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LlcSnapHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Queue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Queue;


extern PyTypeObject PyNs3Queue_Type;

class PyNs3Queue__PythonHelper : public ns3::Queue
{
public:
    PyObject *m_pyself;
    PyNs3Queue__PythonHelper(ns3::Queue const & arg0)
        : ns3::Queue(arg0), m_pyself(NULL)
        {}

    PyNs3Queue__PythonHelper()
        : ns3::Queue(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Queue__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Queue *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Queue *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_Drop(PyNs3Queue *self, PyObject *args, PyObject *kwargs);
    inline void Drop__parent_caller(ns3::Ptr< ns3::Packet > packet)
    { ns3::Queue::Drop(packet); }

    static PyObject * _wrap_DoStart(PyNs3Queue *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Queue *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::Packet > DoDequeue();

    virtual bool DoEnqueue(ns3::Ptr< ns3::Packet > p);

    virtual ns3::Ptr< ns3::Packet const > DoPeek() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Queue__PythonHelper")
        .SetParent< ns3::Queue > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Queue__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RadiotapHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RadiotapHeader;


extern PyTypeObject PyNs3RadiotapHeader_Type;

class PyNs3RadiotapHeader__PythonHelper : public ns3::RadiotapHeader
{
public:
    PyObject *m_pyself;
    PyNs3RadiotapHeader__PythonHelper(ns3::RadiotapHeader const & arg0)
        : ns3::RadiotapHeader(arg0), m_pyself(NULL)
        {}

    PyNs3RadiotapHeader__PythonHelper()
        : ns3::RadiotapHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RadiotapHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RadiotapHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4MulticastRoute> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Ipv4MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4MulticastRoute__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv4Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv4Route> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv6MulticastRoute, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6MulticastRoute> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Ipv6MulticastRoute_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6MulticastRoute__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Ipv6Route, ns3::empty, ns3::DefaultDeleter<ns3::Ipv6Route> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Ipv6Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv6Route__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::PbbAddressBlock, ns3::empty, ns3::DefaultDeleter<ns3::PbbAddressBlock> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3PbbAddressBlock_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbAddressBlock__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::PbbMessage, ns3::empty, ns3::DefaultDeleter<ns3::PbbMessage> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3PbbMessage_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbMessage__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::PbbPacket, ns3::Header, ns3::DefaultDeleter<ns3::PbbPacket> > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3PbbPacket_Ns3Header_Ns3DefaultDeleter__lt__ns3PbbPacket__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::PbbTlv, ns3::empty, ns3::DefaultDeleter<ns3::PbbTlv> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3PbbTlv_Ns3Empty_Ns3DefaultDeleter__lt__ns3PbbTlv__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::Socket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Socket;


extern PyTypeObject PyNs3Socket_Type;

class PyNs3Socket__PythonHelper : public ns3::Socket
{
public:
    PyObject *m_pyself;
    PyNs3Socket__PythonHelper(ns3::Socket const & arg0)
        : ns3::Socket(arg0), m_pyself(NULL)
        {}

    PyNs3Socket__PythonHelper()
        : ns3::Socket(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Socket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyNormalClose(PyNs3Socket *self);
    inline void NotifyNormalClose__parent_caller()
    { ns3::Socket::NotifyNormalClose(); }

    static PyObject * _wrap_NotifyConnectionRequest(PyNs3Socket *self, PyObject *args, PyObject *kwargs);
    inline bool NotifyConnectionRequest__parent_caller(ns3::Address const & from)
    { return ns3::Socket::NotifyConnectionRequest(from); }

    static PyObject * _wrap_NotifyDataRecv(PyNs3Socket *self);
    inline void NotifyDataRecv__parent_caller()
    { ns3::Socket::NotifyDataRecv(); }

    static PyObject * _wrap_NotifyNewConnectionCreated(PyNs3Socket *self, PyObject *args, PyObject *kwargs);
    inline void NotifyNewConnectionCreated__parent_caller(ns3::Ptr< ns3::Socket > socket, ns3::Address const & from)
    { ns3::Socket::NotifyNewConnectionCreated(socket, from); }

    static PyObject * _wrap_NotifyErrorClose(PyNs3Socket *self);
    inline void NotifyErrorClose__parent_caller()
    { ns3::Socket::NotifyErrorClose(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Socket *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3Socket *self);
    inline void DoDispose__parent_caller()
    { ns3::Socket::DoDispose(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Socket *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoStart(PyNs3Socket *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_NotifySend(PyNs3Socket *self, PyObject *args, PyObject *kwargs);
    inline void NotifySend__parent_caller(uint32_t spaceAvailable)
    { ns3::Socket::NotifySend(spaceAvailable); }

    static PyObject * _wrap_NotifyDataSent(PyNs3Socket *self, PyObject *args, PyObject *kwargs);
    inline void NotifyDataSent__parent_caller(uint32_t size)
    { ns3::Socket::NotifyDataSent(size); }

    static PyObject * _wrap_NotifyConnectionFailed(PyNs3Socket *self);
    inline void NotifyConnectionFailed__parent_caller()
    { ns3::Socket::NotifyConnectionFailed(); }

    static PyObject * _wrap_NotifyConnectionSucceeded(PyNs3Socket *self);
    inline void NotifyConnectionSucceeded__parent_caller()
    { ns3::Socket::NotifyConnectionSucceeded(); }

    virtual int Bind(ns3::Address const & address);

    virtual int Bind();

    virtual void BindToNetDevice(ns3::Ptr< ns3::NetDevice > netdevice);

    virtual int Close();

    virtual int Connect(ns3::Address const & address);

    virtual bool GetAllowBroadcast() const;

    virtual ns3::Socket::SocketErrno GetErrno() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual uint32_t GetRxAvailable() const;

    virtual int GetSockName(ns3::Address & address) const;

    virtual uint32_t GetTxAvailable() const;

    virtual int Listen();

    virtual ns3::Ptr< ns3::Packet > Recv(uint32_t maxSize, uint32_t flags);

    virtual ns3::Ptr< ns3::Packet > RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress);

    virtual int Send(ns3::Ptr< ns3::Packet > p, uint32_t flags);

    virtual int SendTo(ns3::Ptr< ns3::Packet > p, uint32_t flags, ns3::Address const & toAddress);

    virtual bool SetAllowBroadcast(bool allowBroadcast);

    virtual int ShutdownRecv();

    virtual int ShutdownSend();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Socket__PythonHelper")
        .SetParent< ns3::Socket > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Socket__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SocketAddressTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketAddressTag;


extern PyTypeObject PyNs3SocketAddressTag_Type;

class PyNs3SocketAddressTag__PythonHelper : public ns3::SocketAddressTag
{
public:
    PyObject *m_pyself;
    PyNs3SocketAddressTag__PythonHelper(ns3::SocketAddressTag const & arg0)
        : ns3::SocketAddressTag(arg0), m_pyself(NULL)
        {}

    PyNs3SocketAddressTag__PythonHelper()
        : ns3::SocketAddressTag(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SocketAddressTag__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SocketAddressTag *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Deserialize(ns3::TagBuffer i);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::TagBuffer i) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::SocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketFactory;


extern PyTypeObject PyNs3SocketFactory_Type;

class PyNs3SocketFactory__PythonHelper : public ns3::SocketFactory
{
public:
    PyObject *m_pyself;
    PyNs3SocketFactory__PythonHelper(ns3::SocketFactory const & arg0)
        : ns3::SocketFactory(arg0), m_pyself(NULL)
        {}

    PyNs3SocketFactory__PythonHelper()
        : ns3::SocketFactory(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SocketFactory__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SocketFactory *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SocketFactory *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SocketFactory *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SocketFactory *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::Socket > CreateSocket();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SocketFactory__PythonHelper")
        .SetParent< ns3::SocketFactory > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SocketFactory__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SocketIpTtlTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketIpTtlTag;


extern PyTypeObject PyNs3SocketIpTtlTag_Type;

class PyNs3SocketIpTtlTag__PythonHelper : public ns3::SocketIpTtlTag
{
public:
    PyObject *m_pyself;
    PyNs3SocketIpTtlTag__PythonHelper(ns3::SocketIpTtlTag const & arg0)
        : ns3::SocketIpTtlTag(arg0), m_pyself(NULL)
        {}

    PyNs3SocketIpTtlTag__PythonHelper()
        : ns3::SocketIpTtlTag(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SocketIpTtlTag__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SocketIpTtlTag *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Deserialize(ns3::TagBuffer i);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::TagBuffer i) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::SocketSetDontFragmentTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SocketSetDontFragmentTag;


extern PyTypeObject PyNs3SocketSetDontFragmentTag_Type;

class PyNs3SocketSetDontFragmentTag__PythonHelper : public ns3::SocketSetDontFragmentTag
{
public:
    PyObject *m_pyself;
    PyNs3SocketSetDontFragmentTag__PythonHelper(ns3::SocketSetDontFragmentTag const & arg0)
        : ns3::SocketSetDontFragmentTag(arg0), m_pyself(NULL)
        {}

    PyNs3SocketSetDontFragmentTag__PythonHelper()
        : ns3::SocketSetDontFragmentTag(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SocketSetDontFragmentTag__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SocketSetDontFragmentTag *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Deserialize(ns3::TagBuffer i);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::TagBuffer i) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::SpectrumPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPhy;


extern PyTypeObject PyNs3SpectrumPhy_Type;

class PyNs3SpectrumPhy__PythonHelper : public ns3::SpectrumPhy
{
public:
    PyObject *m_pyself;
    PyNs3SpectrumPhy__PythonHelper()
        : ns3::SpectrumPhy(), m_pyself(NULL)
        {}

    PyNs3SpectrumPhy__PythonHelper(ns3::SpectrumPhy const & arg0)
        : ns3::SpectrumPhy(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SpectrumPhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SpectrumPhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SpectrumPhy *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SpectrumPhy *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::Object > GetDevice();

    virtual ns3::Ptr< ns3::Object > GetMobility();

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual void SetDevice(ns3::Ptr< ns3::Object > d);

    virtual void SetMobility(ns3::Ptr< ns3::Object > m);

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > p, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SpectrumPhy__PythonHelper")
        .SetParent< ns3::SpectrumPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SpectrumPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpSocket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpSocket;


extern PyTypeObject PyNs3TcpSocket_Type;

class PyNs3TcpSocket__PythonHelper : public ns3::TcpSocket
{
public:
    PyObject *m_pyself;
    PyNs3TcpSocket__PythonHelper(ns3::TcpSocket const & arg0)
        : ns3::TcpSocket(arg0), m_pyself(NULL)
        {}

    PyNs3TcpSocket__PythonHelper()
        : ns3::TcpSocket(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpSocket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpSocket *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpSocket *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3TcpSocket *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3TcpSocket *self);
    inline void DoDispose__parent_caller()
    { ns3::Socket::DoDispose(); }

    virtual uint32_t GetConnCount() const;

    virtual ns3::Time GetConnTimeout() const;

    virtual uint32_t GetDelAckMaxCount() const;

    virtual ns3::Time GetDelAckTimeout() const;

    virtual uint32_t GetInitialCwnd() const;

    virtual uint32_t GetRcvBufSize() const;

    virtual uint32_t GetSSThresh() const;

    virtual uint32_t GetSegSize() const;

    virtual uint32_t GetSndBufSize() const;

    virtual void SetConnCount(uint32_t count);

    virtual void SetConnTimeout(ns3::Time timeout);

    virtual void SetDelAckMaxCount(uint32_t count);

    virtual void SetDelAckTimeout(ns3::Time timeout);

    virtual void SetInitialCwnd(uint32_t count);

    virtual void SetRcvBufSize(uint32_t size);

    virtual void SetSSThresh(uint32_t threshold);

    virtual void SetSegSize(uint32_t size);

    virtual void SetSndBufSize(uint32_t size);

    virtual uint32_t GetRxAvailable() const;

    virtual bool SetAllowBroadcast(bool allowBroadcast);

    virtual int Send(ns3::Ptr< ns3::Packet > p, uint32_t flags);

    virtual bool GetAllowBroadcast() const;

    virtual ns3::Socket::SocketErrno GetErrno() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual int ShutdownRecv();

    virtual int ShutdownSend();

    virtual int GetSockName(ns3::Address & address) const;

    virtual int SendTo(ns3::Ptr< ns3::Packet > p, uint32_t flags, ns3::Address const & toAddress);

    virtual int Listen();

    virtual ns3::Ptr< ns3::Packet > Recv(uint32_t maxSize, uint32_t flags);

    virtual int Bind(ns3::Address const & address);

    virtual int Bind();

    virtual uint32_t GetTxAvailable() const;

    virtual void BindToNetDevice(ns3::Ptr< ns3::NetDevice > netdevice);

    virtual ns3::Ptr< ns3::Packet > RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress);

    virtual int Connect(ns3::Address const & address);

    virtual int Close();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpSocket__PythonHelper")
        .SetParent< ns3::TcpSocket > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpSocket__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TcpSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpSocketFactory;


extern PyTypeObject PyNs3TcpSocketFactory_Type;


typedef struct {
    PyObject_HEAD
    ns3::UdpSocket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpSocket;


extern PyTypeObject PyNs3UdpSocket_Type;

class PyNs3UdpSocket__PythonHelper : public ns3::UdpSocket
{
public:
    PyObject *m_pyself;
    PyNs3UdpSocket__PythonHelper(ns3::UdpSocket const & arg0)
        : ns3::UdpSocket(arg0), m_pyself(NULL)
        {}

    PyNs3UdpSocket__PythonHelper()
        : ns3::UdpSocket(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpSocket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpSocket *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UdpSocket *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UdpSocket *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UdpSocket *self);
    inline void DoDispose__parent_caller()
    { ns3::Socket::DoDispose(); }

    virtual int MulticastJoinGroup(uint32_t interface, ns3::Address const & groupAddress);

    virtual int MulticastLeaveGroup(uint32_t interface, ns3::Address const & groupAddress);

    virtual int32_t GetIpMulticastIf() const;

    virtual bool GetIpMulticastLoop() const;

    virtual uint8_t GetIpMulticastTtl() const;

    virtual uint8_t GetIpTtl() const;

    virtual bool GetMtuDiscover() const;

    virtual uint32_t GetRcvBufSize() const;

    virtual void SetIpMulticastIf(int32_t ipIf);

    virtual void SetIpMulticastLoop(bool loop);

    virtual void SetIpMulticastTtl(uint8_t ipTtl);

    virtual void SetIpTtl(uint8_t ipTtl);

    virtual void SetMtuDiscover(bool discover);

    virtual void SetRcvBufSize(uint32_t size);

    virtual uint32_t GetRxAvailable() const;

    virtual bool SetAllowBroadcast(bool allowBroadcast);

    virtual int Send(ns3::Ptr< ns3::Packet > p, uint32_t flags);

    virtual bool GetAllowBroadcast() const;

    virtual ns3::Socket::SocketErrno GetErrno() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual int ShutdownRecv();

    virtual int ShutdownSend();

    virtual int GetSockName(ns3::Address & address) const;

    virtual int SendTo(ns3::Ptr< ns3::Packet > p, uint32_t flags, ns3::Address const & toAddress);

    virtual int Listen();

    virtual ns3::Ptr< ns3::Packet > Recv(uint32_t maxSize, uint32_t flags);

    virtual int Bind(ns3::Address const & address);

    virtual int Bind();

    virtual uint32_t GetTxAvailable() const;

    virtual void BindToNetDevice(ns3::Ptr< ns3::NetDevice > netdevice);

    virtual ns3::Ptr< ns3::Packet > RecvFrom(uint32_t maxSize, uint32_t flags, ns3::Address & fromAddress);

    virtual int Connect(ns3::Address const & address);

    virtual int Close();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UdpSocket__PythonHelper")
        .SetParent< ns3::UdpSocket > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UdpSocket__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UdpSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpSocketFactory;


extern PyTypeObject PyNs3UdpSocketFactory_Type;


typedef struct {
    PyObject_HEAD
    ns3::Application *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Application;


extern PyTypeObject PyNs3Application_Type;

class PyNs3Application__PythonHelper : public ns3::Application
{
public:
    PyObject *m_pyself;
    PyNs3Application__PythonHelper(ns3::Application const & arg0)
        : ns3::Application(arg0), m_pyself(NULL)
        {}

    PyNs3Application__PythonHelper()
        : ns3::Application(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Application__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Application *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Application *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Application *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Application *self);
    inline void DoDispose__parent_caller()
    { ns3::Application::DoDispose(); }

    virtual void DoDispose();

    virtual void DoStart();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Application__PythonHelper")
        .SetParent< ns3::Application > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Application__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Channel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Channel;


extern PyTypeObject PyNs3Channel_Type;

class PyNs3Channel__PythonHelper : public ns3::Channel
{
public:
    PyObject *m_pyself;
    PyNs3Channel__PythonHelper(ns3::Channel const & arg0)
        : ns3::Channel(arg0), m_pyself(NULL)
        {}

    PyNs3Channel__PythonHelper()
        : ns3::Channel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Channel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Channel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Channel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Channel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Channel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Channel__PythonHelper")
        .SetParent< ns3::Channel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Channel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DropTailQueue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DropTailQueue;


extern PyTypeObject PyNs3DropTailQueue_Type;

class PyNs3DropTailQueue__PythonHelper : public ns3::DropTailQueue
{
public:
    PyObject *m_pyself;
    PyNs3DropTailQueue__PythonHelper(ns3::DropTailQueue const & arg0)
        : ns3::DropTailQueue(arg0), m_pyself(NULL)
        {}

    PyNs3DropTailQueue__PythonHelper()
        : ns3::DropTailQueue(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DropTailQueue__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DropTailQueue *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DropTailQueue *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3DropTailQueue *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3DropTailQueue *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::Packet > DoDequeue();

    virtual bool DoEnqueue(ns3::Ptr< ns3::Packet > p);

    virtual ns3::Ptr< ns3::Packet const > DoPeek() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DropTailQueue__PythonHelper")
        .SetParent< ns3::DropTailQueue > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DropTailQueue__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EthernetHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EthernetHeader;


extern PyTypeObject PyNs3EthernetHeader_Type;

class PyNs3EthernetHeader__PythonHelper : public ns3::EthernetHeader
{
public:
    PyObject *m_pyself;
    PyNs3EthernetHeader__PythonHelper(ns3::EthernetHeader const & arg0)
        : ns3::EthernetHeader(arg0), m_pyself(NULL)
        {}

    PyNs3EthernetHeader__PythonHelper(bool hasPreamble)
        : ns3::EthernetHeader(hasPreamble), m_pyself(NULL)
        {}

    PyNs3EthernetHeader__PythonHelper()
        : ns3::EthernetHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EthernetHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EthernetHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::EthernetTrailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EthernetTrailer;


extern PyTypeObject PyNs3EthernetTrailer_Type;

class PyNs3EthernetTrailer__PythonHelper : public ns3::EthernetTrailer
{
public:
    PyObject *m_pyself;
    PyNs3EthernetTrailer__PythonHelper(ns3::EthernetTrailer const & arg0)
        : ns3::EthernetTrailer(arg0), m_pyself(NULL)
        {}

    PyNs3EthernetTrailer__PythonHelper()
        : ns3::EthernetTrailer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EthernetTrailer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EthernetTrailer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator end);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator end) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4;


extern PyTypeObject PyNs3Ipv4_Type;
extern PyTypeObject PyNs3Ipv4Meta_Type;

class PyNs3Ipv4__PythonHelper : public ns3::Ipv4
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4__PythonHelper(ns3::Ipv4 const & arg0)
        : ns3::Ipv4(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4__PythonHelper()
        : ns3::Ipv4(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4 *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4 *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ipv4 *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4 *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool AddAddress(uint32_t interface, ns3::Ipv4InterfaceAddress address);

    virtual uint32_t AddInterface(ns3::Ptr< ns3::NetDevice > device);

    virtual ns3::Ipv4InterfaceAddress GetAddress(uint32_t interface, uint32_t addressIndex) const;

    virtual int32_t GetInterfaceForAddress(ns3::Ipv4Address address) const;

    virtual int32_t GetInterfaceForDevice(ns3::Ptr< ns3::NetDevice const > device) const;

    virtual int32_t GetInterfaceForPrefix(ns3::Ipv4Address address, ns3::Ipv4Mask mask) const;

    virtual uint16_t GetMetric(uint32_t interface) const;

    virtual uint16_t GetMtu(uint32_t interface) const;

    virtual uint32_t GetNAddresses(uint32_t interface) const;

    virtual uint32_t GetNInterfaces() const;

    virtual ns3::Ptr< ns3::NetDevice > GetNetDevice(uint32_t interface);

    virtual ns3::Ptr< ns3::Ipv4RoutingProtocol > GetRoutingProtocol() const;

    virtual bool IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const;

    virtual bool IsForwarding(uint32_t interface) const;

    virtual bool IsUp(uint32_t interface) const;

    virtual bool RemoveAddress(uint32_t interface, uint32_t addressIndex);

    virtual ns3::Ipv4Address SelectSourceAddress(ns3::Ptr< ns3::NetDevice const > device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope);

    virtual void SetDown(uint32_t interface);

    virtual void SetForwarding(uint32_t interface, bool val);

    virtual void SetMetric(uint32_t interface, uint16_t metric);

    virtual void SetRoutingProtocol(ns3::Ptr< ns3::Ipv4RoutingProtocol > routingProtocol);

    virtual void SetUp(uint32_t interface);

    virtual bool GetIpForward() const;

    virtual bool GetWeakEsModel() const;

    virtual void SetIpForward(bool forward);

    virtual void SetWeakEsModel(bool model);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4__PythonHelper")
        .SetParent< ns3::Ipv4 > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject PyNs3Ipv4AddressChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject PyNs3Ipv4AddressValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject PyNs3Ipv4MaskChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject PyNs3Ipv4MaskValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MulticastRoute *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MulticastRoute;


extern PyTypeObject PyNs3Ipv4MulticastRoute_Type;
extern PyTypeObject PyNs3Ipv4MulticastRouteMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4RawSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RawSocketFactory;


extern PyTypeObject PyNs3Ipv4RawSocketFactory_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Route *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Route;


extern PyTypeObject PyNs3Ipv4Route_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingProtocol;


extern PyTypeObject PyNs3Ipv4RoutingProtocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6;


extern PyTypeObject PyNs3Ipv6_Type;
extern PyTypeObject PyNs3Ipv6Meta_Type;

class PyNs3Ipv6__PythonHelper : public ns3::Ipv6
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6__PythonHelper(ns3::Ipv6 const & arg0)
        : ns3::Ipv6(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6__PythonHelper()
        : ns3::Ipv6(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6 *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6 *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ipv6 *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6 *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool AddAddress(uint32_t interface, ns3::Ipv6InterfaceAddress address);

    virtual uint32_t AddInterface(ns3::Ptr< ns3::NetDevice > device);

    virtual ns3::Ipv6InterfaceAddress GetAddress(uint32_t interface, uint32_t addressIndex) const;

    virtual int32_t GetInterfaceForAddress(ns3::Ipv6Address address) const;

    virtual int32_t GetInterfaceForDevice(ns3::Ptr< ns3::NetDevice const > device) const;

    virtual int32_t GetInterfaceForPrefix(ns3::Ipv6Address address, ns3::Ipv6Prefix mask) const;

    virtual uint16_t GetMetric(uint32_t interface) const;

    virtual uint16_t GetMtu(uint32_t interface) const;

    virtual uint32_t GetNAddresses(uint32_t interface) const;

    virtual uint32_t GetNInterfaces() const;

    virtual ns3::Ptr< ns3::NetDevice > GetNetDevice(uint32_t interface);

    virtual ns3::Ptr< ns3::Ipv6RoutingProtocol > GetRoutingProtocol() const;

    virtual bool IsForwarding(uint32_t interface) const;

    virtual bool IsUp(uint32_t interface) const;

    virtual void RegisterExtensions();

    virtual void RegisterOptions();

    virtual bool RemoveAddress(uint32_t interface, uint32_t addressIndex);

    virtual void SetDown(uint32_t interface);

    virtual void SetForwarding(uint32_t interface, bool val);

    virtual void SetMetric(uint32_t interface, uint16_t metric);

    virtual void SetRoutingProtocol(ns3::Ptr< ns3::Ipv6RoutingProtocol > routingProtocol);

    virtual void SetUp(uint32_t interface);

    virtual bool GetIpForward() const;

    virtual void SetIpForward(bool forward);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6__PythonHelper")
        .SetParent< ns3::Ipv6 > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject PyNs3Ipv6AddressChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject PyNs3Ipv6AddressValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6MulticastRoute *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6MulticastRoute;


extern PyTypeObject PyNs3Ipv6MulticastRoute_Type;
extern PyTypeObject PyNs3Ipv6MulticastRouteMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject PyNs3Ipv6PrefixChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject PyNs3Ipv6PrefixValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6RawSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6RawSocketFactory;


extern PyTypeObject PyNs3Ipv6RawSocketFactory_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6Route *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Route;


extern PyTypeObject PyNs3Ipv6Route_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6RoutingProtocol;


extern PyTypeObject PyNs3Ipv6RoutingProtocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressChecker;


extern PyTypeObject PyNs3Mac48AddressChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::Mac48AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Mac48AddressValue;


extern PyTypeObject PyNs3Mac48AddressValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject PyNs3NetDevice_Type;


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject PyNs3Node_Type;

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;
    PyNs3Node__PythonHelper(ns3::Node const & arg0)
        : ns3::Node(arg0), m_pyself(NULL)
        {}

    PyNs3Node__PythonHelper()
        : ns3::Node(), m_pyself(NULL)
        {}

    PyNs3Node__PythonHelper(uint32_t systemId)
        : ns3::Node(systemId), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Node *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Node *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Node *self);
    inline void DoStart__parent_caller()
    { ns3::Node::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Node *self);
    inline void DoDispose__parent_caller()
    { ns3::Node::DoDispose(); }

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyDeviceAdded(ns3::Ptr< ns3::NetDevice > device);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Node__PythonHelper")
        .SetParent< ns3::Node > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Node__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PacketSocketFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketSocketFactory;


extern PyTypeObject PyNs3PacketSocketFactory_Type;

class PyNs3PacketSocketFactory__PythonHelper : public ns3::PacketSocketFactory
{
public:
    PyObject *m_pyself;
    PyNs3PacketSocketFactory__PythonHelper(ns3::PacketSocketFactory const & arg0)
        : ns3::PacketSocketFactory(arg0), m_pyself(NULL)
        {}

    PyNs3PacketSocketFactory__PythonHelper()
        : ns3::PacketSocketFactory(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketSocketFactory__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PacketSocketFactory *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PacketSocketFactory *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PacketSocketFactory *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PacketSocketFactory *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::Socket > CreateSocket();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PacketSocketFactory__PythonHelper")
        .SetParent< ns3::PacketSocketFactory > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PacketSocketFactory__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PbbAddressBlock *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbAddressBlock;


extern PyTypeObject PyNs3PbbAddressBlock_Type;


typedef struct {
    PyObject_HEAD
    ns3::PbbAddressBlockIpv4 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbAddressBlockIpv4;


extern PyTypeObject PyNs3PbbAddressBlockIpv4_Type;


typedef struct {
    PyObject_HEAD
    ns3::PbbAddressBlockIpv6 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbAddressBlockIpv6;


extern PyTypeObject PyNs3PbbAddressBlockIpv6_Type;


typedef struct {
    PyObject_HEAD
    ns3::PbbMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbMessage;


extern PyTypeObject PyNs3PbbMessage_Type;


typedef struct {
    PyObject_HEAD
    ns3::PbbMessageIpv4 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbMessageIpv4;


extern PyTypeObject PyNs3PbbMessageIpv4_Type;


typedef struct {
    PyObject_HEAD
    ns3::PbbMessageIpv6 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbMessageIpv6;


extern PyTypeObject PyNs3PbbMessageIpv6_Type;


typedef struct {
    PyObject_HEAD
    ns3::PbbPacket *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbPacket;


extern PyTypeObject PyNs3PbbPacket_Type;

class PyNs3PbbPacket__PythonHelper : public ns3::PbbPacket
{
public:
    PyObject *m_pyself;
    PyNs3PbbPacket__PythonHelper(ns3::PbbPacket const & arg0)
        : ns3::PbbPacket(arg0), m_pyself(NULL)
        {}

    PyNs3PbbPacket__PythonHelper()
        : ns3::PbbPacket(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PbbPacket__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PbbPacket *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::PbbTlv *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbTlv;


extern PyTypeObject PyNs3PbbTlv_Type;


typedef struct {
    PyObject_HEAD
    ns3::SimpleChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleChannel;


extern PyTypeObject PyNs3SimpleChannel_Type;

class PyNs3SimpleChannel__PythonHelper : public ns3::SimpleChannel
{
public:
    PyObject *m_pyself;
    PyNs3SimpleChannel__PythonHelper(ns3::SimpleChannel const & arg0)
        : ns3::SimpleChannel(arg0), m_pyself(NULL)
        {}

    PyNs3SimpleChannel__PythonHelper()
        : ns3::SimpleChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SimpleChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SimpleChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SimpleChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SimpleChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SimpleChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SimpleChannel__PythonHelper")
        .SetParent< ns3::SimpleChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SimpleChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimpleNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleNetDevice;


extern PyTypeObject PyNs3SimpleNetDevice_Type;

class PyNs3SimpleNetDevice__PythonHelper : public ns3::SimpleNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3SimpleNetDevice__PythonHelper(ns3::SimpleNetDevice const & arg0)
        : ns3::SimpleNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3SimpleNetDevice__PythonHelper()
        : ns3::SimpleNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SimpleNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SimpleNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SimpleNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SimpleNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SimpleNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::SimpleNetDevice::DoDispose(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SimpleNetDevice__PythonHelper")
        .SetParent< ns3::SimpleNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SimpleNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumChannel;


extern PyTypeObject PyNs3SpectrumChannel_Type;

class PyNs3SpectrumChannel__PythonHelper : public ns3::SpectrumChannel
{
public:
    PyObject *m_pyself;
    PyNs3SpectrumChannel__PythonHelper()
        : ns3::SpectrumChannel(), m_pyself(NULL)
        {}

    PyNs3SpectrumChannel__PythonHelper(ns3::SpectrumChannel const & arg0)
        : ns3::SpectrumChannel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SpectrumChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SpectrumChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SpectrumChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SpectrumChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void AddRx(ns3::Ptr< ns3::SpectrumPhy > phy);

    virtual void AddSpectrumPropagationLossModel(ns3::Ptr< ns3::SpectrumPropagationLossModel > loss);

    virtual void SetPropagationDelayModel(ns3::Ptr< ns3::PropagationDelayModel > delay);

    virtual void StartTx(ns3::Ptr< ns3::PacketBurst > p, ns3::Ptr< ns3::SpectrumValue > txPsd, ns3::SpectrumType st, ns3::Time duration, ns3::Ptr< ns3::SpectrumPhy > sender);

    virtual uint32_t GetNDevices() const;

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SpectrumChannel__PythonHelper")
        .SetParent< ns3::SpectrumChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SpectrumChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject PyNs3AddressChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject PyNs3AddressValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::PbbAddressTlv *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PbbAddressTlv;


extern PyTypeObject PyNs3PbbAddressTlv_Type;


typedef struct {
    PyObject_HEAD
    ns3::BridgeChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BridgeChannel;


extern PyTypeObject PyNs3BridgeChannel_Type;

class PyNs3BridgeChannel__PythonHelper : public ns3::BridgeChannel
{
public:
    PyObject *m_pyself;
    PyNs3BridgeChannel__PythonHelper(ns3::BridgeChannel const & arg0)
        : ns3::BridgeChannel(arg0), m_pyself(NULL)
        {}

    PyNs3BridgeChannel__PythonHelper()
        : ns3::BridgeChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BridgeChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3BridgeChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3BridgeChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3BridgeChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3BridgeChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3BridgeChannel__PythonHelper")
        .SetParent< ns3::BridgeChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3BridgeChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::BridgeNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BridgeNetDevice;


extern PyTypeObject PyNs3BridgeNetDevice_Type;

class PyNs3BridgeNetDevice__PythonHelper : public ns3::BridgeNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3BridgeNetDevice__PythonHelper(ns3::BridgeNetDevice const & arg0)
        : ns3::BridgeNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3BridgeNetDevice__PythonHelper()
        : ns3::BridgeNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BridgeNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3BridgeNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_ForwardBroadcast(PyNs3BridgeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void ForwardBroadcast__parent_caller(ns3::Ptr< ns3::NetDevice > incomingPort, ns3::Ptr< ns3::Packet const > packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst)
    { ns3::BridgeNetDevice::ForwardBroadcast(incomingPort, packet, protocol, src, dst); }

    static PyObject * _wrap_ForwardUnicast(PyNs3BridgeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void ForwardUnicast__parent_caller(ns3::Ptr< ns3::NetDevice > incomingPort, ns3::Ptr< ns3::Packet const > packet, uint16_t protocol, ns3::Mac48Address src, ns3::Mac48Address dst)
    { ns3::BridgeNetDevice::ForwardUnicast(incomingPort, packet, protocol, src, dst); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3BridgeNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3BridgeNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::BridgeNetDevice::DoDispose(); }

    static PyObject * _wrap_DoStart(PyNs3BridgeNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_GetLearnedState(PyNs3BridgeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline ns3::Ptr< ns3::NetDevice > GetLearnedState__parent_caller(ns3::Mac48Address source)
    { return ns3::BridgeNetDevice::GetLearnedState(source); }

    static PyObject * _wrap_Learn(PyNs3BridgeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void Learn__parent_caller(ns3::Mac48Address source, ns3::Ptr< ns3::NetDevice > port)
    { ns3::BridgeNetDevice::Learn(source, port); }

    static PyObject * _wrap_ReceiveFromDevice(PyNs3BridgeNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void ReceiveFromDevice__parent_caller(ns3::Ptr< ns3::NetDevice > device, ns3::Ptr< ns3::Packet const > packet, uint16_t protocol, ns3::Address const & source, ns3::Address const & destination, ns3::NetDevice::PacketType packetType)
    { ns3::BridgeNetDevice::ReceiveFromDevice(device, packet, protocol, source, destination, packetType); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3BridgeNetDevice__PythonHelper")
        .SetParent< ns3::BridgeNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3BridgeNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Backoff *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Backoff;


extern PyTypeObject PyNs3Backoff_Type;

extern std::map<void*, PyObject*> PyNs3Backoff_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CsmaDeviceRec *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CsmaDeviceRec;


extern PyTypeObject PyNs3CsmaDeviceRec_Type;

extern std::map<void*, PyObject*> PyNs3CsmaDeviceRec_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CsmaChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CsmaChannel;


extern PyTypeObject PyNs3CsmaChannel_Type;

class PyNs3CsmaChannel__PythonHelper : public ns3::CsmaChannel
{
public:
    PyObject *m_pyself;
    PyNs3CsmaChannel__PythonHelper(ns3::CsmaChannel const & arg0)
        : ns3::CsmaChannel(arg0), m_pyself(NULL)
        {}

    PyNs3CsmaChannel__PythonHelper()
        : ns3::CsmaChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CsmaChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CsmaChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3CsmaChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3CsmaChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3CsmaChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3CsmaChannel__PythonHelper")
        .SetParent< ns3::CsmaChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3CsmaChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::CsmaNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CsmaNetDevice;


extern PyTypeObject PyNs3CsmaNetDevice_Type;

class PyNs3CsmaNetDevice__PythonHelper : public ns3::CsmaNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3CsmaNetDevice__PythonHelper()
        : ns3::CsmaNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CsmaNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CsmaNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3CsmaNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_AddHeader(PyNs3CsmaNetDevice *self, PyObject *args, PyObject *kwargs);
    inline void AddHeader__parent_caller(ns3::Ptr< ns3::Packet > p, ns3::Mac48Address source, ns3::Mac48Address dest, uint16_t protocolNumber)
    { ns3::CsmaNetDevice::AddHeader(p, source, dest, protocolNumber); }

    static PyObject * _wrap_DoStart(PyNs3CsmaNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3CsmaNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::CsmaNetDevice::DoDispose(); }

    virtual void SetIfIndex(uint32_t const index);

    virtual uint32_t GetIfIndex() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual uint16_t GetMtu() const;

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetAddress() const;

    virtual bool IsLinkUp() const;

    virtual bool IsBroadcast() const;

    virtual ns3::Address GetBroadcast() const;

    virtual bool IsMulticast() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual bool IsPointToPoint() const;

    virtual bool IsBridge() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool NeedsArp() const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3CsmaNetDevice__PythonHelper")
        .SetParent< ns3::CsmaNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3CsmaNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::GlobalRouteManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRouteManager;


extern PyTypeObject PyNs3GlobalRouteManager_Type;

extern std::map<void*, PyObject*> PyNs3GlobalRouteManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalRoutingLSA *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRoutingLSA;


extern PyTypeObject PyNs3GlobalRoutingLSA_Type;

extern std::map<void*, PyObject*> PyNs3GlobalRoutingLSA_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalRoutingLinkRecord *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRoutingLinkRecord;


extern PyTypeObject PyNs3GlobalRoutingLinkRecord_Type;

extern std::map<void*, PyObject*> PyNs3GlobalRoutingLinkRecord_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::GlobalRouter *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GlobalRouter;


extern PyTypeObject PyNs3GlobalRouter_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4GlobalRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4GlobalRouting;


extern PyTypeObject PyNs3Ipv4GlobalRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::OptionField *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OptionField;


extern PyTypeObject PyNs3OptionField_Type;

extern std::map<void*, PyObject*> PyNs3OptionField_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Icmpv4DestinationUnreachable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4DestinationUnreachable;


extern PyTypeObject PyNs3Icmpv4DestinationUnreachable_Type;

class PyNs3Icmpv4DestinationUnreachable__PythonHelper : public ns3::Icmpv4DestinationUnreachable
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv4DestinationUnreachable__PythonHelper(ns3::Icmpv4DestinationUnreachable const & arg0)
        : ns3::Icmpv4DestinationUnreachable(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv4DestinationUnreachable__PythonHelper()
        : ns3::Icmpv4DestinationUnreachable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv4DestinationUnreachable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv4DestinationUnreachable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv4Echo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4Echo;


extern PyTypeObject PyNs3Icmpv4Echo_Type;

class PyNs3Icmpv4Echo__PythonHelper : public ns3::Icmpv4Echo
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv4Echo__PythonHelper(ns3::Icmpv4Echo const & arg0)
        : ns3::Icmpv4Echo(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv4Echo__PythonHelper()
        : ns3::Icmpv4Echo(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv4Echo__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv4Echo *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv4Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4Header;


extern PyTypeObject PyNs3Icmpv4Header_Type;

class PyNs3Icmpv4Header__PythonHelper : public ns3::Icmpv4Header
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv4Header__PythonHelper(ns3::Icmpv4Header const & arg0)
        : ns3::Icmpv4Header(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv4Header__PythonHelper()
        : ns3::Icmpv4Header(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv4Header__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv4Header *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv4TimeExceeded *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4TimeExceeded;


extern PyTypeObject PyNs3Icmpv4TimeExceeded_Type;

class PyNs3Icmpv4TimeExceeded__PythonHelper : public ns3::Icmpv4TimeExceeded
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv4TimeExceeded__PythonHelper(ns3::Icmpv4TimeExceeded const & arg0)
        : ns3::Icmpv4TimeExceeded(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv4TimeExceeded__PythonHelper()
        : ns3::Icmpv4TimeExceeded(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv4TimeExceeded__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv4TimeExceeded *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6Header;


extern PyTypeObject PyNs3Icmpv6Header_Type;

class PyNs3Icmpv6Header__PythonHelper : public ns3::Icmpv6Header
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6Header__PythonHelper(ns3::Icmpv6Header const & arg0)
        : ns3::Icmpv6Header(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6Header__PythonHelper()
        : ns3::Icmpv6Header(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6Header__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6Header *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6NA *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6NA;


extern PyTypeObject PyNs3Icmpv6NA_Type;

class PyNs3Icmpv6NA__PythonHelper : public ns3::Icmpv6NA
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6NA__PythonHelper(ns3::Icmpv6NA const & arg0)
        : ns3::Icmpv6NA(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6NA__PythonHelper()
        : ns3::Icmpv6NA(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6NA__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6NA *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6NS *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6NS;


extern PyTypeObject PyNs3Icmpv6NS_Type;

class PyNs3Icmpv6NS__PythonHelper : public ns3::Icmpv6NS
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6NS__PythonHelper(ns3::Icmpv6NS const & arg0)
        : ns3::Icmpv6NS(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6NS__PythonHelper(ns3::Ipv6Address target)
        : ns3::Icmpv6NS(target), m_pyself(NULL)
        {}

    PyNs3Icmpv6NS__PythonHelper()
        : ns3::Icmpv6NS(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6NS__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6NS *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionHeader;


extern PyTypeObject PyNs3Icmpv6OptionHeader_Type;

class PyNs3Icmpv6OptionHeader__PythonHelper : public ns3::Icmpv6OptionHeader
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6OptionHeader__PythonHelper(ns3::Icmpv6OptionHeader const & arg0)
        : ns3::Icmpv6OptionHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionHeader__PythonHelper()
        : ns3::Icmpv6OptionHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6OptionHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6OptionHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionLinkLayerAddress *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionLinkLayerAddress;


extern PyTypeObject PyNs3Icmpv6OptionLinkLayerAddress_Type;

class PyNs3Icmpv6OptionLinkLayerAddress__PythonHelper : public ns3::Icmpv6OptionLinkLayerAddress
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6OptionLinkLayerAddress__PythonHelper(ns3::Icmpv6OptionLinkLayerAddress const & arg0)
        : ns3::Icmpv6OptionLinkLayerAddress(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionLinkLayerAddress__PythonHelper(bool source)
        : ns3::Icmpv6OptionLinkLayerAddress(source), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionLinkLayerAddress__PythonHelper(bool source, ns3::Address addr)
        : ns3::Icmpv6OptionLinkLayerAddress(source, addr), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionLinkLayerAddress__PythonHelper()
        : ns3::Icmpv6OptionLinkLayerAddress(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6OptionLinkLayerAddress__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6OptionLinkLayerAddress *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionMtu *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionMtu;


extern PyTypeObject PyNs3Icmpv6OptionMtu_Type;

class PyNs3Icmpv6OptionMtu__PythonHelper : public ns3::Icmpv6OptionMtu
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6OptionMtu__PythonHelper(ns3::Icmpv6OptionMtu const & arg0)
        : ns3::Icmpv6OptionMtu(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionMtu__PythonHelper()
        : ns3::Icmpv6OptionMtu(), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionMtu__PythonHelper(uint32_t mtu)
        : ns3::Icmpv6OptionMtu(mtu), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6OptionMtu__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6OptionMtu *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionPrefixInformation *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionPrefixInformation;


extern PyTypeObject PyNs3Icmpv6OptionPrefixInformation_Type;

class PyNs3Icmpv6OptionPrefixInformation__PythonHelper : public ns3::Icmpv6OptionPrefixInformation
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6OptionPrefixInformation__PythonHelper(ns3::Icmpv6OptionPrefixInformation const & arg0)
        : ns3::Icmpv6OptionPrefixInformation(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionPrefixInformation__PythonHelper()
        : ns3::Icmpv6OptionPrefixInformation(), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionPrefixInformation__PythonHelper(ns3::Ipv6Address network, uint8_t prefixlen)
        : ns3::Icmpv6OptionPrefixInformation(network, prefixlen), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6OptionPrefixInformation__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6OptionPrefixInformation *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6OptionRedirected *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6OptionRedirected;


extern PyTypeObject PyNs3Icmpv6OptionRedirected_Type;

class PyNs3Icmpv6OptionRedirected__PythonHelper : public ns3::Icmpv6OptionRedirected
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6OptionRedirected__PythonHelper(ns3::Icmpv6OptionRedirected const & arg0)
        : ns3::Icmpv6OptionRedirected(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6OptionRedirected__PythonHelper()
        : ns3::Icmpv6OptionRedirected(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6OptionRedirected__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6OptionRedirected *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6ParameterError *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6ParameterError;


extern PyTypeObject PyNs3Icmpv6ParameterError_Type;

class PyNs3Icmpv6ParameterError__PythonHelper : public ns3::Icmpv6ParameterError
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6ParameterError__PythonHelper(ns3::Icmpv6ParameterError const & arg0)
        : ns3::Icmpv6ParameterError(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6ParameterError__PythonHelper()
        : ns3::Icmpv6ParameterError(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6ParameterError__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6ParameterError *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6RA *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6RA;


extern PyTypeObject PyNs3Icmpv6RA_Type;

class PyNs3Icmpv6RA__PythonHelper : public ns3::Icmpv6RA
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6RA__PythonHelper(ns3::Icmpv6RA const & arg0)
        : ns3::Icmpv6RA(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6RA__PythonHelper()
        : ns3::Icmpv6RA(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6RA__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6RA *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6RS *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6RS;


extern PyTypeObject PyNs3Icmpv6RS_Type;

class PyNs3Icmpv6RS__PythonHelper : public ns3::Icmpv6RS
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6RS__PythonHelper(ns3::Icmpv6RS const & arg0)
        : ns3::Icmpv6RS(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6RS__PythonHelper()
        : ns3::Icmpv6RS(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6RS__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6RS *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6Redirection *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6Redirection;


extern PyTypeObject PyNs3Icmpv6Redirection_Type;

class PyNs3Icmpv6Redirection__PythonHelper : public ns3::Icmpv6Redirection
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6Redirection__PythonHelper(ns3::Icmpv6Redirection const & arg0)
        : ns3::Icmpv6Redirection(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6Redirection__PythonHelper()
        : ns3::Icmpv6Redirection(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6Redirection__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6Redirection *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6TimeExceeded *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6TimeExceeded;


extern PyTypeObject PyNs3Icmpv6TimeExceeded_Type;

class PyNs3Icmpv6TimeExceeded__PythonHelper : public ns3::Icmpv6TimeExceeded
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6TimeExceeded__PythonHelper(ns3::Icmpv6TimeExceeded const & arg0)
        : ns3::Icmpv6TimeExceeded(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6TimeExceeded__PythonHelper()
        : ns3::Icmpv6TimeExceeded(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6TimeExceeded__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6TimeExceeded *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6TooBig *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6TooBig;


extern PyTypeObject PyNs3Icmpv6TooBig_Type;

class PyNs3Icmpv6TooBig__PythonHelper : public ns3::Icmpv6TooBig
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6TooBig__PythonHelper(ns3::Icmpv6TooBig const & arg0)
        : ns3::Icmpv6TooBig(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6TooBig__PythonHelper()
        : ns3::Icmpv6TooBig(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6TooBig__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6TooBig *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionHeader;


extern PyTypeObject PyNs3Ipv6ExtensionHeader_Type;

class PyNs3Ipv6ExtensionHeader__PythonHelper : public ns3::Ipv6ExtensionHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionHeader__PythonHelper(ns3::Ipv6ExtensionHeader const & arg0)
        : ns3::Ipv6ExtensionHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionHeader__PythonHelper()
        : ns3::Ipv6ExtensionHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionHopByHopHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionHopByHopHeader;


extern PyTypeObject PyNs3Ipv6ExtensionHopByHopHeader_Type;

class PyNs3Ipv6ExtensionHopByHopHeader__PythonHelper : public ns3::Ipv6ExtensionHopByHopHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionHopByHopHeader__PythonHelper(ns3::Ipv6ExtensionHopByHopHeader const & arg0)
        : ns3::Ipv6ExtensionHopByHopHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionHopByHopHeader__PythonHelper()
        : ns3::Ipv6ExtensionHopByHopHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionHopByHopHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionHopByHopHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionRoutingHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionRoutingHeader;


extern PyTypeObject PyNs3Ipv6ExtensionRoutingHeader_Type;

class PyNs3Ipv6ExtensionRoutingHeader__PythonHelper : public ns3::Ipv6ExtensionRoutingHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionRoutingHeader__PythonHelper(ns3::Ipv6ExtensionRoutingHeader const & arg0)
        : ns3::Ipv6ExtensionRoutingHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionRoutingHeader__PythonHelper()
        : ns3::Ipv6ExtensionRoutingHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionRoutingHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionRoutingHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionHeader;


extern PyTypeObject PyNs3Ipv6OptionHeader_Type;

class PyNs3Ipv6OptionHeader__PythonHelper : public ns3::Ipv6OptionHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6OptionHeader__PythonHelper(ns3::Ipv6OptionHeader const & arg0)
        : ns3::Ipv6OptionHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6OptionHeader__PythonHelper()
        : ns3::Ipv6OptionHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6OptionHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6OptionHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::Ipv6OptionHeader::Alignment GetAlignment() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionHeader::Alignment *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionHeaderAlignment;


extern PyTypeObject PyNs3Ipv6OptionHeaderAlignment_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6OptionHeaderAlignment_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionJumbogramHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionJumbogramHeader;


extern PyTypeObject PyNs3Ipv6OptionJumbogramHeader_Type;

class PyNs3Ipv6OptionJumbogramHeader__PythonHelper : public ns3::Ipv6OptionJumbogramHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6OptionJumbogramHeader__PythonHelper(ns3::Ipv6OptionJumbogramHeader const & arg0)
        : ns3::Ipv6OptionJumbogramHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6OptionJumbogramHeader__PythonHelper()
        : ns3::Ipv6OptionJumbogramHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6OptionJumbogramHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6OptionJumbogramHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::Ipv6OptionHeader::Alignment GetAlignment() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionPad1Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionPad1Header;


extern PyTypeObject PyNs3Ipv6OptionPad1Header_Type;

class PyNs3Ipv6OptionPad1Header__PythonHelper : public ns3::Ipv6OptionPad1Header
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6OptionPad1Header__PythonHelper(ns3::Ipv6OptionPad1Header const & arg0)
        : ns3::Ipv6OptionPad1Header(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6OptionPad1Header__PythonHelper()
        : ns3::Ipv6OptionPad1Header(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6OptionPad1Header__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6OptionPad1Header *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual ns3::Ipv6OptionHeader::Alignment GetAlignment() const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionPadnHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionPadnHeader;


extern PyTypeObject PyNs3Ipv6OptionPadnHeader_Type;

class PyNs3Ipv6OptionPadnHeader__PythonHelper : public ns3::Ipv6OptionPadnHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6OptionPadnHeader__PythonHelper(ns3::Ipv6OptionPadnHeader const & arg0)
        : ns3::Ipv6OptionPadnHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6OptionPadnHeader__PythonHelper(uint32_t pad)
        : ns3::Ipv6OptionPadnHeader(pad), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6OptionPadnHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6OptionPadnHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual ns3::Ipv6OptionHeader::Alignment GetAlignment() const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6OptionRouterAlertHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6OptionRouterAlertHeader;


extern PyTypeObject PyNs3Ipv6OptionRouterAlertHeader_Type;

class PyNs3Ipv6OptionRouterAlertHeader__PythonHelper : public ns3::Ipv6OptionRouterAlertHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6OptionRouterAlertHeader__PythonHelper(ns3::Ipv6OptionRouterAlertHeader const & arg0)
        : ns3::Ipv6OptionRouterAlertHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6OptionRouterAlertHeader__PythonHelper()
        : ns3::Ipv6OptionRouterAlertHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6OptionRouterAlertHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6OptionRouterAlertHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::Ipv6OptionHeader::Alignment GetAlignment() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::TcpHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpHeader;


extern PyTypeObject PyNs3TcpHeader_Type;

class PyNs3TcpHeader__PythonHelper : public ns3::TcpHeader
{
public:
    PyObject *m_pyself;
    PyNs3TcpHeader__PythonHelper(ns3::TcpHeader const & arg0)
        : ns3::TcpHeader(arg0), m_pyself(NULL)
        {}

    PyNs3TcpHeader__PythonHelper()
        : ns3::TcpHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UdpHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpHeader;


extern PyTypeObject PyNs3UdpHeader_Type;

class PyNs3UdpHeader__PythonHelper : public ns3::UdpHeader
{
public:
    PyObject *m_pyself;
    PyNs3UdpHeader__PythonHelper(ns3::UdpHeader const & arg0)
        : ns3::UdpHeader(arg0), m_pyself(NULL)
        {}

    PyNs3UdpHeader__PythonHelper()
        : ns3::UdpHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::ArpCache *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArpCache;


extern PyTypeObject PyNs3ArpCache_Type;

class PyNs3ArpCache__PythonHelper : public ns3::ArpCache
{
public:
    PyObject *m_pyself;
    PyNs3ArpCache__PythonHelper()
        : ns3::ArpCache(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ArpCache__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ArpCache *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ArpCache *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ArpCache *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ArpCache__PythonHelper")
        .SetParent< ns3::ArpCache > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ArpCache__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ArpCache::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArpCacheEntry;


extern PyTypeObject PyNs3ArpCacheEntry_Type;

extern std::map<void*, PyObject*> PyNs3ArpCacheEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ArpHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArpHeader;


extern PyTypeObject PyNs3ArpHeader_Type;

class PyNs3ArpHeader__PythonHelper : public ns3::ArpHeader
{
public:
    PyObject *m_pyself;
    PyNs3ArpHeader__PythonHelper()
        : ns3::ArpHeader(), m_pyself(NULL)
        {}

    PyNs3ArpHeader__PythonHelper(ns3::ArpHeader const & arg0)
        : ns3::ArpHeader(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ArpHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ArpHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::ArpL3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArpL3Protocol;


extern PyTypeObject PyNs3ArpL3Protocol_Type;
extern PyTypeObject PyNs3ArpL3ProtocolMeta_Type;

class PyNs3ArpL3Protocol__PythonHelper : public ns3::ArpL3Protocol
{
public:
    PyObject *m_pyself;
    PyNs3ArpL3Protocol__PythonHelper()
        : ns3::ArpL3Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ArpL3Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ArpL3Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ArpL3Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::ArpL3Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ArpL3Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ArpL3Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::ArpL3Protocol::DoDispose(); }

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ArpL3Protocol__PythonHelper")
        .SetParent< ns3::ArpL3Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ArpL3Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6DestinationUnreachable *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6DestinationUnreachable;


extern PyTypeObject PyNs3Icmpv6DestinationUnreachable_Type;

class PyNs3Icmpv6DestinationUnreachable__PythonHelper : public ns3::Icmpv6DestinationUnreachable
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6DestinationUnreachable__PythonHelper(ns3::Icmpv6DestinationUnreachable const & arg0)
        : ns3::Icmpv6DestinationUnreachable(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6DestinationUnreachable__PythonHelper()
        : ns3::Icmpv6DestinationUnreachable(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6DestinationUnreachable__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6DestinationUnreachable *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6Echo *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6Echo;


extern PyTypeObject PyNs3Icmpv6Echo_Type;

class PyNs3Icmpv6Echo__PythonHelper : public ns3::Icmpv6Echo
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6Echo__PythonHelper(ns3::Icmpv6Echo const & arg0)
        : ns3::Icmpv6Echo(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6Echo__PythonHelper()
        : ns3::Icmpv6Echo(), m_pyself(NULL)
        {}

    PyNs3Icmpv6Echo__PythonHelper(bool request)
        : ns3::Icmpv6Echo(request), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6Echo__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6Echo *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv4Interface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Interface;


extern PyTypeObject PyNs3Ipv4Interface_Type;

class PyNs3Ipv4Interface__PythonHelper : public ns3::Ipv4Interface
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4Interface__PythonHelper(ns3::Ipv4Interface const & arg0)
        : ns3::Ipv4Interface(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv4Interface__PythonHelper()
        : ns3::Ipv4Interface(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4Interface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4Interface *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4Interface *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ipv4Interface *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4Interface *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv4Interface::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4Interface__PythonHelper")
        .SetParent< ns3::Ipv4Interface > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4Interface__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4L3Protocol;


extern PyTypeObject PyNs3Ipv4L3Protocol_Type;
extern PyTypeObject PyNs3Ipv4L3ProtocolMeta_Type;

class PyNs3Ipv4L3Protocol__PythonHelper : public ns3::Ipv4L3Protocol
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4L3Protocol__PythonHelper()
        : ns3::Ipv4L3Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4L3Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4L3Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4L3Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Ipv4L3Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ipv4L3Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4L3Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv4L3Protocol::DoDispose(); }

    virtual void SetRoutingProtocol(ns3::Ptr< ns3::Ipv4RoutingProtocol > routingProtocol);

    virtual ns3::Ptr< ns3::Ipv4RoutingProtocol > GetRoutingProtocol() const;

    virtual uint32_t AddInterface(ns3::Ptr< ns3::NetDevice > device);

    virtual uint32_t GetNInterfaces() const;

    virtual int32_t GetInterfaceForAddress(ns3::Ipv4Address addr) const;

    virtual int32_t GetInterfaceForPrefix(ns3::Ipv4Address addr, ns3::Ipv4Mask mask) const;

    virtual int32_t GetInterfaceForDevice(ns3::Ptr< ns3::NetDevice const > device) const;

    virtual bool IsDestinationAddress(ns3::Ipv4Address address, uint32_t iif) const;

    virtual bool AddAddress(uint32_t i, ns3::Ipv4InterfaceAddress address);

    virtual ns3::Ipv4InterfaceAddress GetAddress(uint32_t interfaceIndex, uint32_t addressIndex) const;

    virtual uint32_t GetNAddresses(uint32_t interface) const;

    virtual bool RemoveAddress(uint32_t interfaceIndex, uint32_t addressIndex);

    virtual ns3::Ipv4Address SelectSourceAddress(ns3::Ptr< ns3::NetDevice const > device, ns3::Ipv4Address dst, ns3::Ipv4InterfaceAddress::InterfaceAddressScope_e scope);

    virtual void SetMetric(uint32_t i, uint16_t metric);

    virtual uint16_t GetMetric(uint32_t i) const;

    virtual uint16_t GetMtu(uint32_t i) const;

    virtual bool IsUp(uint32_t i) const;

    virtual void SetUp(uint32_t i);

    virtual void SetDown(uint32_t i);

    virtual bool IsForwarding(uint32_t i) const;

    virtual void SetForwarding(uint32_t i, bool val);

    virtual ns3::Ptr< ns3::NetDevice > GetNetDevice(uint32_t i);

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual void SetIpForward(bool forward);

    virtual bool GetIpForward() const;

    virtual void SetWeakEsModel(bool model);

    virtual bool GetWeakEsModel() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4L3Protocol__PythonHelper")
        .SetParent< ns3::Ipv4L3Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4L3Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4L4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4L4Protocol;


extern PyTypeObject PyNs3Ipv4L4Protocol_Type;

class PyNs3Ipv4L4Protocol__PythonHelper : public ns3::Ipv4L4Protocol
{
public:
    PyObject *m_pyself;
    PyNs3Ipv4L4Protocol__PythonHelper()
        : ns3::Ipv4L4Protocol(), m_pyself(NULL)
        {}

    PyNs3Ipv4L4Protocol__PythonHelper(ns3::Ipv4L4Protocol const & arg0)
        : ns3::Ipv4L4Protocol(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv4L4Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv4L4Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv4L4Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ipv4L4Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv4L4Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual int GetProtocolNumber() const;

    virtual ns3::Ipv4L4Protocol::RxStatus Receive(ns3::Ptr< ns3::Packet > p, ns3::Ipv4Header const & header, ns3::Ptr< ns3::Ipv4Interface > incomingInterface);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv4L4Protocol__PythonHelper")
        .SetParent< ns3::Ipv4L4Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv4L4Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionAHHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionAHHeader;


extern PyTypeObject PyNs3Ipv6ExtensionAHHeader_Type;

class PyNs3Ipv6ExtensionAHHeader__PythonHelper : public ns3::Ipv6ExtensionAHHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionAHHeader__PythonHelper(ns3::Ipv6ExtensionAHHeader const & arg0)
        : ns3::Ipv6ExtensionAHHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionAHHeader__PythonHelper()
        : ns3::Ipv6ExtensionAHHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionAHHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionAHHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionDestinationHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionDestinationHeader;


extern PyTypeObject PyNs3Ipv6ExtensionDestinationHeader_Type;

class PyNs3Ipv6ExtensionDestinationHeader__PythonHelper : public ns3::Ipv6ExtensionDestinationHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionDestinationHeader__PythonHelper(ns3::Ipv6ExtensionDestinationHeader const & arg0)
        : ns3::Ipv6ExtensionDestinationHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionDestinationHeader__PythonHelper()
        : ns3::Ipv6ExtensionDestinationHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionDestinationHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionDestinationHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionESPHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionESPHeader;


extern PyTypeObject PyNs3Ipv6ExtensionESPHeader_Type;

class PyNs3Ipv6ExtensionESPHeader__PythonHelper : public ns3::Ipv6ExtensionESPHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionESPHeader__PythonHelper(ns3::Ipv6ExtensionESPHeader const & arg0)
        : ns3::Ipv6ExtensionESPHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionESPHeader__PythonHelper()
        : ns3::Ipv6ExtensionESPHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionESPHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionESPHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionFragmentHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionFragmentHeader;


extern PyTypeObject PyNs3Ipv6ExtensionFragmentHeader_Type;

class PyNs3Ipv6ExtensionFragmentHeader__PythonHelper : public ns3::Ipv6ExtensionFragmentHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionFragmentHeader__PythonHelper(ns3::Ipv6ExtensionFragmentHeader const & arg0)
        : ns3::Ipv6ExtensionFragmentHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionFragmentHeader__PythonHelper()
        : ns3::Ipv6ExtensionFragmentHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionFragmentHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionFragmentHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ExtensionLooseRoutingHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ExtensionLooseRoutingHeader;


extern PyTypeObject PyNs3Ipv6ExtensionLooseRoutingHeader_Type;

class PyNs3Ipv6ExtensionLooseRoutingHeader__PythonHelper : public ns3::Ipv6ExtensionLooseRoutingHeader
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6ExtensionLooseRoutingHeader__PythonHelper(ns3::Ipv6ExtensionLooseRoutingHeader const & arg0)
        : ns3::Ipv6ExtensionLooseRoutingHeader(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6ExtensionLooseRoutingHeader__PythonHelper()
        : ns3::Ipv6ExtensionLooseRoutingHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6ExtensionLooseRoutingHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6ExtensionLooseRoutingHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv6Interface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Interface;


extern PyTypeObject PyNs3Ipv6Interface_Type;

class PyNs3Ipv6Interface__PythonHelper : public ns3::Ipv6Interface
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6Interface__PythonHelper(ns3::Ipv6Interface const & arg0)
        : ns3::Ipv6Interface(arg0), m_pyself(NULL)
        {}

    PyNs3Ipv6Interface__PythonHelper()
        : ns3::Ipv6Interface(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6Interface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6Interface *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6Interface *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ipv6Interface *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6Interface *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv6Interface::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6Interface__PythonHelper")
        .SetParent< ns3::Ipv6Interface > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6Interface__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6L3Protocol;


extern PyTypeObject PyNs3Ipv6L3Protocol_Type;
extern PyTypeObject PyNs3Ipv6L3ProtocolMeta_Type;

class PyNs3Ipv6L3Protocol__PythonHelper : public ns3::Ipv6L3Protocol
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6L3Protocol__PythonHelper()
        : ns3::Ipv6L3Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6L3Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6L3Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6L3Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Ipv6L3Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ipv6L3Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6L3Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::Ipv6L3Protocol::DoDispose(); }

    virtual void SetRoutingProtocol(ns3::Ptr< ns3::Ipv6RoutingProtocol > routingProtocol);

    virtual ns3::Ptr< ns3::Ipv6RoutingProtocol > GetRoutingProtocol() const;

    virtual uint32_t AddInterface(ns3::Ptr< ns3::NetDevice > device);

    virtual uint32_t GetNInterfaces() const;

    virtual int32_t GetInterfaceForAddress(ns3::Ipv6Address addr) const;

    virtual int32_t GetInterfaceForPrefix(ns3::Ipv6Address addr, ns3::Ipv6Prefix mask) const;

    virtual int32_t GetInterfaceForDevice(ns3::Ptr< ns3::NetDevice const > device) const;

    virtual bool AddAddress(uint32_t i, ns3::Ipv6InterfaceAddress address);

    virtual ns3::Ipv6InterfaceAddress GetAddress(uint32_t interfaceIndex, uint32_t addressIndex) const;

    virtual uint32_t GetNAddresses(uint32_t interface) const;

    virtual bool RemoveAddress(uint32_t interfaceIndex, uint32_t addressIndex);

    virtual void SetMetric(uint32_t i, uint16_t metric);

    virtual uint16_t GetMetric(uint32_t i) const;

    virtual uint16_t GetMtu(uint32_t i) const;

    virtual bool IsUp(uint32_t i) const;

    virtual void SetUp(uint32_t i);

    virtual void SetDown(uint32_t i);

    virtual bool IsForwarding(uint32_t i) const;

    virtual void SetForwarding(uint32_t i, bool val);

    virtual ns3::Ptr< ns3::NetDevice > GetNetDevice(uint32_t i);

    virtual void RegisterExtensions();

    virtual void RegisterOptions();

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual void SetIpForward(bool forward);

    virtual bool GetIpForward() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6L3Protocol__PythonHelper")
        .SetParent< ns3::Ipv6L3Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6L3Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv6L4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6L4Protocol;


extern PyTypeObject PyNs3Ipv6L4Protocol_Type;

class PyNs3Ipv6L4Protocol__PythonHelper : public ns3::Ipv6L4Protocol
{
public:
    PyObject *m_pyself;
    PyNs3Ipv6L4Protocol__PythonHelper()
        : ns3::Ipv6L4Protocol(), m_pyself(NULL)
        {}

    PyNs3Ipv6L4Protocol__PythonHelper(ns3::Ipv6L4Protocol const & arg0)
        : ns3::Ipv6L4Protocol(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ipv6L4Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ipv6L4Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ipv6L4Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ipv6L4Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ipv6L4Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual int GetProtocolNumber() const;

    virtual ns3::Ipv6L4Protocol::RxStatus_e Receive(ns3::Ptr< ns3::Packet > p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr< ns3::Ipv6Interface > incomingInterface);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ipv6L4Protocol__PythonHelper")
        .SetParent< ns3::Ipv6L4Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ipv6L4Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NdiscCache *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdiscCache;


extern PyTypeObject PyNs3NdiscCache_Type;
extern PyTypeObject PyNs3NdiscCacheMeta_Type;

class PyNs3NdiscCache__PythonHelper : public ns3::NdiscCache
{
public:
    PyObject *m_pyself;
    PyNs3NdiscCache__PythonHelper()
        : ns3::NdiscCache(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdiscCache__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdiscCache *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdiscCache *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3NdiscCache *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdiscCache__PythonHelper")
        .SetParent< ns3::NdiscCache > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdiscCache__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NdiscCache::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdiscCacheEntry;


extern PyTypeObject PyNs3NdiscCacheEntry_Type;

extern std::map<void*, PyObject*> PyNs3NdiscCacheEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TcpL4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TcpL4Protocol;


extern PyTypeObject PyNs3TcpL4Protocol_Type;
extern PyTypeObject PyNs3TcpL4ProtocolMeta_Type;

class PyNs3TcpL4Protocol__PythonHelper : public ns3::TcpL4Protocol
{
public:
    PyObject *m_pyself;
    PyNs3TcpL4Protocol__PythonHelper()
        : ns3::TcpL4Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TcpL4Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TcpL4Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TcpL4Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::TcpL4Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3TcpL4Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3TcpL4Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::TcpL4Protocol::DoDispose(); }

    virtual int GetProtocolNumber() const;

    virtual ns3::Ipv4L4Protocol::RxStatus Receive(ns3::Ptr< ns3::Packet > p, ns3::Ipv4Header const & header, ns3::Ptr< ns3::Ipv4Interface > incomingInterface);

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TcpL4Protocol__PythonHelper")
        .SetParent< ns3::TcpL4Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TcpL4Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UdpL4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpL4Protocol;


extern PyTypeObject PyNs3UdpL4Protocol_Type;
extern PyTypeObject PyNs3UdpL4ProtocolMeta_Type;

class PyNs3UdpL4Protocol__PythonHelper : public ns3::UdpL4Protocol
{
public:
    PyObject *m_pyself;
    PyNs3UdpL4Protocol__PythonHelper()
        : ns3::UdpL4Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpL4Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpL4Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UdpL4Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::UdpL4Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UdpL4Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UdpL4Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::UdpL4Protocol::DoDispose(); }

    virtual int GetProtocolNumber() const;

    virtual ns3::Ipv4L4Protocol::RxStatus Receive(ns3::Ptr< ns3::Packet > p, ns3::Ipv4Header const & header, ns3::Ptr< ns3::Ipv4Interface > interface);

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UdpL4Protocol__PythonHelper")
        .SetParent< ns3::UdpL4Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UdpL4Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Icmpv4L4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv4L4Protocol;


extern PyTypeObject PyNs3Icmpv4L4Protocol_Type;
extern PyTypeObject PyNs3Icmpv4L4ProtocolMeta_Type;

class PyNs3Icmpv4L4Protocol__PythonHelper : public ns3::Icmpv4L4Protocol
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv4L4Protocol__PythonHelper(ns3::Icmpv4L4Protocol const & arg0)
        : ns3::Icmpv4L4Protocol(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv4L4Protocol__PythonHelper()
        : ns3::Icmpv4L4Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv4L4Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv4L4Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Icmpv4L4Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Icmpv4L4Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Icmpv4L4Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual int GetProtocolNumber() const;

    virtual ns3::Ipv4L4Protocol::RxStatus Receive(ns3::Ptr< ns3::Packet > p, ns3::Ipv4Header const & header, ns3::Ptr< ns3::Ipv4Interface > incomingInterface);

    virtual void NotifyNewAggregate();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Icmpv4L4Protocol__PythonHelper")
        .SetParent< ns3::Icmpv4L4Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Icmpv4L4Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Icmpv6L4Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Icmpv6L4Protocol;


extern PyTypeObject PyNs3Icmpv6L4Protocol_Type;
extern PyTypeObject PyNs3Icmpv6L4ProtocolMeta_Type;

class PyNs3Icmpv6L4Protocol__PythonHelper : public ns3::Icmpv6L4Protocol
{
public:
    PyObject *m_pyself;
    PyNs3Icmpv6L4Protocol__PythonHelper(ns3::Icmpv6L4Protocol const & arg0)
        : ns3::Icmpv6L4Protocol(arg0), m_pyself(NULL)
        {}

    PyNs3Icmpv6L4Protocol__PythonHelper()
        : ns3::Icmpv6L4Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Icmpv6L4Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Icmpv6L4Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoStart(PyNs3Icmpv6L4Protocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Icmpv6L4Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::Icmpv6L4Protocol::DoDispose(); }

    virtual int GetProtocolNumber() const;

    virtual int GetVersion() const;

    virtual void NotifyNewAggregate();

    virtual ns3::Ipv6L4Protocol::RxStatus_e Receive(ns3::Ptr< ns3::Packet > p, ns3::Ipv6Address const & src, ns3::Ipv6Address const & dst, ns3::Ptr< ns3::Ipv6Interface > interface);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Icmpv6L4Protocol__PythonHelper")
        .SetParent< ns3::Icmpv6L4Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Icmpv6L4Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::LoopbackNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3LoopbackNetDevice;


extern PyTypeObject PyNs3LoopbackNetDevice_Type;

class PyNs3LoopbackNetDevice__PythonHelper : public ns3::LoopbackNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3LoopbackNetDevice__PythonHelper(ns3::LoopbackNetDevice const & arg0)
        : ns3::LoopbackNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3LoopbackNetDevice__PythonHelper()
        : ns3::LoopbackNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3LoopbackNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3LoopbackNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3LoopbackNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3LoopbackNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3LoopbackNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::LoopbackNetDevice::DoDispose(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3LoopbackNetDevice__PythonHelper")
        .SetParent< ns3::LoopbackNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3LoopbackNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4ListRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4ListRouting;


extern PyTypeObject PyNs3Ipv4ListRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ListRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ListRouting;


extern PyTypeObject PyNs3Ipv6ListRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::OnOffApplication *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OnOffApplication;


extern PyTypeObject PyNs3OnOffApplication_Type;

class PyNs3OnOffApplication__PythonHelper : public ns3::OnOffApplication
{
public:
    PyObject *m_pyself;
    PyNs3OnOffApplication__PythonHelper(ns3::OnOffApplication const & arg0)
        : ns3::OnOffApplication(arg0), m_pyself(NULL)
        {}

    PyNs3OnOffApplication__PythonHelper()
        : ns3::OnOffApplication(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OnOffApplication__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3OnOffApplication *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3OnOffApplication *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3OnOffApplication *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3OnOffApplication *self);
    inline void DoDispose__parent_caller()
    { ns3::OnOffApplication::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3OnOffApplication__PythonHelper")
        .SetParent< ns3::OnOffApplication > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3OnOffApplication__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PacketSink *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketSink;


extern PyTypeObject PyNs3PacketSink_Type;

class PyNs3PacketSink__PythonHelper : public ns3::PacketSink
{
public:
    PyObject *m_pyself;
    PyNs3PacketSink__PythonHelper(ns3::PacketSink const & arg0)
        : ns3::PacketSink(arg0), m_pyself(NULL)
        {}

    PyNs3PacketSink__PythonHelper()
        : ns3::PacketSink(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketSink__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PacketSink *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PacketSink *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PacketSink *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PacketSink *self);
    inline void DoDispose__parent_caller()
    { ns3::PacketSink::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PacketSink__PythonHelper")
        .SetParent< ns3::PacketSink > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PacketSink__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PppHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PppHeader;


extern PyTypeObject PyNs3PppHeader_Type;

class PyNs3PppHeader__PythonHelper : public ns3::PppHeader
{
public:
    PyObject *m_pyself;
    PyNs3PppHeader__PythonHelper(ns3::PppHeader const & arg0)
        : ns3::PppHeader(arg0), m_pyself(NULL)
        {}

    PyNs3PppHeader__PythonHelper()
        : ns3::PppHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PppHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PppHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::PointToPointChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointToPointChannel;


extern PyTypeObject PyNs3PointToPointChannel_Type;

class PyNs3PointToPointChannel__PythonHelper : public ns3::PointToPointChannel
{
public:
    PyObject *m_pyself;
    PyNs3PointToPointChannel__PythonHelper(ns3::PointToPointChannel const & arg0)
        : ns3::PointToPointChannel(arg0), m_pyself(NULL)
        {}

    PyNs3PointToPointChannel__PythonHelper()
        : ns3::PointToPointChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PointToPointChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PointToPointChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_GetDelay(PyNs3PointToPointChannel *self);
    inline ns3::Time GetDelay__parent_caller()
    { return ns3::PointToPointChannel::GetDelay(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PointToPointChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_IsInitialized(PyNs3PointToPointChannel *self);
    inline bool IsInitialized__parent_caller()
    { return ns3::PointToPointChannel::IsInitialized(); }

    static PyObject * _wrap_DoStart(PyNs3PointToPointChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PointToPointChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_GetDestination(PyNs3PointToPointChannel *self, PyObject *args, PyObject *kwargs);
    inline ns3::Ptr< ns3::PointToPointNetDevice > GetDestination__parent_caller(uint32_t i)
    { return ns3::PointToPointChannel::GetDestination(i); }

    static PyObject * _wrap_GetSource(PyNs3PointToPointChannel *self, PyObject *args, PyObject *kwargs);
    inline ns3::Ptr< ns3::PointToPointNetDevice > GetSource__parent_caller(uint32_t i)
    { return ns3::PointToPointChannel::GetSource(i); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual bool TransmitStart(ns3::Ptr< ns3::Packet > p, ns3::Ptr< ns3::PointToPointNetDevice > src, ns3::Time txTime);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PointToPointChannel__PythonHelper")
        .SetParent< ns3::PointToPointChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PointToPointChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PointToPointNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointToPointNetDevice;


extern PyTypeObject PyNs3PointToPointNetDevice_Type;

class PyNs3PointToPointNetDevice__PythonHelper : public ns3::PointToPointNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3PointToPointNetDevice__PythonHelper(ns3::PointToPointNetDevice const & arg0)
        : ns3::PointToPointNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3PointToPointNetDevice__PythonHelper()
        : ns3::PointToPointNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PointToPointNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PointToPointNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PointToPointNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PointToPointNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PointToPointNetDevice__PythonHelper")
        .SetParent< ns3::PointToPointNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PointToPointNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PointToPointRemoteChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointToPointRemoteChannel;


extern PyTypeObject PyNs3PointToPointRemoteChannel_Type;

class PyNs3PointToPointRemoteChannel__PythonHelper : public ns3::PointToPointRemoteChannel
{
public:
    PyObject *m_pyself;
    PyNs3PointToPointRemoteChannel__PythonHelper(ns3::PointToPointRemoteChannel const & arg0)
        : ns3::PointToPointRemoteChannel(arg0), m_pyself(NULL)
        {}

    PyNs3PointToPointRemoteChannel__PythonHelper()
        : ns3::PointToPointRemoteChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PointToPointRemoteChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PointToPointRemoteChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PointToPointRemoteChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PointToPointRemoteChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PointToPointRemoteChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool TransmitStart(ns3::Ptr< ns3::Packet > p, ns3::Ptr< ns3::PointToPointNetDevice > src, ns3::Time txTime);

    virtual uint32_t GetNDevices() const;

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PointToPointRemoteChannel__PythonHelper")
        .SetParent< ns3::PointToPointRemoteChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PointToPointRemoteChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MicrowaveOvenSpectrumValueHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MicrowaveOvenSpectrumValueHelper;


extern PyTypeObject PyNs3MicrowaveOvenSpectrumValueHelper_Type;

extern std::map<void*, PyObject*> PyNs3MicrowaveOvenSpectrumValueHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::RxSpectrumModelInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RxSpectrumModelInfo;


extern PyTypeObject PyNs3RxSpectrumModelInfo_Type;

extern std::map<void*, PyObject*> PyNs3RxSpectrumModelInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TxSpectrumModelInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TxSpectrumModelInfo;


extern PyTypeObject PyNs3TxSpectrumModelInfo_Type;

extern std::map<void*, PyObject*> PyNs3TxSpectrumModelInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumValue5MhzFactory *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumValue5MhzFactory;


extern PyTypeObject PyNs3WifiSpectrumValue5MhzFactory_Type;

class PyNs3WifiSpectrumValue5MhzFactory__PythonHelper : public ns3::WifiSpectrumValue5MhzFactory
{
public:
    PyObject *m_pyself;
    PyNs3WifiSpectrumValue5MhzFactory__PythonHelper()
        : ns3::WifiSpectrumValue5MhzFactory(), m_pyself(NULL)
        {}

    PyNs3WifiSpectrumValue5MhzFactory__PythonHelper(ns3::WifiSpectrumValue5MhzFactory const & arg0)
        : ns3::WifiSpectrumValue5MhzFactory(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiSpectrumValue5MhzFactory__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::SpectrumValue > CreateConstant(double psd);

    virtual ns3::Ptr< ns3::SpectrumValue > CreateRfFilter(uint32_t channel);

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity(double txPower, uint32_t channel);
};

extern std::map<void*, PyObject*> PyNs3WifiSpectrumValue5MhzFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiSpectrumValueHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiSpectrumValueHelper;


extern PyTypeObject PyNs3WifiSpectrumValueHelper_Type;

class PyNs3WifiSpectrumValueHelper__PythonHelper : public ns3::WifiSpectrumValueHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiSpectrumValueHelper__PythonHelper()
        : ns3::WifiSpectrumValueHelper(), m_pyself(NULL)
        {}

    PyNs3WifiSpectrumValueHelper__PythonHelper(ns3::WifiSpectrumValueHelper const & arg0)
        : ns3::WifiSpectrumValueHelper(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiSpectrumValueHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::SpectrumValue > CreateConstant(double psd);

    virtual ns3::Ptr< ns3::SpectrumValue > CreateRfFilter(uint32_t channel);

    virtual ns3::Ptr< ns3::SpectrumValue > CreateTxPowerSpectralDensity(double txPower, uint32_t channel);
};

extern std::map<void*, PyObject*> PyNs3WifiSpectrumValueHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SpectrumErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumErrorModel;


extern PyTypeObject PyNs3SpectrumErrorModel_Type;

class PyNs3SpectrumErrorModel__PythonHelper : public ns3::SpectrumErrorModel
{
public:
    PyObject *m_pyself;
    PyNs3SpectrumErrorModel__PythonHelper()
        : ns3::SpectrumErrorModel(), m_pyself(NULL)
        {}

    PyNs3SpectrumErrorModel__PythonHelper(ns3::SpectrumErrorModel const & arg0)
        : ns3::SpectrumErrorModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SpectrumErrorModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SpectrumErrorModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SpectrumErrorModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SpectrumErrorModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void EvaluateChunk(ns3::SpectrumValue const & sinr, ns3::Time duration);

    virtual bool IsRxCorrect();

    virtual void StartRx(ns3::Ptr< ns3::Packet const > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SpectrumErrorModel__PythonHelper")
        .SetParent< ns3::SpectrumErrorModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SpectrumErrorModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SpectrumInterference *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumInterference;


extern PyTypeObject PyNs3SpectrumInterference_Type;

class PyNs3SpectrumInterference__PythonHelper : public ns3::SpectrumInterference
{
public:
    PyObject *m_pyself;
    PyNs3SpectrumInterference__PythonHelper(ns3::SpectrumInterference const & arg0)
        : ns3::SpectrumInterference(arg0), m_pyself(NULL)
        {}

    PyNs3SpectrumInterference__PythonHelper()
        : ns3::SpectrumInterference(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumInterference__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SpectrumInterference *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SpectrumInterference *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SpectrumInterference *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SpectrumInterference *self);
    inline void DoDispose__parent_caller()
    { ns3::SpectrumInterference::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SpectrumInterference__PythonHelper")
        .SetParent< ns3::SpectrumInterference > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SpectrumInterference__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WaveformGenerator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaveformGenerator;


extern PyTypeObject PyNs3WaveformGenerator_Type;

class PyNs3WaveformGenerator__PythonHelper : public ns3::WaveformGenerator
{
public:
    PyObject *m_pyself;
    PyNs3WaveformGenerator__PythonHelper(ns3::WaveformGenerator const & arg0)
        : ns3::WaveformGenerator(arg0), m_pyself(NULL)
        {}

    PyNs3WaveformGenerator__PythonHelper()
        : ns3::WaveformGenerator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WaveformGenerator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WaveformGenerator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WaveformGenerator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3WaveformGenerator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual ns3::Ptr< ns3::Object > GetDevice();

    virtual ns3::Ptr< ns3::Object > GetMobility();

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual void SetDevice(ns3::Ptr< ns3::Object > d);

    virtual void SetMobility(ns3::Ptr< ns3::Object > m);

    virtual void Start();

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > p, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration);

    virtual void Stop();

    virtual void DoDispose();

    virtual void GenerateWaveform();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WaveformGenerator__PythonHelper")
        .SetParent< ns3::WaveformGenerator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WaveformGenerator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AlohaNoackMacHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AlohaNoackMacHeader;


extern PyTypeObject PyNs3AlohaNoackMacHeader_Type;

class PyNs3AlohaNoackMacHeader__PythonHelper : public ns3::AlohaNoackMacHeader
{
public:
    PyObject *m_pyself;
    PyNs3AlohaNoackMacHeader__PythonHelper()
        : ns3::AlohaNoackMacHeader(), m_pyself(NULL)
        {}

    PyNs3AlohaNoackMacHeader__PythonHelper(ns3::AlohaNoackMacHeader const & arg0)
        : ns3::AlohaNoackMacHeader(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AlohaNoackMacHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AlohaNoackMacHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::HalfDuplexIdealPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3HalfDuplexIdealPhy;


extern PyTypeObject PyNs3HalfDuplexIdealPhy_Type;

class PyNs3HalfDuplexIdealPhy__PythonHelper : public ns3::HalfDuplexIdealPhy
{
public:
    PyObject *m_pyself;
    PyNs3HalfDuplexIdealPhy__PythonHelper(ns3::HalfDuplexIdealPhy const & arg0)
        : ns3::HalfDuplexIdealPhy(arg0), m_pyself(NULL)
        {}

    PyNs3HalfDuplexIdealPhy__PythonHelper()
        : ns3::HalfDuplexIdealPhy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3HalfDuplexIdealPhy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3HalfDuplexIdealPhy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3HalfDuplexIdealPhy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3HalfDuplexIdealPhy *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual ns3::Ptr< ns3::Object > GetDevice();

    virtual ns3::Ptr< ns3::Object > GetMobility();

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual void SetDevice(ns3::Ptr< ns3::Object > d);

    virtual void SetMobility(ns3::Ptr< ns3::Object > m);

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > p, ns3::Ptr< ns3::SpectrumValue const > rxPsd, ns3::SpectrumType st, ns3::Time duration);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3HalfDuplexIdealPhy__PythonHelper")
        .SetParent< ns3::HalfDuplexIdealPhy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3HalfDuplexIdealPhy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NonCommunicatingNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NonCommunicatingNetDevice;


extern PyTypeObject PyNs3NonCommunicatingNetDevice_Type;

class PyNs3NonCommunicatingNetDevice__PythonHelper : public ns3::NonCommunicatingNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3NonCommunicatingNetDevice__PythonHelper(ns3::NonCommunicatingNetDevice const & arg0)
        : ns3::NonCommunicatingNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3NonCommunicatingNetDevice__PythonHelper()
        : ns3::NonCommunicatingNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NonCommunicatingNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NonCommunicatingNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NonCommunicatingNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3NonCommunicatingNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NonCommunicatingNetDevice__PythonHelper")
        .SetParent< ns3::NonCommunicatingNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NonCommunicatingNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ShannonSpectrumErrorModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ShannonSpectrumErrorModel;


extern PyTypeObject PyNs3ShannonSpectrumErrorModel_Type;

class PyNs3ShannonSpectrumErrorModel__PythonHelper : public ns3::ShannonSpectrumErrorModel
{
public:
    PyObject *m_pyself;
    PyNs3ShannonSpectrumErrorModel__PythonHelper()
        : ns3::ShannonSpectrumErrorModel(), m_pyself(NULL)
        {}

    PyNs3ShannonSpectrumErrorModel__PythonHelper(ns3::ShannonSpectrumErrorModel const & arg0)
        : ns3::ShannonSpectrumErrorModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ShannonSpectrumErrorModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ShannonSpectrumErrorModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ShannonSpectrumErrorModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ShannonSpectrumErrorModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ShannonSpectrumErrorModel *self);
    inline void DoDispose__parent_caller()
    { ns3::ShannonSpectrumErrorModel::DoDispose(); }

    virtual void EvaluateChunk(ns3::SpectrumValue const & sinr, ns3::Time duration);

    virtual bool IsRxCorrect();

    virtual void StartRx(ns3::Ptr< ns3::Packet const > p);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ShannonSpectrumErrorModel__PythonHelper")
        .SetParent< ns3::ShannonSpectrumErrorModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ShannonSpectrumErrorModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SpectrumAnalyzer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumAnalyzer;


extern PyTypeObject PyNs3SpectrumAnalyzer_Type;

class PyNs3SpectrumAnalyzer__PythonHelper : public ns3::SpectrumAnalyzer
{
public:
    PyObject *m_pyself;
    PyNs3SpectrumAnalyzer__PythonHelper(ns3::SpectrumAnalyzer const & arg0)
        : ns3::SpectrumAnalyzer(arg0), m_pyself(NULL)
        {}

    PyNs3SpectrumAnalyzer__PythonHelper()
        : ns3::SpectrumAnalyzer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SpectrumAnalyzer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SpectrumAnalyzer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SpectrumAnalyzer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SpectrumAnalyzer *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SpectrumAnalyzer *self);
    inline void DoDispose__parent_caller()
    { ns3::SpectrumAnalyzer::DoDispose(); }

    virtual ns3::Ptr< ns3::Object > GetDevice();

    virtual ns3::Ptr< ns3::Object > GetMobility();

    virtual ns3::Ptr< ns3::SpectrumModel const > GetRxSpectrumModel() const;

    virtual void SetChannel(ns3::Ptr< ns3::SpectrumChannel > c);

    virtual void SetDevice(ns3::Ptr< ns3::Object > d);

    virtual void SetMobility(ns3::Ptr< ns3::Object > m);

    virtual void Start();

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > pb, ns3::Ptr< ns3::SpectrumValue const > rxPowerSpectralDensity, ns3::SpectrumType st, ns3::Time duration);

    virtual void Stop();

    virtual void DoDispose();

    virtual void GenerateReport();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SpectrumAnalyzer__PythonHelper")
        .SetParent< ns3::SpectrumAnalyzer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SpectrumAnalyzer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AlohaNoackNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AlohaNoackNetDevice;


extern PyTypeObject PyNs3AlohaNoackNetDevice_Type;

class PyNs3AlohaNoackNetDevice__PythonHelper : public ns3::AlohaNoackNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3AlohaNoackNetDevice__PythonHelper(ns3::AlohaNoackNetDevice const & arg0)
        : ns3::AlohaNoackNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3AlohaNoackNetDevice__PythonHelper()
        : ns3::AlohaNoackNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AlohaNoackNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AlohaNoackNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3AlohaNoackNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3AlohaNoackNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual void SetQueue(ns3::Ptr< ns3::Queue > queue);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3AlohaNoackNetDevice__PythonHelper")
        .SetParent< ns3::AlohaNoackNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3AlohaNoackNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MultiModelSpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MultiModelSpectrumChannel;


extern PyTypeObject PyNs3MultiModelSpectrumChannel_Type;

class PyNs3MultiModelSpectrumChannel__PythonHelper : public ns3::MultiModelSpectrumChannel
{
public:
    PyObject *m_pyself;
    PyNs3MultiModelSpectrumChannel__PythonHelper(ns3::MultiModelSpectrumChannel const & arg0)
        : ns3::MultiModelSpectrumChannel(arg0), m_pyself(NULL)
        {}

    PyNs3MultiModelSpectrumChannel__PythonHelper()
        : ns3::MultiModelSpectrumChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MultiModelSpectrumChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MultiModelSpectrumChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MultiModelSpectrumChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MultiModelSpectrumChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3MultiModelSpectrumChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::MultiModelSpectrumChannel::DoDispose(); }

    virtual void AddRx(ns3::Ptr< ns3::SpectrumPhy > phy);

    virtual void AddSpectrumPropagationLossModel(ns3::Ptr< ns3::SpectrumPropagationLossModel > loss);

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual void SetPropagationDelayModel(ns3::Ptr< ns3::PropagationDelayModel > delay);

    virtual void StartTx(ns3::Ptr< ns3::PacketBurst > p, ns3::Ptr< ns3::SpectrumValue > txPsd, ns3::SpectrumType st, ns3::Time duration, ns3::Ptr< ns3::SpectrumPhy > sender);

    virtual void DoDispose();

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > p, ns3::Ptr< ns3::SpectrumValue > rxPowerSpectrum, ns3::SpectrumType st, ns3::Time duration, ns3::Ptr< ns3::SpectrumPhy > receiver);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MultiModelSpectrumChannel__PythonHelper")
        .SetParent< ns3::MultiModelSpectrumChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MultiModelSpectrumChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SingleModelSpectrumChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SingleModelSpectrumChannel;


extern PyTypeObject PyNs3SingleModelSpectrumChannel_Type;

class PyNs3SingleModelSpectrumChannel__PythonHelper : public ns3::SingleModelSpectrumChannel
{
public:
    PyObject *m_pyself;
    PyNs3SingleModelSpectrumChannel__PythonHelper(ns3::SingleModelSpectrumChannel const & arg0)
        : ns3::SingleModelSpectrumChannel(arg0), m_pyself(NULL)
        {}

    PyNs3SingleModelSpectrumChannel__PythonHelper()
        : ns3::SingleModelSpectrumChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SingleModelSpectrumChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SingleModelSpectrumChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SingleModelSpectrumChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SingleModelSpectrumChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void AddRx(ns3::Ptr< ns3::SpectrumPhy > phy);

    virtual void AddSpectrumPropagationLossModel(ns3::Ptr< ns3::SpectrumPropagationLossModel > loss);

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual void SetPropagationDelayModel(ns3::Ptr< ns3::PropagationDelayModel > delay);

    virtual void StartTx(ns3::Ptr< ns3::PacketBurst > p, ns3::Ptr< ns3::SpectrumValue > txPsd, ns3::SpectrumType st, ns3::Time duration, ns3::Ptr< ns3::SpectrumPhy > sender);

    virtual void DoDispose();

    virtual void StartRx(ns3::Ptr< ns3::PacketBurst > p, ns3::Ptr< ns3::SpectrumValue > rxPowerSpectrum, ns3::SpectrumType st, ns3::Time duration, ns3::Ptr< ns3::SpectrumPhy > receiver);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SingleModelSpectrumChannel__PythonHelper")
        .SetParent< ns3::SingleModelSpectrumChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SingleModelSpectrumChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MulticastRoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MulticastRoutingTableEntry;


extern PyTypeObject PyNs3Ipv4MulticastRoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4MulticastRoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingTableEntry;


extern PyTypeObject PyNs3Ipv4RoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4RoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6MulticastRoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6MulticastRoutingTableEntry;


extern PyTypeObject PyNs3Ipv6MulticastRoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6MulticastRoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6RoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6RoutingTableEntry;


extern PyTypeObject PyNs3Ipv6RoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6RoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4StaticRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4StaticRouting;


extern PyTypeObject PyNs3Ipv4StaticRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6StaticRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6StaticRouting;


extern PyTypeObject PyNs3Ipv6StaticRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::DataOutputCallback *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataOutputCallback;


extern PyTypeObject PyNs3DataOutputCallback_Type;

extern std::map<void*, PyObject*> PyNs3DataOutputCallback_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::StatisticalSummary *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3StatisticalSummary;


extern PyTypeObject PyNs3StatisticalSummary_Type;

extern std::map<void*, PyObject*> PyNs3StatisticalSummary_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DataCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataCalculator;


extern PyTypeObject PyNs3DataCalculator_Type;


typedef struct {
    PyObject_HEAD
    ns3::DataCollector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataCollector;


extern PyTypeObject PyNs3DataCollector_Type;

class PyNs3DataCollector__PythonHelper : public ns3::DataCollector
{
public:
    PyObject *m_pyself;
    PyNs3DataCollector__PythonHelper(ns3::DataCollector const & arg0)
        : ns3::DataCollector(arg0), m_pyself(NULL)
        {}

    PyNs3DataCollector__PythonHelper()
        : ns3::DataCollector(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataCollector__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DataCollector *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DataCollector *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3DataCollector *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3DataCollector *self);
    inline void DoDispose__parent_caller()
    { ns3::DataCollector::DoDispose(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DataCollector__PythonHelper")
        .SetParent< ns3::DataCollector > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DataCollector__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DataOutputInterface *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DataOutputInterface;


extern PyTypeObject PyNs3DataOutputInterface_Type;

class PyNs3DataOutputInterface__PythonHelper : public ns3::DataOutputInterface
{
public:
    PyObject *m_pyself;
    PyNs3DataOutputInterface__PythonHelper(ns3::DataOutputInterface const & arg0)
        : ns3::DataOutputInterface(arg0), m_pyself(NULL)
        {}

    PyNs3DataOutputInterface__PythonHelper()
        : ns3::DataOutputInterface(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DataOutputInterface__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DataOutputInterface *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DataOutputInterface *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3DataOutputInterface *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3DataOutputInterface *self);
    inline void DoDispose__parent_caller()
    { ns3::DataOutputInterface::DoDispose(); }

    virtual void Output(ns3::DataCollector & dc);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DataOutputInterface__PythonHelper")
        .SetParent< ns3::DataOutputInterface > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DataOutputInterface__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MinMaxAvgTotalCalculator< unsigned int > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinMaxAvgTotalCalculator__Unsigned_int;


extern PyTypeObject PyNs3MinMaxAvgTotalCalculator__Unsigned_int_Type;


typedef struct {
    PyObject_HEAD
    ns3::OmnetDataOutput *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OmnetDataOutput;


extern PyTypeObject PyNs3OmnetDataOutput_Type;

class PyNs3OmnetDataOutput__PythonHelper : public ns3::OmnetDataOutput
{
public:
    PyObject *m_pyself;
    PyNs3OmnetDataOutput__PythonHelper(ns3::OmnetDataOutput const & arg0)
        : ns3::OmnetDataOutput(arg0), m_pyself(NULL)
        {}

    PyNs3OmnetDataOutput__PythonHelper()
        : ns3::OmnetDataOutput(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OmnetDataOutput__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3OmnetDataOutput *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3OmnetDataOutput *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3OmnetDataOutput *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3OmnetDataOutput *self);
    inline void DoDispose__parent_caller()
    { ns3::OmnetDataOutput::DoDispose(); }

    virtual void Output(ns3::DataCollector & dc);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3OmnetDataOutput__PythonHelper")
        .SetParent< ns3::OmnetDataOutput > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3OmnetDataOutput__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PacketSizeMinMaxAvgTotalCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketSizeMinMaxAvgTotalCalculator;


extern PyTypeObject PyNs3PacketSizeMinMaxAvgTotalCalculator_Type;


typedef struct {
    PyObject_HEAD
    ns3::SqliteDataOutput *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SqliteDataOutput;


extern PyTypeObject PyNs3SqliteDataOutput_Type;

class PyNs3SqliteDataOutput__PythonHelper : public ns3::SqliteDataOutput
{
public:
    PyObject *m_pyself;
    PyNs3SqliteDataOutput__PythonHelper(ns3::SqliteDataOutput const & arg0)
        : ns3::SqliteDataOutput(arg0), m_pyself(NULL)
        {}

    PyNs3SqliteDataOutput__PythonHelper()
        : ns3::SqliteDataOutput(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SqliteDataOutput__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SqliteDataOutput *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SqliteDataOutput *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SqliteDataOutput *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SqliteDataOutput *self);
    inline void DoDispose__parent_caller()
    { ns3::SqliteDataOutput::DoDispose(); }

    virtual void Output(ns3::DataCollector & dc);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SqliteDataOutput__PythonHelper")
        .SetParent< ns3::SqliteDataOutput > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SqliteDataOutput__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TimeMinMaxAvgTotalCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeMinMaxAvgTotalCalculator;


extern PyTypeObject PyNs3TimeMinMaxAvgTotalCalculator_Type;

class PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper : public ns3::TimeMinMaxAvgTotalCalculator
{
public:
    PyObject *m_pyself;
    PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper(ns3::TimeMinMaxAvgTotalCalculator const & arg0)
        : ns3::TimeMinMaxAvgTotalCalculator(arg0), m_pyself(NULL)
        {}

    PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper()
        : ns3::TimeMinMaxAvgTotalCalculator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TimeMinMaxAvgTotalCalculator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TimeMinMaxAvgTotalCalculator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3TimeMinMaxAvgTotalCalculator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3TimeMinMaxAvgTotalCalculator *self);
    inline void DoDispose__parent_caller()
    { ns3::TimeMinMaxAvgTotalCalculator::DoDispose(); }

    virtual void DoDispose();

    virtual void Stop(ns3::Time const & stopTime);

    virtual void Start(ns3::Time const & startTime);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper")
        .SetParent< ns3::TimeMinMaxAvgTotalCalculator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TimeMinMaxAvgTotalCalculator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::CounterCalculator< unsigned int > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CounterCalculator__Unsigned_int;


extern PyTypeObject PyNs3CounterCalculator__Unsigned_int_Type;

class PyNs3CounterCalculator__Unsigned_int__PythonHelper : public ns3::CounterCalculator< unsigned int >
{
public:
    PyObject *m_pyself;
    PyNs3CounterCalculator__Unsigned_int__PythonHelper(ns3::CounterCalculator< unsigned int > const & arg0)
        : ns3::CounterCalculator< unsigned int >(arg0), m_pyself(NULL)
        {}

    PyNs3CounterCalculator__Unsigned_int__PythonHelper()
        : ns3::CounterCalculator< unsigned int >(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CounterCalculator__Unsigned_int__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CounterCalculator__Unsigned_int *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3CounterCalculator__Unsigned_int *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3CounterCalculator__Unsigned_int *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3CounterCalculator__Unsigned_int *self);
    inline void DoDispose__parent_caller()
    { ns3::CounterCalculator< unsigned int >::DoDispose(); }

    virtual void DoDispose();

    virtual void Stop(ns3::Time const & stopTime);

    virtual void Start(ns3::Time const & startTime);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3CounterCalculator__Unsigned_int__PythonHelper")
        .SetParent< ns3::CounterCalculator< unsigned int > > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3CounterCalculator__Unsigned_int__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::PacketCounterCalculator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketCounterCalculator;


extern PyTypeObject PyNs3PacketCounterCalculator_Type;

class PyNs3PacketCounterCalculator__PythonHelper : public ns3::PacketCounterCalculator
{
public:
    PyObject *m_pyself;
    PyNs3PacketCounterCalculator__PythonHelper(ns3::PacketCounterCalculator const & arg0)
        : ns3::PacketCounterCalculator(arg0), m_pyself(NULL)
        {}

    PyNs3PacketCounterCalculator__PythonHelper()
        : ns3::PacketCounterCalculator(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PacketCounterCalculator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3PacketCounterCalculator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3PacketCounterCalculator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3PacketCounterCalculator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3PacketCounterCalculator *self);
    inline void DoDispose__parent_caller()
    { ns3::PacketCounterCalculator::DoDispose(); }

    virtual void DoDispose();

    virtual void Stop(ns3::Time const & stopTime);

    virtual void Start(ns3::Time const & startTime);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3PacketCounterCalculator__PythonHelper")
        .SetParent< ns3::PacketCounterCalculator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3PacketCounterCalculator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TopologyReader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TopologyReader;


extern PyTypeObject PyNs3TopologyReader_Type;

class PyNs3TopologyReader__PythonHelper : public ns3::TopologyReader
{
public:
    PyObject *m_pyself;
    PyNs3TopologyReader__PythonHelper()
        : ns3::TopologyReader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3TopologyReader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3TopologyReader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3TopologyReader *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3TopologyReader *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3TopologyReader *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::NodeContainer Read();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3TopologyReader__PythonHelper")
        .SetParent< ns3::TopologyReader > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3TopologyReader__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::TopologyReader::Link *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TopologyReaderLink;


extern PyTypeObject PyNs3TopologyReaderLink_Type;

extern std::map<void*, PyObject*> PyNs3TopologyReaderLink_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::InetTopologyReader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3InetTopologyReader;


extern PyTypeObject PyNs3InetTopologyReader_Type;

class PyNs3InetTopologyReader__PythonHelper : public ns3::InetTopologyReader
{
public:
    PyObject *m_pyself;
    PyNs3InetTopologyReader__PythonHelper()
        : ns3::InetTopologyReader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3InetTopologyReader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3InetTopologyReader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3InetTopologyReader *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3InetTopologyReader *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3InetTopologyReader *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::NodeContainer Read();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3InetTopologyReader__PythonHelper")
        .SetParent< ns3::InetTopologyReader > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3InetTopologyReader__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::OrbisTopologyReader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OrbisTopologyReader;


extern PyTypeObject PyNs3OrbisTopologyReader_Type;

class PyNs3OrbisTopologyReader__PythonHelper : public ns3::OrbisTopologyReader
{
public:
    PyObject *m_pyself;
    PyNs3OrbisTopologyReader__PythonHelper()
        : ns3::OrbisTopologyReader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OrbisTopologyReader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3OrbisTopologyReader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3OrbisTopologyReader *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3OrbisTopologyReader *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3OrbisTopologyReader *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::NodeContainer Read();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3OrbisTopologyReader__PythonHelper")
        .SetParent< ns3::OrbisTopologyReader > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3OrbisTopologyReader__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RocketfuelTopologyReader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RocketfuelTopologyReader;


extern PyTypeObject PyNs3RocketfuelTopologyReader_Type;

class PyNs3RocketfuelTopologyReader__PythonHelper : public ns3::RocketfuelTopologyReader
{
public:
    PyObject *m_pyself;
    PyNs3RocketfuelTopologyReader__PythonHelper()
        : ns3::RocketfuelTopologyReader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RocketfuelTopologyReader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RocketfuelTopologyReader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3RocketfuelTopologyReader *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3RocketfuelTopologyReader *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3RocketfuelTopologyReader *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::NodeContainer Read();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3RocketfuelTopologyReader__PythonHelper")
        .SetParent< ns3::RocketfuelTopologyReader > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3RocketfuelTopologyReader__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::V4Ping *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3V4Ping;


extern PyTypeObject PyNs3V4Ping_Type;

class PyNs3V4Ping__PythonHelper : public ns3::V4Ping
{
public:
    PyObject *m_pyself;
    PyNs3V4Ping__PythonHelper(ns3::V4Ping const & arg0)
        : ns3::V4Ping(arg0), m_pyself(NULL)
        {}

    PyNs3V4Ping__PythonHelper()
        : ns3::V4Ping(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3V4Ping__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3V4Ping *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3V4Ping *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3V4Ping *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3V4Ping__PythonHelper")
        .SetParent< ns3::V4Ping > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3V4Ping__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::VirtualNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VirtualNetDevice;


extern PyTypeObject PyNs3VirtualNetDevice_Type;

class PyNs3VirtualNetDevice__PythonHelper : public ns3::VirtualNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3VirtualNetDevice__PythonHelper(ns3::VirtualNetDevice const & arg0)
        : ns3::VirtualNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3VirtualNetDevice__PythonHelper()
        : ns3::VirtualNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3VirtualNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3VirtualNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3VirtualNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3VirtualNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3VirtualNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::VirtualNetDevice::DoDispose(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3VirtualNetDevice__PythonHelper")
        .SetParent< ns3::VirtualNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3VirtualNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Bar *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Bar;


extern PyTypeObject PyNs3Bar_Type;

extern std::map<void*, PyObject*> PyNs3Bar_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BlockAckAgreement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckAgreement;


extern PyTypeObject PyNs3BlockAckAgreement_Type;

extern std::map<void*, PyObject*> PyNs3BlockAckAgreement_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BlockAckManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BlockAckManager;


extern PyTypeObject PyNs3BlockAckManager_Type;

extern std::map<void*, PyObject*> PyNs3BlockAckManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CapabilityInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CapabilityInformation;


extern PyTypeObject PyNs3CapabilityInformation_Type;

extern std::map<void*, PyObject*> PyNs3CapabilityInformation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DcfManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DcfManager;


extern PyTypeObject PyNs3DcfManager_Type;

extern std::map<void*, PyObject*> PyNs3DcfManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DcfState *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DcfState;


extern PyTypeObject PyNs3DcfState_Type;

class PyNs3DcfState__PythonHelper : public ns3::DcfState
{
public:
    PyObject *m_pyself;
    PyNs3DcfState__PythonHelper(ns3::DcfState const & arg0)
        : ns3::DcfState(arg0), m_pyself(NULL)
        {}

    PyNs3DcfState__PythonHelper()
        : ns3::DcfState(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DcfState__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void DoNotifyAccessGranted();

    virtual void DoNotifyChannelSwitching();

    virtual void DoNotifyCollision();

    virtual void DoNotifyInternalCollision();
};

extern std::map<void*, PyObject*> PyNs3DcfState_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DsssErrorRateModel *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsssErrorRateModel;


extern PyTypeObject PyNs3DsssErrorRateModel_Type;

extern std::map<void*, PyObject*> PyNs3DsssErrorRateModel_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelper;


extern PyTypeObject PyNs3InterferenceHelper_Type;

extern std::map<void*, PyObject*> PyNs3InterferenceHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::InterferenceHelper::SnrPer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3InterferenceHelperSnrPer;


extern PyTypeObject PyNs3InterferenceHelperSnrPer_Type;

extern std::map<void*, PyObject*> PyNs3InterferenceHelperSnrPer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowBlockAckEventListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowBlockAckEventListener;


extern PyTypeObject PyNs3MacLowBlockAckEventListener_Type;

class PyNs3MacLowBlockAckEventListener__PythonHelper : public ns3::MacLowBlockAckEventListener
{
public:
    PyObject *m_pyself;
    PyNs3MacLowBlockAckEventListener__PythonHelper(ns3::MacLowBlockAckEventListener const & arg0)
        : ns3::MacLowBlockAckEventListener(arg0), m_pyself(NULL)
        {}

    PyNs3MacLowBlockAckEventListener__PythonHelper()
        : ns3::MacLowBlockAckEventListener(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLowBlockAckEventListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void BlockAckInactivityTimeout(ns3::Mac48Address originator, uint8_t tid);
};

extern std::map<void*, PyObject*> PyNs3MacLowBlockAckEventListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowDcfListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowDcfListener;


extern PyTypeObject PyNs3MacLowDcfListener_Type;

class PyNs3MacLowDcfListener__PythonHelper : public ns3::MacLowDcfListener
{
public:
    PyObject *m_pyself;
    PyNs3MacLowDcfListener__PythonHelper(ns3::MacLowDcfListener const & arg0)
        : ns3::MacLowDcfListener(arg0), m_pyself(NULL)
        {}

    PyNs3MacLowDcfListener__PythonHelper()
        : ns3::MacLowDcfListener(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLowDcfListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void AckTimeoutReset();

    virtual void AckTimeoutStart(ns3::Time duration);

    virtual void CtsTimeoutReset();

    virtual void CtsTimeoutStart(ns3::Time duration);

    virtual void NavReset(ns3::Time duration);

    virtual void NavStart(ns3::Time duration);
};

extern std::map<void*, PyObject*> PyNs3MacLowDcfListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowTransmissionListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowTransmissionListener;


extern PyTypeObject PyNs3MacLowTransmissionListener_Type;

class PyNs3MacLowTransmissionListener__PythonHelper : public ns3::MacLowTransmissionListener
{
public:
    PyObject *m_pyself;
    PyNs3MacLowTransmissionListener__PythonHelper(ns3::MacLowTransmissionListener const & arg0)
        : ns3::MacLowTransmissionListener(arg0), m_pyself(NULL)
        {}

    PyNs3MacLowTransmissionListener__PythonHelper()
        : ns3::MacLowTransmissionListener(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLowTransmissionListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void Cancel();

    virtual void GotAck(double snr, ns3::WifiMode txMode);

    virtual void GotBlockAck(ns3::CtrlBAckResponseHeader const *blockAck, ns3::Mac48Address source);

    virtual void GotCts(double snr, ns3::WifiMode txMode);

    virtual void MissedAck();

    virtual void MissedBlockAck();

    virtual void MissedCts();

    virtual void StartNext();
};

extern std::map<void*, PyObject*> PyNs3MacLowTransmissionListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacLowTransmissionParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLowTransmissionParameters;


extern PyTypeObject PyNs3MacLowTransmissionParameters_Type;

extern std::map<void*, PyObject*> PyNs3MacLowTransmissionParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacRxMiddle *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacRxMiddle;


extern PyTypeObject PyNs3MacRxMiddle_Type;

extern std::map<void*, PyObject*> PyNs3MacRxMiddle_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OriginatorBlockAckAgreement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OriginatorBlockAckAgreement;


extern PyTypeObject PyNs3OriginatorBlockAckAgreement_Type;


typedef struct {
    PyObject_HEAD
    ns3::RateInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RateInfo;


extern PyTypeObject PyNs3RateInfo_Type;

extern std::map<void*, PyObject*> PyNs3RateInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::StatusCode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3StatusCode;


extern PyTypeObject PyNs3StatusCode_Type;

extern std::map<void*, PyObject*> PyNs3StatusCode_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiMode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMode;


extern PyTypeObject PyNs3WifiMode_Type;

extern std::map<void*, PyObject*> PyNs3WifiMode_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiModeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeFactory;


extern PyTypeObject PyNs3WifiModeFactory_Type;

extern std::map<void*, PyObject*> PyNs3WifiModeFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiPhyListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyListener;


extern PyTypeObject PyNs3WifiPhyListener_Type;

class PyNs3WifiPhyListener__PythonHelper : public ns3::WifiPhyListener
{
public:
    PyObject *m_pyself;
    PyNs3WifiPhyListener__PythonHelper()
        : ns3::WifiPhyListener(), m_pyself(NULL)
        {}

    PyNs3WifiPhyListener__PythonHelper(ns3::WifiPhyListener const & arg0)
        : ns3::WifiPhyListener(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhyListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void NotifyMaybeCcaBusyStart(ns3::Time duration);

    virtual void NotifyRxEndError();

    virtual void NotifyRxEndOk();

    virtual void NotifyRxStart(ns3::Time duration);

    virtual void NotifySwitchingStart(ns3::Time duration);

    virtual void NotifyTxStart(ns3::Time duration);
};

extern std::map<void*, PyObject*> PyNs3WifiPhyListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStation;


extern PyTypeObject PyNs3WifiRemoteStation_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationInfo *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationInfo;


extern PyTypeObject PyNs3WifiRemoteStationInfo_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStationInfo_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationState *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationState;


extern PyTypeObject PyNs3WifiRemoteStationState_Type;

extern std::map<void*, PyObject*> PyNs3WifiRemoteStationState_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MgtAddBaRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAddBaRequestHeader;


extern PyTypeObject PyNs3MgtAddBaRequestHeader_Type;

class PyNs3MgtAddBaRequestHeader__PythonHelper : public ns3::MgtAddBaRequestHeader
{
public:
    PyObject *m_pyself;
    PyNs3MgtAddBaRequestHeader__PythonHelper(ns3::MgtAddBaRequestHeader const & arg0)
        : ns3::MgtAddBaRequestHeader(arg0), m_pyself(NULL)
        {}

    PyNs3MgtAddBaRequestHeader__PythonHelper()
        : ns3::MgtAddBaRequestHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MgtAddBaRequestHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MgtAddBaRequestHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::MgtAddBaResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAddBaResponseHeader;


extern PyTypeObject PyNs3MgtAddBaResponseHeader_Type;

class PyNs3MgtAddBaResponseHeader__PythonHelper : public ns3::MgtAddBaResponseHeader
{
public:
    PyObject *m_pyself;
    PyNs3MgtAddBaResponseHeader__PythonHelper(ns3::MgtAddBaResponseHeader const & arg0)
        : ns3::MgtAddBaResponseHeader(arg0), m_pyself(NULL)
        {}

    PyNs3MgtAddBaResponseHeader__PythonHelper()
        : ns3::MgtAddBaResponseHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MgtAddBaResponseHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MgtAddBaResponseHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::MgtAssocRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAssocRequestHeader;


extern PyTypeObject PyNs3MgtAssocRequestHeader_Type;

class PyNs3MgtAssocRequestHeader__PythonHelper : public ns3::MgtAssocRequestHeader
{
public:
    PyObject *m_pyself;
    PyNs3MgtAssocRequestHeader__PythonHelper(ns3::MgtAssocRequestHeader const & arg0)
        : ns3::MgtAssocRequestHeader(arg0), m_pyself(NULL)
        {}

    PyNs3MgtAssocRequestHeader__PythonHelper()
        : ns3::MgtAssocRequestHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MgtAssocRequestHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MgtAssocRequestHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::MgtAssocResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtAssocResponseHeader;


extern PyTypeObject PyNs3MgtAssocResponseHeader_Type;

class PyNs3MgtAssocResponseHeader__PythonHelper : public ns3::MgtAssocResponseHeader
{
public:
    PyObject *m_pyself;
    PyNs3MgtAssocResponseHeader__PythonHelper(ns3::MgtAssocResponseHeader const & arg0)
        : ns3::MgtAssocResponseHeader(arg0), m_pyself(NULL)
        {}

    PyNs3MgtAssocResponseHeader__PythonHelper()
        : ns3::MgtAssocResponseHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MgtAssocResponseHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MgtAssocResponseHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::MgtDelBaHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtDelBaHeader;


extern PyTypeObject PyNs3MgtDelBaHeader_Type;

class PyNs3MgtDelBaHeader__PythonHelper : public ns3::MgtDelBaHeader
{
public:
    PyObject *m_pyself;
    PyNs3MgtDelBaHeader__PythonHelper(ns3::MgtDelBaHeader const & arg0)
        : ns3::MgtDelBaHeader(arg0), m_pyself(NULL)
        {}

    PyNs3MgtDelBaHeader__PythonHelper()
        : ns3::MgtDelBaHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MgtDelBaHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MgtDelBaHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::MgtProbeRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtProbeRequestHeader;


extern PyTypeObject PyNs3MgtProbeRequestHeader_Type;

class PyNs3MgtProbeRequestHeader__PythonHelper : public ns3::MgtProbeRequestHeader
{
public:
    PyObject *m_pyself;
    PyNs3MgtProbeRequestHeader__PythonHelper()
        : ns3::MgtProbeRequestHeader(), m_pyself(NULL)
        {}

    PyNs3MgtProbeRequestHeader__PythonHelper(ns3::MgtProbeRequestHeader const & arg0)
        : ns3::MgtProbeRequestHeader(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MgtProbeRequestHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MgtProbeRequestHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::MgtProbeResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtProbeResponseHeader;


extern PyTypeObject PyNs3MgtProbeResponseHeader_Type;

class PyNs3MgtProbeResponseHeader__PythonHelper : public ns3::MgtProbeResponseHeader
{
public:
    PyObject *m_pyself;
    PyNs3MgtProbeResponseHeader__PythonHelper(ns3::MgtProbeResponseHeader const & arg0)
        : ns3::MgtProbeResponseHeader(arg0), m_pyself(NULL)
        {}

    PyNs3MgtProbeResponseHeader__PythonHelper()
        : ns3::MgtProbeResponseHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MgtProbeResponseHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MgtProbeResponseHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::QosTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QosTag;


extern PyTypeObject PyNs3QosTag_Type;

class PyNs3QosTag__PythonHelper : public ns3::QosTag
{
public:
    PyObject *m_pyself;
    PyNs3QosTag__PythonHelper(ns3::QosTag const & arg0)
        : ns3::QosTag(arg0), m_pyself(NULL)
        {}

    PyNs3QosTag__PythonHelper()
        : ns3::QosTag(), m_pyself(NULL)
        {}

    PyNs3QosTag__PythonHelper(uint8_t tid)
        : ns3::QosTag(tid), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QosTag__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3QosTag *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Deserialize(ns3::TagBuffer i);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::TagBuffer i) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::InterferenceHelper::Event, ns3::empty, ns3::DefaultDeleter<ns3::InterferenceHelper::Event> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3InterferenceHelperEvent_Ns3Empty_Ns3DefaultDeleter__lt__ns3InterferenceHelperEvent__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::WifiInformationElement, ns3::empty, ns3::DefaultDeleter<ns3::WifiInformationElement> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3WifiInformationElement_Ns3Empty_Ns3DefaultDeleter__lt__ns3WifiInformationElement__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::WifiActionHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiActionHeader;


extern PyTypeObject PyNs3WifiActionHeader_Type;

class PyNs3WifiActionHeader__PythonHelper : public ns3::WifiActionHeader
{
public:
    PyObject *m_pyself;
    PyNs3WifiActionHeader__PythonHelper(ns3::WifiActionHeader const & arg0)
        : ns3::WifiActionHeader(arg0), m_pyself(NULL)
        {}

    PyNs3WifiActionHeader__PythonHelper()
        : ns3::WifiActionHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiActionHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiActionHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::WifiActionHeader::ActionValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiActionHeaderActionValue;


extern PyTypeObject PyNs3WifiActionHeaderActionValue_Type;

extern std::map<void*, PyObject*> PyNs3WifiActionHeaderActionValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiInformationElement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiInformationElement;


extern PyTypeObject PyNs3WifiInformationElement_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiInformationElementVector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiInformationElementVector;


extern PyTypeObject PyNs3WifiInformationElementVector_Type;

class PyNs3WifiInformationElementVector__PythonHelper : public ns3::WifiInformationElementVector
{
public:
    PyObject *m_pyself;
    PyNs3WifiInformationElementVector__PythonHelper(ns3::WifiInformationElementVector const & arg0)
        : ns3::WifiInformationElementVector(arg0), m_pyself(NULL)
        {}

    PyNs3WifiInformationElementVector__PythonHelper()
        : ns3::WifiInformationElementVector(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiInformationElementVector__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_GetSize(PyNs3WifiInformationElementVector *self);
    inline uint32_t GetSize__parent_caller()
    { return ns3::WifiInformationElementVector::GetSize(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiInformationElementVector *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual uint32_t DeserializeSingleIe(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::WifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMac;


extern PyTypeObject PyNs3WifiMac_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiMacHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacHeader;


extern PyTypeObject PyNs3WifiMacHeader_Type;

class PyNs3WifiMacHeader__PythonHelper : public ns3::WifiMacHeader
{
public:
    PyObject *m_pyself;
    PyNs3WifiMacHeader__PythonHelper(ns3::WifiMacHeader const & arg0)
        : ns3::WifiMacHeader(arg0), m_pyself(NULL)
        {}

    PyNs3WifiMacHeader__PythonHelper()
        : ns3::WifiMacHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiMacHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiMacHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::WifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhy;


extern PyTypeObject PyNs3WifiPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiRemoteStationManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRemoteStationManager;


extern PyTypeObject PyNs3WifiRemoteStationManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::YansWifiPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiPhy;


extern PyTypeObject PyNs3YansWifiPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::AarfWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AarfWifiManager;


extern PyTypeObject PyNs3AarfWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AarfcdWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AarfcdWifiManager;


extern PyTypeObject PyNs3AarfcdWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AdhocWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AdhocWifiMac;


extern PyTypeObject PyNs3AdhocWifiMac_Type;

class PyNs3AdhocWifiMac__PythonHelper : public ns3::AdhocWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3AdhocWifiMac__PythonHelper()
        : ns3::AdhocWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AdhocWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AdhocWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3AdhocWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetSlot() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Time GetPifs() const;

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Ssid GetSsid() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3AdhocWifiMac__PythonHelper")
        .SetParent< ns3::AdhocWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3AdhocWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AmrrWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmrrWifiManager;


extern PyTypeObject PyNs3AmrrWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::AmsduSubframeHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AmsduSubframeHeader;


extern PyTypeObject PyNs3AmsduSubframeHeader_Type;

class PyNs3AmsduSubframeHeader__PythonHelper : public ns3::AmsduSubframeHeader
{
public:
    PyObject *m_pyself;
    PyNs3AmsduSubframeHeader__PythonHelper(ns3::AmsduSubframeHeader const & arg0)
        : ns3::AmsduSubframeHeader(arg0), m_pyself(NULL)
        {}

    PyNs3AmsduSubframeHeader__PythonHelper()
        : ns3::AmsduSubframeHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AmsduSubframeHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AmsduSubframeHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::ArfWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ArfWifiManager;


extern PyTypeObject PyNs3ArfWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::CaraWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CaraWifiManager;


extern PyTypeObject PyNs3CaraWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::ConstantRateWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantRateWifiManager;


extern PyTypeObject PyNs3ConstantRateWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::CtrlBAckRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CtrlBAckRequestHeader;


extern PyTypeObject PyNs3CtrlBAckRequestHeader_Type;

class PyNs3CtrlBAckRequestHeader__PythonHelper : public ns3::CtrlBAckRequestHeader
{
public:
    PyObject *m_pyself;
    PyNs3CtrlBAckRequestHeader__PythonHelper(ns3::CtrlBAckRequestHeader const & arg0)
        : ns3::CtrlBAckRequestHeader(arg0), m_pyself(NULL)
        {}

    PyNs3CtrlBAckRequestHeader__PythonHelper()
        : ns3::CtrlBAckRequestHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CtrlBAckRequestHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CtrlBAckRequestHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::CtrlBAckResponseHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CtrlBAckResponseHeader;


extern PyTypeObject PyNs3CtrlBAckResponseHeader_Type;

class PyNs3CtrlBAckResponseHeader__PythonHelper : public ns3::CtrlBAckResponseHeader
{
public:
    PyObject *m_pyself;
    PyNs3CtrlBAckResponseHeader__PythonHelper(ns3::CtrlBAckResponseHeader const & arg0)
        : ns3::CtrlBAckResponseHeader(arg0), m_pyself(NULL)
        {}

    PyNs3CtrlBAckResponseHeader__PythonHelper()
        : ns3::CtrlBAckResponseHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CtrlBAckResponseHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CtrlBAckResponseHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Dcf *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dcf;


extern PyTypeObject PyNs3Dcf_Type;

class PyNs3Dcf__PythonHelper : public ns3::Dcf
{
public:
    PyObject *m_pyself;
    PyNs3Dcf__PythonHelper()
        : ns3::Dcf(), m_pyself(NULL)
        {}

    PyNs3Dcf__PythonHelper(ns3::Dcf const & arg0)
        : ns3::Dcf(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Dcf__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Dcf *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Dcf *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Dcf *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Dcf *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual uint32_t GetAifsn() const;

    virtual uint32_t GetMaxCw() const;

    virtual uint32_t GetMinCw() const;

    virtual void SetAifsn(uint32_t aifsn);

    virtual void SetMaxCw(uint32_t maxCw);

    virtual void SetMinCw(uint32_t minCw);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Dcf__PythonHelper")
        .SetParent< ns3::Dcf > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Dcf__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EdcaTxopN *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EdcaTxopN;


extern PyTypeObject PyNs3EdcaTxopN_Type;

class PyNs3EdcaTxopN__PythonHelper : public ns3::EdcaTxopN
{
public:
    PyObject *m_pyself;
    PyNs3EdcaTxopN__PythonHelper()
        : ns3::EdcaTxopN(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EdcaTxopN__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EdcaTxopN *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EdcaTxopN *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void SetMinCw(uint32_t minCw);

    virtual void SetMaxCw(uint32_t maxCw);

    virtual void SetAifsn(uint32_t aifsn);

    virtual uint32_t GetMinCw() const;

    virtual uint32_t GetMaxCw() const;

    virtual uint32_t GetAifsn() const;

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EdcaTxopN__PythonHelper")
        .SetParent< ns3::EdcaTxopN > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EdcaTxopN__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErrorRateModel;


extern PyTypeObject PyNs3ErrorRateModel_Type;

class PyNs3ErrorRateModel__PythonHelper : public ns3::ErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3ErrorRateModel__PythonHelper()
        : ns3::ErrorRateModel(), m_pyself(NULL)
        {}

    PyNs3ErrorRateModel__PythonHelper(ns3::ErrorRateModel const & arg0)
        : ns3::ErrorRateModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ErrorRateModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ErrorRateModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ErrorRateModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3ErrorRateModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ErrorRateModel__PythonHelper")
        .SetParent< ns3::ErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::IdealWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3IdealWifiManager;


extern PyTypeObject PyNs3IdealWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::MacLow *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacLow;


extern PyTypeObject PyNs3MacLow_Type;

class PyNs3MacLow__PythonHelper : public ns3::MacLow
{
public:
    PyObject *m_pyself;
    PyNs3MacLow__PythonHelper(ns3::MacLow const & arg0)
        : ns3::MacLow(arg0), m_pyself(NULL)
        {}

    PyNs3MacLow__PythonHelper()
        : ns3::MacLow(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacLow__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MacLow *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MacLow *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MacLow *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MacLow__PythonHelper")
        .SetParent< ns3::MacLow > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MacLow__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MgtBeaconHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MgtBeaconHeader;


extern PyTypeObject PyNs3MgtBeaconHeader_Type;


typedef struct {
    PyObject_HEAD
    ns3::MinstrelWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MinstrelWifiManager;


extern PyTypeObject PyNs3MinstrelWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::MsduAggregator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MsduAggregator;


extern PyTypeObject PyNs3MsduAggregator_Type;

class PyNs3MsduAggregator__PythonHelper : public ns3::MsduAggregator
{
public:
    PyObject *m_pyself;
    PyNs3MsduAggregator__PythonHelper()
        : ns3::MsduAggregator(), m_pyself(NULL)
        {}

    PyNs3MsduAggregator__PythonHelper(ns3::MsduAggregator const & arg0)
        : ns3::MsduAggregator(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MsduAggregator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MsduAggregator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MsduAggregator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MsduAggregator *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3MsduAggregator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool Aggregate(ns3::Ptr< ns3::Packet const > packet, ns3::Ptr< ns3::Packet > aggregatedPacket, ns3::Mac48Address src, ns3::Mac48Address dest);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MsduAggregator__PythonHelper")
        .SetParent< ns3::MsduAggregator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MsduAggregator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NistErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NistErrorRateModel;


extern PyTypeObject PyNs3NistErrorRateModel_Type;

class PyNs3NistErrorRateModel__PythonHelper : public ns3::NistErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3NistErrorRateModel__PythonHelper(ns3::NistErrorRateModel const & arg0)
        : ns3::NistErrorRateModel(arg0), m_pyself(NULL)
        {}

    PyNs3NistErrorRateModel__PythonHelper()
        : ns3::NistErrorRateModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NistErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NistErrorRateModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NistErrorRateModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3NistErrorRateModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3NistErrorRateModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NistErrorRateModel__PythonHelper")
        .SetParent< ns3::NistErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NistErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NqapWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NqapWifiMac;


extern PyTypeObject PyNs3NqapWifiMac_Type;

class PyNs3NqapWifiMac__PythonHelper : public ns3::NqapWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3NqapWifiMac__PythonHelper()
        : ns3::NqapWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NqapWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NqapWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NqapWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetSlot() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Time GetPifs() const;

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Ssid GetSsid() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NqapWifiMac__PythonHelper")
        .SetParent< ns3::NqapWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NqapWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::NqstaWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NqstaWifiMac;


extern PyTypeObject PyNs3NqstaWifiMac_Type;

class PyNs3NqstaWifiMac__PythonHelper : public ns3::NqstaWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3NqstaWifiMac__PythonHelper()
        : ns3::NqstaWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NqstaWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NqstaWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NqstaWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetSlot() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Time GetPifs() const;

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Ssid GetSsid() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void DoStart();

    virtual void DoDispose();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NqstaWifiMac__PythonHelper")
        .SetParent< ns3::NqstaWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NqstaWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::OnoeWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OnoeWifiManager;


extern PyTypeObject PyNs3OnoeWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::QadhocWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QadhocWifiMac;


extern PyTypeObject PyNs3QadhocWifiMac_Type;

class PyNs3QadhocWifiMac__PythonHelper : public ns3::QadhocWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3QadhocWifiMac__PythonHelper()
        : ns3::QadhocWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QadhocWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3QadhocWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3QadhocWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetSlot() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Time GetPifs() const;

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Ssid GetSsid() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3QadhocWifiMac__PythonHelper")
        .SetParent< ns3::QadhocWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3QadhocWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::QapWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QapWifiMac;


extern PyTypeObject PyNs3QapWifiMac_Type;

class PyNs3QapWifiMac__PythonHelper : public ns3::QapWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3QapWifiMac__PythonHelper()
        : ns3::QapWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QapWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3QapWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3QapWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetSlot() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Time GetPifs() const;

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Ssid GetSsid() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3QapWifiMac__PythonHelper")
        .SetParent< ns3::QapWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3QapWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::QstaWifiMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QstaWifiMac;


extern PyTypeObject PyNs3QstaWifiMac_Type;

class PyNs3QstaWifiMac__PythonHelper : public ns3::QstaWifiMac
{
public:
    PyObject *m_pyself;
    PyNs3QstaWifiMac__PythonHelper()
        : ns3::QstaWifiMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QstaWifiMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3QstaWifiMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3QstaWifiMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual void SetPifs(ns3::Time pifs);

    virtual ns3::Time GetSlot() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Time GetPifs() const;

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Ssid GetSsid() const;

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual ns3::Mac48Address GetBssid() const;

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual void DoStart();

    virtual void DoDispose();

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3QstaWifiMac__PythonHelper")
        .SetParent< ns3::QstaWifiMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3QstaWifiMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RraaWifiManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RraaWifiManager;


extern PyTypeObject PyNs3RraaWifiManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ssid *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ssid;


extern PyTypeObject PyNs3Ssid_Type;


typedef struct {
    PyObject_HEAD
    ns3::SsidChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsidChecker;


extern PyTypeObject PyNs3SsidChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::SsidValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsidValue;


extern PyTypeObject PyNs3SsidValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::SupportedRates *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SupportedRates;


extern PyTypeObject PyNs3SupportedRates_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiChannel;


extern PyTypeObject PyNs3WifiChannel_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiModeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeChecker;


extern PyTypeObject PyNs3WifiModeChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiModeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiModeValue;


extern PyTypeObject PyNs3WifiModeValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::WifiNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiNetDevice;


extern PyTypeObject PyNs3WifiNetDevice_Type;

class PyNs3WifiNetDevice__PythonHelper : public ns3::WifiNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3WifiNetDevice__PythonHelper(ns3::WifiNetDevice const & arg0)
        : ns3::WifiNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3WifiNetDevice__PythonHelper()
        : ns3::WifiNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiNetDevice__PythonHelper")
        .SetParent< ns3::WifiNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::YansErrorRateModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansErrorRateModel;


extern PyTypeObject PyNs3YansErrorRateModel_Type;

class PyNs3YansErrorRateModel__PythonHelper : public ns3::YansErrorRateModel
{
public:
    PyObject *m_pyself;
    PyNs3YansErrorRateModel__PythonHelper(ns3::YansErrorRateModel const & arg0)
        : ns3::YansErrorRateModel(arg0), m_pyself(NULL)
        {}

    PyNs3YansErrorRateModel__PythonHelper()
        : ns3::YansErrorRateModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansErrorRateModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3YansErrorRateModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3YansErrorRateModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3YansErrorRateModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3YansErrorRateModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual double GetChunkSuccessRate(ns3::WifiMode mode, double snr, uint32_t nbits) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3YansErrorRateModel__PythonHelper")
        .SetParent< ns3::YansErrorRateModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3YansErrorRateModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::YansWifiChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiChannel;


extern PyTypeObject PyNs3YansWifiChannel_Type;

class PyNs3YansWifiChannel__PythonHelper : public ns3::YansWifiChannel
{
public:
    PyObject *m_pyself;
    PyNs3YansWifiChannel__PythonHelper(ns3::YansWifiChannel const & arg0)
        : ns3::YansWifiChannel(arg0), m_pyself(NULL)
        {}

    PyNs3YansWifiChannel__PythonHelper()
        : ns3::YansWifiChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3YansWifiChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3YansWifiChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3YansWifiChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3YansWifiChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3YansWifiChannel__PythonHelper")
        .SetParent< ns3::YansWifiChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3YansWifiChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::DcaTxop *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DcaTxop;


extern PyTypeObject PyNs3DcaTxop_Type;

class PyNs3DcaTxop__PythonHelper : public ns3::DcaTxop
{
public:
    PyObject *m_pyself;
    PyNs3DcaTxop__PythonHelper()
        : ns3::DcaTxop(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DcaTxop__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DcaTxop *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DcaTxop *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void SetMinCw(uint32_t minCw);

    virtual void SetMaxCw(uint32_t maxCw);

    virtual void SetAifsn(uint32_t aifsn);

    virtual uint32_t GetMinCw() const;

    virtual uint32_t GetMaxCw() const;

    virtual uint32_t GetAifsn() const;

    virtual void DoStart();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DcaTxop__PythonHelper")
        .SetParent< ns3::DcaTxop > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DcaTxop__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Cid *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Cid;


extern PyTypeObject PyNs3Cid_Type;

extern std::map<void*, PyObject*> PyNs3Cid_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CidFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CidFactory;


extern PyTypeObject PyNs3CidFactory_Type;

extern std::map<void*, PyObject*> PyNs3CidFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CsParameters *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CsParameters;


extern PyTypeObject PyNs3CsParameters_Type;

extern std::map<void*, PyObject*> PyNs3CsParameters_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DcdChannelEncodings *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DcdChannelEncodings;


extern PyTypeObject PyNs3DcdChannelEncodings_Type;

class PyNs3DcdChannelEncodings__PythonHelper : public ns3::DcdChannelEncodings
{
public:
    PyObject *m_pyself;
    PyNs3DcdChannelEncodings__PythonHelper(ns3::DcdChannelEncodings const & arg0)
        : ns3::DcdChannelEncodings(arg0), m_pyself(NULL)
        {}

    PyNs3DcdChannelEncodings__PythonHelper()
        : ns3::DcdChannelEncodings(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DcdChannelEncodings__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Buffer::Iterator DoRead(ns3::Buffer::Iterator start);

    virtual ns3::Buffer::Iterator DoWrite(ns3::Buffer::Iterator start) const;
};

extern std::map<void*, PyObject*> PyNs3DcdChannelEncodings_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DlFramePrefixIe *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlFramePrefixIe;


extern PyTypeObject PyNs3DlFramePrefixIe_Type;

extern std::map<void*, PyObject*> PyNs3DlFramePrefixIe_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::IpcsClassifierRecord *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IpcsClassifierRecord;


extern PyTypeObject PyNs3IpcsClassifierRecord_Type;

extern std::map<void*, PyObject*> PyNs3IpcsClassifierRecord_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OfdmDcdChannelEncodings *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OfdmDcdChannelEncodings;


extern PyTypeObject PyNs3OfdmDcdChannelEncodings_Type;

class PyNs3OfdmDcdChannelEncodings__PythonHelper : public ns3::OfdmDcdChannelEncodings
{
public:
    PyObject *m_pyself;
    PyNs3OfdmDcdChannelEncodings__PythonHelper(ns3::OfdmDcdChannelEncodings const & arg0)
        : ns3::OfdmDcdChannelEncodings(arg0), m_pyself(NULL)
        {}

    PyNs3OfdmDcdChannelEncodings__PythonHelper()
        : ns3::OfdmDcdChannelEncodings(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OfdmDcdChannelEncodings__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Buffer::Iterator DoRead(ns3::Buffer::Iterator start);

    virtual ns3::Buffer::Iterator DoWrite(ns3::Buffer::Iterator start) const;
};


typedef struct {
    PyObject_HEAD
    ns3::OfdmDlBurstProfile *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OfdmDlBurstProfile;


extern PyTypeObject PyNs3OfdmDlBurstProfile_Type;

extern std::map<void*, PyObject*> PyNs3OfdmDlBurstProfile_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OfdmDlMapIe *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OfdmDlMapIe;


extern PyTypeObject PyNs3OfdmDlMapIe_Type;

extern std::map<void*, PyObject*> PyNs3OfdmDlMapIe_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OfdmUlBurstProfile *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OfdmUlBurstProfile;


extern PyTypeObject PyNs3OfdmUlBurstProfile_Type;

extern std::map<void*, PyObject*> PyNs3OfdmUlBurstProfile_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OfdmUlMapIe *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OfdmUlMapIe;


extern PyTypeObject PyNs3OfdmUlMapIe_Type;

extern std::map<void*, PyObject*> PyNs3OfdmUlMapIe_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SNRToBlockErrorRateManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SNRToBlockErrorRateManager;


extern PyTypeObject PyNs3SNRToBlockErrorRateManager_Type;

extern std::map<void*, PyObject*> PyNs3SNRToBlockErrorRateManager_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SNRToBlockErrorRateRecord *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SNRToBlockErrorRateRecord;


extern PyTypeObject PyNs3SNRToBlockErrorRateRecord_Type;

extern std::map<void*, PyObject*> PyNs3SNRToBlockErrorRateRecord_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SSRecord *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SSRecord;


extern PyTypeObject PyNs3SSRecord_Type;

extern std::map<void*, PyObject*> PyNs3SSRecord_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SendParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SendParams;


extern PyTypeObject PyNs3SendParams_Type;

extern std::map<void*, PyObject*> PyNs3SendParams_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ServiceFlow *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ServiceFlow;


extern PyTypeObject PyNs3ServiceFlow_Type;

extern std::map<void*, PyObject*> PyNs3ServiceFlow_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ServiceFlowRecord *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ServiceFlowRecord;


extern PyTypeObject PyNs3ServiceFlowRecord_Type;

extern std::map<void*, PyObject*> PyNs3ServiceFlowRecord_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TlvValue;


extern PyTypeObject PyNs3TlvValue_Type;

extern std::map<void*, PyObject*> PyNs3TlvValue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TosTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3TosTlvValue;


extern PyTypeObject PyNs3TosTlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::U16TlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3U16TlvValue;


extern PyTypeObject PyNs3U16TlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::U32TlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3U32TlvValue;


extern PyTypeObject PyNs3U32TlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::U8TlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3U8TlvValue;


extern PyTypeObject PyNs3U8TlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::UcdChannelEncodings *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UcdChannelEncodings;


extern PyTypeObject PyNs3UcdChannelEncodings_Type;

class PyNs3UcdChannelEncodings__PythonHelper : public ns3::UcdChannelEncodings
{
public:
    PyObject *m_pyself;
    PyNs3UcdChannelEncodings__PythonHelper(ns3::UcdChannelEncodings const & arg0)
        : ns3::UcdChannelEncodings(arg0), m_pyself(NULL)
        {}

    PyNs3UcdChannelEncodings__PythonHelper()
        : ns3::UcdChannelEncodings(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UcdChannelEncodings__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Buffer::Iterator DoRead(ns3::Buffer::Iterator start);

    virtual ns3::Buffer::Iterator DoWrite(ns3::Buffer::Iterator start) const;
};

extern std::map<void*, PyObject*> PyNs3UcdChannelEncodings_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::VectorTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3VectorTlvValue;


extern PyTypeObject PyNs3VectorTlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::simpleOfdmSendParam *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleOfdmSendParam;


extern PyTypeObject PyNs3SimpleOfdmSendParam_Type;

extern std::map<void*, PyObject*> PyNs3SimpleOfdmSendParam_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ClassificationRuleVectorTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ClassificationRuleVectorTlvValue;


extern PyTypeObject PyNs3ClassificationRuleVectorTlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::CsParamVectorTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CsParamVectorTlvValue;


extern PyTypeObject PyNs3CsParamVectorTlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressTlvValue;


extern PyTypeObject PyNs3Ipv4AddressTlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressTlvValue::ipv4Addr *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressTlvValueIpv4Addr;


extern PyTypeObject PyNs3Ipv4AddressTlvValueIpv4Addr_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4AddressTlvValueIpv4Addr_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MacHeaderType *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MacHeaderType;


extern PyTypeObject PyNs3MacHeaderType_Type;

class PyNs3MacHeaderType__PythonHelper : public ns3::MacHeaderType
{
public:
    PyObject *m_pyself;
    PyNs3MacHeaderType__PythonHelper(ns3::MacHeaderType const & arg0)
        : ns3::MacHeaderType(arg0), m_pyself(NULL)
        {}

    PyNs3MacHeaderType__PythonHelper()
        : ns3::MacHeaderType(), m_pyself(NULL)
        {}

    PyNs3MacHeaderType__PythonHelper(uint8_t type)
        : ns3::MacHeaderType(type), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MacHeaderType__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MacHeaderType *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::ManagementMessageType *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ManagementMessageType;


extern PyTypeObject PyNs3ManagementMessageType_Type;

class PyNs3ManagementMessageType__PythonHelper : public ns3::ManagementMessageType
{
public:
    PyObject *m_pyself;
    PyNs3ManagementMessageType__PythonHelper(ns3::ManagementMessageType const & arg0)
        : ns3::ManagementMessageType(arg0), m_pyself(NULL)
        {}

    PyNs3ManagementMessageType__PythonHelper()
        : ns3::ManagementMessageType(), m_pyself(NULL)
        {}

    PyNs3ManagementMessageType__PythonHelper(uint8_t type)
        : ns3::ManagementMessageType(type), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ManagementMessageType__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ManagementMessageType *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::OfdmDownlinkFramePrefix *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OfdmDownlinkFramePrefix;


extern PyTypeObject PyNs3OfdmDownlinkFramePrefix_Type;

class PyNs3OfdmDownlinkFramePrefix__PythonHelper : public ns3::OfdmDownlinkFramePrefix
{
public:
    PyObject *m_pyself;
    PyNs3OfdmDownlinkFramePrefix__PythonHelper(ns3::OfdmDownlinkFramePrefix const & arg0)
        : ns3::OfdmDownlinkFramePrefix(arg0), m_pyself(NULL)
        {}

    PyNs3OfdmDownlinkFramePrefix__PythonHelper()
        : ns3::OfdmDownlinkFramePrefix(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OfdmDownlinkFramePrefix__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3OfdmDownlinkFramePrefix *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::OfdmSendParams *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OfdmSendParams;


extern PyTypeObject PyNs3OfdmSendParams_Type;


typedef struct {
    PyObject_HEAD
    ns3::OfdmUcdChannelEncodings *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OfdmUcdChannelEncodings;


extern PyTypeObject PyNs3OfdmUcdChannelEncodings_Type;

class PyNs3OfdmUcdChannelEncodings__PythonHelper : public ns3::OfdmUcdChannelEncodings
{
public:
    PyObject *m_pyself;
    PyNs3OfdmUcdChannelEncodings__PythonHelper(ns3::OfdmUcdChannelEncodings const & arg0)
        : ns3::OfdmUcdChannelEncodings(arg0), m_pyself(NULL)
        {}

    PyNs3OfdmUcdChannelEncodings__PythonHelper()
        : ns3::OfdmUcdChannelEncodings(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OfdmUcdChannelEncodings__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Buffer::Iterator DoRead(ns3::Buffer::Iterator start);

    virtual ns3::Buffer::Iterator DoWrite(ns3::Buffer::Iterator start) const;
};


typedef struct {
    PyObject_HEAD
    ns3::PortRangeTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PortRangeTlvValue;


extern PyTypeObject PyNs3PortRangeTlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::PortRangeTlvValue::PortRange *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PortRangeTlvValuePortRange;


extern PyTypeObject PyNs3PortRangeTlvValuePortRange_Type;

extern std::map<void*, PyObject*> PyNs3PortRangeTlvValuePortRange_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PriorityUlJob *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PriorityUlJob;


extern PyTypeObject PyNs3PriorityUlJob_Type;


typedef struct {
    PyObject_HEAD
    ns3::ProtocolTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ProtocolTlvValue;


extern PyTypeObject PyNs3ProtocolTlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::RngReq *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RngReq;


extern PyTypeObject PyNs3RngReq_Type;

class PyNs3RngReq__PythonHelper : public ns3::RngReq
{
public:
    PyObject *m_pyself;
    PyNs3RngReq__PythonHelper(ns3::RngReq const & arg0)
        : ns3::RngReq(arg0), m_pyself(NULL)
        {}

    PyNs3RngReq__PythonHelper()
        : ns3::RngReq(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RngReq__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RngReq *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::RngRsp *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3RngRsp;


extern PyTypeObject PyNs3RngRsp_Type;

class PyNs3RngRsp__PythonHelper : public ns3::RngRsp
{
public:
    PyObject *m_pyself;
    PyNs3RngRsp__PythonHelper(ns3::RngRsp const & arg0)
        : ns3::RngRsp(arg0), m_pyself(NULL)
        {}

    PyNs3RngRsp__PythonHelper()
        : ns3::RngRsp(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3RngRsp__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3RngRsp *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::SSManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SSManager;


extern PyTypeObject PyNs3SSManager_Type;


typedef struct {
    PyObject_HEAD
    ns3::ServiceFlowManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ServiceFlowManager;


extern PyTypeObject PyNs3ServiceFlowManager_Type;

class PyNs3ServiceFlowManager__PythonHelper : public ns3::ServiceFlowManager
{
public:
    PyObject *m_pyself;
    PyNs3ServiceFlowManager__PythonHelper(ns3::ServiceFlowManager const & arg0)
        : ns3::ServiceFlowManager(arg0), m_pyself(NULL)
        {}

    PyNs3ServiceFlowManager__PythonHelper()
        : ns3::ServiceFlowManager(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ServiceFlowManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ServiceFlowManager *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ServiceFlowManager *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ServiceFlowManager *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ServiceFlowManager__PythonHelper")
        .SetParent< ns3::ServiceFlowManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ServiceFlowManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SfVectorTlvValue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SfVectorTlvValue;


extern PyTypeObject PyNs3SfVectorTlvValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::SsServiceFlowManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SsServiceFlowManager;


extern PyTypeObject PyNs3SsServiceFlowManager_Type;

class PyNs3SsServiceFlowManager__PythonHelper : public ns3::SsServiceFlowManager
{
public:
    PyObject *m_pyself;
    PyNs3SsServiceFlowManager__PythonHelper(ns3::SsServiceFlowManager const & arg0)
        : ns3::SsServiceFlowManager(arg0), m_pyself(NULL)
        {}

    PyNs3SsServiceFlowManager__PythonHelper(ns3::Ptr< ns3::SubscriberStationNetDevice > device)
        : ns3::SsServiceFlowManager(device), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SsServiceFlowManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SsServiceFlowManager *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SsServiceFlowManager *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SsServiceFlowManager *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SsServiceFlowManager__PythonHelper")
        .SetParent< ns3::SsServiceFlowManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SsServiceFlowManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Tlv *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tlv;


extern PyTypeObject PyNs3Tlv_Type;

class PyNs3Tlv__PythonHelper : public ns3::Tlv
{
public:
    PyObject *m_pyself;
    PyNs3Tlv__PythonHelper(uint8_t type, uint64_t length, ns3::TlvValue const & value)
        : ns3::Tlv(type, length, value), m_pyself(NULL)
        {}

    PyNs3Tlv__PythonHelper()
        : ns3::Tlv(), m_pyself(NULL)
        {}

    PyNs3Tlv__PythonHelper(ns3::Tlv const & tlv)
        : ns3::Tlv(tlv), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Tlv__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Tlv *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::Ucd *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ucd;


extern PyTypeObject PyNs3Ucd_Type;

class PyNs3Ucd__PythonHelper : public ns3::Ucd
{
public:
    PyObject *m_pyself;
    PyNs3Ucd__PythonHelper(ns3::Ucd const & arg0)
        : ns3::Ucd(arg0), m_pyself(NULL)
        {}

    PyNs3Ucd__PythonHelper()
        : ns3::Ucd(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ucd__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ucd *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UlJob *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlJob;


extern PyTypeObject PyNs3UlJob_Type;


typedef struct {
    PyObject_HEAD
    ns3::UlMap *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UlMap;


extern PyTypeObject PyNs3UlMap_Type;

class PyNs3UlMap__PythonHelper : public ns3::UlMap
{
public:
    PyObject *m_pyself;
    PyNs3UlMap__PythonHelper(ns3::UlMap const & arg0)
        : ns3::UlMap(arg0), m_pyself(NULL)
        {}

    PyNs3UlMap__PythonHelper()
        : ns3::UlMap(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UlMap__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UlMap *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UplinkScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UplinkScheduler;


extern PyTypeObject PyNs3UplinkScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::UplinkSchedulerMBQoS *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UplinkSchedulerMBQoS;


extern PyTypeObject PyNs3UplinkSchedulerMBQoS_Type;


typedef struct {
    PyObject_HEAD
    ns3::UplinkSchedulerRtps *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UplinkSchedulerRtps;


extern PyTypeObject PyNs3UplinkSchedulerRtps_Type;


typedef struct {
    PyObject_HEAD
    ns3::UplinkSchedulerSimple *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UplinkSchedulerSimple;


extern PyTypeObject PyNs3UplinkSchedulerSimple_Type;


typedef struct {
    PyObject_HEAD
    ns3::WimaxConnection *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WimaxConnection;


extern PyTypeObject PyNs3WimaxConnection_Type;

class PyNs3WimaxConnection__PythonHelper : public ns3::WimaxConnection
{
public:
    PyObject *m_pyself;
    PyNs3WimaxConnection__PythonHelper(ns3::WimaxConnection const & arg0)
        : ns3::WimaxConnection(arg0), m_pyself(NULL)
        {}

    PyNs3WimaxConnection__PythonHelper(ns3::Cid cid, ns3::Cid::Type type)
        : ns3::WimaxConnection(cid, type), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WimaxConnection__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WimaxConnection *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WimaxConnection *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3WimaxConnection *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WimaxConnection__PythonHelper")
        .SetParent< ns3::WimaxConnection > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WimaxConnection__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WimaxMacQueue *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WimaxMacQueue;


extern PyTypeObject PyNs3WimaxMacQueue_Type;


typedef struct {
    PyObject_HEAD
    ns3::WimaxMacToMacHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WimaxMacToMacHeader;


extern PyTypeObject PyNs3WimaxMacToMacHeader_Type;

class PyNs3WimaxMacToMacHeader__PythonHelper : public ns3::WimaxMacToMacHeader
{
public:
    PyObject *m_pyself;
    PyNs3WimaxMacToMacHeader__PythonHelper(ns3::WimaxMacToMacHeader const & arg0)
        : ns3::WimaxMacToMacHeader(arg0), m_pyself(NULL)
        {}

    PyNs3WimaxMacToMacHeader__PythonHelper()
        : ns3::WimaxMacToMacHeader(), m_pyself(NULL)
        {}

    PyNs3WimaxMacToMacHeader__PythonHelper(uint32_t len)
        : ns3::WimaxMacToMacHeader(len), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WimaxMacToMacHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WimaxMacToMacHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::WimaxPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WimaxPhy;


extern PyTypeObject PyNs3WimaxPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::BSScheduler *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BSScheduler;


extern PyTypeObject PyNs3BSScheduler_Type;


typedef struct {
    PyObject_HEAD
    ns3::BSSchedulerRtps *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BSSchedulerRtps;


extern PyTypeObject PyNs3BSSchedulerRtps_Type;


typedef struct {
    PyObject_HEAD
    ns3::BSSchedulerSimple *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BSSchedulerSimple;


extern PyTypeObject PyNs3BSSchedulerSimple_Type;


typedef struct {
    PyObject_HEAD
    ns3::BandwidthRequestHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BandwidthRequestHeader;


extern PyTypeObject PyNs3BandwidthRequestHeader_Type;

class PyNs3BandwidthRequestHeader__PythonHelper : public ns3::BandwidthRequestHeader
{
public:
    PyObject *m_pyself;
    PyNs3BandwidthRequestHeader__PythonHelper(ns3::BandwidthRequestHeader const & arg0)
        : ns3::BandwidthRequestHeader(arg0), m_pyself(NULL)
        {}

    PyNs3BandwidthRequestHeader__PythonHelper()
        : ns3::BandwidthRequestHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BandwidthRequestHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3BandwidthRequestHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::BsServiceFlowManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BsServiceFlowManager;


extern PyTypeObject PyNs3BsServiceFlowManager_Type;

class PyNs3BsServiceFlowManager__PythonHelper : public ns3::BsServiceFlowManager
{
public:
    PyObject *m_pyself;
    PyNs3BsServiceFlowManager__PythonHelper(ns3::BsServiceFlowManager const & arg0)
        : ns3::BsServiceFlowManager(arg0), m_pyself(NULL)
        {}

    PyNs3BsServiceFlowManager__PythonHelper(ns3::Ptr< ns3::BaseStationNetDevice > device)
        : ns3::BsServiceFlowManager(device), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BsServiceFlowManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3BsServiceFlowManager *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3BsServiceFlowManager *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3BsServiceFlowManager *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3BsServiceFlowManager__PythonHelper")
        .SetParent< ns3::BsServiceFlowManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3BsServiceFlowManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ConnectionManager *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConnectionManager;


extern PyTypeObject PyNs3ConnectionManager_Type;

class PyNs3ConnectionManager__PythonHelper : public ns3::ConnectionManager
{
public:
    PyObject *m_pyself;
    PyNs3ConnectionManager__PythonHelper(ns3::ConnectionManager const & arg0)
        : ns3::ConnectionManager(arg0), m_pyself(NULL)
        {}

    PyNs3ConnectionManager__PythonHelper()
        : ns3::ConnectionManager(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ConnectionManager__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3ConnectionManager *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3ConnectionManager *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3ConnectionManager *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3ConnectionManager__PythonHelper")
        .SetParent< ns3::ConnectionManager > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3ConnectionManager__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Dcd *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dcd;


extern PyTypeObject PyNs3Dcd_Type;

class PyNs3Dcd__PythonHelper : public ns3::Dcd
{
public:
    PyObject *m_pyself;
    PyNs3Dcd__PythonHelper(ns3::Dcd const & arg0)
        : ns3::Dcd(arg0), m_pyself(NULL)
        {}

    PyNs3Dcd__PythonHelper()
        : ns3::Dcd(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Dcd__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Dcd *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::DlMap *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DlMap;


extern PyTypeObject PyNs3DlMap_Type;

class PyNs3DlMap__PythonHelper : public ns3::DlMap
{
public:
    PyObject *m_pyself;
    PyNs3DlMap__PythonHelper(ns3::DlMap const & arg0)
        : ns3::DlMap(arg0), m_pyself(NULL)
        {}

    PyNs3DlMap__PythonHelper()
        : ns3::DlMap(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DlMap__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DlMap *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::DsaAck *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsaAck;


extern PyTypeObject PyNs3DsaAck_Type;

class PyNs3DsaAck__PythonHelper : public ns3::DsaAck
{
public:
    PyObject *m_pyself;
    PyNs3DsaAck__PythonHelper(ns3::DsaAck const & arg0)
        : ns3::DsaAck(arg0), m_pyself(NULL)
        {}

    PyNs3DsaAck__PythonHelper()
        : ns3::DsaAck(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DsaAck__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DsaAck *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::DsaReq *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsaReq;


extern PyTypeObject PyNs3DsaReq_Type;

class PyNs3DsaReq__PythonHelper : public ns3::DsaReq
{
public:
    PyObject *m_pyself;
    PyNs3DsaReq__PythonHelper(ns3::DsaReq const & arg0)
        : ns3::DsaReq(arg0), m_pyself(NULL)
        {}

    PyNs3DsaReq__PythonHelper()
        : ns3::DsaReq(), m_pyself(NULL)
        {}

    PyNs3DsaReq__PythonHelper(ns3::ServiceFlow sf)
        : ns3::DsaReq(sf), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DsaReq__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DsaReq *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::DsaRsp *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DsaRsp;


extern PyTypeObject PyNs3DsaRsp_Type;

class PyNs3DsaRsp__PythonHelper : public ns3::DsaRsp
{
public:
    PyObject *m_pyself;
    PyNs3DsaRsp__PythonHelper(ns3::DsaRsp const & arg0)
        : ns3::DsaRsp(arg0), m_pyself(NULL)
        {}

    PyNs3DsaRsp__PythonHelper()
        : ns3::DsaRsp(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DsaRsp__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DsaRsp *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::FragmentationSubheader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FragmentationSubheader;


extern PyTypeObject PyNs3FragmentationSubheader_Type;

class PyNs3FragmentationSubheader__PythonHelper : public ns3::FragmentationSubheader
{
public:
    PyObject *m_pyself;
    PyNs3FragmentationSubheader__PythonHelper(ns3::FragmentationSubheader const & arg0)
        : ns3::FragmentationSubheader(arg0), m_pyself(NULL)
        {}

    PyNs3FragmentationSubheader__PythonHelper()
        : ns3::FragmentationSubheader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FragmentationSubheader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FragmentationSubheader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::GenericMacHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GenericMacHeader;


extern PyTypeObject PyNs3GenericMacHeader_Type;

class PyNs3GenericMacHeader__PythonHelper : public ns3::GenericMacHeader
{
public:
    PyObject *m_pyself;
    PyNs3GenericMacHeader__PythonHelper(ns3::GenericMacHeader const & arg0)
        : ns3::GenericMacHeader(arg0), m_pyself(NULL)
        {}

    PyNs3GenericMacHeader__PythonHelper()
        : ns3::GenericMacHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GenericMacHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3GenericMacHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::GrantManagementSubheader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3GrantManagementSubheader;


extern PyTypeObject PyNs3GrantManagementSubheader_Type;

class PyNs3GrantManagementSubheader__PythonHelper : public ns3::GrantManagementSubheader
{
public:
    PyObject *m_pyself;
    PyNs3GrantManagementSubheader__PythonHelper(ns3::GrantManagementSubheader const & arg0)
        : ns3::GrantManagementSubheader(arg0), m_pyself(NULL)
        {}

    PyNs3GrantManagementSubheader__PythonHelper()
        : ns3::GrantManagementSubheader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3GrantManagementSubheader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3GrantManagementSubheader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::IpcsClassifier *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3IpcsClassifier;


extern PyTypeObject PyNs3IpcsClassifier_Type;


typedef struct {
    PyObject_HEAD
    ns3::SimpleOfdmWimaxPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleOfdmWimaxPhy;


extern PyTypeObject PyNs3SimpleOfdmWimaxPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::WimaxChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WimaxChannel;


extern PyTypeObject PyNs3WimaxChannel_Type;

class PyNs3WimaxChannel__PythonHelper : public ns3::WimaxChannel
{
public:
    PyObject *m_pyself;
    PyNs3WimaxChannel__PythonHelper(ns3::WimaxChannel const & arg0)
        : ns3::WimaxChannel(arg0), m_pyself(NULL)
        {}

    PyNs3WimaxChannel__PythonHelper()
        : ns3::WimaxChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WimaxChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WimaxChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WimaxChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3WimaxChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3WimaxChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual void DoAttach(ns3::Ptr< ns3::WimaxPhy > phy);

    virtual ns3::Ptr< ns3::NetDevice > DoGetDevice(uint32_t i) const;

    virtual uint32_t DoGetNDevices() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WimaxChannel__PythonHelper")
        .SetParent< ns3::WimaxChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WimaxChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WimaxNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WimaxNetDevice;


extern PyTypeObject PyNs3WimaxNetDevice_Type;
extern PyTypeObject PyNs3WimaxNetDeviceMeta_Type;

class PyNs3WimaxNetDevice__PythonHelper : public ns3::WimaxNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3WimaxNetDevice__PythonHelper()
        : ns3::WimaxNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WimaxNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WimaxNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WimaxNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3WimaxNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void SetConnectionManager(ns3::Ptr< ns3::ConnectionManager > connectionManager);

    virtual void Start();

    virtual void Stop();

    virtual bool Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::MacHeaderType const & hdrType, ns3::Ptr< ns3::WimaxConnection > connection);

    virtual void SetName(std::string const name);

    virtual std::string GetName() const;

    virtual void SetIfIndex(uint32_t const index);

    virtual uint32_t GetIfIndex() const;

    virtual ns3::Ptr< ns3::Channel > GetPhyChannel() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual void SetAddress(ns3::Address address);

    virtual ns3::Address GetAddress() const;

    virtual bool SetMtu(uint16_t const mtu);

    virtual uint16_t GetMtu() const;

    virtual bool IsLinkUp() const;

    virtual bool IsBroadcast() const;

    virtual ns3::Address GetBroadcast() const;

    virtual bool IsMulticast() const;

    virtual ns3::Address GetMulticast() const;

    virtual ns3::Address MakeMulticastAddress(ns3::Ipv4Address multicastGroup) const;

    virtual bool IsPointToPoint() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool NeedsArp() const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual bool IsBridge() const;

    virtual bool DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber);

    virtual void DoReceive(ns3::Ptr< ns3::Packet > packet);

    virtual ns3::Ptr< ns3::WimaxChannel > DoGetChannel() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WimaxNetDevice__PythonHelper")
        .SetParent< ns3::WimaxNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WimaxNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::BaseStationNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BaseStationNetDevice;


extern PyTypeObject PyNs3BaseStationNetDevice_Type;

class PyNs3BaseStationNetDevice__PythonHelper : public ns3::BaseStationNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3BaseStationNetDevice__PythonHelper()
        : ns3::BaseStationNetDevice(), m_pyself(NULL)
        {}

    PyNs3BaseStationNetDevice__PythonHelper(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::WimaxPhy > phy)
        : ns3::BaseStationNetDevice(node, phy), m_pyself(NULL)
        {}

    PyNs3BaseStationNetDevice__PythonHelper(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::WimaxPhy > phy, ns3::Ptr< ns3::UplinkScheduler > uplinkScheduler, ns3::Ptr< ns3::BSScheduler > bsScheduler)
        : ns3::BaseStationNetDevice(node, phy, uplinkScheduler, bsScheduler), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BaseStationNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3BaseStationNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3BaseStationNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3BaseStationNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void Start();

    virtual void Stop();

    virtual bool Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::MacHeaderType const & hdrType, ns3::Ptr< ns3::WimaxConnection > connection);

    virtual void DoDispose();

    virtual bool DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber);

    virtual void DoReceive(ns3::Ptr< ns3::Packet > packet);

    virtual bool IsMulticast() const;

    virtual ns3::Address GetMulticast() const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool NeedsArp() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool IsBroadcast() const;

    virtual bool IsPointToPoint() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address MakeMulticastAddress(ns3::Ipv4Address multicastGroup) const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual ns3::Address GetBroadcast() const;

    virtual std::string GetName() const;

    virtual bool IsBridge() const;

    virtual ns3::Address GetAddress() const;

    virtual ns3::Ptr< ns3::Channel > GetPhyChannel() const;

    virtual void SetIfIndex(uint32_t const index);

    virtual void SetAddress(ns3::Address address);

    virtual bool IsLinkUp() const;

    virtual void SetName(std::string const name);

    virtual bool SetMtu(uint16_t const mtu);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual void SetConnectionManager(ns3::Ptr< ns3::ConnectionManager > connectionManager);

    virtual uint32_t GetIfIndex() const;

    virtual ns3::Ptr< ns3::WimaxChannel > DoGetChannel() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3BaseStationNetDevice__PythonHelper")
        .SetParent< ns3::BaseStationNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3BaseStationNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimpleOfdmWimaxChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleOfdmWimaxChannel;


extern PyTypeObject PyNs3SimpleOfdmWimaxChannel_Type;

class PyNs3SimpleOfdmWimaxChannel__PythonHelper : public ns3::SimpleOfdmWimaxChannel
{
public:
    PyObject *m_pyself;
    PyNs3SimpleOfdmWimaxChannel__PythonHelper(ns3::SimpleOfdmWimaxChannel const & arg0)
        : ns3::SimpleOfdmWimaxChannel(arg0), m_pyself(NULL)
        {}

    PyNs3SimpleOfdmWimaxChannel__PythonHelper()
        : ns3::SimpleOfdmWimaxChannel(), m_pyself(NULL)
        {}

    PyNs3SimpleOfdmWimaxChannel__PythonHelper(ns3::SimpleOfdmWimaxChannel::PropModel propModel)
        : ns3::SimpleOfdmWimaxChannel(propModel), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SimpleOfdmWimaxChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SimpleOfdmWimaxChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SimpleOfdmWimaxChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SimpleOfdmWimaxChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3SimpleOfdmWimaxChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void DoAttach(ns3::Ptr< ns3::WimaxPhy > phy);

    virtual ns3::Ptr< ns3::NetDevice > DoGetDevice(uint32_t i) const;

    virtual uint32_t DoGetNDevices() const;

    virtual uint32_t GetNDevices() const;

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SimpleOfdmWimaxChannel__PythonHelper")
        .SetParent< ns3::SimpleOfdmWimaxChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SimpleOfdmWimaxChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SubscriberStationNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SubscriberStationNetDevice;


extern PyTypeObject PyNs3SubscriberStationNetDevice_Type;

class PyNs3SubscriberStationNetDevice__PythonHelper : public ns3::SubscriberStationNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3SubscriberStationNetDevice__PythonHelper()
        : ns3::SubscriberStationNetDevice(), m_pyself(NULL)
        {}

    PyNs3SubscriberStationNetDevice__PythonHelper(ns3::Ptr< ns3::Node > arg0, ns3::Ptr< ns3::WimaxPhy > arg1)
        : ns3::SubscriberStationNetDevice(arg0, arg1), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3SubscriberStationNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3SubscriberStationNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3SubscriberStationNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3SubscriberStationNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual bool Enqueue(ns3::Ptr< ns3::Packet > packet, ns3::MacHeaderType const & hdrType, ns3::Ptr< ns3::WimaxConnection > connection);

    virtual void Start();

    virtual void Stop();

    virtual void DoDispose();

    virtual bool DoSend(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address const & source, ns3::Mac48Address const & dest, uint16_t protocolNumber);

    virtual void DoReceive(ns3::Ptr< ns3::Packet > packet);

    virtual bool IsMulticast() const;

    virtual ns3::Address GetMulticast() const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool NeedsArp() const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool IsBroadcast() const;

    virtual bool IsPointToPoint() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address MakeMulticastAddress(ns3::Ipv4Address multicastGroup) const;

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual ns3::Address GetBroadcast() const;

    virtual std::string GetName() const;

    virtual bool IsBridge() const;

    virtual ns3::Address GetAddress() const;

    virtual ns3::Ptr< ns3::Channel > GetPhyChannel() const;

    virtual void SetIfIndex(uint32_t const index);

    virtual void SetAddress(ns3::Address address);

    virtual bool IsLinkUp() const;

    virtual void SetName(std::string const name);

    virtual bool SetMtu(uint16_t const mtu);

    virtual bool SupportsSendFrom() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual void SetConnectionManager(ns3::Ptr< ns3::ConnectionManager > connectionManager);

    virtual uint32_t GetIfIndex() const;

    virtual ns3::Ptr< ns3::WimaxChannel > DoGetChannel() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3SubscriberStationNetDevice__PythonHelper")
        .SetParent< ns3::SubscriberStationNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3SubscriberStationNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::Histogram *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Histogram;


extern PyTypeObject PyNs3Histogram_Type;

extern std::map<void*, PyObject*> PyNs3Histogram_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::FlowClassifier, ns3::empty, ns3::DefaultDeleter<ns3::FlowClassifier> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3FlowClassifier_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowClassifier__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::FlowProbe, ns3::empty, ns3::DefaultDeleter<ns3::FlowProbe> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3FlowProbe_Ns3Empty_Ns3DefaultDeleter__lt__ns3FlowProbe__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::FlowClassifier *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlowClassifier;


extern PyTypeObject PyNs3FlowClassifier_Type;


typedef struct {
    PyObject_HEAD
    ns3::FlowMonitor *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlowMonitor;


extern PyTypeObject PyNs3FlowMonitor_Type;

class PyNs3FlowMonitor__PythonHelper : public ns3::FlowMonitor
{
public:
    PyObject *m_pyself;
    PyNs3FlowMonitor__PythonHelper(ns3::FlowMonitor const & arg0)
        : ns3::FlowMonitor(arg0), m_pyself(NULL)
        {}

    PyNs3FlowMonitor__PythonHelper()
        : ns3::FlowMonitor(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FlowMonitor__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FlowMonitor *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::FlowMonitor::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3FlowMonitor *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3FlowMonitor *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3FlowMonitor *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyConstructionCompleted();

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3FlowMonitor__PythonHelper")
        .SetParent< ns3::FlowMonitor > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3FlowMonitor__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::FlowMonitor::FlowStats *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlowMonitorFlowStats;


extern PyTypeObject PyNs3FlowMonitorFlowStats_Type;

extern std::map<void*, PyObject*> PyNs3FlowMonitorFlowStats_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FlowProbe *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlowProbe;


extern PyTypeObject PyNs3FlowProbe_Type;


typedef struct {
    PyObject_HEAD
    ns3::FlowProbe::FlowStats *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlowProbeFlowStats;


extern PyTypeObject PyNs3FlowProbeFlowStats_Type;

extern std::map<void*, PyObject*> PyNs3FlowProbeFlowStats_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4FlowClassifier *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4FlowClassifier;


extern PyTypeObject PyNs3Ipv4FlowClassifier_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4FlowClassifier::FiveTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4FlowClassifierFiveTuple;


extern PyTypeObject PyNs3Ipv4FlowClassifierFiveTuple_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4FlowClassifierFiveTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4FlowProbe *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4FlowProbe;


extern PyTypeObject PyNs3Ipv4FlowProbe_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4NixVectorRouting *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4NixVectorRouting;


extern PyTypeObject PyNs3Ipv4NixVectorRouting_Type;


typedef struct {
    PyObject_HEAD
    ns3::OlsrState *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrState;


extern PyTypeObject PyNs3OlsrState_Type;

extern std::map<void*, PyObject*> PyNs3OlsrState_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ping6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ping6;


extern PyTypeObject PyNs3Ping6_Type;

class PyNs3Ping6__PythonHelper : public ns3::Ping6
{
public:
    PyObject *m_pyself;
    PyNs3Ping6__PythonHelper(ns3::Ping6 const & arg0)
        : ns3::Ping6(arg0), m_pyself(NULL)
        {}

    PyNs3Ping6__PythonHelper()
        : ns3::Ping6(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Ping6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Ping6 *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Ping6 *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Ping6 *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Ping6 *self);
    inline void DoDispose__parent_caller()
    { ns3::Ping6::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Ping6__PythonHelper")
        .SetParent< ns3::Ping6 > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Ping6__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::RadvdInterface, ns3::empty, ns3::DefaultDeleter<ns3::RadvdInterface> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3RadvdInterface_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdInterface__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::RadvdPrefix, ns3::empty, ns3::DefaultDeleter<ns3::RadvdPrefix> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3RadvdPrefix_Ns3Empty_Ns3DefaultDeleter__lt__ns3RadvdPrefix__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::Radvd *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Radvd;


extern PyTypeObject PyNs3Radvd_Type;
extern PyTypeObject PyNs3RadvdMeta_Type;

class PyNs3Radvd__PythonHelper : public ns3::Radvd
{
public:
    PyObject *m_pyself;
    PyNs3Radvd__PythonHelper(ns3::Radvd const & arg0)
        : ns3::Radvd(arg0), m_pyself(NULL)
        {}

    PyNs3Radvd__PythonHelper()
        : ns3::Radvd(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Radvd__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Radvd *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Radvd *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Radvd *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3Radvd *self);
    inline void DoDispose__parent_caller()
    { ns3::Radvd::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Radvd__PythonHelper")
        .SetParent< ns3::Radvd > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Radvd__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::RadvdInterface *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RadvdInterface;


extern PyTypeObject PyNs3RadvdInterface_Type;


typedef struct {
    PyObject_HEAD
    ns3::RadvdPrefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RadvdPrefix;


extern PyTypeObject PyNs3RadvdPrefix_Type;


typedef struct {
    PyObject_HEAD
    ns3::PacketLossCounter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketLossCounter;


extern PyTypeObject PyNs3PacketLossCounter_Type;

extern std::map<void*, PyObject*> PyNs3PacketLossCounter_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UdpClient *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpClient;


extern PyTypeObject PyNs3UdpClient_Type;

class PyNs3UdpClient__PythonHelper : public ns3::UdpClient
{
public:
    PyObject *m_pyself;
    PyNs3UdpClient__PythonHelper(ns3::UdpClient const & arg0)
        : ns3::UdpClient(arg0), m_pyself(NULL)
        {}

    PyNs3UdpClient__PythonHelper()
        : ns3::UdpClient(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpClient__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpClient *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UdpClient *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UdpClient *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UdpClient *self);
    inline void DoDispose__parent_caller()
    { ns3::UdpClient::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UdpClient__PythonHelper")
        .SetParent< ns3::UdpClient > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UdpClient__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UdpServer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpServer;


extern PyTypeObject PyNs3UdpServer_Type;

class PyNs3UdpServer__PythonHelper : public ns3::UdpServer
{
public:
    PyObject *m_pyself;
    PyNs3UdpServer__PythonHelper(ns3::UdpServer const & arg0)
        : ns3::UdpServer(arg0), m_pyself(NULL)
        {}

    PyNs3UdpServer__PythonHelper()
        : ns3::UdpServer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpServer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpServer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UdpServer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UdpServer *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UdpServer *self);
    inline void DoDispose__parent_caller()
    { ns3::UdpServer::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UdpServer__PythonHelper")
        .SetParent< ns3::UdpServer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UdpServer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UdpTraceClient *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpTraceClient;


extern PyTypeObject PyNs3UdpTraceClient_Type;

class PyNs3UdpTraceClient__PythonHelper : public ns3::UdpTraceClient
{
public:
    PyObject *m_pyself;
    PyNs3UdpTraceClient__PythonHelper(ns3::UdpTraceClient const & arg0)
        : ns3::UdpTraceClient(arg0), m_pyself(NULL)
        {}

    PyNs3UdpTraceClient__PythonHelper()
        : ns3::UdpTraceClient(), m_pyself(NULL)
        {}

    PyNs3UdpTraceClient__PythonHelper(ns3::Ipv4Address ip, uint16_t port, char *traceFile)
        : ns3::UdpTraceClient(ip, port, traceFile), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpTraceClient__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpTraceClient *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UdpTraceClient *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UdpTraceClient *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UdpTraceClient *self);
    inline void DoDispose__parent_caller()
    { ns3::UdpTraceClient::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UdpTraceClient__PythonHelper")
        .SetParent< ns3::UdpTraceClient > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UdpTraceClient__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UdpEchoClient *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpEchoClient;


extern PyTypeObject PyNs3UdpEchoClient_Type;

class PyNs3UdpEchoClient__PythonHelper : public ns3::UdpEchoClient
{
public:
    PyObject *m_pyself;
    PyNs3UdpEchoClient__PythonHelper(ns3::UdpEchoClient const & arg0)
        : ns3::UdpEchoClient(arg0), m_pyself(NULL)
        {}

    PyNs3UdpEchoClient__PythonHelper()
        : ns3::UdpEchoClient(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpEchoClient__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpEchoClient *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UdpEchoClient *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UdpEchoClient *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UdpEchoClient *self);
    inline void DoDispose__parent_caller()
    { ns3::UdpEchoClient::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UdpEchoClient__PythonHelper")
        .SetParent< ns3::UdpEchoClient > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UdpEchoClient__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UdpEchoServer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpEchoServer;


extern PyTypeObject PyNs3UdpEchoServer_Type;

class PyNs3UdpEchoServer__PythonHelper : public ns3::UdpEchoServer
{
public:
    PyObject *m_pyself;
    PyNs3UdpEchoServer__PythonHelper(ns3::UdpEchoServer const & arg0)
        : ns3::UdpEchoServer(arg0), m_pyself(NULL)
        {}

    PyNs3UdpEchoServer__PythonHelper()
        : ns3::UdpEchoServer(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UdpEchoServer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UdpEchoServer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UdpEchoServer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UdpEchoServer *self);
    inline void DoStart__parent_caller()
    { ns3::Application::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UdpEchoServer *self);
    inline void DoDispose__parent_caller()
    { ns3::UdpEchoServer::DoDispose(); }

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UdpEchoServer__PythonHelper")
        .SetParent< ns3::UdpEchoServer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UdpEchoServer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MeshWifiBeacon *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeshWifiBeacon;


extern PyTypeObject PyNs3MeshWifiBeacon_Type;

extern std::map<void*, PyObject*> PyNs3MeshWifiBeacon_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::MeshWifiInterfaceMacPlugin, ns3::empty, ns3::DefaultDeleter<ns3::MeshWifiInterfaceMacPlugin> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3MeshWifiInterfaceMacPlugin_Ns3Empty_Ns3DefaultDeleter__lt__ns3MeshWifiInterfaceMacPlugin__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::MeshInformationElementVector *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeshInformationElementVector;


extern PyTypeObject PyNs3MeshInformationElementVector_Type;

class PyNs3MeshInformationElementVector__PythonHelper : public ns3::MeshInformationElementVector
{
public:
    PyObject *m_pyself;
    PyNs3MeshInformationElementVector__PythonHelper()
        : ns3::MeshInformationElementVector(), m_pyself(NULL)
        {}

    PyNs3MeshInformationElementVector__PythonHelper(ns3::MeshInformationElementVector const & arg0)
        : ns3::MeshInformationElementVector(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MeshInformationElementVector__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MeshInformationElementVector *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t DeserializeSingleIe(ns3::Buffer::Iterator start);

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::MeshL2RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeshL2RoutingProtocol;


extern PyTypeObject PyNs3MeshL2RoutingProtocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::MeshWifiInterfaceMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeshWifiInterfaceMac;


extern PyTypeObject PyNs3MeshWifiInterfaceMac_Type;

class PyNs3MeshWifiInterfaceMac__PythonHelper : public ns3::MeshWifiInterfaceMac
{
public:
    PyObject *m_pyself;
    PyNs3MeshWifiInterfaceMac__PythonHelper(ns3::MeshWifiInterfaceMac const & arg0)
        : ns3::MeshWifiInterfaceMac(arg0), m_pyself(NULL)
        {}

    PyNs3MeshWifiInterfaceMac__PythonHelper()
        : ns3::MeshWifiInterfaceMac(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MeshWifiInterfaceMac__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MeshWifiInterfaceMac *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MeshWifiInterfaceMac *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to, ns3::Mac48Address from);

    virtual void Enqueue(ns3::Ptr< ns3::Packet const > packet, ns3::Mac48Address to);

    virtual void FinishConfigureStandard(ns3::WifiPhyStandard standard);

    virtual ns3::Time GetAckTimeout() const;

    virtual ns3::Mac48Address GetAddress() const;

    virtual ns3::Mac48Address GetBssid() const;

    virtual ns3::Time GetCtsTimeout() const;

    virtual ns3::Time GetEifsNoDifs() const;

    virtual ns3::Time GetPifs() const;

    virtual ns3::Time GetSifs() const;

    virtual ns3::Time GetSlot() const;

    virtual ns3::Ssid GetSsid() const;

    virtual void SetAckTimeout(ns3::Time ackTimeout);

    virtual void SetAddress(ns3::Mac48Address address);

    virtual void SetCtsTimeout(ns3::Time ctsTimeout);

    virtual void SetEifsNoDifs(ns3::Time eifsNoDifs);

    virtual void SetPifs(ns3::Time pifs);

    virtual void SetSifs(ns3::Time sifs);

    virtual void SetSlot(ns3::Time slotTime);

    virtual void SetSsid(ns3::Ssid ssid);

    virtual void SetWifiPhy(ns3::Ptr< ns3::WifiPhy > phy);

    virtual void SetWifiRemoteStationManager(ns3::Ptr< ns3::WifiRemoteStationManager > stationManager);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void ForwardUp(ns3::Ptr< ns3::Packet > packet, ns3::Mac48Address src, ns3::Mac48Address dst);

    virtual ns3::Time GetBasicBlockAckTimeout() const;

    virtual void SetCompressedBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual void SetBasicBlockAckTimeout(ns3::Time blockAckTimeout);

    virtual ns3::Time GetCompressedBlockAckTimeout() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MeshWifiInterfaceMac__PythonHelper")
        .SetParent< ns3::MeshWifiInterfaceMac > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MeshWifiInterfaceMac__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::MeshWifiInterfaceMacPlugin *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeshWifiInterfaceMacPlugin;


extern PyTypeObject PyNs3MeshWifiInterfaceMacPlugin_Type;


typedef struct {
    PyObject_HEAD
    ns3::MeshPointDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeshPointDevice;


extern PyTypeObject PyNs3MeshPointDevice_Type;

class PyNs3MeshPointDevice__PythonHelper : public ns3::MeshPointDevice
{
public:
    PyObject *m_pyself;
    PyNs3MeshPointDevice__PythonHelper(ns3::MeshPointDevice const & arg0)
        : ns3::MeshPointDevice(arg0), m_pyself(NULL)
        {}

    PyNs3MeshPointDevice__PythonHelper()
        : ns3::MeshPointDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3MeshPointDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3MeshPointDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3MeshPointDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3MeshPointDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address a);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3MeshPointDevice__PythonHelper")
        .SetParent< ns3::MeshPointDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3MeshPointDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::AdhocAlohaNoackIdealPhyHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AdhocAlohaNoackIdealPhyHelper;


extern PyTypeObject PyNs3AdhocAlohaNoackIdealPhyHelper_Type;

extern std::map<void*, PyObject*> PyNs3AdhocAlohaNoackIdealPhyHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AnimationInterface *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AnimationInterface;


extern PyTypeObject PyNs3AnimationInterface_Type;

extern std::map<void*, PyObject*> PyNs3AnimationInterface_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ApplicationContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ApplicationContainer;


extern PyTypeObject PyNs3ApplicationContainer_Type;

extern std::map<void*, PyObject*> PyNs3ApplicationContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelper;


extern PyTypeObject PyNs3AsciiTraceHelper_Type;

extern std::map<void*, PyObject*> PyNs3AsciiTraceHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForDevice;


extern PyTypeObject PyNs3AsciiTraceHelperForDevice_Type;

class PyNs3AsciiTraceHelperForDevice__PythonHelper : public ns3::AsciiTraceHelperForDevice
{
public:
    PyObject *m_pyself;
    PyNs3AsciiTraceHelperForDevice__PythonHelper(ns3::AsciiTraceHelperForDevice const & arg0)
        : ns3::AsciiTraceHelperForDevice(arg0), m_pyself(NULL)
        {}

    PyNs3AsciiTraceHelperForDevice__PythonHelper()
        : ns3::AsciiTraceHelperForDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3AsciiTraceHelperForDevice_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForIpv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForIpv4;


extern PyTypeObject PyNs3AsciiTraceHelperForIpv4_Type;

class PyNs3AsciiTraceHelperForIpv4__PythonHelper : public ns3::AsciiTraceHelperForIpv4
{
public:
    PyObject *m_pyself;
    PyNs3AsciiTraceHelperForIpv4__PythonHelper(ns3::AsciiTraceHelperForIpv4 const & arg0)
        : ns3::AsciiTraceHelperForIpv4(arg0), m_pyself(NULL)
        {}

    PyNs3AsciiTraceHelperForIpv4__PythonHelper()
        : ns3::AsciiTraceHelperForIpv4(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForIpv4__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiIpv4Internal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::Ipv4 > ipv4, uint32_t interface, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3AsciiTraceHelperForIpv4_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AsciiTraceHelperForIpv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AsciiTraceHelperForIpv6;


extern PyTypeObject PyNs3AsciiTraceHelperForIpv6_Type;

class PyNs3AsciiTraceHelperForIpv6__PythonHelper : public ns3::AsciiTraceHelperForIpv6
{
public:
    PyObject *m_pyself;
    PyNs3AsciiTraceHelperForIpv6__PythonHelper(ns3::AsciiTraceHelperForIpv6 const & arg0)
        : ns3::AsciiTraceHelperForIpv6(arg0), m_pyself(NULL)
        {}

    PyNs3AsciiTraceHelperForIpv6__PythonHelper()
        : ns3::AsciiTraceHelperForIpv6(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AsciiTraceHelperForIpv6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiIpv6Internal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::Ipv6 > ipv6, uint32_t interface, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3AsciiTraceHelperForIpv6_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::AthstatsHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AthstatsHelper;


extern PyTypeObject PyNs3AthstatsHelper_Type;

extern std::map<void*, PyObject*> PyNs3AthstatsHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::BridgeHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BridgeHelper;


extern PyTypeObject PyNs3BridgeHelper_Type;

extern std::map<void*, PyObject*> PyNs3BridgeHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::CsmaStarHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CsmaStarHelper;


extern PyTypeObject PyNs3CsmaStarHelper_Type;

extern std::map<void*, PyObject*> PyNs3CsmaStarHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::FlowMonitorHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlowMonitorHelper;


extern PyTypeObject PyNs3FlowMonitorHelper_Type;

extern std::map<void*, PyObject*> PyNs3FlowMonitorHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressHelper;


extern PyTypeObject PyNs3Ipv4AddressHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4AddressHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4InterfaceContainer;


extern PyTypeObject PyNs3Ipv4InterfaceContainer_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4InterfaceContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4RoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4RoutingHelper;


extern PyTypeObject PyNs3Ipv4RoutingHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ipv4RoutingHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv4StaticRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4StaticRoutingHelper;


extern PyTypeObject PyNs3Ipv4StaticRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressHelper;


extern PyTypeObject PyNs3Ipv6AddressHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6AddressHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6InterfaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6InterfaceContainer;


extern PyTypeObject PyNs3Ipv6InterfaceContainer_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6InterfaceContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6RoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6RoutingHelper;


extern PyTypeObject PyNs3Ipv6RoutingHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ipv6RoutingHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ipv6StaticRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6StaticRoutingHelper;


extern PyTypeObject PyNs3Ipv6StaticRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::MeshHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeshHelper;


extern PyTypeObject PyNs3MeshHelper_Type;

extern std::map<void*, PyObject*> PyNs3MeshHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::MobilityHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3MobilityHelper;


extern PyTypeObject PyNs3MobilityHelper_Type;

extern std::map<void*, PyObject*> PyNs3MobilityHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject PyNs3NetDeviceContainer_Type;

extern std::map<void*, PyObject*> PyNs3NetDeviceContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject PyNs3NodeContainer_Type;

extern std::map<void*, PyObject*> PyNs3NodeContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ns2MobilityHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ns2MobilityHelper;


extern PyTypeObject PyNs3Ns2MobilityHelper_Type;

extern std::map<void*, PyObject*> PyNs3Ns2MobilityHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::OlsrHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrHelper;


extern PyTypeObject PyNs3OlsrHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::OnOffHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OnOffHelper;


extern PyTypeObject PyNs3OnOffHelper_Type;

extern std::map<void*, PyObject*> PyNs3OnOffHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketSinkHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketSinkHelper;


extern PyTypeObject PyNs3PacketSinkHelper_Type;

extern std::map<void*, PyObject*> PyNs3PacketSinkHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PacketSocketHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketSocketHelper;


extern PyTypeObject PyNs3PacketSocketHelper_Type;

extern std::map<void*, PyObject*> PyNs3PacketSocketHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PcapHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelper;


extern PyTypeObject PyNs3PcapHelper_Type;

extern std::map<void*, PyObject*> PyNs3PcapHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForDevice;


extern PyTypeObject PyNs3PcapHelperForDevice_Type;

class PyNs3PcapHelperForDevice__PythonHelper : public ns3::PcapHelperForDevice
{
public:
    PyObject *m_pyself;
    PyNs3PcapHelperForDevice__PythonHelper(ns3::PcapHelperForDevice const & arg0)
        : ns3::PcapHelperForDevice(arg0), m_pyself(NULL)
        {}

    PyNs3PcapHelperForDevice__PythonHelper()
        : ns3::PcapHelperForDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3PcapHelperForDevice_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForIpv4 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForIpv4;


extern PyTypeObject PyNs3PcapHelperForIpv4_Type;

class PyNs3PcapHelperForIpv4__PythonHelper : public ns3::PcapHelperForIpv4
{
public:
    PyObject *m_pyself;
    PyNs3PcapHelperForIpv4__PythonHelper(ns3::PcapHelperForIpv4 const & arg0)
        : ns3::PcapHelperForIpv4(arg0), m_pyself(NULL)
        {}

    PyNs3PcapHelperForIpv4__PythonHelper()
        : ns3::PcapHelperForIpv4(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForIpv4__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnablePcapIpv4Internal(std::string prefix, ns3::Ptr< ns3::Ipv4 > ipv4, uint32_t interface, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3PcapHelperForIpv4_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PcapHelperForIpv6 *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PcapHelperForIpv6;


extern PyTypeObject PyNs3PcapHelperForIpv6_Type;

class PyNs3PcapHelperForIpv6__PythonHelper : public ns3::PcapHelperForIpv6
{
public:
    PyObject *m_pyself;
    PyNs3PcapHelperForIpv6__PythonHelper(ns3::PcapHelperForIpv6 const & arg0)
        : ns3::PcapHelperForIpv6(arg0), m_pyself(NULL)
        {}

    PyNs3PcapHelperForIpv6__PythonHelper()
        : ns3::PcapHelperForIpv6(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PcapHelperForIpv6__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnablePcapIpv6Internal(std::string prefix, ns3::Ptr< ns3::Ipv6 > ipv6, uint32_t interface, bool explicitFilename);
};

extern std::map<void*, PyObject*> PyNs3PcapHelperForIpv6_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Ping6Helper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ping6Helper;


extern PyTypeObject PyNs3Ping6Helper_Type;

extern std::map<void*, PyObject*> PyNs3Ping6Helper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PointToPointDumbbellHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointToPointDumbbellHelper;


extern PyTypeObject PyNs3PointToPointDumbbellHelper_Type;

extern std::map<void*, PyObject*> PyNs3PointToPointDumbbellHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PointToPointGridHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointToPointGridHelper;


extern PyTypeObject PyNs3PointToPointGridHelper_Type;

extern std::map<void*, PyObject*> PyNs3PointToPointGridHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::PointToPointHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointToPointHelper;


extern PyTypeObject PyNs3PointToPointHelper_Type;

class PyNs3PointToPointHelper__PythonHelper : public ns3::PointToPointHelper
{
public:
    PyObject *m_pyself;
    PyNs3PointToPointHelper__PythonHelper(ns3::PointToPointHelper const & arg0)
        : ns3::PointToPointHelper(arg0), m_pyself(NULL)
        {}

    PyNs3PointToPointHelper__PythonHelper()
        : ns3::PointToPointHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3PointToPointHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::PointToPointStarHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PointToPointStarHelper;


extern PyTypeObject PyNs3PointToPointStarHelper_Type;

extern std::map<void*, PyObject*> PyNs3PointToPointStarHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SpectrumAnalyzerHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumAnalyzerHelper;


extern PyTypeObject PyNs3SpectrumAnalyzerHelper_Type;

extern std::map<void*, PyObject*> PyNs3SpectrumAnalyzerHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SpectrumChannelHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumChannelHelper;


extern PyTypeObject PyNs3SpectrumChannelHelper_Type;

extern std::map<void*, PyObject*> PyNs3SpectrumChannelHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SpectrumPhyHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SpectrumPhyHelper;


extern PyTypeObject PyNs3SpectrumPhyHelper_Type;

extern std::map<void*, PyObject*> PyNs3SpectrumPhyHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::TopologyReaderHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TopologyReaderHelper;


extern PyTypeObject PyNs3TopologyReaderHelper_Type;

extern std::map<void*, PyObject*> PyNs3TopologyReaderHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UdpClientHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpClientHelper;


extern PyTypeObject PyNs3UdpClientHelper_Type;

extern std::map<void*, PyObject*> PyNs3UdpClientHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UdpEchoClientHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpEchoClientHelper;


extern PyTypeObject PyNs3UdpEchoClientHelper_Type;

extern std::map<void*, PyObject*> PyNs3UdpEchoClientHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UdpEchoServerHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpEchoServerHelper;


extern PyTypeObject PyNs3UdpEchoServerHelper_Type;

extern std::map<void*, PyObject*> PyNs3UdpEchoServerHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UdpServerHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpServerHelper;


extern PyTypeObject PyNs3UdpServerHelper_Type;

extern std::map<void*, PyObject*> PyNs3UdpServerHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UdpTraceClientHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UdpTraceClientHelper;


extern PyTypeObject PyNs3UdpTraceClientHelper_Type;

extern std::map<void*, PyObject*> PyNs3UdpTraceClientHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::V4PingHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3V4PingHelper;


extern PyTypeObject PyNs3V4PingHelper_Type;

extern std::map<void*, PyObject*> PyNs3V4PingHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WaveformGeneratorHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WaveformGeneratorHelper;


extern PyTypeObject PyNs3WaveformGeneratorHelper_Type;

extern std::map<void*, PyObject*> PyNs3WaveformGeneratorHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiHelper;


extern PyTypeObject PyNs3WifiHelper_Type;

extern std::map<void*, PyObject*> PyNs3WifiHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiMacHelper;


extern PyTypeObject PyNs3WifiMacHelper_Type;

class PyNs3WifiMacHelper__PythonHelper : public ns3::WifiMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiMacHelper__PythonHelper()
        : ns3::WifiMacHelper(), m_pyself(NULL)
        {}

    PyNs3WifiMacHelper__PythonHelper(ns3::WifiMacHelper const & arg0)
        : ns3::WifiMacHelper(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create() const;
};

extern std::map<void*, PyObject*> PyNs3WifiMacHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiPhyHelper;


extern PyTypeObject PyNs3WifiPhyHelper_Type;

class PyNs3WifiPhyHelper__PythonHelper : public ns3::WifiPhyHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiPhyHelper__PythonHelper()
        : ns3::WifiPhyHelper(), m_pyself(NULL)
        {}

    PyNs3WifiPhyHelper__PythonHelper(ns3::WifiPhyHelper const & arg0)
        : ns3::WifiPhyHelper(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiPhy > Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::WifiNetDevice > device) const;
};

extern std::map<void*, PyObject*> PyNs3WifiPhyHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WimaxHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WimaxHelper;


extern PyTypeObject PyNs3WimaxHelper_Type;

class PyNs3WimaxHelper__PythonHelper : public ns3::WimaxHelper
{
public:
    PyObject *m_pyself;
    PyNs3WimaxHelper__PythonHelper(ns3::WimaxHelper const & arg0)
        : ns3::WimaxHelper(arg0), m_pyself(NULL)
        {}

    PyNs3WimaxHelper__PythonHelper()
        : ns3::WimaxHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WimaxHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename, bool promiscuous);
};


typedef struct {
    PyObject_HEAD
    ns3::YansWifiChannelHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiChannelHelper;


extern PyTypeObject PyNs3YansWifiChannelHelper_Type;

extern std::map<void*, PyObject*> PyNs3YansWifiChannelHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::YansWifiPhyHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3YansWifiPhyHelper;


extern PyTypeObject PyNs3YansWifiPhyHelper_Type;

class PyNs3YansWifiPhyHelper__PythonHelper : public ns3::YansWifiPhyHelper
{
public:
    PyObject *m_pyself;
    PyNs3YansWifiPhyHelper__PythonHelper(ns3::YansWifiPhyHelper const & arg0)
        : ns3::YansWifiPhyHelper(arg0), m_pyself(NULL)
        {}

    PyNs3YansWifiPhyHelper__PythonHelper()
        : ns3::YansWifiPhyHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3YansWifiPhyHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiPhy > Create(ns3::Ptr< ns3::Node > node, ns3::Ptr< ns3::WifiNetDevice > device) const;

    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::AodvHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvHelper;


extern PyTypeObject PyNs3AodvHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::CsmaHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CsmaHelper;


extern PyTypeObject PyNs3CsmaHelper_Type;

class PyNs3CsmaHelper__PythonHelper : public ns3::CsmaHelper
{
public:
    PyObject *m_pyself;
    PyNs3CsmaHelper__PythonHelper(ns3::CsmaHelper const & arg0)
        : ns3::CsmaHelper(arg0), m_pyself(NULL)
        {}

    PyNs3CsmaHelper__PythonHelper()
        : ns3::CsmaHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CsmaHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiInternal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool explicitFilename);

    virtual void EnablePcapInternal(std::string prefix, ns3::Ptr< ns3::NetDevice > nd, bool promiscuous, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::InternetStackHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3InternetStackHelper;


extern PyTypeObject PyNs3InternetStackHelper_Type;

class PyNs3InternetStackHelper__PythonHelper : public ns3::InternetStackHelper
{
public:
    PyObject *m_pyself;
    PyNs3InternetStackHelper__PythonHelper()
        : ns3::InternetStackHelper(), m_pyself(NULL)
        {}

    PyNs3InternetStackHelper__PythonHelper(ns3::InternetStackHelper const & arg0)
        : ns3::InternetStackHelper(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3InternetStackHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void EnableAsciiIpv4Internal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::Ipv4 > ipv4, uint32_t interface, bool explicitFilename);

    virtual void EnableAsciiIpv6Internal(ns3::Ptr< ns3::OutputStreamWrapper > stream, std::string prefix, ns3::Ptr< ns3::Ipv6 > ipv6, uint32_t interface, bool explicitFilename);

    virtual void EnablePcapIpv4Internal(std::string prefix, ns3::Ptr< ns3::Ipv4 > ipv4, uint32_t interface, bool explicitFilename);

    virtual void EnablePcapIpv6Internal(std::string prefix, ns3::Ptr< ns3::Ipv6 > ipv6, uint32_t interface, bool explicitFilename);
};


typedef struct {
    PyObject_HEAD
    ns3::Ipv4GlobalRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4GlobalRoutingHelper;


extern PyTypeObject PyNs3Ipv4GlobalRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4ListRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4ListRoutingHelper;


extern PyTypeObject PyNs3Ipv4ListRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv4NixVectorHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4NixVectorHelper;


extern PyTypeObject PyNs3Ipv4NixVectorHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::Ipv6ListRoutingHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6ListRoutingHelper;


extern PyTypeObject PyNs3Ipv6ListRoutingHelper_Type;


typedef struct {
    PyObject_HEAD
    ns3::NqosWifiMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NqosWifiMacHelper;


extern PyTypeObject PyNs3NqosWifiMacHelper_Type;

class PyNs3NqosWifiMacHelper__PythonHelper : public ns3::NqosWifiMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3NqosWifiMacHelper__PythonHelper(ns3::NqosWifiMacHelper const & arg0)
        : ns3::NqosWifiMacHelper(arg0), m_pyself(NULL)
        {}

    PyNs3NqosWifiMacHelper__PythonHelper()
        : ns3::NqosWifiMacHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NqosWifiMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create() const;
};


typedef struct {
    PyObject_HEAD
    ns3::QosWifiMacHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3QosWifiMacHelper;


extern PyTypeObject PyNs3QosWifiMacHelper_Type;

class PyNs3QosWifiMacHelper__PythonHelper : public ns3::QosWifiMacHelper
{
public:
    PyObject *m_pyself;
    PyNs3QosWifiMacHelper__PythonHelper(ns3::QosWifiMacHelper const & arg0)
        : ns3::QosWifiMacHelper(arg0), m_pyself(NULL)
        {}

    PyNs3QosWifiMacHelper__PythonHelper()
        : ns3::QosWifiMacHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3QosWifiMacHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::WifiMac > Create() const;
};


typedef struct {
    PyObject_HEAD
    ns3::AthstatsWifiTraceSink *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AthstatsWifiTraceSink;


extern PyTypeObject PyNs3AthstatsWifiTraceSink_Type;


typedef struct {
    PyObject_HEAD
    ns3::CanvasLocation *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CanvasLocation;


extern PyTypeObject PyNs3CanvasLocation_Type;


typedef struct {
    PyObject_HEAD
    ns3::MeshStack *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3MeshStack;


extern PyTypeObject PyNs3MeshStack_Type;


typedef struct {
    PyObject_HEAD
    ns3::Dot11sStack *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sStack;


extern PyTypeObject PyNs3Dot11sStack_Type;


typedef struct {
    PyObject_HEAD
    ns3::FlameStack *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlameStack;


extern PyTypeObject PyNs3FlameStack_Type;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::dot11s::IeBeaconTimingUnit, ns3::empty, ns3::DefaultDeleter<ns3::dot11s::IeBeaconTimingUnit> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3Dot11sIeBeaconTimingUnit_Ns3Empty_Ns3DefaultDeleter__lt__ns3Dot11sIeBeaconTimingUnit__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::DeviceEnergyModelContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeviceEnergyModelContainer;


extern PyTypeObject PyNs3DeviceEnergyModelContainer_Type;

extern std::map<void*, PyObject*> PyNs3DeviceEnergyModelContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::DeviceEnergyModelHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeviceEnergyModelHelper;


extern PyTypeObject PyNs3DeviceEnergyModelHelper_Type;

extern std::map<void*, PyObject*> PyNs3DeviceEnergyModelHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::EnergySourceHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnergySourceHelper;


extern PyTypeObject PyNs3EnergySourceHelper_Type;

extern std::map<void*, PyObject*> PyNs3EnergySourceHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Reservation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Reservation;


extern PyTypeObject PyNs3Reservation_Type;

extern std::map<void*, PyObject*> PyNs3Reservation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::Tap *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tap;


extern PyTypeObject PyNs3Tap_Type;

extern std::map<void*, PyObject*> PyNs3Tap_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UanAddress *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanAddress;


extern PyTypeObject PyNs3UanAddress_Type;

extern std::map<void*, PyObject*> PyNs3UanAddress_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UanHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanHelper;


extern PyTypeObject PyNs3UanHelper_Type;

extern std::map<void*, PyObject*> PyNs3UanHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UanModesList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanModesList;


extern PyTypeObject PyNs3UanModesList_Type;

extern std::map<void*, PyObject*> PyNs3UanModesList_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UanPacketArrival *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPacketArrival;


extern PyTypeObject PyNs3UanPacketArrival_Type;

extern std::map<void*, PyObject*> PyNs3UanPacketArrival_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UanPdp *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPdp;


extern PyTypeObject PyNs3UanPdp_Type;

extern std::map<void*, PyObject*> PyNs3UanPdp_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UanPhyListener *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyListener;


extern PyTypeObject PyNs3UanPhyListener_Type;

class PyNs3UanPhyListener__PythonHelper : public ns3::UanPhyListener
{
public:
    PyObject *m_pyself;
    PyNs3UanPhyListener__PythonHelper()
        : ns3::UanPhyListener(), m_pyself(NULL)
        {}

    PyNs3UanPhyListener__PythonHelper(ns3::UanPhyListener const & arg0)
        : ns3::UanPhyListener(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyListener__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual void NotifyCcaEnd();

    virtual void NotifyCcaStart();

    virtual void NotifyRxEndError();

    virtual void NotifyRxEndOk();

    virtual void NotifyRxStart();

    virtual void NotifyTxStart(ns3::Time duration);
};

extern std::map<void*, PyObject*> PyNs3UanPhyListener_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UanTxMode *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanTxMode;


extern PyTypeObject PyNs3UanTxMode_Type;

extern std::map<void*, PyObject*> PyNs3UanTxMode_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::UanTxModeFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanTxModeFactory;


extern PyTypeObject PyNs3UanTxModeFactory_Type;

extern std::map<void*, PyObject*> PyNs3UanTxModeFactory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::WifiRadioEnergyModelHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRadioEnergyModelHelper;


extern PyTypeObject PyNs3WifiRadioEnergyModelHelper_Type;

class PyNs3WifiRadioEnergyModelHelper__PythonHelper : public ns3::WifiRadioEnergyModelHelper
{
public:
    PyObject *m_pyself;
    PyNs3WifiRadioEnergyModelHelper__PythonHelper(ns3::WifiRadioEnergyModelHelper const & arg0)
        : ns3::WifiRadioEnergyModelHelper(arg0), m_pyself(NULL)
        {}

    PyNs3WifiRadioEnergyModelHelper__PythonHelper()
        : ns3::WifiRadioEnergyModelHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiRadioEnergyModelHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::DeviceEnergyModel > DoInstall(ns3::Ptr< ns3::NetDevice > device, ns3::Ptr< ns3::EnergySource > source) const;
};


typedef struct {
    PyObject_HEAD
    ns3::BasicEnergySourceHelper *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BasicEnergySourceHelper;


extern PyTypeObject PyNs3BasicEnergySourceHelper_Type;

class PyNs3BasicEnergySourceHelper__PythonHelper : public ns3::BasicEnergySourceHelper
{
public:
    PyObject *m_pyself;
    PyNs3BasicEnergySourceHelper__PythonHelper(ns3::BasicEnergySourceHelper const & arg0)
        : ns3::BasicEnergySourceHelper(arg0), m_pyself(NULL)
        {}

    PyNs3BasicEnergySourceHelper__PythonHelper()
        : ns3::BasicEnergySourceHelper(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BasicEnergySourceHelper__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    virtual ns3::Ptr< ns3::EnergySource > DoInstall(ns3::Ptr< ns3::Node > node) const;
};


typedef struct {
    PyObject_HEAD
    ns3::UanHeaderCommon *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanHeaderCommon;


extern PyTypeObject PyNs3UanHeaderCommon_Type;

class PyNs3UanHeaderCommon__PythonHelper : public ns3::UanHeaderCommon
{
public:
    PyObject *m_pyself;
    PyNs3UanHeaderCommon__PythonHelper(ns3::UanHeaderCommon const & arg0)
        : ns3::UanHeaderCommon(arg0), m_pyself(NULL)
        {}

    PyNs3UanHeaderCommon__PythonHelper()
        : ns3::UanHeaderCommon(), m_pyself(NULL)
        {}

    PyNs3UanHeaderCommon__PythonHelper(ns3::UanAddress const src, ns3::UanAddress const dest, uint8_t type)
        : ns3::UanHeaderCommon(src, dest, type), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanHeaderCommon__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanHeaderCommon *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UanHeaderRcAck *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanHeaderRcAck;


extern PyTypeObject PyNs3UanHeaderRcAck_Type;

class PyNs3UanHeaderRcAck__PythonHelper : public ns3::UanHeaderRcAck
{
public:
    PyObject *m_pyself;
    PyNs3UanHeaderRcAck__PythonHelper(ns3::UanHeaderRcAck const & arg0)
        : ns3::UanHeaderRcAck(arg0), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcAck__PythonHelper()
        : ns3::UanHeaderRcAck(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanHeaderRcAck__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcAck *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UanHeaderRcCts *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanHeaderRcCts;


extern PyTypeObject PyNs3UanHeaderRcCts_Type;

class PyNs3UanHeaderRcCts__PythonHelper : public ns3::UanHeaderRcCts
{
public:
    PyObject *m_pyself;
    PyNs3UanHeaderRcCts__PythonHelper(ns3::UanHeaderRcCts const & arg0)
        : ns3::UanHeaderRcCts(arg0), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcCts__PythonHelper()
        : ns3::UanHeaderRcCts(), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcCts__PythonHelper(uint8_t frameNo, uint8_t retryNo, ns3::Time rtsTs, ns3::Time delay, ns3::UanAddress addr)
        : ns3::UanHeaderRcCts(frameNo, retryNo, rtsTs, delay, addr), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanHeaderRcCts__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcCts *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UanHeaderRcCtsGlobal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanHeaderRcCtsGlobal;


extern PyTypeObject PyNs3UanHeaderRcCtsGlobal_Type;

class PyNs3UanHeaderRcCtsGlobal__PythonHelper : public ns3::UanHeaderRcCtsGlobal
{
public:
    PyObject *m_pyself;
    PyNs3UanHeaderRcCtsGlobal__PythonHelper(ns3::UanHeaderRcCtsGlobal const & arg0)
        : ns3::UanHeaderRcCtsGlobal(arg0), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcCtsGlobal__PythonHelper()
        : ns3::UanHeaderRcCtsGlobal(), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcCtsGlobal__PythonHelper(ns3::Time wt, ns3::Time ts, uint16_t rate, uint16_t retryRate)
        : ns3::UanHeaderRcCtsGlobal(wt, ts, rate, retryRate), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanHeaderRcCtsGlobal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcCtsGlobal *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UanHeaderRcData *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanHeaderRcData;


extern PyTypeObject PyNs3UanHeaderRcData_Type;

class PyNs3UanHeaderRcData__PythonHelper : public ns3::UanHeaderRcData
{
public:
    PyObject *m_pyself;
    PyNs3UanHeaderRcData__PythonHelper(ns3::UanHeaderRcData const & arg0)
        : ns3::UanHeaderRcData(arg0), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcData__PythonHelper()
        : ns3::UanHeaderRcData(), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcData__PythonHelper(uint8_t frameNum, ns3::Time propDelay)
        : ns3::UanHeaderRcData(frameNum, propDelay), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanHeaderRcData__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcData *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UanHeaderRcRts *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanHeaderRcRts;


extern PyTypeObject PyNs3UanHeaderRcRts_Type;

class PyNs3UanHeaderRcRts__PythonHelper : public ns3::UanHeaderRcRts
{
public:
    PyObject *m_pyself;
    PyNs3UanHeaderRcRts__PythonHelper(ns3::UanHeaderRcRts const & arg0)
        : ns3::UanHeaderRcRts(arg0), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcRts__PythonHelper()
        : ns3::UanHeaderRcRts(), m_pyself(NULL)
        {}

    PyNs3UanHeaderRcRts__PythonHelper(uint8_t frameNo, uint8_t retryNo, uint8_t noFrames, uint16_t length, ns3::Time ts)
        : ns3::UanHeaderRcRts(frameNo, retryNo, noFrames, length, ts), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanHeaderRcRts__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanHeaderRcRts *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::UanMac *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanMac;


extern PyTypeObject PyNs3UanMac_Type;


typedef struct {
    PyObject_HEAD
    ns3::UanMacAloha *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanMacAloha;


extern PyTypeObject PyNs3UanMacAloha_Type;

class PyNs3UanMacAloha__PythonHelper : public ns3::UanMacAloha
{
public:
    PyObject *m_pyself;
    PyNs3UanMacAloha__PythonHelper(ns3::UanMacAloha const & arg0)
        : ns3::UanMacAloha(arg0), m_pyself(NULL)
        {}

    PyNs3UanMacAloha__PythonHelper()
        : ns3::UanMacAloha(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanMacAloha__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanMacAloha *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanMacAloha *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanMacAloha *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UanMacAloha *self);
    inline void DoDispose__parent_caller()
    { ns3::UanMacAloha::DoDispose(); }

    virtual void AttachPhy(ns3::Ptr< ns3::UanPhy > phy);

    virtual void Clear();

    virtual bool Enqueue(ns3::Ptr< ns3::Packet > pkt, ns3::Address const & dest, uint16_t protocolNumber);

    virtual ns3::Address GetAddress();

    virtual ns3::Address GetBroadcast() const;

    virtual void SetAddress(ns3::UanAddress addr);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanMacAloha__PythonHelper")
        .SetParent< ns3::UanMacAloha > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanMacAloha__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanMacCw *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanMacCw;


extern PyTypeObject PyNs3UanMacCw_Type;

class PyNs3UanMacCw__PythonHelper : public ns3::UanMacCw
{
public:
    PyObject *m_pyself;
    PyNs3UanMacCw__PythonHelper(ns3::UanMacCw const & arg0)
        : ns3::UanMacCw(arg0), m_pyself(NULL)
        {}

    PyNs3UanMacCw__PythonHelper()
        : ns3::UanMacCw(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanMacCw__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanMacCw *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanMacCw *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanMacCw *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UanMacCw *self);
    inline void DoDispose__parent_caller()
    { ns3::UanMacCw::DoDispose(); }

    virtual void AttachPhy(ns3::Ptr< ns3::UanPhy > phy);

    virtual void Clear();

    virtual bool Enqueue(ns3::Ptr< ns3::Packet > pkt, ns3::Address const & dest, uint16_t protocolNumber);

    virtual ns3::Address GetAddress();

    virtual ns3::Address GetBroadcast() const;

    virtual uint32_t GetCw();

    virtual ns3::Time GetSlotTime();

    virtual void NotifyCcaEnd();

    virtual void NotifyCcaStart();

    virtual void NotifyRxEndError();

    virtual void NotifyRxEndOk();

    virtual void NotifyRxStart();

    virtual void NotifyTxStart(ns3::Time duration);

    virtual void SetAddress(ns3::UanAddress addr);

    virtual void SetCw(uint32_t cw);

    virtual void SetSlotTime(ns3::Time duration);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanMacCw__PythonHelper")
        .SetParent< ns3::UanMacCw > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanMacCw__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanMacRc *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanMacRc;


extern PyTypeObject PyNs3UanMacRc_Type;

class PyNs3UanMacRc__PythonHelper : public ns3::UanMacRc
{
public:
    PyObject *m_pyself;
    PyNs3UanMacRc__PythonHelper(ns3::UanMacRc const & arg0)
        : ns3::UanMacRc(arg0), m_pyself(NULL)
        {}

    PyNs3UanMacRc__PythonHelper()
        : ns3::UanMacRc(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanMacRc__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanMacRc *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanMacRc *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanMacRc *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UanMacRc *self);
    inline void DoDispose__parent_caller()
    { ns3::UanMacRc::DoDispose(); }

    virtual void AttachPhy(ns3::Ptr< ns3::UanPhy > phy);

    virtual void Clear();

    virtual bool Enqueue(ns3::Ptr< ns3::Packet > pkt, ns3::Address const & dest, uint16_t protocolNumber);

    virtual ns3::Address GetAddress();

    virtual ns3::Address GetBroadcast() const;

    virtual void SetAddress(ns3::UanAddress addr);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanMacRc__PythonHelper")
        .SetParent< ns3::UanMacRc > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanMacRc__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanMacRcGw *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanMacRcGw;


extern PyTypeObject PyNs3UanMacRcGw_Type;

class PyNs3UanMacRcGw__PythonHelper : public ns3::UanMacRcGw
{
public:
    PyObject *m_pyself;
    PyNs3UanMacRcGw__PythonHelper(ns3::UanMacRcGw const & arg0)
        : ns3::UanMacRcGw(arg0), m_pyself(NULL)
        {}

    PyNs3UanMacRcGw__PythonHelper()
        : ns3::UanMacRcGw(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanMacRcGw__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanMacRcGw *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanMacRcGw *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanMacRcGw *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UanMacRcGw *self);
    inline void DoDispose__parent_caller()
    { ns3::UanMacRcGw::DoDispose(); }

    virtual void AttachPhy(ns3::Ptr< ns3::UanPhy > phy);

    virtual void Clear();

    virtual bool Enqueue(ns3::Ptr< ns3::Packet > pkt, ns3::Address const & dest, uint16_t protocolNumber);

    virtual ns3::Address GetAddress();

    virtual ns3::Address GetBroadcast() const;

    virtual void SetAddress(ns3::UanAddress addr);

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanMacRcGw__PythonHelper")
        .SetParent< ns3::UanMacRcGw > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanMacRcGw__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanNoiseModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanNoiseModel;


extern PyTypeObject PyNs3UanNoiseModel_Type;

class PyNs3UanNoiseModel__PythonHelper : public ns3::UanNoiseModel
{
public:
    PyObject *m_pyself;
    PyNs3UanNoiseModel__PythonHelper()
        : ns3::UanNoiseModel(), m_pyself(NULL)
        {}

    PyNs3UanNoiseModel__PythonHelper(ns3::UanNoiseModel const & arg0)
        : ns3::UanNoiseModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanNoiseModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanNoiseModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanNoiseModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanNoiseModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void Clear();

    virtual void DoDispose();

    virtual double GetNoiseDbHz(double fKhz) const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanNoiseModel__PythonHelper")
        .SetParent< ns3::UanNoiseModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanNoiseModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanNoiseModelDefault *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanNoiseModelDefault;


extern PyTypeObject PyNs3UanNoiseModelDefault_Type;

class PyNs3UanNoiseModelDefault__PythonHelper : public ns3::UanNoiseModelDefault
{
public:
    PyObject *m_pyself;
    PyNs3UanNoiseModelDefault__PythonHelper(ns3::UanNoiseModelDefault const & arg0)
        : ns3::UanNoiseModelDefault(arg0), m_pyself(NULL)
        {}

    PyNs3UanNoiseModelDefault__PythonHelper()
        : ns3::UanNoiseModelDefault(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanNoiseModelDefault__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanNoiseModelDefault *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanNoiseModelDefault *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanNoiseModelDefault *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual double GetNoiseDbHz(double fKhz) const;

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanNoiseModelDefault__PythonHelper")
        .SetParent< ns3::UanNoiseModelDefault > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanNoiseModelDefault__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPhy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhy;


extern PyTypeObject PyNs3UanPhy_Type;


typedef struct {
    PyObject_HEAD
    ns3::UanPhyCalcSinr *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyCalcSinr;


extern PyTypeObject PyNs3UanPhyCalcSinr_Type;

class PyNs3UanPhyCalcSinr__PythonHelper : public ns3::UanPhyCalcSinr
{
public:
    PyObject *m_pyself;
    PyNs3UanPhyCalcSinr__PythonHelper()
        : ns3::UanPhyCalcSinr(), m_pyself(NULL)
        {}

    PyNs3UanPhyCalcSinr__PythonHelper(ns3::UanPhyCalcSinr const & arg0)
        : ns3::UanPhyCalcSinr(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyCalcSinr__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPhyCalcSinr *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPhyCalcSinr *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPhyCalcSinr *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual double CalcSinrDb(ns3::Ptr< ns3::Packet > pkt, ns3::Time arrTime, double rxPowerDb, double ambNoiseDb, ns3::UanTxMode mode, ns3::UanPdp pdp, std::list< ns3::UanPacketArrival > const & arrivalList) const;

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPhyCalcSinr__PythonHelper")
        .SetParent< ns3::UanPhyCalcSinr > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPhyCalcSinr__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPhyCalcSinrDefault *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyCalcSinrDefault;


extern PyTypeObject PyNs3UanPhyCalcSinrDefault_Type;

class PyNs3UanPhyCalcSinrDefault__PythonHelper : public ns3::UanPhyCalcSinrDefault
{
public:
    PyObject *m_pyself;
    PyNs3UanPhyCalcSinrDefault__PythonHelper(ns3::UanPhyCalcSinrDefault const & arg0)
        : ns3::UanPhyCalcSinrDefault(arg0), m_pyself(NULL)
        {}

    PyNs3UanPhyCalcSinrDefault__PythonHelper()
        : ns3::UanPhyCalcSinrDefault(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyCalcSinrDefault__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPhyCalcSinrDefault *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPhyCalcSinrDefault *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPhyCalcSinrDefault *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual double CalcSinrDb(ns3::Ptr< ns3::Packet > pkt, ns3::Time arrTime, double rxPowerDb, double ambNoiseDb, ns3::UanTxMode mode, ns3::UanPdp pdp, std::list< ns3::UanPacketArrival > const & arrivalList) const;

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPhyCalcSinrDefault__PythonHelper")
        .SetParent< ns3::UanPhyCalcSinrDefault > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPhyCalcSinrDefault__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPhyCalcSinrDual *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyCalcSinrDual;


extern PyTypeObject PyNs3UanPhyCalcSinrDual_Type;

class PyNs3UanPhyCalcSinrDual__PythonHelper : public ns3::UanPhyCalcSinrDual
{
public:
    PyObject *m_pyself;
    PyNs3UanPhyCalcSinrDual__PythonHelper(ns3::UanPhyCalcSinrDual const & arg0)
        : ns3::UanPhyCalcSinrDual(arg0), m_pyself(NULL)
        {}

    PyNs3UanPhyCalcSinrDual__PythonHelper()
        : ns3::UanPhyCalcSinrDual(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyCalcSinrDual__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPhyCalcSinrDual *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPhyCalcSinrDual *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPhyCalcSinrDual *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual double CalcSinrDb(ns3::Ptr< ns3::Packet > pkt, ns3::Time arrTime, double rxPowerDb, double ambNoiseDb, ns3::UanTxMode mode, ns3::UanPdp pdp, std::list< ns3::UanPacketArrival > const & arrivalList) const;

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPhyCalcSinrDual__PythonHelper")
        .SetParent< ns3::UanPhyCalcSinrDual > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPhyCalcSinrDual__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPhyCalcSinrFhFsk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyCalcSinrFhFsk;


extern PyTypeObject PyNs3UanPhyCalcSinrFhFsk_Type;

class PyNs3UanPhyCalcSinrFhFsk__PythonHelper : public ns3::UanPhyCalcSinrFhFsk
{
public:
    PyObject *m_pyself;
    PyNs3UanPhyCalcSinrFhFsk__PythonHelper(ns3::UanPhyCalcSinrFhFsk const & arg0)
        : ns3::UanPhyCalcSinrFhFsk(arg0), m_pyself(NULL)
        {}

    PyNs3UanPhyCalcSinrFhFsk__PythonHelper()
        : ns3::UanPhyCalcSinrFhFsk(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyCalcSinrFhFsk__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPhyCalcSinrFhFsk *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPhyCalcSinrFhFsk *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPhyCalcSinrFhFsk *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual double CalcSinrDb(ns3::Ptr< ns3::Packet > pkt, ns3::Time arrTime, double rxPowerDb, double ambNoiseDb, ns3::UanTxMode mode, ns3::UanPdp pdp, std::list< ns3::UanPacketArrival > const & arrivalList) const;

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPhyCalcSinrFhFsk__PythonHelper")
        .SetParent< ns3::UanPhyCalcSinrFhFsk > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPhyCalcSinrFhFsk__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPhyDual *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyDual;


extern PyTypeObject PyNs3UanPhyDual_Type;


typedef struct {
    PyObject_HEAD
    ns3::UanPhyGen *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyGen;


extern PyTypeObject PyNs3UanPhyGen_Type;


typedef struct {
    PyObject_HEAD
    ns3::UanPhyPer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyPer;


extern PyTypeObject PyNs3UanPhyPer_Type;

class PyNs3UanPhyPer__PythonHelper : public ns3::UanPhyPer
{
public:
    PyObject *m_pyself;
    PyNs3UanPhyPer__PythonHelper()
        : ns3::UanPhyPer(), m_pyself(NULL)
        {}

    PyNs3UanPhyPer__PythonHelper(ns3::UanPhyPer const & arg0)
        : ns3::UanPhyPer(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyPer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPhyPer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPhyPer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPhyPer *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual double CalcPer(ns3::Ptr< ns3::Packet > pkt, double sinrDb, ns3::UanTxMode mode);

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPhyPer__PythonHelper")
        .SetParent< ns3::UanPhyPer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPhyPer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPhyPerGenDefault *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyPerGenDefault;


extern PyTypeObject PyNs3UanPhyPerGenDefault_Type;

class PyNs3UanPhyPerGenDefault__PythonHelper : public ns3::UanPhyPerGenDefault
{
public:
    PyObject *m_pyself;
    PyNs3UanPhyPerGenDefault__PythonHelper(ns3::UanPhyPerGenDefault const & arg0)
        : ns3::UanPhyPerGenDefault(arg0), m_pyself(NULL)
        {}

    PyNs3UanPhyPerGenDefault__PythonHelper()
        : ns3::UanPhyPerGenDefault(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyPerGenDefault__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPhyPerGenDefault *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPhyPerGenDefault *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPhyPerGenDefault *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual double CalcPer(ns3::Ptr< ns3::Packet > pkt, double sinrDb, ns3::UanTxMode mode);

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPhyPerGenDefault__PythonHelper")
        .SetParent< ns3::UanPhyPerGenDefault > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPhyPerGenDefault__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPhyPerUmodem *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPhyPerUmodem;


extern PyTypeObject PyNs3UanPhyPerUmodem_Type;

class PyNs3UanPhyPerUmodem__PythonHelper : public ns3::UanPhyPerUmodem
{
public:
    PyObject *m_pyself;
    PyNs3UanPhyPerUmodem__PythonHelper(ns3::UanPhyPerUmodem const & arg0)
        : ns3::UanPhyPerUmodem(arg0), m_pyself(NULL)
        {}

    PyNs3UanPhyPerUmodem__PythonHelper()
        : ns3::UanPhyPerUmodem(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPhyPerUmodem__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPhyPerUmodem *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPhyPerUmodem *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPhyPerUmodem *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual double CalcPer(ns3::Ptr< ns3::Packet > pkt, double sinrDb, ns3::UanTxMode mode);

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPhyPerUmodem__PythonHelper")
        .SetParent< ns3::UanPhyPerUmodem > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPhyPerUmodem__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPropModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPropModel;


extern PyTypeObject PyNs3UanPropModel_Type;

class PyNs3UanPropModel__PythonHelper : public ns3::UanPropModel
{
public:
    PyObject *m_pyself;
    PyNs3UanPropModel__PythonHelper()
        : ns3::UanPropModel(), m_pyself(NULL)
        {}

    PyNs3UanPropModel__PythonHelper(ns3::UanPropModel const & arg0)
        : ns3::UanPropModel(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPropModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPropModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPropModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPropModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::Time GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode);

    virtual double GetPathLossDb(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode txMode);

    virtual ns3::UanPdp GetPdp(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPropModel__PythonHelper")
        .SetParent< ns3::UanPropModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPropModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPropModelIdeal *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPropModelIdeal;


extern PyTypeObject PyNs3UanPropModelIdeal_Type;

class PyNs3UanPropModelIdeal__PythonHelper : public ns3::UanPropModelIdeal
{
public:
    PyObject *m_pyself;
    PyNs3UanPropModelIdeal__PythonHelper(ns3::UanPropModelIdeal const & arg0)
        : ns3::UanPropModelIdeal(arg0), m_pyself(NULL)
        {}

    PyNs3UanPropModelIdeal__PythonHelper()
        : ns3::UanPropModelIdeal(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPropModelIdeal__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPropModelIdeal *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPropModelIdeal *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPropModelIdeal *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual ns3::Time GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode);

    virtual double GetPathLossDb(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode);

    virtual ns3::UanPdp GetPdp(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode);

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPropModelIdeal__PythonHelper")
        .SetParent< ns3::UanPropModelIdeal > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPropModelIdeal__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanPropModelThorp *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanPropModelThorp;


extern PyTypeObject PyNs3UanPropModelThorp_Type;

class PyNs3UanPropModelThorp__PythonHelper : public ns3::UanPropModelThorp
{
public:
    PyObject *m_pyself;
    PyNs3UanPropModelThorp__PythonHelper(ns3::UanPropModelThorp const & arg0)
        : ns3::UanPropModelThorp(arg0), m_pyself(NULL)
        {}

    PyNs3UanPropModelThorp__PythonHelper()
        : ns3::UanPropModelThorp(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanPropModelThorp__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanPropModelThorp *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanPropModelThorp *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanPropModelThorp *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual ns3::Time GetDelay(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode);

    virtual double GetPathLossDb(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode);

    virtual ns3::UanPdp GetPdp(ns3::Ptr< ns3::MobilityModel > a, ns3::Ptr< ns3::MobilityModel > b, ns3::UanTxMode mode);

    virtual void Clear();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanPropModelThorp__PythonHelper")
        .SetParent< ns3::UanPropModelThorp > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanPropModelThorp__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanTransducer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanTransducer;


extern PyTypeObject PyNs3UanTransducer_Type;


typedef struct {
    PyObject_HEAD
    ns3::UanTransducerHd *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanTransducerHd;


extern PyTypeObject PyNs3UanTransducerHd_Type;


typedef struct {
    PyObject_HEAD
    ns3::DeviceEnergyModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeviceEnergyModel;


extern PyTypeObject PyNs3DeviceEnergyModel_Type;

class PyNs3DeviceEnergyModel__PythonHelper : public ns3::DeviceEnergyModel
{
public:
    PyObject *m_pyself;
    PyNs3DeviceEnergyModel__PythonHelper(ns3::DeviceEnergyModel const & arg0)
        : ns3::DeviceEnergyModel(arg0), m_pyself(NULL)
        {}

    PyNs3DeviceEnergyModel__PythonHelper()
        : ns3::DeviceEnergyModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3DeviceEnergyModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3DeviceEnergyModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3DeviceEnergyModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3DeviceEnergyModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3DeviceEnergyModel *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void ChangeState(int newState);

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual double GetTotalEnergyConsumption() const;

    virtual void HandleEnergyDepletion();

    virtual void SetEnergySource(ns3::Ptr< ns3::EnergySource > source);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual double DoGetCurrentA() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3DeviceEnergyModel__PythonHelper")
        .SetParent< ns3::DeviceEnergyModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3DeviceEnergyModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EnergySource *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnergySource;


extern PyTypeObject PyNs3EnergySource_Type;

class PyNs3EnergySource__PythonHelper : public ns3::EnergySource
{
public:
    PyObject *m_pyself;
    PyNs3EnergySource__PythonHelper(ns3::EnergySource const & arg0)
        : ns3::EnergySource(arg0), m_pyself(NULL)
        {}

    PyNs3EnergySource__PythonHelper()
        : ns3::EnergySource(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnergySource__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_CalculateTotalCurrent(PyNs3EnergySource *self);
    inline double CalculateTotalCurrent__parent_caller()
    { return ns3::EnergySource::CalculateTotalCurrent(); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EnergySource *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EnergySource *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_BreakDeviceEnergyModelRefCycle(PyNs3EnergySource *self);
    inline void BreakDeviceEnergyModelRefCycle__parent_caller()
    { ns3::EnergySource::BreakDeviceEnergyModelRefCycle(); }

    static PyObject * _wrap_DoStart(PyNs3EnergySource *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_NotifyEnergyDrained(PyNs3EnergySource *self);
    inline void NotifyEnergyDrained__parent_caller()
    { ns3::EnergySource::NotifyEnergyDrained(); }

    virtual void DecreaseRemainingEnergy(double energyJ);

    virtual double GetEnergyFraction();

    virtual double GetInitialEnergy() const;

    virtual double GetRemainingEnergy();

    virtual double GetSupplyVoltage() const;

    virtual void IncreaseRemainingEnergy(double energyJ);

    virtual void UpdateEnergySource();

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EnergySource__PythonHelper")
        .SetParent< ns3::EnergySource > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EnergySource__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::EnergySourceContainer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnergySourceContainer;


extern PyTypeObject PyNs3EnergySourceContainer_Type;

class PyNs3EnergySourceContainer__PythonHelper : public ns3::EnergySourceContainer
{
public:
    PyObject *m_pyself;
    PyNs3EnergySourceContainer__PythonHelper(ns3::EnergySourceContainer const & arg0)
        : ns3::EnergySourceContainer(arg0), m_pyself(NULL)
        {}

    PyNs3EnergySourceContainer__PythonHelper()
        : ns3::EnergySourceContainer(), m_pyself(NULL)
        {}

    PyNs3EnergySourceContainer__PythonHelper(ns3::Ptr< ns3::EnergySource > source)
        : ns3::EnergySourceContainer(source), m_pyself(NULL)
        {}

    PyNs3EnergySourceContainer__PythonHelper(std::string sourceName)
        : ns3::EnergySourceContainer(sourceName), m_pyself(NULL)
        {}

    PyNs3EnergySourceContainer__PythonHelper(ns3::EnergySourceContainer const & a, ns3::EnergySourceContainer const & b)
        : ns3::EnergySourceContainer(a, b), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3EnergySourceContainer__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3EnergySourceContainer *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3EnergySourceContainer *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DoDispose();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3EnergySourceContainer__PythonHelper")
        .SetParent< ns3::EnergySourceContainer > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3EnergySourceContainer__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanChannel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanChannel;


extern PyTypeObject PyNs3UanChannel_Type;

class PyNs3UanChannel__PythonHelper : public ns3::UanChannel
{
public:
    PyObject *m_pyself;
    PyNs3UanChannel__PythonHelper(ns3::UanChannel const & arg0)
        : ns3::UanChannel(arg0), m_pyself(NULL)
        {}

    PyNs3UanChannel__PythonHelper()
        : ns3::UanChannel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanChannel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanChannel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanChannel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanChannel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UanChannel *self);
    inline void DoDispose__parent_caller()
    { ns3::UanChannel::DoDispose(); }

    virtual ns3::Ptr< ns3::NetDevice > GetDevice(uint32_t i) const;

    virtual uint32_t GetNDevices() const;

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanChannel__PythonHelper")
        .SetParent< ns3::UanChannel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanChannel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::UanModesListChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanModesListChecker;


extern PyTypeObject PyNs3UanModesListChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::UanModesListValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanModesListValue;


extern PyTypeObject PyNs3UanModesListValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::UanNetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3UanNetDevice;


extern PyTypeObject PyNs3UanNetDevice_Type;

class PyNs3UanNetDevice__PythonHelper : public ns3::UanNetDevice
{
public:
    PyObject *m_pyself;
    PyNs3UanNetDevice__PythonHelper(ns3::UanNetDevice const & arg0)
        : ns3::UanNetDevice(arg0), m_pyself(NULL)
        {}

    PyNs3UanNetDevice__PythonHelper()
        : ns3::UanNetDevice(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3UanNetDevice__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3UanNetDevice *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3UanNetDevice *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3UanNetDevice *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    static PyObject * _wrap_DoDispose(PyNs3UanNetDevice *self);
    inline void DoDispose__parent_caller()
    { ns3::UanNetDevice::DoDispose(); }

    virtual ns3::Address GetAddress() const;

    virtual ns3::Address GetBroadcast() const;

    virtual ns3::Ptr< ns3::Channel > GetChannel() const;

    virtual uint32_t GetIfIndex() const;

    virtual uint16_t GetMtu() const;

    virtual ns3::Address GetMulticast(ns3::Ipv4Address multicastGroup) const;

    virtual ns3::Address GetMulticast(ns3::Ipv6Address addr) const;

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual bool IsBridge() const;

    virtual bool IsBroadcast() const;

    virtual bool IsLinkUp() const;

    virtual bool IsMulticast() const;

    virtual bool IsPointToPoint() const;

    virtual bool NeedsArp() const;

    virtual bool Send(ns3::Ptr< ns3::Packet > packet, ns3::Address const & dest, uint16_t protocolNumber);

    virtual bool SendFrom(ns3::Ptr< ns3::Packet > packet, ns3::Address const & source, ns3::Address const & dest, uint16_t protocolNumber);

    virtual void SetAddress(ns3::Address address);

    virtual void SetIfIndex(uint32_t const index);

    virtual bool SetMtu(uint16_t const mtu);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual bool SupportsSendFrom() const;

    virtual void DoDispose();

    virtual void ForwardUp(ns3::Ptr< ns3::Packet > pkt, ns3::UanAddress const & src);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3UanNetDevice__PythonHelper")
        .SetParent< ns3::UanNetDevice > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3UanNetDevice__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::WifiRadioEnergyModel *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3WifiRadioEnergyModel;


extern PyTypeObject PyNs3WifiRadioEnergyModel_Type;

class PyNs3WifiRadioEnergyModel__PythonHelper : public ns3::WifiRadioEnergyModel
{
public:
    PyObject *m_pyself;
    PyNs3WifiRadioEnergyModel__PythonHelper(ns3::WifiRadioEnergyModel const & arg0)
        : ns3::WifiRadioEnergyModel(arg0), m_pyself(NULL)
        {}

    PyNs3WifiRadioEnergyModel__PythonHelper()
        : ns3::WifiRadioEnergyModel(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3WifiRadioEnergyModel__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3WifiRadioEnergyModel *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3WifiRadioEnergyModel *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3WifiRadioEnergyModel *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void ChangeState(int newState);

    virtual ns3::Ptr< ns3::Node > GetNode() const;

    virtual double GetTotalEnergyConsumption() const;

    virtual void HandleEnergyDepletion();

    virtual void SetEnergySource(ns3::Ptr< ns3::EnergySource > source);

    virtual void SetNode(ns3::Ptr< ns3::Node > node);

    virtual void DoDispose();

    virtual double DoGetCurrentA() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3WifiRadioEnergyModel__PythonHelper")
        .SetParent< ns3::WifiRadioEnergyModel > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3WifiRadioEnergyModel__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::BasicEnergySource *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3BasicEnergySource;


extern PyTypeObject PyNs3BasicEnergySource_Type;

class PyNs3BasicEnergySource__PythonHelper : public ns3::BasicEnergySource
{
public:
    PyObject *m_pyself;
    PyNs3BasicEnergySource__PythonHelper(ns3::BasicEnergySource const & arg0)
        : ns3::BasicEnergySource(arg0), m_pyself(NULL)
        {}

    PyNs3BasicEnergySource__PythonHelper()
        : ns3::BasicEnergySource(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3BasicEnergySource__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3BasicEnergySource *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3BasicEnergySource *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    virtual void DecreaseRemainingEnergy(double energyJ);

    virtual double GetEnergyFraction();

    virtual double GetInitialEnergy() const;

    virtual double GetRemainingEnergy();

    virtual double GetSupplyVoltage() const;

    virtual void IncreaseRemainingEnergy(double energyJ);

    virtual void UpdateEnergySource();

    virtual void DoDispose();

    virtual void DoStart();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3BasicEnergySource__PythonHelper")
        .SetParent< ns3::BasicEnergySource > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3BasicEnergySource__PythonHelper);


typedef struct {
    PyObject_HEAD
    ::std::ostream *obj;
    PyBindGenWrapperFlags flags:8;
} PyStdOstream;


extern PyTypeObject PyStdOstream_Type;

extern std::map<void*, PyObject*> PyStdOstream_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ::std::ofstream *obj;
    PyBindGenWrapperFlags flags:8;
} PyStdOfstream;


extern PyTypeObject PyStdOfstream_Type;


typedef struct {
    PyObject_HEAD
    ns3::SpectrumConverterMap_t *obj;
} Pyns3__SpectrumConverterMap_t;


typedef struct {
    PyObject_HEAD
    Pyns3__SpectrumConverterMap_t *container;
    ns3::SpectrumConverterMap_t::iterator *iterator;
} Pyns3__SpectrumConverterMap_tIter;


extern PyTypeObject Pyns3__SpectrumConverterMap_t_Type;
extern PyTypeObject Pyns3__SpectrumConverterMap_tIter_Type;

int _wrap_convert_py2c__ns3__SpectrumConverterMap_t(PyObject *arg, ns3::SpectrumConverterMap_t *container);

typedef struct {
    PyObject_HEAD
    ns3::Bands *obj;
} Pyns3__Bands;


typedef struct {
    PyObject_HEAD
    Pyns3__Bands *container;
    ns3::Bands::iterator *iterator;
} Pyns3__BandsIter;


extern PyTypeObject Pyns3__Bands_Type;
extern PyTypeObject Pyns3__BandsIter_Type;

int _wrap_convert_py2c__ns3__Bands(PyObject *arg, ns3::Bands *container);

typedef struct {
    PyObject_HEAD
    ns3::olsr::MprSet *obj;
} Pyns3__olsr__MprSet;


typedef struct {
    PyObject_HEAD
    Pyns3__olsr__MprSet *container;
    ns3::olsr::MprSet::iterator *iterator;
} Pyns3__olsr__MprSetIter;


extern PyTypeObject Pyns3__olsr__MprSet_Type;
extern PyTypeObject Pyns3__olsr__MprSetIter_Type;

int _wrap_convert_py2c__ns3__olsr__MprSet(PyObject *arg, ns3::olsr::MprSet *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ipv4Address > *obj;
} Pystd__vector__lt___ns3__Ipv4Address___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ipv4Address___gt__ *container;
    std::vector< ns3::Ipv4Address >::iterator *iterator;
} Pystd__vector__lt___ns3__Ipv4Address___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ipv4Address___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ipv4Address___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ipv4Address___gt__(PyObject *arg, std::vector< ns3::Ipv4Address > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ipv6Address > *obj;
} Pystd__vector__lt___ns3__Ipv6Address___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ipv6Address___gt__ *container;
    std::vector< ns3::Ipv6Address >::iterator *iterator;
} Pystd__vector__lt___ns3__Ipv6Address___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ipv6Address___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ipv6Address___gt__(PyObject *arg, std::vector< ns3::Ipv6Address > *container);

typedef struct {
    PyObject_HEAD
    ns3::WifiModeList *obj;
} Pyns3__WifiModeList;


typedef struct {
    PyObject_HEAD
    Pyns3__WifiModeList *container;
    ns3::WifiModeList::iterator *iterator;
} Pyns3__WifiModeListIter;


extern PyTypeObject Pyns3__WifiModeList_Type;
extern PyTypeObject Pyns3__WifiModeListIter_Type;

int _wrap_convert_py2c__ns3__WifiModeList(PyObject *arg, ns3::WifiModeList *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::DlFramePrefixIe > *obj;
} Pystd__vector__lt___ns3__DlFramePrefixIe___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__DlFramePrefixIe___gt__ *container;
    std::vector< ns3::DlFramePrefixIe >::iterator *iterator;
} Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__DlFramePrefixIe___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__DlFramePrefixIe___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__DlFramePrefixIe___gt__(PyObject *arg, std::vector< ns3::DlFramePrefixIe > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::OfdmUlBurstProfile > *obj;
} Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__ *container;
    std::vector< ns3::OfdmUlBurstProfile >::iterator *iterator;
} Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__OfdmUlBurstProfile___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__OfdmUlBurstProfile___gt__(PyObject *arg, std::vector< ns3::OfdmUlBurstProfile > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::OfdmUlMapIe > *obj;
} Pystd__list__lt___ns3__OfdmUlMapIe___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__OfdmUlMapIe___gt__ *container;
    std::list< ns3::OfdmUlMapIe >::iterator *iterator;
} Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__OfdmUlMapIe___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__OfdmUlMapIe___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__OfdmUlMapIe___gt__(PyObject *arg, std::list< ns3::OfdmUlMapIe > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::OfdmDlBurstProfile > *obj;
} Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__ *container;
    std::vector< ns3::OfdmDlBurstProfile >::iterator *iterator;
} Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__OfdmDlBurstProfile___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__OfdmDlBurstProfile___gt__(PyObject *arg, std::vector< ns3::OfdmDlBurstProfile > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::OfdmDlMapIe > *obj;
} Pystd__list__lt___ns3__OfdmDlMapIe___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__OfdmDlMapIe___gt__ *container;
    std::list< ns3::OfdmDlMapIe >::iterator *iterator;
} Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__OfdmDlMapIe___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__OfdmDlMapIe___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__OfdmDlMapIe___gt__(PyObject *arg, std::list< ns3::OfdmDlMapIe > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, ns3::FlowMonitor::FlowStats > *obj;
} Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__ *container;
    std::map< unsigned int, ns3::FlowMonitor::FlowStats >::iterator *iterator;
} Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__ns3__FlowMonitor__FlowStats___gt__(PyObject *arg, std::map< unsigned int, ns3::FlowMonitor::FlowStats > *container);

typedef struct {
    PyObject_HEAD
    std::map< unsigned int, ns3::FlowProbe::FlowStats > *obj;
} Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__ *container;
    std::map< unsigned int, ns3::FlowProbe::FlowStats >::iterator *iterator;
} Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__Iter;


extern PyTypeObject Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt___Type;
extern PyTypeObject Pystd__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___unsigned_int__ns3__FlowProbe__FlowStats___gt__(PyObject *arg, std::map< unsigned int, ns3::FlowProbe::FlowStats > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned int > *obj;
} Pystd__vector__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_int___gt__ *container;
    std::vector< unsigned int >::iterator *iterator;
} Pystd__vector__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_int___gt__(PyObject *arg, std::vector< unsigned int > *container);

typedef struct {
    PyObject_HEAD
    std::vector< bool > *obj;
} Pystd__vector__lt___bool___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___bool___gt__ *container;
    std::vector< bool >::iterator *iterator;
} Pystd__vector__lt___bool___gt__Iter;


extern PyTypeObject Pystd__vector__lt___bool___gt___Type;
extern PyTypeObject Pystd__vector__lt___bool___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___bool___gt__(PyObject *arg, std::vector< bool > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Tap > *obj;
} Pystd__vector__lt___ns3__Tap___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Tap___gt__ *container;
    std::vector< ns3::Tap >::iterator *iterator;
} Pystd__vector__lt___ns3__Tap___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Tap___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Tap___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Tap___gt__(PyObject *arg, std::vector< ns3::Tap > *container);

typedef struct {
    PyObject_HEAD
    std::vector< double > *obj;
} Pystd__vector__lt___double___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___double___gt__ *container;
    std::vector< double >::iterator *iterator;
} Pystd__vector__lt___double___gt__Iter;


extern PyTypeObject Pystd__vector__lt___double___gt___Type;
extern PyTypeObject Pystd__vector__lt___double___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___double___gt__(PyObject *arg, std::vector< double > *container);

typedef struct {
    PyObject_HEAD
    ns3::bvec *obj;
} Pyns3__bvec;


typedef struct {
    PyObject_HEAD
    Pyns3__bvec *container;
    ns3::bvec::iterator *iterator;
} Pyns3__bvecIter;


extern PyTypeObject Pyns3__bvec_Type;
extern PyTypeObject Pyns3__bvecIter_Type;

int _wrap_convert_py2c__ns3__bvec(PyObject *arg, ns3::bvec *container);

typedef struct {
    PyObject_HEAD
    std::map< std::string, std::string > *obj;
} Pystd__map__lt___std__string__std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___std__string__std__string___gt__ *container;
    std::map< std::string, std::string >::iterator *iterator;
} Pystd__map__lt___std__string__std__string___gt__Iter;


extern PyTypeObject Pystd__map__lt___std__string__std__string___gt___Type;
extern PyTypeObject Pystd__map__lt___std__string__std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(PyObject *arg, std::map< std::string, std::string > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::UanPacketArrival > *obj;
} Pystd__list__lt___ns3__UanPacketArrival___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__UanPacketArrival___gt__ *container;
    std::list< ns3::UanPacketArrival >::iterator *iterator;
} Pystd__list__lt___ns3__UanPacketArrival___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__UanPacketArrival___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__UanPacketArrival___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__UanPacketArrival___gt__(PyObject *arg, std::list< ns3::UanPacketArrival > *container);

typedef struct {
    PyObject_HEAD
    std::vector< unsigned long long > *obj;
} Pystd__vector__lt___unsigned_long_long___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___unsigned_long_long___gt__ *container;
    std::vector< unsigned long long >::iterator *iterator;
} Pystd__vector__lt___unsigned_long_long___gt__Iter;


extern PyTypeObject Pystd__vector__lt___unsigned_long_long___gt___Type;
extern PyTypeObject Pystd__vector__lt___unsigned_long_long___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___unsigned_long_long___gt__(PyObject *arg, std::vector< unsigned long long > *container);

typedef struct {
    PyObject_HEAD
    std::list< unsigned int > *obj;
} Pystd__list__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___unsigned_int___gt__ *container;
    std::list< unsigned int >::iterator *iterator;
} Pystd__list__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__list__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__list__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___unsigned_int___gt__(PyObject *arg, std::list< unsigned int > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Config::MatchContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConfigMatchContainer;


extern PyTypeObject PyNs3ConfigMatchContainer_Type;

extern std::map<void*, PyObject*> PyNs3ConfigMatchContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::Object > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::Object > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__Object___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::Object > > *container);

typedef struct {
    PyObject_HEAD
    std::vector< std::string > *obj;
} Pystd__vector__lt___std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___std__string___gt__ *container;
    std::vector< std::string >::iterator *iterator;
} Pystd__vector__lt___std__string___gt__Iter;


extern PyTypeObject Pystd__vector__lt___std__string___gt___Type;
extern PyTypeObject Pystd__vector__lt___std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___std__string___gt__(PyObject *arg, std::vector< std::string > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::aodv::DuplicatePacketDetection *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvDuplicatePacketDetection;


extern PyTypeObject PyNs3AodvDuplicatePacketDetection_Type;

extern std::map<void*, PyObject*> PyNs3AodvDuplicatePacketDetection_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::aodv::IdCache *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvIdCache;


extern PyTypeObject PyNs3AodvIdCache_Type;

extern std::map<void*, PyObject*> PyNs3AodvIdCache_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::aodv::Neighbors *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvNeighbors;


extern PyTypeObject PyNs3AodvNeighbors_Type;

extern std::map<void*, PyObject*> PyNs3AodvNeighbors_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::aodv::Neighbors::Neighbor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvNeighborsNeighbor;


extern PyTypeObject PyNs3AodvNeighborsNeighbor_Type;

extern std::map<void*, PyObject*> PyNs3AodvNeighborsNeighbor_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::aodv::QueueEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvQueueEntry;


extern PyTypeObject PyNs3AodvQueueEntry_Type;

extern std::map<void*, PyObject*> PyNs3AodvQueueEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::aodv::RequestQueue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvRequestQueue;


extern PyTypeObject PyNs3AodvRequestQueue_Type;

extern std::map<void*, PyObject*> PyNs3AodvRequestQueue_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::aodv::RerrHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvRerrHeader;


extern PyTypeObject PyNs3AodvRerrHeader_Type;

class PyNs3AodvRerrHeader__PythonHelper : public ns3::aodv::RerrHeader
{
public:
    PyObject *m_pyself;
    PyNs3AodvRerrHeader__PythonHelper(ns3::aodv::RerrHeader const & arg0)
        : ns3::aodv::RerrHeader(arg0), m_pyself(NULL)
        {}

    PyNs3AodvRerrHeader__PythonHelper()
        : ns3::aodv::RerrHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AodvRerrHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AodvRerrHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator i) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::aodv::RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvRoutingProtocol;


extern PyTypeObject PyNs3AodvRoutingProtocol_Type;
extern PyTypeObject PyNs3AodvRoutingProtocolMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::aodv::RoutingTable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvRoutingTable;


extern PyTypeObject PyNs3AodvRoutingTable_Type;

extern std::map<void*, PyObject*> PyNs3AodvRoutingTable_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::aodv::RoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvRoutingTableEntry;


extern PyTypeObject PyNs3AodvRoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3AodvRoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::aodv::RrepAckHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvRrepAckHeader;


extern PyTypeObject PyNs3AodvRrepAckHeader_Type;

class PyNs3AodvRrepAckHeader__PythonHelper : public ns3::aodv::RrepAckHeader
{
public:
    PyObject *m_pyself;
    PyNs3AodvRrepAckHeader__PythonHelper(ns3::aodv::RrepAckHeader const & arg0)
        : ns3::aodv::RrepAckHeader(arg0), m_pyself(NULL)
        {}

    PyNs3AodvRrepAckHeader__PythonHelper()
        : ns3::aodv::RrepAckHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AodvRrepAckHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AodvRrepAckHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::aodv::RrepHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvRrepHeader;


extern PyTypeObject PyNs3AodvRrepHeader_Type;

class PyNs3AodvRrepHeader__PythonHelper : public ns3::aodv::RrepHeader
{
public:
    PyObject *m_pyself;
    PyNs3AodvRrepHeader__PythonHelper(ns3::aodv::RrepHeader const & arg0)
        : ns3::aodv::RrepHeader(arg0), m_pyself(NULL)
        {}

    PyNs3AodvRrepHeader__PythonHelper(uint8_t prefixSize, uint8_t hopCount, ns3::Ipv4Address dst, uint32_t dstSeqNo, ns3::Ipv4Address origin, ns3::Time lifetime)
        : ns3::aodv::RrepHeader(prefixSize, hopCount, dst, dstSeqNo, origin, lifetime), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AodvRrepHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AodvRrepHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::aodv::RreqHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvRreqHeader;


extern PyTypeObject PyNs3AodvRreqHeader_Type;

class PyNs3AodvRreqHeader__PythonHelper : public ns3::aodv::RreqHeader
{
public:
    PyObject *m_pyself;
    PyNs3AodvRreqHeader__PythonHelper(ns3::aodv::RreqHeader const & arg0)
        : ns3::aodv::RreqHeader(arg0), m_pyself(NULL)
        {}

    PyNs3AodvRreqHeader__PythonHelper(uint8_t flags, uint8_t reserved, uint8_t hopCount, uint32_t requestID, ns3::Ipv4Address dst, uint32_t dstSeqNo, ns3::Ipv4Address origin, uint32_t originSeqNo)
        : ns3::aodv::RreqHeader(flags, reserved, hopCount, requestID, dst, dstSeqNo, origin, originSeqNo), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AodvRreqHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AodvRreqHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::aodv::TypeHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3AodvTypeHeader;


extern PyTypeObject PyNs3AodvTypeHeader_Type;

class PyNs3AodvTypeHeader__PythonHelper : public ns3::aodv::TypeHeader
{
public:
    PyObject *m_pyself;
    PyNs3AodvTypeHeader__PythonHelper(ns3::aodv::TypeHeader const & arg0)
        : ns3::aodv::TypeHeader(arg0), m_pyself(NULL)
        {}

    PyNs3AodvTypeHeader__PythonHelper(ns3::aodv::MessageType t)
        : ns3::aodv::TypeHeader(t), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3AodvTypeHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3AodvTypeHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    std::map< ns3::Ipv4Address, unsigned int > *obj;
} Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__ *container;
    std::map< ns3::Ipv4Address, unsigned int >::iterator *iterator;
} Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter;


extern PyTypeObject Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt___Type;
extern PyTypeObject Pystd__map__lt___ns3__Ipv4Address__unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___ns3__Ipv4Address__unsigned_int___gt__(PyObject *arg, std::map< ns3::Ipv4Address, unsigned int > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::dot11s::Dot11sMeshCapability *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sDot11sMeshCapability;


extern PyTypeObject PyNs3Dot11sDot11sMeshCapability_Type;

extern std::map<void*, PyObject*> PyNs3Dot11sDot11sMeshCapability_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::dot11s::HwmpProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sHwmpProtocol;


extern PyTypeObject PyNs3Dot11sHwmpProtocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::dot11s::HwmpProtocol::FailedDestination *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sHwmpProtocolFailedDestination;


extern PyTypeObject PyNs3Dot11sHwmpProtocolFailedDestination_Type;

extern std::map<void*, PyObject*> PyNs3Dot11sHwmpProtocolFailedDestination_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::dot11s::IeBeaconTiming *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sIeBeaconTiming;


extern PyTypeObject PyNs3Dot11sIeBeaconTiming_Type;


typedef struct {
    PyObject_HEAD
    ns3::dot11s::IeBeaconTimingUnit *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sIeBeaconTimingUnit;


extern PyTypeObject PyNs3Dot11sIeBeaconTimingUnit_Type;


typedef struct {
    PyObject_HEAD
    ns3::dot11s::IeConfiguration *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sIeConfiguration;


extern PyTypeObject PyNs3Dot11sIeConfiguration_Type;


typedef struct {
    PyObject_HEAD
    ns3::dot11s::IeMeshId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sIeMeshId;


extern PyTypeObject PyNs3Dot11sIeMeshId_Type;


typedef struct {
    PyObject_HEAD
    ns3::dot11s::IeMeshIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sIeMeshIdChecker;


extern PyTypeObject PyNs3Dot11sIeMeshIdChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::dot11s::IeMeshIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sIeMeshIdValue;


extern PyTypeObject PyNs3Dot11sIeMeshIdValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::dot11s::IePeerManagement *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sIePeerManagement;


extern PyTypeObject PyNs3Dot11sIePeerManagement_Type;


typedef struct {
    PyObject_HEAD
    ns3::dot11s::PeerLink *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sPeerLink;


extern PyTypeObject PyNs3Dot11sPeerLink_Type;

class PyNs3Dot11sPeerLink__PythonHelper : public ns3::dot11s::PeerLink
{
public:
    PyObject *m_pyself;
    PyNs3Dot11sPeerLink__PythonHelper()
        : ns3::dot11s::PeerLink(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Dot11sPeerLink__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Dot11sPeerLink *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Dot11sPeerLink *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Dot11sPeerLink *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Dot11sPeerLink__PythonHelper")
        .SetParent< ns3::dot11s::PeerLink > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Dot11sPeerLink__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::dot11s::PeerManagementProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Dot11sPeerManagementProtocol;


extern PyTypeObject PyNs3Dot11sPeerManagementProtocol_Type;

class PyNs3Dot11sPeerManagementProtocol__PythonHelper : public ns3::dot11s::PeerManagementProtocol
{
public:
    PyObject *m_pyself;
    PyNs3Dot11sPeerManagementProtocol__PythonHelper()
        : ns3::dot11s::PeerManagementProtocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Dot11sPeerManagementProtocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3Dot11sPeerManagementProtocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3Dot11sPeerManagementProtocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoStart(PyNs3Dot11sPeerManagementProtocol *self);
    inline void DoStart__parent_caller()
    { ns3::Object::DoStart(); }

    virtual void DoDispose();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoStart();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3Dot11sPeerManagementProtocol__PythonHelper")
        .SetParent< ns3::dot11s::PeerManagementProtocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3Dot11sPeerManagementProtocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    std::vector< ns3::Mac48Address > *obj;
} Pystd__vector__lt___ns3__Mac48Address___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Mac48Address___gt__ *container;
    std::vector< ns3::Mac48Address >::iterator *iterator;
} Pystd__vector__lt___ns3__Mac48Address___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Mac48Address___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Mac48Address___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Mac48Address___gt__(PyObject *arg, std::vector< ns3::Mac48Address > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::flame::FlameProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlameFlameProtocol;


extern PyTypeObject PyNs3FlameFlameProtocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::flame::FlameTag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3FlameFlameTag;


extern PyTypeObject PyNs3FlameFlameTag_Type;

class PyNs3FlameFlameTag__PythonHelper : public ns3::flame::FlameTag
{
public:
    PyObject *m_pyself;
    PyNs3FlameFlameTag__PythonHelper(ns3::flame::FlameTag const & arg0)
        : ns3::flame::FlameTag(arg0), m_pyself(NULL)
        {}

    PyNs3FlameFlameTag__PythonHelper(ns3::Mac48Address a)
        : ns3::flame::FlameTag(a), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3FlameFlameTag__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3FlameFlameTag *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual void Deserialize(ns3::TagBuffer i);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::TagBuffer i) const;

    virtual void NotifyConstructionCompleted();
};

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::olsr::Association *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrAssociation;


extern PyTypeObject PyNs3OlsrAssociation_Type;

extern std::map<void*, PyObject*> PyNs3OlsrAssociation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::AssociationTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrAssociationTuple;


extern PyTypeObject PyNs3OlsrAssociationTuple_Type;

extern std::map<void*, PyObject*> PyNs3OlsrAssociationTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::DuplicateTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrDuplicateTuple;


extern PyTypeObject PyNs3OlsrDuplicateTuple_Type;

extern std::map<void*, PyObject*> PyNs3OlsrDuplicateTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::IfaceAssocTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrIfaceAssocTuple;


extern PyTypeObject PyNs3OlsrIfaceAssocTuple_Type;

extern std::map<void*, PyObject*> PyNs3OlsrIfaceAssocTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::LinkTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrLinkTuple;


extern PyTypeObject PyNs3OlsrLinkTuple_Type;

extern std::map<void*, PyObject*> PyNs3OlsrLinkTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::MessageHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrMessageHeader;


extern PyTypeObject PyNs3OlsrMessageHeader_Type;

class PyNs3OlsrMessageHeader__PythonHelper : public ns3::olsr::MessageHeader
{
public:
    PyObject *m_pyself;
    PyNs3OlsrMessageHeader__PythonHelper(ns3::olsr::MessageHeader const & arg0)
        : ns3::olsr::MessageHeader(arg0), m_pyself(NULL)
        {}

    PyNs3OlsrMessageHeader__PythonHelper()
        : ns3::olsr::MessageHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OlsrMessageHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3OlsrMessageHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::olsr::MessageHeader::Hello *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrMessageHeaderHello;


extern PyTypeObject PyNs3OlsrMessageHeaderHello_Type;

extern std::map<void*, PyObject*> PyNs3OlsrMessageHeaderHello_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::MessageHeader::Hello::LinkMessage *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrMessageHeaderHelloLinkMessage;


extern PyTypeObject PyNs3OlsrMessageHeaderHelloLinkMessage_Type;

extern std::map<void*, PyObject*> PyNs3OlsrMessageHeaderHelloLinkMessage_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::MessageHeader::Hna *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrMessageHeaderHna;


extern PyTypeObject PyNs3OlsrMessageHeaderHna_Type;

extern std::map<void*, PyObject*> PyNs3OlsrMessageHeaderHna_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::MessageHeader::Hna::Association *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrMessageHeaderHnaAssociation;


extern PyTypeObject PyNs3OlsrMessageHeaderHnaAssociation_Type;

extern std::map<void*, PyObject*> PyNs3OlsrMessageHeaderHnaAssociation_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::MessageHeader::Mid *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrMessageHeaderMid;


extern PyTypeObject PyNs3OlsrMessageHeaderMid_Type;

extern std::map<void*, PyObject*> PyNs3OlsrMessageHeaderMid_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::MessageHeader::Tc *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrMessageHeaderTc;


extern PyTypeObject PyNs3OlsrMessageHeaderTc_Type;

extern std::map<void*, PyObject*> PyNs3OlsrMessageHeaderTc_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::MprSelectorTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrMprSelectorTuple;


extern PyTypeObject PyNs3OlsrMprSelectorTuple_Type;

extern std::map<void*, PyObject*> PyNs3OlsrMprSelectorTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::NeighborTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrNeighborTuple;


extern PyTypeObject PyNs3OlsrNeighborTuple_Type;

extern std::map<void*, PyObject*> PyNs3OlsrNeighborTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::OlsrMprTestCase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrOlsrMprTestCase;


extern PyTypeObject PyNs3OlsrOlsrMprTestCase_Type;

class PyNs3OlsrOlsrMprTestCase__PythonHelper : public ns3::olsr::OlsrMprTestCase
{
public:
    PyObject *m_pyself;
    PyNs3OlsrOlsrMprTestCase__PythonHelper()
        : ns3::olsr::OlsrMprTestCase(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OlsrOlsrMprTestCase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_DoReportTestFailure(PyNs3OlsrOlsrMprTestCase *self, PyObject *args, PyObject *kwargs);
    inline void DoReportTestFailure__parent_caller(std::string cond, std::string actual, std::string limit, std::string message, std::string file, int32_t line)
    { ns3::TestCase::DoReportTestFailure(cond, actual, limit, message, file, line); }

    static PyObject * _wrap_DoSetup(PyNs3OlsrOlsrMprTestCase *self);
    inline void DoSetup__parent_caller()
    { ns3::TestCase::DoSetup(); }

    static PyObject * _wrap_DoReportCaseFailure(PyNs3OlsrOlsrMprTestCase *self);
    inline void DoReportCaseFailure__parent_caller()
    { ns3::TestCase::DoReportCaseFailure(); }

    static PyObject * _wrap_DoReportCaseSuccess(PyNs3OlsrOlsrMprTestCase *self);
    inline void DoReportCaseSuccess__parent_caller()
    { ns3::TestCase::DoReportCaseSuccess(); }

    static PyObject * _wrap_DoReportStart(PyNs3OlsrOlsrMprTestCase *self);
    inline void DoReportStart__parent_caller()
    { ns3::TestCase::DoReportStart(); }

    static PyObject * _wrap_DoReportEnd(PyNs3OlsrOlsrMprTestCase *self);
    inline void DoReportEnd__parent_caller()
    { ns3::TestCase::DoReportEnd(); }

    static PyObject * _wrap_DoTeardown(PyNs3OlsrOlsrMprTestCase *self);
    inline void DoTeardown__parent_caller()
    { ns3::TestCase::DoTeardown(); }

    virtual bool DoRun();

    virtual void DoReportStart();

    virtual void DoReportCaseSuccess();

    virtual void DoReportCaseFailure();

    virtual void DoReportTestFailure(std::string cond, std::string actual, std::string limit, std::string message, std::string file, int32_t line);

    virtual void DoReportEnd();

    virtual void DoSetup();

    virtual void DoTeardown();
};


typedef struct {
    PyObject_HEAD
    ns3::olsr::PacketHeader *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrPacketHeader;


extern PyTypeObject PyNs3OlsrPacketHeader_Type;

class PyNs3OlsrPacketHeader__PythonHelper : public ns3::olsr::PacketHeader
{
public:
    PyObject *m_pyself;
    PyNs3OlsrPacketHeader__PythonHelper(ns3::olsr::PacketHeader const & arg0)
        : ns3::olsr::PacketHeader(arg0), m_pyself(NULL)
        {}

    PyNs3OlsrPacketHeader__PythonHelper()
        : ns3::olsr::PacketHeader(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3OlsrPacketHeader__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3OlsrPacketHeader *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    virtual uint32_t Deserialize(ns3::Buffer::Iterator start);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual uint32_t GetSerializedSize() const;

    virtual void Serialize(ns3::Buffer::Iterator start) const;

    virtual void NotifyConstructionCompleted();
};


typedef struct {
    PyObject_HEAD
    ns3::olsr::RoutingProtocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrRoutingProtocol;


extern PyTypeObject PyNs3OlsrRoutingProtocol_Type;


typedef struct {
    PyObject_HEAD
    ns3::olsr::RoutingTableEntry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrRoutingTableEntry;


extern PyTypeObject PyNs3OlsrRoutingTableEntry_Type;

extern std::map<void*, PyObject*> PyNs3OlsrRoutingTableEntry_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::TopologyTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrTopologyTuple;


extern PyTypeObject PyNs3OlsrTopologyTuple_Type;

extern std::map<void*, PyObject*> PyNs3OlsrTopologyTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::olsr::TwoHopNeighborTuple *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3OlsrTwoHopNeighborTuple;


extern PyTypeObject PyNs3OlsrTwoHopNeighborTuple_Type;

extern std::map<void*, PyObject*> PyNs3OlsrTwoHopNeighborTuple_wrapper_registry;

typedef struct {
    PyObject_HEAD
    std::vector< ns3::olsr::MessageHeader::Hello::LinkMessage > *obj;
} Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__ *container;
    std::vector< ns3::olsr::MessageHeader::Hello::LinkMessage >::iterator *iterator;
} Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__olsr__MessageHeader__Hello__LinkMessage___gt__(PyObject *arg, std::vector< ns3::olsr::MessageHeader::Hello::LinkMessage > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::olsr::MessageHeader::Hna::Association > *obj;
} Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__ *container;
    std::vector< ns3::olsr::MessageHeader::Hna::Association >::iterator *iterator;
} Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__olsr__MessageHeader__Hna__Association___gt__(PyObject *arg, std::vector< ns3::olsr::MessageHeader::Hna::Association > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::olsr::RoutingTableEntry > *obj;
} Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt__ *container;
    std::vector< ns3::olsr::RoutingTableEntry >::iterator *iterator;
} Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__olsr__RoutingTableEntry___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__olsr__RoutingTableEntry___gt__(PyObject *arg, std::vector< ns3::olsr::RoutingTableEntry > *container);

typedef struct {
    PyObject_HEAD
    std::set< unsigned int > *obj;
} Pystd__set__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt___unsigned_int___gt__ *container;
    std::set< unsigned int >::iterator *iterator;
} Pystd__set__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__set__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__set__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___unsigned_int___gt__(PyObject *arg, std::set< unsigned int > *container);

class PythonCallbackImpl0 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Packet>, ns3::Address const&, ns3::Address const&, unsigned short, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::Address const & arg2, ns3::Address const & arg3, unsigned short arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg3);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNNi)", py_Packet, py_Address, py_Address2, (int) arg4);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, double, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, double arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(Nd)", py_Packet, arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, double, ns3::UanTxMode, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, double arg2, ns3::UanTxMode arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3UanTxMode *py_UanTxMode;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_UanTxMode = PyObject_New(PyNs3UanTxMode, &PyNs3UanTxMode_Type);
        py_UanTxMode->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_UanTxMode->obj = new ns3::UanTxMode(arg3);
        PyNs3UanTxMode_wrapper_registry[(void *) py_UanTxMode->obj] = (PyObject *) py_UanTxMode;
        args = Py_BuildValue((char *) "(NdN)", py_Packet, arg2, py_UanTxMode);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::UanAddress const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::UanAddress const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3UanAddress *py_UanAddress;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_UanAddress = PyObject_New(PyNs3UanAddress, &PyNs3UanAddress_Type);
        py_UanAddress->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_UanAddress->obj = new ns3::UanAddress(arg2);
        PyNs3UanAddress_wrapper_registry[(void *) py_UanAddress->obj] = (PyObject *) py_UanAddress;
        args = Py_BuildValue((char *) "(NN)", py_Packet, py_UanAddress);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::PacketBurst const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::PacketBurst const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3PacketBurst *py_PacketBurst;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_PacketBurst = NULL;
        } else {
            py_PacketBurst = (PyNs3PacketBurst *) wrapper_lookup_iter->second;
            Py_INCREF(py_PacketBurst);
        }

        if (py_PacketBurst == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1))), &PyNs3PacketBurst_Type);
            py_PacketBurst = PyObject_GC_New(PyNs3PacketBurst, wrapper_type);
            py_PacketBurst->inst_dict = NULL;
            py_PacketBurst->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1))->Ref();
            py_PacketBurst->obj = const_cast<ns3::PacketBurst *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_PacketBurst->obj] = (PyObject *) py_PacketBurst;
        }
        args = Py_BuildValue((char *) "(N)", py_PacketBurst);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl8 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl8(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl8()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl8 *other = dynamic_cast<const PythonCallbackImpl8*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::Mac48Address arg2, ns3::Mac48Address arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Mac48Address *py_Mac48Address;
        PyNs3Mac48Address *py_Mac48Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address2->obj = new ns3::Mac48Address(arg3);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
        args = Py_BuildValue((char *) "(NNN)", py_Packet, py_Mac48Address, py_Mac48Address2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl9 : public ns3::CallbackImpl<void, ns3::Mac48Address, ns3::Mac48Address, unsigned int, bool, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl9(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl9()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl9 *other = dynamic_cast<const PythonCallbackImpl9*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Mac48Address arg1, ns3::Mac48Address arg2, unsigned int arg3, bool arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyNs3Mac48Address *py_Mac48Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address2->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
        args = Py_BuildValue((char *) "(NNNN)", py_Mac48Address, py_Mac48Address2, PyLong_FromUnsignedLong(arg3), PyBool_FromLong(arg4));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl10 : public ns3::CallbackImpl<void, unsigned int, ns3::Mac48Address, ns3::Mac48Address, ns3::dot11s::PeerLink::PeerState, ns3::dot11s::PeerLink::PeerState, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl10(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl10()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl10 *other = dynamic_cast<const PythonCallbackImpl10*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(unsigned int arg1, ns3::Mac48Address arg2, ns3::Mac48Address arg3, ns3::dot11s::PeerLink::PeerState arg4, ns3::dot11s::PeerLink::PeerState arg5)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyNs3Mac48Address *py_Mac48Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg2);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address2->obj = new ns3::Mac48Address(arg3);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
        args = Py_BuildValue((char *) "(NNNii)", PyLong_FromUnsignedLong(arg1), py_Mac48Address, py_Mac48Address2, arg4, arg5);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl11 : public ns3::CallbackImpl<unsigned int, ns3::Mac48Address, ns3::Ptr<ns3::MeshWifiInterfaceMac>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl11(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl11()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl11 *other = dynamic_cast<const PythonCallbackImpl11*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    unsigned int
    operator()(ns3::Mac48Address arg1, ns3::Ptr< ns3::MeshWifiInterfaceMac > arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        unsigned int retval;
        PyNs3Mac48Address *py_Mac48Address;
        PyNs3MeshWifiInterfaceMac *py_MeshWifiInterfaceMac;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg1);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::MeshWifiInterfaceMac *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_MeshWifiInterfaceMac = NULL;
        } else {
            py_MeshWifiInterfaceMac = (PyNs3MeshWifiInterfaceMac *) wrapper_lookup_iter->second;
            Py_INCREF(py_MeshWifiInterfaceMac);
        }

        if (py_MeshWifiInterfaceMac == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::MeshWifiInterfaceMac *> (ns3::PeekPointer (arg2))), &PyNs3MeshWifiInterfaceMac_Type);
            py_MeshWifiInterfaceMac = PyObject_GC_New(PyNs3MeshWifiInterfaceMac, wrapper_type);
            py_MeshWifiInterfaceMac->inst_dict = NULL;
            py_MeshWifiInterfaceMac->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::MeshWifiInterfaceMac *> (ns3::PeekPointer (arg2))->Ref();
            py_MeshWifiInterfaceMac->obj = const_cast<ns3::MeshWifiInterfaceMac *> (ns3::PeekPointer (arg2));
            PyNs3ObjectBase_wrapper_registry[(void *) py_MeshWifiInterfaceMac->obj] = (PyObject *) py_MeshWifiInterfaceMac;
        }
        args = Py_BuildValue((char *) "(NN)", py_Mac48Address, py_MeshWifiInterfaceMac);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return 0;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return 0;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl12 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet>, ns3::WifiMacHeader const*, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl12(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl12()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl12 *other = dynamic_cast<const PythonCallbackImpl12*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet > arg1, ns3::WifiMacHeader const *arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3WifiMacHeader *py_WifiMacHeader;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) arg2);
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_WifiMacHeader = NULL;
        } else {
            py_WifiMacHeader = (PyNs3WifiMacHeader *) wrapper_lookup_iter2->second;
            Py_INCREF(py_WifiMacHeader);
        }

        if (py_WifiMacHeader == NULL)
        {
            py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
            py_WifiMacHeader->inst_dict = NULL;
            py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            py_WifiMacHeader->obj = new ns3::WifiMacHeader(*arg2);
            PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
        }
        args = Py_BuildValue((char *) "(NN)", py_Packet, py_WifiMacHeader);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl14 : public ns3::CallbackImpl<void, bool, ns3::Ptr<ns3::Packet>, ns3::Mac48Address, ns3::Mac48Address, unsigned short, unsigned int, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl14(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl14()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl14 *other = dynamic_cast<const PythonCallbackImpl14*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(bool arg1, ns3::Ptr< ns3::Packet > arg2, ns3::Mac48Address arg3, ns3::Mac48Address arg4, unsigned short arg5, unsigned int arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Mac48Address *py_Mac48Address;
        PyNs3Mac48Address *py_Mac48Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Mac48Address = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address->obj = new ns3::Mac48Address(arg3);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address->obj] = (PyObject *) py_Mac48Address;
        py_Mac48Address2 = PyObject_New(PyNs3Mac48Address, &PyNs3Mac48Address_Type);
        py_Mac48Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Mac48Address2->obj = new ns3::Mac48Address(arg4);
        PyNs3Mac48Address_wrapper_registry[(void *) py_Mac48Address2->obj] = (PyObject *) py_Mac48Address2;
        args = Py_BuildValue((char *) "(NNNNiN)", PyBool_FromLong(arg1), py_Packet, py_Mac48Address, py_Mac48Address2, (int) arg5, PyLong_FromUnsignedLong(arg6));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl15 : public ns3::CallbackImpl<void, ns3::WifiMacHeader const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl15(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl15()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl15 *other = dynamic_cast<const PythonCallbackImpl15*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::WifiMacHeader const & arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3WifiMacHeader *py_WifiMacHeader;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_WifiMacHeader = PyObject_GC_New(PyNs3WifiMacHeader, &PyNs3WifiMacHeader_Type);
        py_WifiMacHeader->inst_dict = NULL;
        py_WifiMacHeader->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_WifiMacHeader->obj = new ns3::WifiMacHeader(arg1);
        PyNs3ObjectBase_wrapper_registry[(void *) py_WifiMacHeader->obj] = (PyObject *) py_WifiMacHeader;
        args = Py_BuildValue((char *) "(N)", py_WifiMacHeader);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl16 : public ns3::CallbackImpl<bool, std::string, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl16(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl16()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl16 *other = dynamic_cast<const PythonCallbackImpl16*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(std::string arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        const char *arg1_ptr;
        Py_ssize_t arg1_len;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        arg1_ptr = (arg1).c_str();
        arg1_len = (arg1).size();
        args = Py_BuildValue((char *) "(s#)", arg1_ptr, arg1_len);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl17 : public ns3::CallbackImpl<void, bool, unsigned long long, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl17(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl17()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl17 *other = dynamic_cast<const PythonCallbackImpl17*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(bool arg1, unsigned long long arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "(NK)", PyBool_FromLong(arg1), arg2);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl20 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Packet const>, ns3::Ipv4Header const&, ns3::Socket::SocketErrno, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl20(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl20()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl20 *other = dynamic_cast<const PythonCallbackImpl20*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Packet const > arg1, ns3::Ipv4Header const & arg2, ns3::Socket::SocketErrno arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv4Header *py_Ipv4Header;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Header->obj = new ns3::Ipv4Header(arg2);
        PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
        args = Py_BuildValue((char *) "(NNi)", py_Packet, py_Ipv4Header, arg3);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl21 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Ipv4Route>, ns3::Ptr<ns3::Packet const>, ns3::Ipv4Header const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl21(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl21()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl21 *other = dynamic_cast<const PythonCallbackImpl21*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Ipv4Route > arg1, ns3::Ptr< ns3::Packet const > arg2, ns3::Ipv4Header const & arg3)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv4Route *py_Ipv4Route;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Ipv4Header *py_Ipv4Header;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Ipv4Route = NULL;
        } else {
            py_Ipv4Route = (PyNs3Ipv4Route *) wrapper_lookup_iter->second;
            Py_INCREF(py_Ipv4Route);
        }

        if (py_Ipv4Route == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Ipv4Route_Ns3Empty_Ns3DefaultDeleter__lt__ns3Ipv4Route__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (arg1))), &PyNs3Ipv4Route_Type);
            py_Ipv4Route = PyObject_New(PyNs3Ipv4Route, wrapper_type);
            py_Ipv4Route->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (arg1))->Ref();
            py_Ipv4Route->obj = const_cast<ns3::Ipv4Route *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Ipv4Route->obj] = (PyObject *) py_Ipv4Route;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Ipv4Header = PyObject_GC_New(PyNs3Ipv4Header, &PyNs3Ipv4Header_Type);
        py_Ipv4Header->inst_dict = NULL;
        py_Ipv4Header->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Header->obj = new ns3::Ipv4Header(arg3);
        PyNs3ObjectBase_wrapper_registry[(void *) py_Ipv4Header->obj] = (PyObject *) py_Ipv4Header;
        args = Py_BuildValue((char *) "(NNN)", py_Ipv4Route, py_Packet, py_Ipv4Header);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl22 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl22(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl22()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl22 *other = dynamic_cast<const PythonCallbackImpl22*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Socket = NULL;
        } else {
            py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
            Py_INCREF(py_Socket);
        }

        if (py_Socket == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
            py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
            py_Socket->inst_dict = NULL;
            py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
        }
        args = Py_BuildValue((char *) "(N)", py_Socket);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl23 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, unsigned int, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl23(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl23()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl23 *other = dynamic_cast<const PythonCallbackImpl23*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, unsigned int arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Socket = NULL;
        } else {
            py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
            Py_INCREF(py_Socket);
        }

        if (py_Socket == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
            py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
            py_Socket->inst_dict = NULL;
            py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
        }
        args = Py_BuildValue((char *) "(NN)", py_Socket, PyLong_FromUnsignedLong(arg2));
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl24 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl24(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl24()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl24 *other = dynamic_cast<const PythonCallbackImpl24*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Socket = NULL;
        } else {
            py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
            Py_INCREF(py_Socket);
        }

        if (py_Socket == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
            py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
            py_Socket->inst_dict = NULL;
            py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl25 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Socket>, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl25(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl25()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl25 *other = dynamic_cast<const PythonCallbackImpl25*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Socket > arg1, ns3::Address const & arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Socket *py_Socket;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Socket *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Socket = NULL;
        } else {
            py_Socket = (PyNs3Socket *) wrapper_lookup_iter->second;
            Py_INCREF(py_Socket);
        }

        if (py_Socket == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))), &PyNs3Socket_Type);
            py_Socket = PyObject_GC_New(PyNs3Socket, wrapper_type);
            py_Socket->inst_dict = NULL;
            py_Socket->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Socket *> (ns3::PeekPointer (arg1))->Ref();
            py_Socket->obj = const_cast<ns3::Socket *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Socket->obj] = (PyObject *) py_Socket;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg2);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NN)", py_Socket, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl26 : public ns3::CallbackImpl<void, ns3::Ipv4Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl26(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl26()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl26 *other = dynamic_cast<const PythonCallbackImpl26*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ipv4Address arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Ipv4Address *py_Ipv4Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
        py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Address->obj = new ns3::Ipv4Address(arg1);
        PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
        args = Py_BuildValue((char *) "(N)", py_Ipv4Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl27 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::ArpCache const>, ns3::Ipv4Address, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl27(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl27()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl27 *other = dynamic_cast<const PythonCallbackImpl27*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::ArpCache const > arg1, ns3::Ipv4Address arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3ArpCache *py_ArpCache;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Ipv4Address *py_Ipv4Address;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_ArpCache = NULL;
        } else {
            py_ArpCache = (PyNs3ArpCache *) wrapper_lookup_iter->second;
            Py_INCREF(py_ArpCache);
        }

        if (py_ArpCache == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1))), &PyNs3ArpCache_Type);
            py_ArpCache = PyObject_GC_New(PyNs3ArpCache, wrapper_type);
            py_ArpCache->inst_dict = NULL;
            py_ArpCache->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1))->Ref();
            py_ArpCache->obj = const_cast<ns3::ArpCache *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_ArpCache->obj] = (PyObject *) py_ArpCache;
        }
        py_Ipv4Address = PyObject_New(PyNs3Ipv4Address, &PyNs3Ipv4Address_Type);
        py_Ipv4Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Ipv4Address->obj = new ns3::Ipv4Address(arg2);
        PyNs3Ipv4Address_wrapper_registry[(void *) py_Ipv4Address->obj] = (PyObject *) py_Ipv4Address;
        args = Py_BuildValue((char *) "(NN)", py_ArpCache, py_Ipv4Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl28 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::Packet>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl28(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl28()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl28 *other = dynamic_cast<const PythonCallbackImpl28*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::Packet > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg1))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        args = Py_BuildValue((char *) "(N)", py_Packet);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl29 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl29(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl29()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl29 *other = dynamic_cast<const PythonCallbackImpl29*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl30 : public ns3::CallbackImpl<bool, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl30(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl30()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl30 *other = dynamic_cast<const PythonCallbackImpl30*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    bool
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        bool retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyObject *args;
        PyObject *py_boolretval;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        args = Py_BuildValue((char *) "(NNiN)", py_NetDevice, py_Packet, (int) arg3, py_Address);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        py_retval = Py_BuildValue((char*) "(N)", py_retval);
        if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
            PyErr_Print();
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return false;
        }
        retval = PyObject_IsTrue(py_boolretval);
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return retval;
    }
};


class PythonCallbackImpl31 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl31(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl31()
    {
        Py_DECREF(m_callback);
        m_callback = NULL;
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl31 *other = dynamic_cast<const PythonCallbackImpl31*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;
            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);
            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};

long _ns3_Ipv4Address_tp_hash (PyObject *obj);

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__Object___gt__(PyObject *value, ns3::Ptr< ns3::Object > *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address);


int _wrap_convert_py2c__ns3__Ipv4Address(PyObject *value, ns3::Ipv4Address *address);


int _wrap_convert_py2c__ns3__Mac48Address(PyObject *value, ns3::Mac48Address *address);


int _wrap_convert_py2c__ns3__olsr__MessageHeader__Hello__LinkMessage(PyObject *value, ns3::olsr::MessageHeader::Hello::LinkMessage *address);


int _wrap_convert_py2c__ns3__olsr__MessageHeader__Hna__Association(PyObject *value, ns3::olsr::MessageHeader::Hna::Association *address);


int _wrap_convert_py2c__ns3__olsr__RoutingTableEntry(PyObject *value, ns3::olsr::RoutingTableEntry *address);


PyObject* _wrap_convert_c2py__ns3__Time(ns3::Time *cvalue);


int _wrap_convert_py2c__ns3__Time(PyObject *value, ns3::Time *address);


int _wrap_convert_py2c__ns3__Time_const___amp__(PyObject *value, ns3::Time *address);


PyObject* _wrap_convert_c2py__ns3__SequenceNumber32(ns3::SequenceNumber32 *cvalue);


int _wrap_convert_py2c__ns3__SequenceNumber32(PyObject *value, ns3::SequenceNumber32 *address);


int _wrap_convert_py2c__ns3__SequenceNumber__lt___unsigned_int__int___gt___const___amp__(PyObject *value, ns3::SequenceNumber< unsigned int, int > *address);


int _wrap_convert_py2c__int(PyObject *value, int *address);


PyObject* _wrap_convert_c2py__ns3__SpectrumValue(ns3::SpectrumValue *cvalue);


int _wrap_convert_py2c__ns3__SpectrumValue(PyObject *value, ns3::SpectrumValue *address);


int _wrap_convert_py2c__double(PyObject *value, double *address);


int _wrap_convert_py2c__ns3__SpectrumValue_const___amp__(PyObject *value, ns3::SpectrumValue *address);


int _wrap_convert_py2c__ns3__SpectrumConverter(PyObject *value, ns3::SpectrumConverter *address);


int _wrap_convert_py2c__ns3__BandInfo(PyObject *value, ns3::BandInfo *address);


int _wrap_convert_py2c__ns3__Ipv6Address(PyObject *value, ns3::Ipv6Address *address);


int _wrap_convert_py2c__ns3__WifiMode(PyObject *value, ns3::WifiMode *address);


int _wrap_convert_py2c__ns3__DlFramePrefixIe(PyObject *value, ns3::DlFramePrefixIe *address);


int _wrap_convert_py2c__ns3__OfdmUlBurstProfile(PyObject *value, ns3::OfdmUlBurstProfile *address);


int _wrap_convert_py2c__ns3__OfdmUlMapIe(PyObject *value, ns3::OfdmUlMapIe *address);


int _wrap_convert_py2c__ns3__OfdmDlBurstProfile(PyObject *value, ns3::OfdmDlBurstProfile *address);


int _wrap_convert_py2c__ns3__OfdmDlMapIe(PyObject *value, ns3::OfdmDlMapIe *address);


int _wrap_convert_py2c__ns3__FlowMonitor__FlowStats(PyObject *value, ns3::FlowMonitor::FlowStats *address);


int _wrap_convert_py2c__ns3__FlowProbe__FlowStats(PyObject *value, ns3::FlowProbe::FlowStats *address);


int _wrap_convert_py2c__bool(PyObject *value, bool *address);


int _wrap_convert_py2c__ns3__Tap(PyObject *value, ns3::Tap *address);


int _wrap_convert_py2c__ns3__UanPacketArrival(PyObject *value, ns3::UanPacketArrival *address);


int _wrap_convert_py2c__long_long_unsigned_int(PyObject *value, long long unsigned int *address);

